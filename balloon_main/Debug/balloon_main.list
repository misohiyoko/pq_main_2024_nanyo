
balloon_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800f850  0800f850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9a4  0800f9a4  0001106c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9a4  0800f9a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9ac  0800f9ac  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9ac  0800f9ac  000109ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9b0  0800f9b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800f9b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000210c  2000006c  0800fa20  0001106c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002178  0800fa20  00011178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002edd0  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006404  00000000  00000000  0003fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029b8  00000000  00000000  00046270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000204a  00000000  00000000  00048c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000099f6  00000000  00000000  0004ac72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000323b8  00000000  00000000  00054668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbdf6  00000000  00000000  00086a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b700  00000000  00000000  0018285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018df5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f838 	.word	0x0800f838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800f838 	.word	0x0800f838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <__NVIC_GetPriorityGrouping+0x18>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	f003 0307 	and.w	r3, r3, #7
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	db0a      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	490c      	ldr	r1, [pc, #48]	@ (8000574 <__NVIC_SetPriority+0x4c>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	0112      	lsls	r2, r2, #4
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	440b      	add	r3, r1
 800054c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000550:	e00a      	b.n	8000568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4908      	ldr	r1, [pc, #32]	@ (8000578 <__NVIC_SetPriority+0x50>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3b04      	subs	r3, #4
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	440b      	add	r3, r1
 8000566:	761a      	strb	r2, [r3, #24]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	@ 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	f1c3 0307 	rsb	r3, r3, #7
 8000596:	2b04      	cmp	r3, #4
 8000598:	bf28      	it	cs
 800059a:	2304      	movcs	r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3304      	adds	r3, #4
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d902      	bls.n	80005ac <NVIC_EncodePriority+0x30>
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3b03      	subs	r3, #3
 80005aa:	e000      	b.n	80005ae <NVIC_EncodePriority+0x32>
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43da      	mvns	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43d9      	mvns	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	4313      	orrs	r3, r2
         );
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3724      	adds	r7, #36	@ 0x24
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ee:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d013      	beq.n	8000622 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fe:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000602:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00b      	beq.n	8000622 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800060a:	e000      	b.n	800060e <ITM_SendChar+0x2c>
    {
      __NOP();
 800060c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800060e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f9      	beq.n	800060c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000618:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 0201 	orr.w	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006b8:	4907      	ldr	r1, [pc, #28]	@ (80006d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80006e8:	4907      	ldr	r1, [pc, #28]	@ (8000708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000

0800070c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800071c:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <LL_DMA_SetDataTransferDirection+0x4c>)
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000730:	f023 0310 	bic.w	r3, r3, #16
 8000734:	4908      	ldr	r1, [pc, #32]	@ (8000758 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	440a      	add	r2, r1
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	4611      	mov	r1, r2
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	440a      	add	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800074a:	bf00      	nop
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	0800f8f0 	.word	0x0800f8f0

0800075c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LL_DMA_SetMode+0x48>)
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f023 0220 	bic.w	r2, r3, #32
 8000780:	4908      	ldr	r1, [pc, #32]	@ (80007a4 <LL_DMA_SetMode+0x48>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	440b      	add	r3, r1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	440b      	add	r3, r1
 800078e:	4619      	mov	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	0800f8f0 	.word	0x0800f8f0

080007a8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4413      	add	r3, r2
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80007cc:	4908      	ldr	r1, [pc, #32]	@ (80007f0 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	440b      	add	r3, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	440b      	add	r3, r1
 80007da:	4619      	mov	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80007e2:	bf00      	nop
 80007e4:	371c      	adds	r7, #28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	0800f8f0 	.word	0x0800f8f0

080007f4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LL_DMA_SetMemoryIncMode+0x48>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000818:	4908      	ldr	r1, [pc, #32]	@ (800083c <LL_DMA_SetMemoryIncMode+0x48>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	440b      	add	r3, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	440b      	add	r3, r1
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	0800f8f0 	.word	0x0800f8f0

08000840 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LL_DMA_SetPeriphSize+0x48>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000864:	4908      	ldr	r1, [pc, #32]	@ (8000888 <LL_DMA_SetPeriphSize+0x48>)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	440b      	add	r3, r1
 8000872:	4619      	mov	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800087a:	bf00      	nop
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	0800f8f0 	.word	0x0800f8f0

0800088c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LL_DMA_SetMemorySize+0x48>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80008b0:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <LL_DMA_SetMemorySize+0x48>)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	440b      	add	r3, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	440b      	add	r3, r1
 80008be:	4619      	mov	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008c6:	bf00      	nop
 80008c8:	371c      	adds	r7, #28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	0800f8f0 	.word	0x0800f8f0

080008d8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80008fc:	4908      	ldr	r1, [pc, #32]	@ (8000920 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	440b      	add	r3, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	440b      	add	r3, r1
 800090a:	4619      	mov	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	0800f8f0 	.word	0x0800f8f0

08000924 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	@ 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	33a8      	adds	r3, #168	@ 0xa8
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	210f      	movs	r1, #15
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	401a      	ands	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	210f      	movs	r1, #15
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa93 f3a3 	rbit	r3, r3
 8000956:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000962:	2320      	movs	r3, #32
 8000964:	e003      	b.n	800096e <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fab3 f383 	clz	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	408b      	lsls	r3, r1
 8000974:	68f9      	ldr	r1, [r7, #12]
 8000976:	31a8      	adds	r1, #168	@ 0xa8
 8000978:	4313      	orrs	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 800097c:	bf00      	nop
 800097e:	3724      	adds	r7, #36	@ 0x24
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800099c:	d101      	bne.n	80009a2 <LL_DMA_IsActiveFlag_TC5+0x1a>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <LL_DMA_IsActiveFlag_TC5+0x1c>
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_DMA_IsActiveFlag_HT5>:
  * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80009c4:	d101      	bne.n	80009ca <LL_DMA_IsActiveFlag_HT5+0x1a>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <LL_DMA_IsActiveFlag_HT5+0x1c>
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009e6:	605a      	str	r2, [r3, #4]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_DMA_ClearFlag_HT5>:
  * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a02:	605a      	str	r2, [r3, #4]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <LL_DMA_EnableIT_TC+0x40>)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <LL_DMA_EnableIT_TC+0x40>)
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	440a      	add	r2, r1
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	4611      	mov	r1, r2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	440a      	add	r2, r1
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	0800f8f0 	.word	0x0800f8f0

08000a54 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8000a62:	4a0c      	ldr	r2, [pc, #48]	@ (8000a94 <LL_DMA_EnableIT_HT+0x40>)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4908      	ldr	r1, [pc, #32]	@ (8000a94 <LL_DMA_EnableIT_HT+0x40>)
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	440a      	add	r2, r1
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	440a      	add	r2, r1
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	0800f8f0 	.word	0x0800f8f0

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b598      	push	{r3, r4, r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 ff5d 	bl	800295a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f86a 	bl	8000b78 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  INIT_UART_DMA_DESC(1,1,5)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	482b      	ldr	r0, [pc, #172]	@ (8000b54 <main+0xbc>)
 8000aa8:	f7ff ffd4 	bl	8000a54 <LL_DMA_EnableIT_HT>
 8000aac:	2104      	movs	r1, #4
 8000aae:	4829      	ldr	r0, [pc, #164]	@ (8000b54 <main+0xbc>)
 8000ab0:	f7ff ffae 	bl	8000a10 <LL_DMA_EnableIT_TC>
 8000ab4:	4c28      	ldr	r4, [pc, #160]	@ (8000b58 <main+0xc0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	200a      	movs	r0, #10
 8000abc:	f00b faf4 	bl	800c0a8 <osMessageQueueNew>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	6023      	str	r3, [r4, #0]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 fdf6 	bl	80016b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac8:	f000 fd62 	bl	8001590 <MX_DMA_Init>
  MX_I2C1_Init();
 8000acc:	f000 f8cc 	bl	8000c68 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ad0:	f000 fb98 	bl	8001204 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000ad4:	f000 f9bc 	bl	8000e50 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000ad8:	f000 fa4a 	bl	8000f70 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8000adc:	f000 f8a2 	bl	8000c24 <MX_CRC_Init>
  MX_LPTIM2_Init();
 8000ae0:	f000 f982 	bl	8000de8 <MX_LPTIM2_Init>
  MX_I2C2_Init();
 8000ae4:	f000 f900 	bl	8000ce8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000ae8:	f000 f93e 	bl	8000d68 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 fc56 	bl	800139c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000af0:	f000 fa60 	bl	8000fb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000af4:	f000 fa9c 	bl	8001030 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000af8:	f000 fad8 	bl	80010ac <MX_TIM1_Init>
  MX_FATFS_Init();
 8000afc:	f00a fe94 	bl	800b828 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000b00:	f000 fd16 	bl	8001530 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2120      	movs	r1, #32
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f002 fd6c 	bl	80035e8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2120      	movs	r1, #32
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f002 fd66 	bl	80035e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <main+0xc4>)
 8000b22:	f002 fd61 	bl	80035e8 <HAL_GPIO_WritePin>
  printf("Hello World!!\r\n");
 8000b26:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <main+0xc8>)
 8000b28:	f00e fa8e 	bl	800f048 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b2c:	f00b f98e 	bl	800be4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000b30:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <main+0xcc>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <main+0xd0>)
 8000b36:	f00b fa0a 	bl	800bf4e <osThreadNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <main+0xd4>)
 8000b3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  START_UART_DMA(1)
 8000b40:	2200      	movs	r2, #0
 8000b42:	490b      	ldr	r1, [pc, #44]	@ (8000b70 <main+0xd8>)
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <main+0xdc>)
 8000b46:	f00b fa02 	bl	800bf4e <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b4a:	f00b f9c5 	bl	800bed8 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000b4e:	bf00      	nop
 8000b50:	e7fd      	b.n	8000b4e <main+0xb6>
 8000b52:	bf00      	nop
 8000b54:	40020000 	.word	0x40020000
 8000b58:	200005d8 	.word	0x200005d8
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	0800f85c 	.word	0x0800f85c
 8000b64:	0800f8f8 	.word	0x0800f8f8
 8000b68:	08001825 	.word	0x08001825
 8000b6c:	200005d4 	.word	0x200005d4
 8000b70:	0800f91c 	.word	0x0800f91c
 8000b74:	08002701 	.word	0x08002701

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b096      	sub	sp, #88	@ 0x58
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2244      	movs	r2, #68	@ 0x44
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00e fb3e 	bl	800f208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b9e:	f003 fcad 	bl	80044fc <HAL_PWREx_ControlVoltageScaling>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ba8:	f000 fe56 	bl	8001858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000bac:	2338      	movs	r3, #56	@ 0x38
 8000bae:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bd0:	2328      	movs	r3, #40	@ 0x28
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fcdf 	bl	80045a8 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 fe32 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 f8df 	bl	8004dd0 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c18:	f000 fe1e 	bl	8001858 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3758      	adds	r7, #88	@ 0x58
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <MX_CRC_Init+0x40>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <MX_CRC_Init+0x3c>)
 8000c4e:	f001 ffc3 	bl	8002bd8 <HAL_CRC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c58:	f000 fdfe 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000088 	.word	0x20000088
 8000c64:	40023000 	.word	0x40023000

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <MX_I2C1_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <MX_I2C1_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000ca4:	f002 fcb8 	bl	8003618 <HAL_I2C_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cae:	f000 fdd3 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cb6:	f003 fada 	bl	800426e <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc0:	f000 fdca 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cc8:	f003 fb1c 	bl	8004304 <HAL_I2CEx_ConfigDigitalFilter>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 fdc1 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	10909cec 	.word	0x10909cec

08000ce8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C2_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C2_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d24:	f002 fc78 	bl	8003618 <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 fd93 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d36:	f003 fa9a 	bl	800426e <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 fd8a 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_I2C2_Init+0x74>)
 8000d48:	f003 fadc 	bl	8004304 <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 fd81 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000100 	.word	0x20000100
 8000d60:	40005800 	.word	0x40005800
 8000d64:	10909cec 	.word	0x10909cec

08000d68 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <MX_I2C3_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <MX_I2C3_Init+0x7c>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000da4:	f002 fc38 	bl	8003618 <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000dae:	f000 fd53 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000db6:	f003 fa5a 	bl	800426e <HAL_I2CEx_ConfigAnalogFilter>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 fd4a 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_I2C3_Init+0x74>)
 8000dc8:	f003 fa9c 	bl	8004304 <HAL_I2CEx_ConfigDigitalFilter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 fd41 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000154 	.word	0x20000154
 8000de0:	40005c00 	.word	0x40005c00
 8000de4:	10909cec 	.word	0x10909cec

08000de8 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <MX_LPTIM2_Init+0x64>)
 8000df0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e10:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_LPTIM2_Init+0x60>)
 8000e34:	f003 fab2 	bl	800439c <HAL_LPTIM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8000e3e:	f000 fd0b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000238 	.word	0x20000238
 8000e4c:	40009400 	.word	0x40009400

08000e50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b092      	sub	sp, #72	@ 0x48
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	222c      	movs	r2, #44	@ 0x2c
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00e f9c9 	bl	800f208 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e76:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e78:	4a3c      	ldr	r2, [pc, #240]	@ (8000f6c <MX_RTC_Init+0x11c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e84:	227f      	movs	r2, #127	@ 0x7f
 8000e86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e88:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e8a:	22ff      	movs	r2, #255	@ 0xff
 8000e8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e8e:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e94:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea0:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea6:	4830      	ldr	r0, [pc, #192]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000ea8:	f005 fa44 	bl	8006334 <HAL_RTC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000eb2:	f000 fcd1 	bl	8001858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ed0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000eda:	f005 fab3 	bl	8006444 <HAL_RTC_SetTime>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000ee4:	f000 fcb8 	bl	8001858 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f04:	2201      	movs	r2, #1
 8000f06:	4619      	mov	r1, r3
 8000f08:	4817      	ldr	r0, [pc, #92]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000f0a:	f005 fb38 	bl	800657e <HAL_RTC_SetDate>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000f14:	f000 fca0 	bl	8001858 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_RTC_Init+0x118>)
 8000f50:	f005 fb9c 	bl	800668c <HAL_RTC_SetAlarm>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000f5a:	f000 fc7d 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3748      	adds	r7, #72	@ 0x48
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000270 	.word	0x20000270
 8000f6c:	40002800 	.word	0x40002800

08000f70 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f76:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <MX_SDMMC1_SD_Init+0x40>)
 8000f78:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f92:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <MX_SDMMC1_SD_Init+0x3c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000294 	.word	0x20000294
 8000fb0:	40012800 	.word	0x40012800

08000fb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fba:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <MX_SPI1_Init+0x78>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fe2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fe6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_SPI1_Init+0x74>)
 8001002:	2207      	movs	r2, #7
 8001004:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_SPI1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_SPI1_Init+0x74>)
 800100e:	2208      	movs	r2, #8
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_SPI1_Init+0x74>)
 8001014:	f007 f846 	bl	80080a4 <HAL_SPI_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 fc1b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200003a8 	.word	0x200003a8
 800102c:	40013000 	.word	0x40013000

08001030 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <MX_SPI2_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800103c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800104a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800104e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800105e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001062:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800107e:	2207      	movs	r2, #7
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI2_Init+0x74>)
 800108a:	2208      	movs	r2, #8
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_SPI2_Init+0x74>)
 8001090:	f007 f808 	bl	80080a4 <HAL_SPI_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fbdd 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000040c 	.word	0x2000040c
 80010a8:	40003800 	.word	0x40003800

080010ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09a      	sub	sp, #104	@ 0x68
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	222c      	movs	r2, #44	@ 0x2c
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00e f88e 	bl	800f208 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ec:	4b43      	ldr	r3, [pc, #268]	@ (80011fc <MX_TIM1_Init+0x150>)
 80010ee:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <MX_TIM1_Init+0x154>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f2:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <MX_TIM1_Init+0x150>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b40      	ldr	r3, [pc, #256]	@ (80011fc <MX_TIM1_Init+0x150>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010fe:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110c:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <MX_TIM1_Init+0x150>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001118:	4838      	ldr	r0, [pc, #224]	@ (80011fc <MX_TIM1_Init+0x150>)
 800111a:	f007 f866 	bl	80081ea <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 fb98 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001132:	4619      	mov	r1, r3
 8001134:	4831      	ldr	r0, [pc, #196]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001136:	f007 fae1 	bl	80086fc <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001140:	f000 fb8a 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001144:	482d      	ldr	r0, [pc, #180]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001146:	f007 f8fb 	bl	8008340 <HAL_TIM_OC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001150:	f000 fb82 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001160:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001164:	4619      	mov	r1, r3
 8001166:	4825      	ldr	r0, [pc, #148]	@ (80011fc <MX_TIM1_Init+0x150>)
 8001168:	f007 ff36 	bl	8008fd8 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001172:	f000 fb71 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001192:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <MX_TIM1_Init+0x150>)
 800119c:	f007 fa34 	bl	8008608 <HAL_TIM_OC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011a6:	f000 fb57 	bl	8001858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	@ (80011fc <MX_TIM1_Init+0x150>)
 80011e0:	f007 ff60 	bl	80090a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011ea:	f000 fb35 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <MX_TIM1_Init+0x150>)
 80011f0:	f000 ff14 	bl	800201c <HAL_TIM_MspPostInit>

}
 80011f4:	bf00      	nop
 80011f6:	3768      	adds	r7, #104	@ 0x68
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000470 	.word	0x20000470
 8001200:	40012c00 	.word	0x40012c00

08001204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0a4      	sub	sp, #144	@ 0x90
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800120a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	225c      	movs	r2, #92	@ 0x5c
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00d ffe6 	bl	800f208 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800123c:	2301      	movs	r3, #1
 800123e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f818 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001252:	f000 fb01 	bl	8001858 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001256:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800125a:	f7ff fa3f 	bl	80006dc <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fa0c 	bl	800067c <LL_AHB2_GRP1_EnableClock>
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA11   ------> USART1_CTS
  PA12   ------> USART1_RTS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001264:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001268:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800126a:	2302      	movs	r3, #2
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001276:	2300      	movs	r3, #0
 8001278:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800127a:	2307      	movs	r3, #7
 800127c:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f009 f8fe 	bl	800a488 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMA_REQUEST_2);
 800128c:	2202      	movs	r2, #2
 800128e:	2104      	movs	r1, #4
 8001290:	4840      	ldr	r0, [pc, #256]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 8001292:	f7ff fb47 	bl	8000924 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001296:	2200      	movs	r2, #0
 8001298:	2104      	movs	r1, #4
 800129a:	483e      	ldr	r0, [pc, #248]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 800129c:	f7ff fa36 	bl	800070c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	483b      	ldr	r0, [pc, #236]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012a6:	f7ff fb17 	bl	80008d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2104      	movs	r1, #4
 80012ae:	4839      	ldr	r0, [pc, #228]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012b0:	f7ff fa54 	bl	800075c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2104      	movs	r1, #4
 80012b8:	4836      	ldr	r0, [pc, #216]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012ba:	f7ff fa75 	bl	80007a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80012be:	2280      	movs	r2, #128	@ 0x80
 80012c0:	2104      	movs	r1, #4
 80012c2:	4834      	ldr	r0, [pc, #208]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012c4:	f7ff fa96 	bl	80007f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2104      	movs	r1, #4
 80012cc:	4831      	ldr	r0, [pc, #196]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012ce:	f7ff fab7 	bl	8000840 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	482f      	ldr	r0, [pc, #188]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012d8:	f7ff fad8 	bl	800088c <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMA_REQUEST_2);
 80012dc:	2202      	movs	r2, #2
 80012de:	2103      	movs	r1, #3
 80012e0:	482c      	ldr	r0, [pc, #176]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012e2:	f7ff fb1f 	bl	8000924 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012e6:	2210      	movs	r2, #16
 80012e8:	2103      	movs	r1, #3
 80012ea:	482a      	ldr	r0, [pc, #168]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012ec:	f7ff fa0e 	bl	800070c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2103      	movs	r1, #3
 80012f4:	4827      	ldr	r0, [pc, #156]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 80012f6:	f7ff faef 	bl	80008d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2103      	movs	r1, #3
 80012fe:	4825      	ldr	r0, [pc, #148]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 8001300:	f7ff fa2c 	bl	800075c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8001304:	2200      	movs	r2, #0
 8001306:	2103      	movs	r1, #3
 8001308:	4822      	ldr	r0, [pc, #136]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 800130a:	f7ff fa4d 	bl	80007a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	2103      	movs	r1, #3
 8001312:	4820      	ldr	r0, [pc, #128]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 8001314:	f7ff fa6e 	bl	80007f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	481d      	ldr	r0, [pc, #116]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 800131e:	f7ff fa8f 	bl	8000840 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8001322:	2200      	movs	r2, #0
 8001324:	2103      	movs	r1, #3
 8001326:	481b      	ldr	r0, [pc, #108]	@ (8001394 <MX_USART1_UART_Init+0x190>)
 8001328:	f7ff fab0 	bl	800088c <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800132c:	f7ff f8d0 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 8001330:	4603      	mov	r3, r0
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f920 	bl	800057c <NVIC_EncodePriority>
 800133c:	4603      	mov	r3, r0
 800133e:	4619      	mov	r1, r3
 8001340:	2025      	movs	r0, #37	@ 0x25
 8001342:	f7ff f8f1 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001346:	2025      	movs	r0, #37	@ 0x25
 8001348:	f7ff f8d0 	bl	80004ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800134c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001350:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001352:	2300      	movs	r3, #0
 8001354:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001356:	2300      	movs	r3, #0
 8001358:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001360:	230c      	movs	r3, #12
 8001362:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_RTS_CTS;
 8001366:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001374:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001378:	4619      	mov	r1, r3
 800137a:	4807      	ldr	r0, [pc, #28]	@ (8001398 <MX_USART1_UART_Init+0x194>)
 800137c:	f00a f9ee 	bl	800b75c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001380:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USART1_UART_Init+0x194>)
 8001382:	f7ff f965 	bl	8000650 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_USART1_UART_Init+0x194>)
 8001388:	f7ff f952 	bl	8000630 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3790      	adds	r7, #144	@ 0x90
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020000 	.word	0x40020000
 8001398:	40013800 	.word	0x40013800

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a4      	sub	sp, #144	@ 0x90
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	225c      	movs	r2, #92	@ 0x5c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d ff1a 	bl	800f208 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 ff4c 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 fa35 	bl	8001858 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013ee:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80013f2:	f7ff f95b 	bl	80006ac <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff f940 	bl	800067c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013fc:	230c      	movs	r3, #12
 80013fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001400:	2302      	movs	r3, #2
 8001402:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800140c:	2300      	movs	r3, #0
 800140e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001410:	2307      	movs	r3, #7
 8001412:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f009 f833 	bl	800a488 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001422:	2202      	movs	r2, #2
 8001424:	2105      	movs	r1, #5
 8001426:	4840      	ldr	r0, [pc, #256]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001428:	f7ff fa7c 	bl	8000924 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	483d      	ldr	r0, [pc, #244]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001432:	f7ff f96b 	bl	800070c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	483b      	ldr	r0, [pc, #236]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 800143c:	f7ff fa4c 	bl	80008d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001440:	2200      	movs	r2, #0
 8001442:	2105      	movs	r1, #5
 8001444:	4838      	ldr	r0, [pc, #224]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001446:	f7ff f989 	bl	800075c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	4836      	ldr	r0, [pc, #216]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001450:	f7ff f9aa 	bl	80007a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	2105      	movs	r1, #5
 8001458:	4833      	ldr	r0, [pc, #204]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 800145a:	f7ff f9cb 	bl	80007f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	4831      	ldr	r0, [pc, #196]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001464:	f7ff f9ec 	bl	8000840 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001468:	2200      	movs	r2, #0
 800146a:	2105      	movs	r1, #5
 800146c:	482e      	ldr	r0, [pc, #184]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 800146e:	f7ff fa0d 	bl	800088c <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_2);
 8001472:	2202      	movs	r2, #2
 8001474:	2106      	movs	r1, #6
 8001476:	482c      	ldr	r0, [pc, #176]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001478:	f7ff fa54 	bl	8000924 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800147c:	2210      	movs	r2, #16
 800147e:	2106      	movs	r1, #6
 8001480:	4829      	ldr	r0, [pc, #164]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001482:	f7ff f943 	bl	800070c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001486:	2200      	movs	r2, #0
 8001488:	2106      	movs	r1, #6
 800148a:	4827      	ldr	r0, [pc, #156]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 800148c:	f7ff fa24 	bl	80008d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001490:	2200      	movs	r2, #0
 8001492:	2106      	movs	r1, #6
 8001494:	4824      	ldr	r0, [pc, #144]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 8001496:	f7ff f961 	bl	800075c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800149a:	2200      	movs	r2, #0
 800149c:	2106      	movs	r1, #6
 800149e:	4822      	ldr	r0, [pc, #136]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 80014a0:	f7ff f982 	bl	80007a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	2106      	movs	r1, #6
 80014a8:	481f      	ldr	r0, [pc, #124]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 80014aa:	f7ff f9a3 	bl	80007f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2106      	movs	r1, #6
 80014b2:	481d      	ldr	r0, [pc, #116]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 80014b4:	f7ff f9c4 	bl	8000840 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2106      	movs	r1, #6
 80014bc:	481a      	ldr	r0, [pc, #104]	@ (8001528 <MX_USART2_UART_Init+0x18c>)
 80014be:	f7ff f9e5 	bl	800088c <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80014c2:	f7ff f805 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2200      	movs	r2, #0
 80014ca:	2105      	movs	r1, #5
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f855 	bl	800057c <NVIC_EncodePriority>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	2026      	movs	r0, #38	@ 0x26
 80014d8:	f7ff f826 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80014dc:	2026      	movs	r0, #38	@ 0x26
 80014de:	f7ff f805 	bl	80004ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014e2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014e6:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014e8:	2300      	movs	r3, #0
 80014ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014f6:	230c      	movs	r3, #12
 80014f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001508:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	@ (800152c <MX_USART2_UART_Init+0x190>)
 8001510:	f00a f924 	bl	800b75c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_USART2_UART_Init+0x190>)
 8001516:	f7ff f89b 	bl	8000650 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_USART2_UART_Init+0x190>)
 800151c:	f7ff f888 	bl	8000630 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3790      	adds	r7, #144	@ 0x90
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020000 	.word	0x40020000
 800152c:	40004400 	.word	0x40004400

08001530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	@ (800158c <MX_USART3_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_USART3_UART_Init+0x58>)
 8001574:	f007 fe2c 	bl	80091d0 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f96b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000504 	.word	0x20000504
 800158c:	40004800 	.word	0x40004800

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001596:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <MX_DMA_Init+0x120>)
 8001598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159a:	4a45      	ldr	r2, [pc, #276]	@ (80016b0 <MX_DMA_Init+0x120>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015a2:	4b43      	ldr	r3, [pc, #268]	@ (80016b0 <MX_DMA_Init+0x120>)
 80015a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ae:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <MX_DMA_Init+0x120>)
 80015b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b2:	4a3f      	ldr	r2, [pc, #252]	@ (80016b0 <MX_DMA_Init+0x120>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <MX_DMA_Init+0x120>)
 80015bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2105      	movs	r1, #5
 80015ca:	200c      	movs	r0, #12
 80015cc:	f001 fada 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015d0:	200c      	movs	r0, #12
 80015d2:	f001 faf3 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2105      	movs	r1, #5
 80015da:	200d      	movs	r0, #13
 80015dc:	f001 fad2 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015e0:	200d      	movs	r0, #13
 80015e2:	f001 faeb 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80015e6:	f7fe ff73 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffc3 	bl	800057c <NVIC_EncodePriority>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
 80015fa:	200e      	movs	r0, #14
 80015fc:	f7fe ff94 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001600:	200e      	movs	r0, #14
 8001602:	f7fe ff73 	bl	80004ec <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001606:	f7fe ff63 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 800160a:	4603      	mov	r3, r0
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffb3 	bl	800057c <NVIC_EncodePriority>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	200f      	movs	r0, #15
 800161c:	f7fe ff84 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001620:	200f      	movs	r0, #15
 8001622:	f7fe ff63 	bl	80004ec <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001626:	f7fe ff53 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 800162a:	4603      	mov	r3, r0
 800162c:	2200      	movs	r2, #0
 800162e:	2105      	movs	r1, #5
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ffa3 	bl	800057c <NVIC_EncodePriority>
 8001636:	4603      	mov	r3, r0
 8001638:	4619      	mov	r1, r3
 800163a:	2010      	movs	r0, #16
 800163c:	f7fe ff74 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001640:	2010      	movs	r0, #16
 8001642:	f7fe ff53 	bl	80004ec <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001646:	f7fe ff43 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 800164a:	4603      	mov	r3, r0
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff93 	bl	800057c <NVIC_EncodePriority>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	2011      	movs	r0, #17
 800165c:	f7fe ff64 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001660:	2011      	movs	r0, #17
 8001662:	f7fe ff43 	bl	80004ec <__NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	203b      	movs	r0, #59	@ 0x3b
 800166c:	f001 fa8a 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001670:	203b      	movs	r0, #59	@ 0x3b
 8001672:	f001 faa3 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	203c      	movs	r0, #60	@ 0x3c
 800167c:	f001 fa82 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001680:	203c      	movs	r0, #60	@ 0x3c
 8001682:	f001 fa9b 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2044      	movs	r0, #68	@ 0x44
 800168c:	f001 fa7a 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001690:	2044      	movs	r0, #68	@ 0x44
 8001692:	f001 fa93 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	2045      	movs	r0, #69	@ 0x45
 800169c:	f001 fa72 	bl	8002b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80016a0:	2045      	movs	r0, #69	@ 0x45
 80016a2:	f001 fa8b 	bl	8002bbc <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a44      	ldr	r2, [pc, #272]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b3f      	ldr	r3, [pc, #252]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a3e      	ldr	r2, [pc, #248]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b3c      	ldr	r3, [pc, #240]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a38      	ldr	r2, [pc, #224]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b33      	ldr	r3, [pc, #204]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a32      	ldr	r2, [pc, #200]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <MX_GPIO_Init+0x12c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPS_RESET_Pin|RM92A_RESEST_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2188      	movs	r1, #136	@ 0x88
 800172e:	482d      	ldr	r0, [pc, #180]	@ (80017e4 <MX_GPIO_Init+0x130>)
 8001730:	f001 ff5a 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_SENSE_Pin|CTRL_COMM_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2160      	movs	r1, #96	@ 0x60
 8001738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173c:	f001 ff54 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BNO055_RESET_GPIO_Port, BNO055_RESET_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001746:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <MX_GPIO_Init+0x134>)
 8001748:	f001 ff4e 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_DET_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|GPS_INT_Pin;
 800174c:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4820      	ldr	r0, [pc, #128]	@ (80017e4 <MX_GPIO_Init+0x130>)
 8001762:	f001 fdaf 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RESET_Pin RM92A_RESEST_Pin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin|RM92A_RESEST_Pin;
 8001766:	2388      	movs	r3, #136	@ 0x88
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <MX_GPIO_Init+0x130>)
 800177e:	f001 fda1 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_SENSE_Pin CTRL_COMM_Pin */
  GPIO_InitStruct.Pin = CTRL_SENSE_Pin|CTRL_COMM_Pin;
 8001782:	2360      	movs	r3, #96	@ 0x60
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179c:	f001 fd92 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_SAFE_Pin */
  GPIO_InitStruct.Pin = GPS_SAFE_Pin;
 80017a0:	2340      	movs	r3, #64	@ 0x40
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_SAFE_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_GPIO_Init+0x130>)
 80017b4:	f001 fd86 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO055_RESET_Pin */
  GPIO_InitStruct.Pin = BNO055_RESET_Pin;
 80017b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BNO055_RESET_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0x134>)
 80017d2:	f001 fd77 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000400 	.word	0x48000400

080017ec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e009      	b.n	8001812 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feeb 	bl	80005e2 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf1      	blt.n	80017fe <_write+0x12>
  }
  return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f00a fc20 	bl	800c072 <osDelay>
 8001832:	e7fb      	b.n	800182c <StartMainTask+0x8>

08001834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001846:	f001 f8a1 	bl	800298c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40001000 	.word	0x40001000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_MspInit+0x4c>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6613      	str	r3, [r2, #96]	@ 0x60
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188c:	6593      	str	r3, [r2, #88]	@ 0x58
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f001 f96f 	bl	8002b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_CRC_MspInit+0x38>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10b      	bne.n	80018de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_CRC_MspInit+0x3c>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_CRC_MspInit+0x3c>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <HAL_CRC_MspInit+0x3c>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023000 	.word	0x40023000
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a4      	sub	sp, #144	@ 0x90
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	225c      	movs	r2, #92	@ 0x5c
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00d fc77 	bl	800f208 <memset>
  if(hi2c->Instance==I2C1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8f      	ldr	r2, [pc, #572]	@ (8001b5c <HAL_I2C_MspInit+0x268>)
 8001920:	4293      	cmp	r3, r2
 8001922:	f040 8096 	bne.w	8001a52 <HAL_I2C_MspInit+0x15e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001926:	2340      	movs	r3, #64	@ 0x40
 8001928:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fca2 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800193e:	f7ff ff8b 	bl	8001858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b87      	ldr	r3, [pc, #540]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a86      	ldr	r2, [pc, #536]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b84      	ldr	r3, [pc, #528]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800195a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800195e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001972:	2304      	movs	r3, #4
 8001974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800197c:	4619      	mov	r1, r3
 800197e:	4879      	ldr	r0, [pc, #484]	@ (8001b64 <HAL_I2C_MspInit+0x270>)
 8001980:	f001 fca0 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001984:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	4a75      	ldr	r2, [pc, #468]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 800198a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001990:	4b73      	ldr	r3, [pc, #460]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800199c:	4b72      	ldr	r3, [pc, #456]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 800199e:	4a73      	ldr	r2, [pc, #460]	@ (8001b6c <HAL_I2C_MspInit+0x278>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80019a2:	4b71      	ldr	r3, [pc, #452]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019a4:	2205      	movs	r2, #5
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c0:	4b69      	ldr	r3, [pc, #420]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019c6:	4b68      	ldr	r3, [pc, #416]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019cc:	4b66      	ldr	r3, [pc, #408]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019d2:	4865      	ldr	r0, [pc, #404]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019d4:	f001 f9f2 	bl	8002dbc <HAL_DMA_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80019de:	f7ff ff3b 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a60      	ldr	r2, [pc, #384]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001b68 <HAL_I2C_MspInit+0x274>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 80019ee:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 80019f0:	4a60      	ldr	r2, [pc, #384]	@ (8001b74 <HAL_I2C_MspInit+0x280>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 80019f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 80019f6:	2205      	movs	r2, #5
 80019f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 80019fc:	2210      	movs	r2, #16
 80019fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a00:	4b5b      	ldr	r3, [pc, #364]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a06:	4b5a      	ldr	r3, [pc, #360]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0c:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a12:	4b57      	ldr	r3, [pc, #348]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a18:	4b55      	ldr	r3, [pc, #340]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b54      	ldr	r3, [pc, #336]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a24:	4852      	ldr	r0, [pc, #328]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a26:	f001 f9c9 	bl	8002dbc <HAL_DMA_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8001a30:	f7ff ff12 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4e      	ldr	r2, [pc, #312]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a38:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001b70 <HAL_I2C_MspInit+0x27c>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2105      	movs	r1, #5
 8001a44:	2020      	movs	r0, #32
 8001a46:	f001 f89d 	bl	8002b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	f001 f8b6 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a50:	e080      	b.n	8001b54 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_I2C_MspInit+0x284>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13b      	bne.n	8001ad4 <HAL_I2C_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fc07 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_MspInit+0x184>
      Error_Handler();
 8001a74:	f7ff fef0 	bl	8001858 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	4a38      	ldr	r2, [pc, #224]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a84:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	482b      	ldr	r0, [pc, #172]	@ (8001b64 <HAL_I2C_MspInit+0x270>)
 8001ab6:	f001 fc05 	bl	80032c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aba:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
}
 8001ad2:	e03f      	b.n	8001b54 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <HAL_I2C_MspInit+0x288>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13a      	bne.n	8001b54 <HAL_I2C_MspInit+0x260>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fbc5 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_MspInit+0x208>
      Error_Handler();
 8001af8:	f7ff feae 	bl	8001858 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b14:	2303      	movs	r3, #3
 8001b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <HAL_I2C_MspInit+0x28c>)
 8001b38:	f001 fbc4 	bl	80032c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001b42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_I2C_MspInit+0x26c>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
}
 8001b54:	bf00      	nop
 8001b56:	3790      	adds	r7, #144	@ 0x90
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000400 	.word	0x48000400
 8001b68:	200001a8 	.word	0x200001a8
 8001b6c:	4002046c 	.word	0x4002046c
 8001b70:	200001f0 	.word	0x200001f0
 8001b74:	40020480 	.word	0x40020480
 8001b78:	40005800 	.word	0x40005800
 8001b7c:	40005c00 	.word	0x40005c00
 8001b80:	48000800 	.word	0x48000800

08001b84 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0a0      	sub	sp, #128	@ 0x80
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	225c      	movs	r2, #92	@ 0x5c
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00d fb2f 	bl	800f208 <memset>
  if(hlptim->Instance==LPTIM2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <HAL_LPTIM_MspInit+0xa8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d136      	bne.n	8001c22 <HAL_LPTIM_MspInit+0x9e>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fb5a 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8001bce:	f7ff fe43 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd6:	4a16      	ldr	r2, [pc, #88]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_LPTIM_MspInit+0xac>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM2 GPIO Configuration
    PB1     ------> LPTIM2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c02:	2302      	movs	r3, #2
 8001c04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001c12:	230e      	movs	r3, #14
 8001c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <HAL_LPTIM_MspInit+0xb0>)
 8001c1e:	f001 fb51 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3780      	adds	r7, #128	@ 0x80
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40009400 	.word	0x40009400
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000400 	.word	0x48000400

08001c38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09a      	sub	sp, #104	@ 0x68
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	225c      	movs	r2, #92	@ 0x5c
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00d fadd 	bl	800f208 <memset>
  if(hrtc->Instance==RTC)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_RTC_MspInit+0x58>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d117      	bne.n	8001c88 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c62:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fb07 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c74:	f7ff fdf0 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RTC_MspInit+0x5c>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <HAL_RTC_MspInit+0x5c>)
 8001c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3768      	adds	r7, #104	@ 0x68
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40002800 	.word	0x40002800
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a2      	sub	sp, #136	@ 0x88
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	225c      	movs	r2, #92	@ 0x5c
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00d faa5 	bl	800f208 <memset>
  if(hsd->Instance==SDMMC1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e40 <HAL_SD_MspInit+0x1a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 80b6 	bne.w	8001e36 <HAL_SD_MspInit+0x19e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001cca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001cce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 facf 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001ce4:	f7ff fdb8 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ce8:	4b56      	ldr	r3, [pc, #344]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cec:	4a55      	ldr	r2, [pc, #340]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	4a49      	ldr	r2, [pc, #292]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d24:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <HAL_SD_MspInit+0x1ac>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d30:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d34:	677b      	str	r3, [r7, #116]	@ 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d44:	230c      	movs	r3, #12
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d4e:	4619      	mov	r1, r3
 8001d50:	483d      	ldr	r0, [pc, #244]	@ (8001e48 <HAL_SD_MspInit+0x1b0>)
 8001d52:	f001 fab7 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d56:	2304      	movs	r3, #4
 8001d58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d68:	230c      	movs	r3, #12
 8001d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d72:	4619      	mov	r1, r3
 8001d74:	4835      	ldr	r0, [pc, #212]	@ (8001e4c <HAL_SD_MspInit+0x1b4>)
 8001d76:	f001 faa5 	bl	80032c4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d7c:	4a35      	ldr	r2, [pc, #212]	@ (8001e54 <HAL_SD_MspInit+0x1bc>)
 8001d7e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8001d80:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d82:	2207      	movs	r2, #7
 8001d84:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d86:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d92:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d94:	2280      	movs	r2, #128	@ 0x80
 8001d96:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001da6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8001da8:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001db4:	4826      	ldr	r0, [pc, #152]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001db6:	f001 f801 	bl	8002dbc <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_SD_MspInit+0x12c>
    {
      Error_Handler();
 8001dc0:	f7ff fd4a 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dca:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <HAL_SD_MspInit+0x1b8>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001dd2:	4a22      	ldr	r2, [pc, #136]	@ (8001e5c <HAL_SD_MspInit+0x1c4>)
 8001dd4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001dde:	2210      	movs	r2, #16
 8001de0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dfc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8001dfe:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001e0a:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001e0c:	f000 ffd6 	bl	8002dbc <HAL_DMA_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_SD_MspInit+0x182>
    {
      Error_Handler();
 8001e16:	f7ff fd1f 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <HAL_SD_MspInit+0x1c0>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	2031      	movs	r0, #49	@ 0x31
 8001e2c:	f000 feaa 	bl	8002b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001e30:	2031      	movs	r0, #49	@ 0x31
 8001e32:	f000 fec3 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3788      	adds	r7, #136	@ 0x88
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012800 	.word	0x40012800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	20000318 	.word	0x20000318
 8001e54:	40020444 	.word	0x40020444
 8001e58:	20000360 	.word	0x20000360
 8001e5c:	40020458 	.word	0x40020458

08001e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f74 <HAL_SPI_MspInit+0x114>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d145      	bne.n	8001f0e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	4a3c      	ldr	r2, [pc, #240]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001e88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	4b37      	ldr	r3, [pc, #220]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a36      	ldr	r2, [pc, #216]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4a30      	ldr	r2, [pc, #192]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001eca:	2312      	movs	r3, #18
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	2305      	movs	r3, #5
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f001 f9ec 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001eec:	2330      	movs	r3, #48	@ 0x30
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efc:	2305      	movs	r3, #5
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	481d      	ldr	r0, [pc, #116]	@ (8001f7c <HAL_SPI_MspInit+0x11c>)
 8001f08:	f001 f9dc 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f0c:	e02d      	b.n	8001f6a <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_SPI_MspInit+0x120>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d128      	bne.n	8001f6a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f34:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_SPI_MspInit+0x118>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f48:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_SPI_MspInit+0x11c>)
 8001f66:	f001 f9ad 	bl	80032c4 <HAL_GPIO_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	3730      	adds	r7, #48	@ 0x30
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40013000 	.word	0x40013000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40003800 	.word	0x40003800

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_TIM_Base_MspInit+0x88>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d136      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_TIM_Base_MspInit+0x8c>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <HAL_TIM_Base_MspInit+0x8c>)
 8001f9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_TIM_Base_MspInit+0x8c>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001fb2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fda:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001fe8:	480a      	ldr	r0, [pc, #40]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001fea:	f000 fee7 	bl	8002dbc <HAL_DMA_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001ff4:	f7ff fc30 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40021000 	.word	0x40021000
 8002014:	200004bc 	.word	0x200004bc
 8002018:	4002001c 	.word	0x4002001c

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11d      	bne.n	800207a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	4a11      	ldr	r2, [pc, #68]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002068:	2301      	movs	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002076:	f001 f925 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0a0      	sub	sp, #128	@ 0x80
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	225c      	movs	r2, #92	@ 0x5c
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00d f8ab 	bl	800f208 <memset>
  if(huart->Instance==USART3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a37      	ldr	r2, [pc, #220]	@ (8002194 <HAL_UART_MspInit+0x108>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d166      	bne.n	800218a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020bc:	2304      	movs	r3, #4
 80020be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f8d7 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d4:	f7ff fbc0 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fc:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_UART_MspInit+0x10c>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002108:	2330      	movs	r3, #48	@ 0x30
 800210a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002118:	2307      	movs	r3, #7
 800211a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002120:	4619      	mov	r1, r3
 8002122:	481e      	ldr	r0, [pc, #120]	@ (800219c <HAL_UART_MspInit+0x110>)
 8002124:	f001 f8ce 	bl	80032c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 800212a:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <HAL_UART_MspInit+0x118>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002130:	2202      	movs	r2, #2
 8002132:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002142:	2280      	movs	r2, #128	@ 0x80
 8002144:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002152:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800215e:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002160:	f000 fe2c 	bl	8002dbc <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800216a:	f7ff fb75 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002172:	675a      	str	r2, [r3, #116]	@ 0x74
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_UART_MspInit+0x114>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2105      	movs	r1, #5
 800217e:	2027      	movs	r0, #39	@ 0x27
 8002180:	f000 fd00 	bl	8002b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002184:	2027      	movs	r0, #39	@ 0x27
 8002186:	f000 fd19 	bl	8002bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3780      	adds	r7, #128	@ 0x80
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40004800 	.word	0x40004800
 8002198:	40021000 	.word	0x40021000
 800219c:	48000800 	.word	0x48000800
 80021a0:	2000058c 	.word	0x2000058c
 80021a4:	40020030 	.word	0x40020030

080021a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	@ 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_InitTick+0xe0>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <HAL_InitTick+0xe0>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_InitTick+0xe0>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ce:	f107 0210 	add.w	r2, r7, #16
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 ffbd 	bl	8005158 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021e8:	f002 ff8a 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 80021ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80021ee:	e004      	b.n	80021fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021f0:	f002 ff86 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 80021f4:	4603      	mov	r3, r0
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fc:	4a23      	ldr	r2, [pc, #140]	@ (800228c <HAL_InitTick+0xe4>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	3b01      	subs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_InitTick+0xe8>)
 800220a:	4a22      	ldr	r2, [pc, #136]	@ (8002294 <HAL_InitTick+0xec>)
 800220c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_InitTick+0xe8>)
 8002210:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002214:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <HAL_InitTick+0xe8>)
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800221c:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <HAL_InitTick+0xe8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_InitTick+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_InitTick+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800222e:	4818      	ldr	r0, [pc, #96]	@ (8002290 <HAL_InitTick+0xe8>)
 8002230:	f005 ffdb 	bl	80081ea <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800223a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11b      	bne.n	800227a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002242:	4813      	ldr	r0, [pc, #76]	@ (8002290 <HAL_InitTick+0xe8>)
 8002244:	f006 f828 	bl	8008298 <HAL_TIM_Base_Start_IT>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800224e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002252:	2b00      	cmp	r3, #0
 8002254:	d111      	bne.n	800227a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002256:	2036      	movs	r0, #54	@ 0x36
 8002258:	f000 fcb0 	bl	8002bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	d808      	bhi.n	8002274 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002262:	2200      	movs	r2, #0
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	2036      	movs	r0, #54	@ 0x36
 8002268:	f000 fc8c 	bl	8002b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800226c:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <HAL_InitTick+0xf0>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e002      	b.n	800227a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800227a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800227e:	4618      	mov	r0, r3
 8002280:	3738      	adds	r7, #56	@ 0x38
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	431bde83 	.word	0x431bde83
 8002290:	20000620 	.word	0x20000620
 8002294:	40001000 	.word	0x40001000
 8002298:	20000004 	.word	0x20000004

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <NMI_Handler+0x4>

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <MemManage_Handler+0x4>

080022b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <DMA1_Channel2_IRQHandler+0x10>)
 80022da:	f000 ff06 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200004bc 	.word	0x200004bc

080022e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DMA1_Channel3_IRQHandler+0x10>)
 80022ee:	f000 fefc 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000058c 	.word	0x2000058c

080022fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
    usart_dma_irq_handler(&uart1_desc);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <DMA1_Channel5_IRQHandler+0x10>)
 8002312:	f000 faaa 	bl	800286a <usart_dma_irq_handler>
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	0800f91c 	.word	0x0800f91c

08002320 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <I2C1_ER_IRQHandler+0x10>)
 8002342:	f001 fa04 	bl	800374e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200000ac 	.word	0x200000ac

08002350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
    usart_irq_handler(&uart1_desc);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <USART1_IRQHandler+0x10>)
 8002356:	f000 fad8 	bl	800290a <usart_irq_handler>
  /* USER CODE END USART1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0800f91c 	.word	0x0800f91c

08002364 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <USART3_IRQHandler+0x10>)
 800237a:	f006 ff77 	bl	800926c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000504 	.word	0x20000504

08002388 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <SDMMC1_IRQHandler+0x10>)
 800238e:	f004 fdcb 	bl	8006f28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000294 	.word	0x20000294

0800239c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <TIM6_DAC_IRQHandler+0x10>)
 80023a2:	f006 f82e 	bl	8008402 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000620 	.word	0x20000620

080023b0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <DMA2_Channel4_IRQHandler+0x10>)
 80023b6:	f000 fe98 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000318 	.word	0x20000318

080023c4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <DMA2_Channel5_IRQHandler+0x10>)
 80023ca:	f000 fe8e 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000360 	.word	0x20000360

080023d8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <DMA2_Channel6_IRQHandler+0x10>)
 80023de:	f000 fe84 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200001a8 	.word	0x200001a8

080023ec <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <DMA2_Channel7_IRQHandler+0x10>)
 80023f2:	f000 fe7a 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001f0 	.word	0x200001f0

08002400 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e00a      	b.n	8002428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002412:	f3af 8000 	nop.w
 8002416:	4601      	mov	r1, r0
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60ba      	str	r2, [r7, #8]
 800241e:	b2ca      	uxtb	r2, r1
 8002420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf0      	blt.n	8002412 <_read+0x12>
  }

  return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:
  }
  return len;
}

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002462:	605a      	str	r2, [r3, #4]
  return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f00c ff3c 	bl	800f350 <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20010000 	.word	0x20010000
 8002504:	00000800 	.word	0x00000800
 8002508:	2000066c 	.word	0x2000066c
 800250c:	20002178 	.word	0x20002178

08002510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800256c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002538:	f7ff ffea 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	@ (8002570 <LoopForever+0x6>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	@ (8002574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <LoopForever+0xe>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <LoopForever+0x16>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f00c fefb 	bl	800f35c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002566:	f7fe fa97 	bl	8000a98 <main>

0800256a <LoopForever>:

LoopForever:
    b LoopForever
 800256a:	e7fe      	b.n	800256a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800256c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002578:	0800f9b4 	.word	0x0800f9b4
  ldr r2, =_sbss
 800257c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002580:	20002178 	.word	0x20002178

08002584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC1_IRQHandler>

08002586 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d101      	bne.n	800259e <LL_USART_IsActiveFlag_IDLE+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_USART_IsActiveFlag_IDLE+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d101      	bne.n	80025c4 <LL_USART_IsActiveFlag_TC+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_USART_IsActiveFlag_TC+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b80      	cmp	r3, #128	@ 0x80
 80025e4:	d101      	bne.n	80025ea <LL_USART_IsActiveFlag_TXE+0x18>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_USART_IsActiveFlag_TXE+0x1a>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2210      	movs	r2, #16
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b10      	cmp	r3, #16
 8002624:	d101      	bne.n	800262a <LL_USART_IsEnabledIT_IDLE+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_USART_IsEnabledIT_IDLE+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_DMA_GetDataLength>:
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002666:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <LL_DMA_GetDataLength+0x2c>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b29b      	uxth	r3, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	0800f988 	.word	0x0800f988

08002688 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <LL_DMA_IsEnabledIT_TC+0x38>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d101      	bne.n	80026b2 <LL_DMA_IsEnabledIT_TC+0x2a>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_DMA_IsEnabledIT_TC+0x2c>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	0800f988 	.word	0x0800f988

080026c4 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <LL_DMA_IsEnabledIT_HT+0x38>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
                    DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d101      	bne.n	80026ee <LL_DMA_IsEnabledIT_HT+0x2a>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_DMA_IsEnabledIT_HT+0x2c>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	0800f988 	.word	0x0800f988

08002700 <usart_rx_dma_thread>:
/**
 * \brief           USART DMA check thread
 * \param[in]       arg: Thread argument
 */
void
usart_rx_dma_thread(void* arg) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    uart_desc_t* uart = arg;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60fb      	str	r3, [r7, #12]
    void* d;

    /* Notify user to start sending data */
    usart_send_string(uart, "USART DMA example: DMA HT & TC + USART IDLE LINE IRQ + RTOS processing\r\n");
 800270c:	490b      	ldr	r1, [pc, #44]	@ (800273c <usart_rx_dma_thread+0x3c>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f899 	bl	8002846 <usart_send_string>
    usart_send_string(uart, "Start sending data to STM32\r\n");
 8002714:	490a      	ldr	r1, [pc, #40]	@ (8002740 <usart_rx_dma_thread+0x40>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f895 	bl	8002846 <usart_send_string>

    while (1) {
        /* Block thread and wait for event to process USART data */
        osMessageQueueGet(uart->data->queue, &d, NULL, osWaitForever);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f107 0108 	add.w	r1, r7, #8
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	2200      	movs	r2, #0
 800272c:	f009 fd90 	bl	800c250 <osMessageQueueGet>

        /* Simply call processing function */
        usart_rx_check(uart);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f807 	bl	8002744 <usart_rx_check>
        osMessageQueueGet(uart->data->queue, &d, NULL, osWaitForever);
 8002736:	bf00      	nop
 8002738:	e7f0      	b.n	800271c <usart_rx_dma_thread+0x1c>
 800273a:	bf00      	nop
 800273c:	0800f86c 	.word	0x0800f86c
 8002740:	0800f8b8 	.word	0x0800f8b8

08002744 <usart_rx_check>:
 * Solutions to this are:
 * - Improve architecture design to achieve faster reads
 * - Increase raw buffer size and allow DMA to write more data before this function is called
 */
void
usart_rx_check(const uart_desc_t* uart) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    size_t pos;

    /* Calculate current position in buffer and check for new data available */
    pos = ARRAY_LEN(uart->data->dma_rx_buffer) - LL_DMA_GetDataLength(uart->dma_rx, uart->dma_rx_ch);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7ff ff7e 	bl	8002658 <LL_DMA_GetDataLength>
 800275c:	4603      	mov	r3, r0
 800275e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002762:	60fb      	str	r3, [r7, #12]
    if (pos != uart->data->old_pos) {           /* Check change in received data */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d035      	beq.n	80027dc <usart_rx_check+0x98>
        if (pos > uart->data->old_pos) {        /* Current position is over previous one */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d910      	bls.n	800279e <usart_rx_check+0x5a>
             * [   5   ]            |------------------------------------|
             * [   6   ] <- pos
             * [   7   ]
             * [ N - 1 ]
             */
            usart_process_data(uart, &uart->data->dma_rx_buffer[uart->data->old_pos], pos - uart->data->old_pos);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	4413      	add	r3, r2
 8002788:	1d19      	adds	r1, r3, #4
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f824 	bl	80027e4 <usart_process_data>
 800279c:	e01a      	b.n	80027d4 <usart_rx_check+0x90>
             * [   5   ]            |                                 |
             * [   6   ]            | First block (len = N - old_pos) |
             * [   7   ]            |                                 |
             * [ N - 1 ]            |---------------------------------|
             */
            usart_process_data(uart, &uart->data->dma_rx_buffer[uart->data->old_pos], ARRAY_LEN(uart->data->dma_rx_buffer) - uart->data->old_pos);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a8:	4413      	add	r3, r2
 80027aa:	1d19      	adds	r1, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80027b6:	461a      	mov	r2, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f813 	bl	80027e4 <usart_process_data>
            if (pos > 0) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <usart_rx_check+0x90>
                usart_process_data(uart, &uart->data->dma_rx_buffer[0], pos);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	3304      	adds	r3, #4
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f808 	bl	80027e4 <usart_process_data>
            }
        }
        uart->data->old_pos = pos;              /* Save current position as old for next transfers */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	645a      	str	r2, [r3, #68]	@ 0x44
    }
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <usart_process_data>:
 * \note            Either process them directly or copy to other bigger buffer
 * \param[in]       data: Data to process
 * \param[in]       len: Length in units of bytes
 */
void
usart_process_data(const uart_desc_t* uart, const void* data, size_t len) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
    const uint8_t* d = data;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	617b      	str	r3, [r7, #20]
     *
     * For the sake of this example, function does a loop-back data over UART in polling mode.
     * Check ringbuff RX-based example for implementation with TX & RX DMA transfer.
     */

    for (; len > 0; --len, ++d) {
 80027f4:	e016      	b.n	8002824 <usart_process_data+0x40>
        LL_USART_TransmitData8(uart->uart, *d);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7ff ff19 	bl	8002638 <LL_USART_TransmitData8>
        while (!LL_USART_IsActiveFlag_TXE(uart->uart)) {}
 8002806:	bf00      	nop
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fee0 	bl	80025d2 <LL_USART_IsActiveFlag_TXE>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f7      	beq.n	8002808 <usart_process_data+0x24>
    for (; len > 0; --len, ++d) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <usart_process_data+0x12>
    }
    while (!LL_USART_IsActiveFlag_TC(uart->uart)) {}
 800282a:	bf00      	nop
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff febb 	bl	80025ac <LL_USART_IsActiveFlag_TC>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f7      	beq.n	800282c <usart_process_data+0x48>
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <usart_send_string>:
/**
 * \brief           Send string to USART
 * \param[in]       str: String to send
 */
void
usart_send_string(const uart_desc_t* uart, const char* str) {
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
    usart_process_data(uart, str, strlen(str));
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f7fd fcbd 	bl	80001d0 <strlen>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffc1 	bl	80027e4 <usart_process_data>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <usart_dma_irq_handler>:
 * It handles half-transfer and transfer-complete interrupts and does the job accordingly
 *
 * \param[in]       uart: Uart description to handle
 */
void
usart_dma_irq_handler(const uart_desc_t* uart) {
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
    void* d = (void *)1;
 8002872:	2301      	movs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]

    /* Check half-transfer complete interrupt */
    if (LL_DMA_IsEnabledIT_HT(uart->dma_rx, uart->dma_rx_ch) && uart->dma_rx_is_ht_fn(uart->dma_rx)) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7ff ff1f 	bl	80026c4 <LL_DMA_IsEnabledIT_HT>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <usart_dma_irq_handler+0x52>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6852      	ldr	r2, [r2, #4]
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <usart_dma_irq_handler+0x52>
        uart->dma_rx_clear_ht_fn(uart->dma_rx); /* Clear half-transfer complete flag */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
        osMessageQueuePut(uart->data->queue, &d, 0, 0); /* Write data to queue. Do not use wait function! */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f107 010c 	add.w	r1, r7, #12
 80028b4:	2300      	movs	r3, #0
 80028b6:	2200      	movs	r2, #0
 80028b8:	f009 fc6a 	bl	800c190 <osMessageQueuePut>
    }

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(uart->dma_rx, uart->dma_rx_ch) && uart->dma_rx_is_tc_fn(uart->dma_rx)) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f7ff fede 	bl	8002688 <LL_DMA_IsEnabledIT_TC>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <usart_dma_irq_handler+0x98>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	4610      	mov	r0, r2
 80028dc:	4798      	blx	r3
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <usart_dma_irq_handler+0x98>
        uart->dma_rx_clear_tc_fn(uart->dma_rx); /* Clear transfer complete flag */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6852      	ldr	r2, [r2, #4]
 80028ec:	4610      	mov	r0, r2
 80028ee:	4798      	blx	r3
        osMessageQueuePut(uart->data->queue, &d, 0, 0); /* Write data to queue. Do not use wait function! */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	f107 010c 	add.w	r1, r7, #12
 80028fa:	2300      	movs	r3, #0
 80028fc:	2200      	movs	r2, #0
 80028fe:	f009 fc47 	bl	800c190 <osMessageQueuePut>
    }
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <usart_irq_handler>:
 * It handles IDLE line detection interrupt and does the job accordingly
 *
 * \param[in]       uart: Uart description to handle
 */
void
usart_irq_handler(const uart_desc_t* uart) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
    void* d = (void *)1;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]

    /* Check for IDLE line interrupt */
    if (LL_USART_IsEnabledIT_IDLE(uart->uart) && LL_USART_IsActiveFlag_IDLE(uart->uart)) {
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fe79 	bl	8002612 <LL_USART_IsEnabledIT_IDLE>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <usart_irq_handler+0x48>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fe2b 	bl	8002586 <LL_USART_IsActiveFlag_IDLE>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <usart_irq_handler+0x48>
        LL_USART_ClearFlag_IDLE(uart->uart);    /* Clear IDLE line flag */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe5c 	bl	80025f8 <LL_USART_ClearFlag_IDLE>
        osMessageQueuePut(uart->data->queue, &d, 0, 0);  /* Write data to queue. Do not use wait function! */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f107 010c 	add.w	r1, r7, #12
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	f009 fc1f 	bl	800c190 <osMessageQueuePut>
    }
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 f902 	bl	8002b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296a:	200f      	movs	r0, #15
 800296c:	f7ff fc1c 	bl	80021a8 <HAL_InitTick>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	71fb      	strb	r3, [r7, #7]
 800297a:	e001      	b.n	8002980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800297c:	f7fe ff72 	bl	8001864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002980:	79fb      	ldrb	r3, [r7, #7]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008
 80029b0:	20000670 	.word	0x20000670

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000670 	.word	0x20000670

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008

08002a14 <__NVIC_SetPriorityGrouping>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff4c 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b96:	f7ff ff61 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002b9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f7ff ffb1 	bl	8002b08 <NVIC_EncodePriority>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff80 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff54 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e054      	b.n	8002c94 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7f5b      	ldrb	r3, [r3, #29]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fe5a 	bl	80018b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	791b      	ldrb	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <HAL_CRC_Init+0xc4>)
 8002c14:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0218 	bic.w	r2, r2, #24
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	e00c      	b.n	8002c42 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f834 	bl	8002ca0 <HAL_CRCEx_Polynomial_Set>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e028      	b.n	8002c94 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	795b      	ldrb	r3, [r3, #5]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c52:	611a      	str	r2, [r3, #16]
 8002c54:	e004      	b.n	8002c60 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6912      	ldr	r2, [r2, #16]
 8002c5e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	04c11db7 	.word	0x04c11db7

08002ca0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
 8002cc2:	e063      	b.n	8002d8c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002cc4:	bf00      	nop
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	613a      	str	r2, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <HAL_CRCEx_Polynomial_Set+0x44>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b18      	cmp	r3, #24
 8002ce8:	d846      	bhi.n	8002d78 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d7f 	.word	0x08002d7f
 8002cf4:	08002d79 	.word	0x08002d79
 8002cf8:	08002d79 	.word	0x08002d79
 8002cfc:	08002d79 	.word	0x08002d79
 8002d00:	08002d79 	.word	0x08002d79
 8002d04:	08002d79 	.word	0x08002d79
 8002d08:	08002d79 	.word	0x08002d79
 8002d0c:	08002d79 	.word	0x08002d79
 8002d10:	08002d6d 	.word	0x08002d6d
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002d79 	.word	0x08002d79
 8002d1c:	08002d79 	.word	0x08002d79
 8002d20:	08002d79 	.word	0x08002d79
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d79 	.word	0x08002d79
 8002d30:	08002d61 	.word	0x08002d61
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d79 	.word	0x08002d79
 8002d3c:	08002d79 	.word	0x08002d79
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d79 	.word	0x08002d79
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08002d55 	.word	0x08002d55
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d913      	bls.n	8002d82 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d5e:	e010      	b.n	8002d82 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d90f      	bls.n	8002d86 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d6a:	e00c      	b.n	8002d86 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	d90b      	bls.n	8002d8a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d76:	e008      	b.n	8002d8a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8002d7c:	e006      	b.n	8002d8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e004      	b.n	8002d8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d8a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 0118 	bic.w	r1, r3, #24
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e098      	b.n	8002f00 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <HAL_DMA_Init+0x150>)
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d80f      	bhi.n	8002dfa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <HAL_DMA_Init+0x154>)
 8002de2:	4413      	add	r3, r2
 8002de4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f14 <HAL_DMA_Init+0x158>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	009a      	lsls	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_DMA_Init+0x15c>)
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df8:	e00e      	b.n	8002e18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <HAL_DMA_Init+0x160>)
 8002e02:	4413      	add	r3, r2
 8002e04:	4a43      	ldr	r2, [pc, #268]	@ (8002f14 <HAL_DMA_Init+0x158>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	009a      	lsls	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a42      	ldr	r2, [pc, #264]	@ (8002f20 <HAL_DMA_Init+0x164>)
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e72:	d039      	beq.n	8002ee8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	4a27      	ldr	r2, [pc, #156]	@ (8002f18 <HAL_DMA_Init+0x15c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d11a      	bne.n	8002eb4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e7e:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_DMA_Init+0x168>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f003 031c 	and.w	r3, r3, #28
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4924      	ldr	r1, [pc, #144]	@ (8002f24 <HAL_DMA_Init+0x168>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_DMA_Init+0x168>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f003 031c 	and.w	r3, r3, #28
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	491d      	ldr	r1, [pc, #116]	@ (8002f24 <HAL_DMA_Init+0x168>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
 8002eb2:	e019      	b.n	8002ee8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f28 <HAL_DMA_Init+0x16c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	f003 031c 	and.w	r3, r3, #28
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4917      	ldr	r1, [pc, #92]	@ (8002f28 <HAL_DMA_Init+0x16c>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ece:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <HAL_DMA_Init+0x16c>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 031c 	and.w	r3, r3, #28
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	4911      	ldr	r1, [pc, #68]	@ (8002f28 <HAL_DMA_Init+0x16c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40020407 	.word	0x40020407
 8002f10:	bffdfff8 	.word	0xbffdfff8
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	bffdfbf8 	.word	0xbffdfbf8
 8002f20:	40020400 	.word	0x40020400
 8002f24:	400200a8 	.word	0x400200a8
 8002f28:	400204a8 	.word	0x400204a8

08002f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Start_IT+0x20>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e04b      	b.n	8002fe4 <HAL_DMA_Start_IT+0xb8>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d13a      	bne.n	8002fd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f96d 	bl	8003264 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 020e 	orr.w	r2, r2, #14
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 020a 	orr.w	r2, r2, #10
 8002fc2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e005      	b.n	8002fe2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d008      	beq.n	8003016 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 020e 	bic.w	r2, r2, #14
 8003024:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	f003 021c 	and.w	r2, r3, #28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d005      	beq.n	800308c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e029      	b.n	80030e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f003 021c 	and.w	r2, r3, #28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
    }
  }
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f003 031c 	and.w	r3, r3, #28
 800310a:	2204      	movs	r2, #4
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d026      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7a>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d021      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0204 	bic.w	r2, r2, #4
 800313c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f003 021c 	and.w	r2, r3, #28
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2104      	movs	r1, #4
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	2b00      	cmp	r3, #0
 8003158:	d071      	beq.n	800323e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003162:	e06c      	b.n	800323e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	f003 031c 	and.w	r3, r3, #28
 800316c:	2202      	movs	r2, #2
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02e      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xec>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d029      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020a 	bic.w	r2, r2, #10
 800319e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	f003 021c 	and.w	r2, r3, #28
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2102      	movs	r1, #2
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d038      	beq.n	800323e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031d4:	e033      	b.n	800323e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f003 031c 	and.w	r3, r3, #28
 80031de:	2208      	movs	r2, #8
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d02a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d025      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003208:	f003 021c 	and.w	r2, r3, #28
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800323e:	bf00      	nop
 8003240:	bf00      	nop
}
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003256:	b2db      	uxtb	r3, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f003 021c 	and.w	r2, r3, #28
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b10      	cmp	r3, #16
 8003294:	d108      	bne.n	80032a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032a6:	e007      	b.n	80032b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d2:	e154      	b.n	800357e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8146 	beq.w	8003578 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d005      	beq.n	8003304 <HAL_GPIO_Init+0x40>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d130      	bne.n	8003366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333a:	2201      	movs	r2, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 0201 	and.w	r2, r3, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b03      	cmp	r3, #3
 8003370:	d017      	beq.n	80033a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d123      	bne.n	80033f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	08da      	lsrs	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3208      	adds	r2, #8
 80033f0:	6939      	ldr	r1, [r7, #16]
 80033f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80a0 	beq.w	8003578 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003438:	4b58      	ldr	r3, [pc, #352]	@ (800359c <HAL_GPIO_Init+0x2d8>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343c:	4a57      	ldr	r2, [pc, #348]	@ (800359c <HAL_GPIO_Init+0x2d8>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6613      	str	r3, [r2, #96]	@ 0x60
 8003444:	4b55      	ldr	r3, [pc, #340]	@ (800359c <HAL_GPIO_Init+0x2d8>)
 8003446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003450:	4a53      	ldr	r2, [pc, #332]	@ (80035a0 <HAL_GPIO_Init+0x2dc>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800347a:	d019      	beq.n	80034b0 <HAL_GPIO_Init+0x1ec>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a49      	ldr	r2, [pc, #292]	@ (80035a4 <HAL_GPIO_Init+0x2e0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_GPIO_Init+0x1e8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_GPIO_Init+0x2e4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00d      	beq.n	80034a8 <HAL_GPIO_Init+0x1e4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_GPIO_Init+0x2e8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <HAL_GPIO_Init+0x1e0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_GPIO_Init+0x2ec>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_GPIO_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e008      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a0:	2307      	movs	r3, #7
 80034a2:	e006      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e004      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034b0:	2300      	movs	r3, #0
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c2:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_GPIO_Init+0x2dc>)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d0:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f4:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fa:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351e:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003548:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003572:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f aea3 	bne.w	80032d4 <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	48000c00 	.word	0x48000c00
 80035b0:	48001000 	.word	0x48001000
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e001      	b.n	80035da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003604:	e002      	b.n	800360c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e08d      	b.n	8003746 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe f958 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e006      	b.n	80036a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800369e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d108      	bne.n	80036ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e007      	b.n	80036ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00f      	beq.n	8003790 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800378e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00f      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f043 0208 	orr.w	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00f      	beq.n	80037e4 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 030b 	and.w	r3, r3, #11
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80037f4:	68f9      	ldr	r1, [r7, #12]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb82 	bl	8003f00 <I2C_ITError>
  }
}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
 8003838:	4613      	mov	r3, r2
 800383a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <I2C_Slave_ISR_IT+0x24>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0e1      	b.n	8003a6c <I2C_Slave_ISR_IT+0x1e8>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f9b4 	bl	8003c34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04b      	beq.n	800396e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d046      	beq.n	800396e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d128      	bne.n	800393c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b28      	cmp	r3, #40	@ 0x28
 80038f4:	d108      	bne.n	8003908 <I2C_Slave_ISR_IT+0x84>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038fc:	d104      	bne.n	8003908 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 faa9 	bl	8003e58 <I2C_ITListenCplt>
 8003906:	e031      	b.n	800396c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b29      	cmp	r3, #41	@ 0x29
 8003912:	d10e      	bne.n	8003932 <I2C_Slave_ISR_IT+0xae>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800391a:	d00a      	beq.n	8003932 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fc02 	bl	800412e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f926 	bl	8003b7c <I2C_ITSlaveSeqCplt>
 8003930:	e01c      	b.n	800396c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800393a:	e08f      	b.n	8003a5c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2210      	movs	r2, #16
 8003942:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	f043 0204 	orr.w	r2, r3, #4
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <I2C_Slave_ISR_IT+0xda>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395c:	d17e      	bne.n	8003a5c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 facb 	bl	8003f00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800396a:	e077      	b.n	8003a5c <I2C_Slave_ISR_IT+0x1d8>
 800396c:	e076      	b.n	8003a5c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02f      	beq.n	80039d8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02a      	beq.n	80039d8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d14b      	bne.n	8003a60 <I2C_Slave_ISR_IT+0x1dc>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ce:	d047      	beq.n	8003a60 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f8d3 	bl	8003b7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80039d6:	e043      	b.n	8003a60 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f840 	bl	8003a74 <I2C_ITAddrCplt>
 80039f4:	e035      	b.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d030      	beq.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d02b      	beq.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d018      	beq.n	8003a46 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003a44:	e00d      	b.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a4c:	d002      	beq.n	8003a54 <I2C_Slave_ISR_IT+0x1d0>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f891 	bl	8003b7c <I2C_ITSlaveSeqCplt>
 8003a5a:	e002      	b.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003a60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a8a:	2b28      	cmp	r3, #40	@ 0x28
 8003a8c:	d16a      	bne.n	8003b64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003aac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003ac8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d138      	bne.n	8003b44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	09db      	lsrs	r3, r3, #7
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	89bb      	ldrh	r3, [r7, #12]
 8003ada:	4053      	eors	r3, r2
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f003 0306 	and.w	r3, r3, #6
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11c      	bne.n	8003b20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d13b      	bne.n	8003b74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b12:	89ba      	ldrh	r2, [r7, #12]
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fe87 	bl	800382c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b1e:	e029      	b.n	8003b74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b20:	893b      	ldrh	r3, [r7, #8]
 8003b22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fb42 	bl	80041b2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b36:	89ba      	ldrh	r2, [r7, #12]
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fe75 	bl	800382c <HAL_I2C_AddrCallback>
}
 8003b42:	e017      	b.n	8003b74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fb32 	bl	80041b2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b56:	89ba      	ldrh	r2, [r7, #12]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fe65 	bl	800382c <HAL_I2C_AddrCallback>
}
 8003b62:	e007      	b.n	8003b74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e00c      	b.n	8003bca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b29      	cmp	r3, #41	@ 0x29
 8003bd4:	d112      	bne.n	8003bfc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2228      	movs	r2, #40	@ 0x28
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2221      	movs	r2, #33	@ 0x21
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003be4:	2101      	movs	r1, #1
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fae3 	bl	80041b2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fe05 	bl	8003804 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bfa:	e017      	b.n	8003c2c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c06:	d111      	bne.n	8003c2c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2228      	movs	r2, #40	@ 0x28
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2222      	movs	r2, #34	@ 0x22
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c16:	2102      	movs	r1, #2
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 faca 	bl	80041b2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdf6 	bl	8003818 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b21      	cmp	r3, #33	@ 0x21
 8003c5e:	d002      	beq.n	8003c66 <I2C_ITSlaveCplt+0x32>
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b29      	cmp	r3, #41	@ 0x29
 8003c64:	d108      	bne.n	8003c78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c66:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 faa1 	bl	80041b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2221      	movs	r2, #33	@ 0x21
 8003c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c76:	e019      	b.n	8003cac <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b22      	cmp	r3, #34	@ 0x22
 8003c7c:	d002      	beq.n	8003c84 <I2C_ITSlaveCplt+0x50>
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c82:	d108      	bne.n	8003c96 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c84:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa92 	bl	80041b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2222      	movs	r2, #34	@ 0x22
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c94:	e00a      	b.n	8003cac <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b28      	cmp	r3, #40	@ 0x28
 8003c9a:	d107      	bne.n	8003cac <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa86 	bl	80041b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b62      	ldr	r3, [pc, #392]	@ (8003e50 <I2C_ITSlaveCplt+0x21c>)
 8003cc8:	400b      	ands	r3, r1
 8003cca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fa2e 	bl	800412e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01f      	beq.n	8003d34 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d02:	e017      	b.n	8003d34 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d020      	beq.n	8003d80 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00c      	beq.n	8003d80 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8a4 	bl	8003f00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b28      	cmp	r3, #40	@ 0x28
 8003dc2:	d141      	bne.n	8003e48 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dc4:	6979      	ldr	r1, [r7, #20]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f846 	bl	8003e58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dcc:	e03c      	b.n	8003e48 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dd6:	d014      	beq.n	8003e02 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fecf 	bl	8003b7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <I2C_ITSlaveCplt+0x220>)
 8003de2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fd24 	bl	8003848 <HAL_I2C_ListenCpltCallback>
}
 8003e00:	e022      	b.n	8003e48 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b22      	cmp	r3, #34	@ 0x22
 8003e0c:	d10e      	bne.n	8003e2c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fcf7 	bl	8003818 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e2a:	e00d      	b.n	8003e48 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fcde 	bl	8003804 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e48:	bf00      	nop
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	fe00e800 	.word	0xfe00e800
 8003e54:	ffff0000 	.word	0xffff0000

08003e58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a25      	ldr	r2, [pc, #148]	@ (8003efc <I2C_ITListenCplt+0xa4>)
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d022      	beq.n	8003ed4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ed4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f96a 	bl	80041b2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fcaa 	bl	8003848 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f10:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a6d      	ldr	r2, [pc, #436]	@ (80040d4 <I2C_ITError+0x1d4>)
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b28      	cmp	r3, #40	@ 0x28
 8003f36:	d005      	beq.n	8003f44 <I2C_ITError+0x44>
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b29      	cmp	r3, #41	@ 0x29
 8003f3c:	d002      	beq.n	8003f44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f42:	d10b      	bne.n	8003f5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f44:	2103      	movs	r1, #3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f933 	bl	80041b2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2228      	movs	r2, #40	@ 0x28
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a60      	ldr	r2, [pc, #384]	@ (80040d8 <I2C_ITError+0x1d8>)
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f5a:	e030      	b.n	8003fbe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f5c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f926 	bl	80041b2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e1 	bl	800412e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b60      	cmp	r3, #96	@ 0x60
 8003f76:	d01f      	beq.n	8003fb8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d114      	bne.n	8003fb8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d109      	bne.n	8003fb0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d039      	beq.n	8004040 <I2C_ITError+0x140>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b11      	cmp	r3, #17
 8003fd0:	d002      	beq.n	8003fd8 <I2C_ITError+0xd8>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b21      	cmp	r3, #33	@ 0x21
 8003fd6:	d133      	bne.n	8004040 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe6:	d107      	bne.n	8003ff8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ff6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff f923 	bl	8003248 <HAL_DMA_GetState>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d017      	beq.n	8004038 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <I2C_ITError+0x1dc>)
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff f823 	bl	8003068 <HAL_DMA_Abort_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04d      	beq.n	80040c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004032:	4610      	mov	r0, r2
 8004034:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004036:	e045      	b.n	80040c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f851 	bl	80040e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800403e:	e041      	b.n	80040c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d039      	beq.n	80040bc <I2C_ITError+0x1bc>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b12      	cmp	r3, #18
 800404c:	d002      	beq.n	8004054 <I2C_ITError+0x154>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b22      	cmp	r3, #34	@ 0x22
 8004052:	d133      	bne.n	80040bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004062:	d107      	bne.n	8004074 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004072:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f8e5 	bl	8003248 <HAL_DMA_GetState>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d017      	beq.n	80040b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <I2C_ITError+0x1dc>)
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe ffe5 	bl	8003068 <HAL_DMA_Abort_IT>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d011      	beq.n	80040c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040ae:	4610      	mov	r0, r2
 80040b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040b2:	e009      	b.n	80040c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f813 	bl	80040e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ba:	e005      	b.n	80040c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f80f 	bl	80040e0 <I2C_TreatErrorCallback>
  }
}
 80040c2:	e002      	b.n	80040ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040c4:	bf00      	nop
 80040c6:	e000      	b.n	80040ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040c8:	bf00      	nop
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	ffff0000 	.word	0xffff0000
 80040d8:	08003885 	.word	0x08003885
 80040dc:	08004177 	.word	0x08004177

080040e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b60      	cmp	r3, #96	@ 0x60
 80040f2:	d10e      	bne.n	8004112 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fbb0 	bl	8003870 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004110:	e009      	b.n	8004126 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fb9b 	bl	800385c <HAL_I2C_ErrorCallback>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d103      	bne.n	800414c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	d007      	beq.n	800416a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	619a      	str	r2, [r3, #24]
  }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	2200      	movs	r2, #0
 80041a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ff9b 	bl	80040e0 <I2C_TreatErrorCallback>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80041d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041e0:	2b28      	cmp	r3, #40	@ 0x28
 80041e2:	d003      	beq.n	80041ec <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80041ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00f      	beq.n	8004216 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80041fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800420a:	2b28      	cmp	r3, #40	@ 0x28
 800420c:	d003      	beq.n	8004216 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004214:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004216:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da03      	bge.n	8004226 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d103      	bne.n	8004234 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004232:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	2b20      	cmp	r3, #32
 8004238:	d103      	bne.n	8004242 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f043 0320 	orr.w	r3, r3, #32
 8004240:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004242:	887b      	ldrh	r3, [r7, #2]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d103      	bne.n	8004250 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43da      	mvns	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d138      	bne.n	80042f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800428e:	2302      	movs	r3, #2
 8004290:	e032      	b.n	80042f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2224      	movs	r2, #36	@ 0x24
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b20      	cmp	r3, #32
 8004318:	d139      	bne.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004324:	2302      	movs	r3, #2
 8004326:	e033      	b.n	8004390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	@ 0x24
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004356:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e08f      	b.n	80044ce <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fbdb 	bl	8001b84 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d004      	beq.n	80043f0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ee:	d103      	bne.n	80043f8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 031e 	bic.w	r3, r3, #30
 80043f6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004400:	4293      	cmp	r3, r2
 8004402:	d005      	beq.n	8004410 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800440a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_LPTIM_Init+0x13c>)
 8004414:	4013      	ands	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004420:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004426:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800442c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004432:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800444a:	4313      	orrs	r3, r2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d004      	beq.n	8004464 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004462:	d107      	bne.n	8004474 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800446c:	4313      	orrs	r3, r2
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800447c:	4293      	cmp	r3, r2
 800447e:	d00a      	beq.n	8004496 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004488:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800448e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a0e      	ldr	r2, [pc, #56]	@ (80044dc <HAL_LPTIM_Init+0x140>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	621a      	str	r2, [r3, #32]
 80044b8:	e004      	b.n	80044c4 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044c2:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	ff19f1fe 	.word	0xff19f1fe
 80044dc:	40007c00 	.word	0x40007c00

080044e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044e4:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000

080044fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800450a:	d130      	bne.n	800456e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800450c:	4b23      	ldr	r3, [pc, #140]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004518:	d038      	beq.n	800458c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800451a:	4b20      	ldr	r3, [pc, #128]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004522:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800452a:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2232      	movs	r2, #50	@ 0x32
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0c9b      	lsrs	r3, r3, #18
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004540:	e002      	b.n	8004548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b01      	subs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004548:	4b14      	ldr	r3, [pc, #80]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004554:	d102      	bne.n	800455c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f2      	bne.n	8004542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800455c:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004568:	d110      	bne.n	800458c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00f      	b.n	800458e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457a:	d007      	beq.n	800458c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800457c:	4b07      	ldr	r3, [pc, #28]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800458a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40007000 	.word	0x40007000
 80045a0:	20000000 	.word	0x20000000
 80045a4:	431bde83 	.word	0x431bde83

080045a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f000 bc02 	b.w	8004dc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045bc:	4b96      	ldr	r3, [pc, #600]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c6:	4b94      	ldr	r3, [pc, #592]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80e4 	beq.w	80047a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4c>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	f040 808b 	bne.w	8004702 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 8087 	bne.w	8004702 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f4:	4b88      	ldr	r3, [pc, #544]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x64>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e3d9      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	4b81      	ldr	r3, [pc, #516]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_RCC_OscConfig+0x7e>
 800461c:	4b7e      	ldr	r3, [pc, #504]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004624:	e005      	b.n	8004632 <HAL_RCC_OscConfig+0x8a>
 8004626:	4b7c      	ldr	r3, [pc, #496]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004632:	4293      	cmp	r3, r2
 8004634:	d223      	bcs.n	800467e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fdbe 	bl	80051bc <RCC_SetFlashLatencyFromMSIRange>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e3ba      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800464a:	4b73      	ldr	r3, [pc, #460]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a72      	ldr	r2, [pc, #456]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004650:	f043 0308 	orr.w	r3, r3, #8
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b70      	ldr	r3, [pc, #448]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	496d      	ldr	r1, [pc, #436]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004668:	4b6b      	ldr	r3, [pc, #428]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	4968      	ldr	r1, [pc, #416]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e025      	b.n	80046ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467e:	4b66      	ldr	r3, [pc, #408]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a65      	ldr	r2, [pc, #404]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004684:	f043 0308 	orr.w	r3, r3, #8
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b63      	ldr	r3, [pc, #396]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	4960      	ldr	r1, [pc, #384]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800469c:	4b5e      	ldr	r3, [pc, #376]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	495b      	ldr	r1, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fd7e 	bl	80051bc <RCC_SetFlashLatencyFromMSIRange>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e37a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ca:	f000 fc81 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b51      	ldr	r3, [pc, #324]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	4950      	ldr	r1, [pc, #320]	@ (800481c <HAL_RCC_OscConfig+0x274>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004820 <HAL_RCC_OscConfig+0x278>)
 80046e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004824 <HAL_RCC_OscConfig+0x27c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fd5a 	bl	80021a8 <HAL_InitTick>
 80046f4:	4603      	mov	r3, r0
 80046f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d052      	beq.n	80047a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	e35e      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d032      	beq.n	8004770 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800470a:	4b43      	ldr	r3, [pc, #268]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a42      	ldr	r2, [pc, #264]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004716:	f7fe f94d 	bl	80029b4 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800471e:	f7fe f949 	bl	80029b4 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e347      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004730:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a35      	ldr	r2, [pc, #212]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004742:	f043 0308 	orr.w	r3, r3, #8
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b33      	ldr	r3, [pc, #204]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4930      	ldr	r1, [pc, #192]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475a:	4b2f      	ldr	r3, [pc, #188]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	492b      	ldr	r1, [pc, #172]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800476a:	4313      	orrs	r3, r2
 800476c:	604b      	str	r3, [r1, #4]
 800476e:	e01a      	b.n	80047a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004770:	4b29      	ldr	r3, [pc, #164]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a28      	ldr	r2, [pc, #160]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800477c:	f7fe f91a 	bl	80029b4 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004784:	f7fe f916 	bl	80029b4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e314      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004796:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x1dc>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d073      	beq.n	800489a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_OscConfig+0x21c>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d10e      	bne.n	80047dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d10b      	bne.n	80047dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d063      	beq.n	8004898 <HAL_RCC_OscConfig+0x2f0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d15f      	bne.n	8004898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e2f1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x24c>
 80047e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e025      	b.n	8004840 <HAL_RCC_OscConfig+0x298>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047fc:	d114      	bne.n	8004828 <HAL_RCC_OscConfig+0x280>
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a05      	ldr	r2, [pc, #20]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a02      	ldr	r2, [pc, #8]	@ (8004818 <HAL_RCC_OscConfig+0x270>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e013      	b.n	8004840 <HAL_RCC_OscConfig+0x298>
 8004818:	40021000 	.word	0x40021000
 800481c:	0800f940 	.word	0x0800f940
 8004820:	20000000 	.word	0x20000000
 8004824:	20000004 	.word	0x20000004
 8004828:	4ba0      	ldr	r3, [pc, #640]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a9f      	ldr	r2, [pc, #636]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b9d      	ldr	r3, [pc, #628]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a9c      	ldr	r2, [pc, #624]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800483e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fe f8b4 	bl	80029b4 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7fe f8b0 	bl	80029b4 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	@ 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e2ae      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004862:	4b92      	ldr	r3, [pc, #584]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x2a8>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe f8a0 	bl	80029b4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe f89c 	bl	80029b4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	@ 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e29a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488a:	4b88      	ldr	r3, [pc, #544]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x2d0>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d060      	beq.n	8004968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_OscConfig+0x310>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d119      	bne.n	80048e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d116      	bne.n	80048e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b8:	4b7c      	ldr	r3, [pc, #496]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_OscConfig+0x328>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e277      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	4b76      	ldr	r3, [pc, #472]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	4973      	ldr	r1, [pc, #460]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e4:	e040      	b.n	8004968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d023      	beq.n	8004936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6e      	ldr	r2, [pc, #440]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fe f85b 	bl	80029b4 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004902:	f7fe f857 	bl	80029b4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e255      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004914:	4b65      	ldr	r3, [pc, #404]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b62      	ldr	r3, [pc, #392]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	495f      	ldr	r1, [pc, #380]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e018      	b.n	8004968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004936:	4b5d      	ldr	r3, [pc, #372]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a5c      	ldr	r2, [pc, #368]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fe f837 	bl	80029b4 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494a:	f7fe f833 	bl	80029b4 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e231      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800495c:	4b53      	ldr	r3, [pc, #332]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d03c      	beq.n	80049ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497c:	4b4b      	ldr	r3, [pc, #300]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 800497e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004982:	4a4a      	ldr	r2, [pc, #296]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fe f812 	bl	80029b4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004994:	f7fe f80e 	bl	80029b4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e20c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a6:	4b41      	ldr	r3, [pc, #260]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0ef      	beq.n	8004994 <HAL_RCC_OscConfig+0x3ec>
 80049b4:	e01b      	b.n	80049ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b6:	4b3d      	ldr	r3, [pc, #244]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049bc:	4a3b      	ldr	r2, [pc, #236]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fd fff5 	bl	80029b4 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fd fff1 	bl	80029b4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1ef      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e0:	4b32      	ldr	r3, [pc, #200]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ef      	bne.n	80049ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a6 	beq.w	8004b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a00:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10d      	bne.n	8004a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	4b27      	ldr	r3, [pc, #156]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a10:	4a26      	ldr	r2, [pc, #152]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a18:	4b24      	ldr	r3, [pc, #144]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a24:	2301      	movs	r3, #1
 8004a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a28:	4b21      	ldr	r3, [pc, #132]	@ (8004ab0 <HAL_RCC_OscConfig+0x508>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d118      	bne.n	8004a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a34:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <HAL_RCC_OscConfig+0x508>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab0 <HAL_RCC_OscConfig+0x508>)
 8004a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a40:	f7fd ffb8 	bl	80029b4 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a48:	f7fd ffb4 	bl	80029b4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e1b2      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5a:	4b15      	ldr	r3, [pc, #84]	@ (8004ab0 <HAL_RCC_OscConfig+0x508>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4d8>
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a74:	4a0d      	ldr	r2, [pc, #52]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a7e:	e029      	b.n	8004ad4 <HAL_RCC_OscConfig+0x52c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d115      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x50c>
 8004a88:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	4a07      	ldr	r2, [pc, #28]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a98:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9e:	4a03      	ldr	r2, [pc, #12]	@ (8004aac <HAL_RCC_OscConfig+0x504>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa8:	e014      	b.n	8004ad4 <HAL_RCC_OscConfig+0x52c>
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	4a99      	ldr	r2, [pc, #612]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac4:	4b96      	ldr	r3, [pc, #600]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	4a95      	ldr	r2, [pc, #596]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d016      	beq.n	8004b0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fd ff6a 	bl	80029b4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fd ff66 	bl	80029b4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e162      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afa:	4b89      	ldr	r3, [pc, #548]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ed      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x53c>
 8004b08:	e015      	b.n	8004b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fd ff53 	bl	80029b4 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fd ff4f 	bl	80029b4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e14b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b28:	4b7d      	ldr	r3, [pc, #500]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ed      	bne.n	8004b12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b78      	ldr	r3, [pc, #480]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	4a77      	ldr	r2, [pc, #476]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d03c      	beq.n	8004bce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01c      	beq.n	8004b96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b5c:	4b70      	ldr	r3, [pc, #448]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b62:	4a6f      	ldr	r2, [pc, #444]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd ff22 	bl	80029b4 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b74:	f7fd ff1e 	bl	80029b4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e11c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b86:	4b66      	ldr	r3, [pc, #408]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ef      	beq.n	8004b74 <HAL_RCC_OscConfig+0x5cc>
 8004b94:	e01b      	b.n	8004bce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b96:	4b62      	ldr	r3, [pc, #392]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b9c:	4a60      	ldr	r2, [pc, #384]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba6:	f7fd ff05 	bl	80029b4 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bae:	f7fd ff01 	bl	80029b4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0ff      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc0:	4b57      	ldr	r3, [pc, #348]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ef      	bne.n	8004bae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80f3 	beq.w	8004dbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f040 80c9 	bne.w	8004d74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004be2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d12c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	3b01      	subs	r3, #1
 8004c02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d123      	bne.n	8004c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d11b      	bne.n	8004c50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d113      	bne.n	8004c50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	3b01      	subs	r3, #1
 8004c36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d06b      	beq.n	8004d28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d062      	beq.n	8004d1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e0ac      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c66:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c72:	f7fd fe9f 	bl	80029b4 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd fe9b 	bl	80029b4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e099      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c98:	4b21      	ldr	r3, [pc, #132]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <HAL_RCC_OscConfig+0x77c>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	4311      	orrs	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cb2:	0212      	lsls	r2, r2, #8
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cba:	0852      	lsrs	r2, r2, #1
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0552      	lsls	r2, r2, #21
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0652      	lsls	r2, r2, #25
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cd2:	06d2      	lsls	r2, r2, #27
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	4912      	ldr	r1, [pc, #72]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a0c      	ldr	r2, [pc, #48]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cf4:	f7fd fe5e 	bl	80029b4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fd fe5a 	bl	80029b4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e058      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <HAL_RCC_OscConfig+0x778>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d1a:	e050      	b.n	8004dbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e04f      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
 8004d20:	40021000 	.word	0x40021000
 8004d24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d28:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d144      	bne.n	8004dbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d34:	4b24      	ldr	r3, [pc, #144]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a23      	ldr	r2, [pc, #140]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d40:	4b21      	ldr	r3, [pc, #132]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a20      	ldr	r2, [pc, #128]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d4c:	f7fd fe32 	bl	80029b4 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fe2e 	bl	80029b4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e02c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d66:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x7ac>
 8004d72:	e024      	b.n	8004dbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d01f      	beq.n	8004dba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fd fe15 	bl	80029b4 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7fd fe11 	bl	80029b4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e00f      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da0:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	4905      	ldr	r1, [pc, #20]	@ (8004dc8 <HAL_RCC_OscConfig+0x820>)
 8004db2:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <HAL_RCC_OscConfig+0x824>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60cb      	str	r3, [r1, #12]
 8004db8:	e001      	b.n	8004dbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	feeefffc 	.word	0xfeeefffc

08004dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0e7      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b75      	ldr	r3, [pc, #468]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d910      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b72      	ldr	r3, [pc, #456]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 0207 	bic.w	r2, r3, #7
 8004dfa:	4970      	ldr	r1, [pc, #448]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b6e      	ldr	r3, [pc, #440]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0cf      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d010      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4b66      	ldr	r3, [pc, #408]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d908      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4960      	ldr	r1, [pc, #384]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d04c      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e56:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d121      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0a6      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6e:	4b54      	ldr	r3, [pc, #336]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d115      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e09a      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e86:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e08e      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e96:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e086      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ea6:	4b46      	ldr	r3, [pc, #280]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4943      	ldr	r1, [pc, #268]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fd fd7c 	bl	80029b4 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec0:	f7fd fd78 	bl	80029b4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e06e      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 020c 	and.w	r2, r3, #12
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1eb      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d208      	bcs.n	8004f16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	492b      	ldr	r1, [pc, #172]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f16:	4b29      	ldr	r3, [pc, #164]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d210      	bcs.n	8004f46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f24:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 0207 	bic.w	r2, r3, #7
 8004f2c:	4923      	ldr	r1, [pc, #140]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f34:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <HAL_RCC_ClockConfig+0x1ec>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e036      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4918      	ldr	r1, [pc, #96]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f70:	4b13      	ldr	r3, [pc, #76]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4910      	ldr	r1, [pc, #64]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f84:	f000 f824 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	490b      	ldr	r1, [pc, #44]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	4a09      	ldr	r2, [pc, #36]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <HAL_RCC_ClockConfig+0x1fc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd f8fd 	bl	80021a8 <HAL_InitTick>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40022000 	.word	0x40022000
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800f940 	.word	0x0800f940
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	20000004 	.word	0x20000004

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	@ 0x24
 8004fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fde:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x34>
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d121      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d11e      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005004:	4b34      	ldr	r3, [pc, #208]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005010:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e005      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005020:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800502c:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d102      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005048:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e004      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d101      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d134      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800505e:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0xa6>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d003      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xac>
 8005074:	e005      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005078:	617b      	str	r3, [r7, #20]
      break;
 800507a:	e005      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800507c:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800507e:	617b      	str	r3, [r7, #20]
      break;
 8005080:	e002      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	617b      	str	r3, [r7, #20]
      break;
 8005086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005088:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	fb03 f202 	mul.w	r2, r3, r2
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ae:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	0e5b      	lsrs	r3, r3, #25
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	3301      	adds	r3, #1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050c8:	69bb      	ldr	r3, [r7, #24]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3724      	adds	r7, #36	@ 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800f958 	.word	0x0800f958
 80050e0:	00f42400 	.word	0x00f42400
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000000 	.word	0x20000000

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005104:	f7ff fff0 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800f950 	.word	0x0800f950

0800512c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005130:	f7ff ffda 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0adb      	lsrs	r3, r3, #11
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4904      	ldr	r1, [pc, #16]	@ (8005154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	0800f950 	.word	0x0800f950

08005158 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	220f      	movs	r2, #15
 8005166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005168:	4b12      	ldr	r3, [pc, #72]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005180:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <HAL_RCC_GetClockConfig+0x60>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40022000 	.word	0x40022000

080051bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051d4:	f7ff f984 	bl	80044e0 <HAL_PWREx_GetVoltageRange>
 80051d8:	6178      	str	r0, [r7, #20]
 80051da:	e014      	b.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	4a24      	ldr	r2, [pc, #144]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e8:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051f4:	f7ff f974 	bl	80044e0 <HAL_PWREx_GetVoltageRange>
 80051f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005204:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520c:	d10b      	bne.n	8005226 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b80      	cmp	r3, #128	@ 0x80
 8005212:	d919      	bls.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2ba0      	cmp	r3, #160	@ 0xa0
 8005218:	d902      	bls.n	8005220 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800521a:	2302      	movs	r3, #2
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e013      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005220:	2301      	movs	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	e010      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b80      	cmp	r3, #128	@ 0x80
 800522a:	d902      	bls.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800522c:	2303      	movs	r3, #3
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	e00a      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d102      	bne.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005238:	2302      	movs	r3, #2
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e004      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b70      	cmp	r3, #112	@ 0x70
 8005242:	d101      	bne.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005244:	2301      	movs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005248:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 0207 	bic.w	r2, r3, #7
 8005250:	4909      	ldr	r1, [pc, #36]	@ (8005278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005258:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	d001      	beq.n	800526a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	40022000 	.word	0x40022000

0800527c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005284:	2300      	movs	r3, #0
 8005286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005288:	2300      	movs	r3, #0
 800528a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005294:	2b00      	cmp	r3, #0
 8005296:	d031      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052a0:	d01a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80052a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052a6:	d814      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052b0:	d10f      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80052b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052be:	e00c      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fe86 	bl	8005fd8 <RCCEx_PLLSAI1_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052d0:	e003      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	74fb      	strb	r3, [r7, #19]
      break;
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80052d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052da:	7cfb      	ldrb	r3, [r7, #19]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10b      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052e0:	4b51      	ldr	r3, [pc, #324]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	494e      	ldr	r1, [pc, #312]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052f6:	e001      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 809e 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530a:	2300      	movs	r3, #0
 800530c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800530e:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005324:	4b40      	ldr	r3, [pc, #256]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	4a3f      	ldr	r2, [pc, #252]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800532a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533c:	2301      	movs	r3, #1
 800533e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b3a      	ldr	r3, [pc, #232]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a39      	ldr	r2, [pc, #228]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534c:	f7fd fb32 	bl	80029b4 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005352:	e009      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005354:	f7fd fb2e 	bl	80029b4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d902      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	74fb      	strb	r3, [r7, #19]
        break;
 8005366:	e005      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005368:	4b30      	ldr	r3, [pc, #192]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ef      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d15a      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800537a:	4b2b      	ldr	r3, [pc, #172]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01e      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	429a      	cmp	r2, r3
 8005394:	d019      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005396:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a2:	4b21      	ldr	r3, [pc, #132]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c2:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d016      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fd faee 	bl	80029b4 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	e00b      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053dc:	f7fd faea 	bl	80029b4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d902      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	74fb      	strb	r3, [r7, #19]
            break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ec      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	4904      	ldr	r1, [pc, #16]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800541e:	e009      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	74bb      	strb	r3, [r7, #18]
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005434:	7c7b      	ldrb	r3, [r7, #17]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543a:	4b9b      	ldr	r3, [pc, #620]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	4a9a      	ldr	r2, [pc, #616]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005452:	4b95      	ldr	r3, [pc, #596]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	f023 0203 	bic.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4991      	ldr	r1, [pc, #580]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005474:	4b8c      	ldr	r3, [pc, #560]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 020c 	bic.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	4989      	ldr	r1, [pc, #548]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005496:	4b84      	ldr	r3, [pc, #528]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	4980      	ldr	r1, [pc, #512]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b8:	4b7b      	ldr	r3, [pc, #492]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	4978      	ldr	r1, [pc, #480]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054da:	4b73      	ldr	r3, [pc, #460]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	496f      	ldr	r1, [pc, #444]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	4967      	ldr	r1, [pc, #412]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551e:	4b62      	ldr	r3, [pc, #392]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	495e      	ldr	r1, [pc, #376]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005540:	4b59      	ldr	r3, [pc, #356]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	4956      	ldr	r1, [pc, #344]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005562:	4b51      	ldr	r3, [pc, #324]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	494d      	ldr	r1, [pc, #308]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d028      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005584:	4b48      	ldr	r3, [pc, #288]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005592:	4945      	ldr	r1, [pc, #276]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b40      	ldr	r3, [pc, #256]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a3f      	ldr	r2, [pc, #252]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]
 80055b0:	e011      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fd08 	bl	8005fd8 <RCCEx_PLLSAI1_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d028      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e2:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f0:	492d      	ldr	r1, [pc, #180]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005600:	d106      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005602:	4b29      	ldr	r3, [pc, #164]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4a28      	ldr	r2, [pc, #160]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560c:	60d3      	str	r3, [r2, #12]
 800560e:	e011      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005618:	d10c      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fcd9 	bl	8005fd8 <RCCEx_PLLSAI1_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01c      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564e:	4916      	ldr	r1, [pc, #88]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800565a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800565e:	d10c      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	2102      	movs	r1, #2
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fcb6 	bl	8005fd8 <RCCEx_PLLSAI1_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005676:	7cfb      	ldrb	r3, [r7, #19]
 8005678:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005686:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005694:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800569c:	7cbb      	ldrb	r3, [r7, #18]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056be:	d13e      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80056c0:	4bb0      	ldr	r3, [pc, #704]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ca:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d2:	d028      	beq.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056da:	f200 846b 	bhi.w	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e4:	d005      	beq.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ec:	d00e      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80056ee:	f000 bc61 	b.w	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056f2:	4ba4      	ldr	r3, [pc, #656]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f040 845b 	bne.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        frequency = LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005706:	61fb      	str	r3, [r7, #28]
      break;
 8005708:	f000 bc56 	b.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800570c:	4b9d      	ldr	r3, [pc, #628]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800570e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	f040 8450 	bne.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          frequency = LSI_VALUE;
 800571c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005720:	61fb      	str	r3, [r7, #28]
      break;
 8005722:	f000 bc4b 	b.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005726:	4b97      	ldr	r3, [pc, #604]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005732:	f040 8445 	bne.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        frequency = HSE_VALUE / 32U;
 8005736:	4b94      	ldr	r3, [pc, #592]	@ (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005738:	61fb      	str	r3, [r7, #28]
      break;
 800573a:	f000 bc41 	b.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800573e:	4b91      	ldr	r3, [pc, #580]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d036      	beq.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d840      	bhi.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d003      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d020      	beq.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005760:	e039      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005762:	4b88      	ldr	r3, [pc, #544]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d116      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800576e:	4b85      	ldr	r3, [pc, #532]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800577a:	4b82      	ldr	r3, [pc, #520]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	e005      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005786:	4b7f      	ldr	r3, [pc, #508]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	4a7e      	ldr	r2, [pc, #504]	@ (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005798:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800579a:	e01f      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
      break;
 80057a0:	e01c      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057a2:	4b78      	ldr	r3, [pc, #480]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ae:	d102      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80057b0:	4b77      	ldr	r3, [pc, #476]	@ (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80057b2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80057b4:	e012      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
      break;
 80057ba:	e00f      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057bc:	4b71      	ldr	r3, [pc, #452]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80057ca:	4b72      	ldr	r3, [pc, #456]	@ (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80057cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80057ce:	e005      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
      break;
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
      break;
 80057da:	bf00      	nop
    }

    switch(PeriphClk)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057e2:	f000 80ad 	beq.w	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057ec:	f200 83ea 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057f6:	f000 80a3 	beq.w	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005800:	f200 83e0 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580a:	f000 83b6 	beq.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005814:	f200 83d6 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800581e:	f000 824e 	beq.w	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005828:	f200 83cc 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005832:	d07e      	beq.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800583a:	f200 83c3 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005844:	f000 834f 	beq.w	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800584e:	f200 83b9 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005858:	f000 82f7 	beq.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005862:	f200 83af 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586c:	f000 82c1 	beq.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005876:	f200 83a5 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b80      	cmp	r3, #128	@ 0x80
 800587e:	f000 828c 	beq.w	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b80      	cmp	r3, #128	@ 0x80
 8005886:	f200 839d 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b20      	cmp	r3, #32
 800588e:	d84b      	bhi.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8396 	beq.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3b01      	subs	r3, #1
 800589c:	2b1f      	cmp	r3, #31
 800589e:	f200 8391 	bhi.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80058a2:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	08005aaf 	.word	0x08005aaf
 80058ac:	08005b1f 	.word	0x08005b1f
 80058b0:	08005fc5 	.word	0x08005fc5
 80058b4:	08005bb3 	.word	0x08005bb3
 80058b8:	08005fc5 	.word	0x08005fc5
 80058bc:	08005fc5 	.word	0x08005fc5
 80058c0:	08005fc5 	.word	0x08005fc5
 80058c4:	08005fc5 	.word	0x08005fc5
 80058c8:	08005fc5 	.word	0x08005fc5
 80058cc:	08005fc5 	.word	0x08005fc5
 80058d0:	08005fc5 	.word	0x08005fc5
 80058d4:	08005fc5 	.word	0x08005fc5
 80058d8:	08005fc5 	.word	0x08005fc5
 80058dc:	08005fc5 	.word	0x08005fc5
 80058e0:	08005fc5 	.word	0x08005fc5
 80058e4:	08005fc5 	.word	0x08005fc5
 80058e8:	08005fc5 	.word	0x08005fc5
 80058ec:	08005fc5 	.word	0x08005fc5
 80058f0:	08005fc5 	.word	0x08005fc5
 80058f4:	08005fc5 	.word	0x08005fc5
 80058f8:	08005fc5 	.word	0x08005fc5
 80058fc:	08005fc5 	.word	0x08005fc5
 8005900:	08005fc5 	.word	0x08005fc5
 8005904:	08005fc5 	.word	0x08005fc5
 8005908:	08005fc5 	.word	0x08005fc5
 800590c:	08005fc5 	.word	0x08005fc5
 8005910:	08005fc5 	.word	0x08005fc5
 8005914:	08005fc5 	.word	0x08005fc5
 8005918:	08005fc5 	.word	0x08005fc5
 800591c:	08005fc5 	.word	0x08005fc5
 8005920:	08005fc5 	.word	0x08005fc5
 8005924:	08005c3d 	.word	0x08005c3d
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	f000 8209 	beq.w	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005930:	e348      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005932:	69b9      	ldr	r1, [r7, #24]
 8005934:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005938:	f000 fc40 	bl	80061bc <RCCEx_GetSAIxPeriphCLKFreq>
 800593c:	61f8      	str	r0, [r7, #28]
      break;
 800593e:	e342      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005952:	d021      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800595a:	f200 809e 	bhi.w	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005964:	d035      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596c:	f200 8095 	bhi.w	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8087 	beq.w	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800597e:	d055      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          break;
 8005980:	e08b      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	0003d090 	.word	0x0003d090
 800598c:	0800f958 	.word	0x0800f958
 8005990:	00f42400 	.word	0x00f42400
 8005994:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005998:	4ba4      	ldr	r3, [pc, #656]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d17c      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80059a4:	4ba1      	ldr	r3, [pc, #644]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80059b0:	4b9e      	ldr	r3, [pc, #632]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	e005      	b.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80059bc:	4b9b      	ldr	r3, [pc, #620]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	4a99      	ldr	r2, [pc, #612]	@ (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ce:	61fb      	str	r3, [r7, #28]
          break;
 80059d0:	e065      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059d2:	4b96      	ldr	r3, [pc, #600]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059de:	d160      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059e0:	4b92      	ldr	r3, [pc, #584]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ec:	d159      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059ee:	4b8f      	ldr	r3, [pc, #572]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	fb03 f202 	mul.w	r2, r3, r2
 8005a02:	4b8a      	ldr	r3, [pc, #552]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005a14:	4b85      	ldr	r3, [pc, #532]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0d5b      	lsrs	r3, r3, #21
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61fb      	str	r3, [r7, #28]
          break;
 8005a2a:	e03a      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a2c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a38:	d135      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a46:	d12e      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a48:	4b78      	ldr	r3, [pc, #480]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a52:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	fb03 f202 	mul.w	r2, r3, r2
 8005a5c:	4b73      	ldr	r3, [pc, #460]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	3301      	adds	r3, #1
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	0d5b      	lsrs	r3, r3, #21
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	61fb      	str	r3, [r7, #28]
          break;
 8005a84:	e00f      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a86:	4b69      	ldr	r3, [pc, #420]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d10a      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            frequency = HSI48_VALUE;
 8005a94:	4b67      	ldr	r3, [pc, #412]	@ (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005a96:	61fb      	str	r3, [r7, #28]
          break;
 8005a98:	e007      	b.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
          break;
 8005a9a:	bf00      	nop
 8005a9c:	e293      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005a9e:	bf00      	nop
 8005aa0:	e291      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005aa2:	bf00      	nop
 8005aa4:	e28f      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005aa6:	bf00      	nop
 8005aa8:	e28d      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005aaa:	bf00      	nop
        break;
 8005aac:	e28b      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005aae:	4b5f      	ldr	r3, [pc, #380]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d828      	bhi.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ae1 	.word	0x08005ae1
 8005ad0:	08005ae9 	.word	0x08005ae9
 8005ad4:	08005afd 	.word	0x08005afd
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7ff fb28 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8005adc:	61f8      	str	r0, [r7, #28]
          break;
 8005ade:	e01d      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ae0:	f7ff fa76 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005ae4:	61f8      	str	r0, [r7, #28]
          break;
 8005ae6:	e019      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ae8:	4b50      	ldr	r3, [pc, #320]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af4:	d10f      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 8005af6:	4b50      	ldr	r3, [pc, #320]	@ (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005af8:	61fb      	str	r3, [r7, #28]
          break;
 8005afa:	e00c      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005afc:	4b4b      	ldr	r3, [pc, #300]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d107      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b0e:	61fb      	str	r3, [r7, #28]
          break;
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 8005b12:	bf00      	nop
 8005b14:	e257      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005b16:	bf00      	nop
 8005b18:	e255      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005b1a:	bf00      	nop
        break;
 8005b1c:	e253      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b1e:	4b43      	ldr	r3, [pc, #268]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d83a      	bhi.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005b30:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005ba7 	.word	0x08005ba7
 8005b40:	08005ba7 	.word	0x08005ba7
 8005b44:	08005ba7 	.word	0x08005ba7
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005ba7 	.word	0x08005ba7
 8005b50:	08005ba7 	.word	0x08005ba7
 8005b54:	08005ba7 	.word	0x08005ba7
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005ba7 	.word	0x08005ba7
 8005b60:	08005ba7 	.word	0x08005ba7
 8005b64:	08005ba7 	.word	0x08005ba7
 8005b68:	08005b91 	.word	0x08005b91
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b6c:	f7ff fac8 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005b70:	61f8      	str	r0, [r7, #28]
          break;
 8005b72:	e01d      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b74:	f7ff fa2c 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005b78:	61f8      	str	r0, [r7, #28]
          break;
 8005b7a:	e019      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b88:	d10f      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = HSI_VALUE;
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b8c:	61fb      	str	r3, [r7, #28]
          break;
 8005b8e:	e00c      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b90:	4b26      	ldr	r3, [pc, #152]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ba2:	61fb      	str	r3, [r7, #28]
          break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          break;
 8005ba6:	bf00      	nop
 8005ba8:	e20d      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005baa:	bf00      	nop
 8005bac:	e20b      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005bae:	bf00      	nop
        break;
 8005bb0:	e209      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b30      	cmp	r3, #48	@ 0x30
 8005bc2:	d021      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b30      	cmp	r3, #48	@ 0x30
 8005bc8:	d829      	bhi.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d011      	beq.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d823      	bhi.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d004      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 8005be2:	e01c      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7ff fa8c 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005be8:	61f8      	str	r0, [r7, #28]
          break;
 8005bea:	e01d      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bec:	f7ff f9f0 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005bf0:	61f8      	str	r0, [r7, #28]
          break;
 8005bf2:	e019      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c00:	d10f      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = HSI_VALUE;
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c04:	61fb      	str	r3, [r7, #28]
          break;
 8005c06:	e00c      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c08:	4b08      	ldr	r3, [pc, #32]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d107      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
            frequency = LSE_VALUE;
 8005c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1a:	61fb      	str	r3, [r7, #28]
          break;
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
          break;
 8005c1e:	bf00      	nop
 8005c20:	e1d1      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005c22:	bf00      	nop
 8005c24:	e1cf      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005c26:	bf00      	nop
        break;
 8005c28:	e1cd      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	0800f958 	.word	0x0800f958
 8005c34:	02dc6c00 	.word	0x02dc6c00
 8005c38:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005c3c:	4b99      	ldr	r3, [pc, #612]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c4e:	d025      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c56:	d82c      	bhi.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c5e:	d013      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c66:	d824      	bhi.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          break;
 8005c76:	e01c      	b.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7ff fa42 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
          break;
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c80:	f7ff f9a6 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005c84:	61f8      	str	r0, [r7, #28]
          break;
 8005c86:	e019      	b.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c88:	4b86      	ldr	r3, [pc, #536]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8005c96:	4b84      	ldr	r3, [pc, #528]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005c98:	61fb      	str	r3, [r7, #28]
          break;
 8005c9a:	e00c      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c9c:	4b81      	ldr	r3, [pc, #516]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d107      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cae:	61fb      	str	r3, [r7, #28]
          break;
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 8005cb2:	bf00      	nop
 8005cb4:	e187      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005cb6:	bf00      	nop
 8005cb8:	e185      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005cba:	bf00      	nop
        break;
 8005cbc:	e183      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005cbe:	4b79      	ldr	r3, [pc, #484]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cd0:	d007      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cd8:	d12f      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cda:	f7ff f979 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005cde:	61f8      	str	r0, [r7, #28]
          break;
 8005ce0:	e02e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005ce2:	4b70      	ldr	r3, [pc, #448]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cee:	d126      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d020      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005cfc:	4b69      	ldr	r3, [pc, #420]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d06:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	fb03 f202 	mul.w	r2, r3, r2
 8005d10:	4b64      	ldr	r3, [pc, #400]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005d22:	4b60      	ldr	r3, [pc, #384]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	0e5b      	lsrs	r3, r3, #25
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	61fb      	str	r3, [r7, #28]
          break;
 8005d38:	e001      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          break;
 8005d3a:	bf00      	nop
 8005d3c:	e143      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005d3e:	bf00      	nop
        break;
 8005d40:	e141      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d42:	4b58      	ldr	r3, [pc, #352]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d48:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d54:	d013      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d5c:	d819      	bhi.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6a:	d004      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          break;
 8005d6c:	e011      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d6e:	f7ff f9c7 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005d72:	61f8      	str	r0, [r7, #28]
          break;
 8005d74:	e010      	b.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d76:	f7ff f92b 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005d7a:	61f8      	str	r0, [r7, #28]
          break;
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d7e:	4b49      	ldr	r3, [pc, #292]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8a:	d104      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            frequency = HSI_VALUE;
 8005d8c:	4b46      	ldr	r3, [pc, #280]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005d8e:	61fb      	str	r3, [r7, #28]
          break;
 8005d90:	e001      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          break;
 8005d92:	bf00      	nop
 8005d94:	e117      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005d96:	bf00      	nop
        break;
 8005d98:	e115      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d9a:	4b42      	ldr	r3, [pc, #264]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dac:	d013      	beq.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db4:	d819      	bhi.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc2:	d004      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8005dc4:	e011      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dc6:	f7ff f99b 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005dca:	61f8      	str	r0, [r7, #28]
          break;
 8005dcc:	e010      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dce:	f7ff f8ff 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005dd2:	61f8      	str	r0, [r7, #28]
          break;
 8005dd4:	e00c      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dd6:	4b33      	ldr	r3, [pc, #204]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de2:	d104      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            frequency = HSI_VALUE;
 8005de4:	4b30      	ldr	r3, [pc, #192]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005de6:	61fb      	str	r3, [r7, #28]
          break;
 8005de8:	e001      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          break;
 8005dea:	bf00      	nop
 8005dec:	e0eb      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005dee:	bf00      	nop
        break;
 8005df0:	e0e9      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005df2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e04:	d013      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e0c:	d819      	bhi.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8005e1c:	e011      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e1e:	f7ff f96f 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005e22:	61f8      	str	r0, [r7, #28]
          break;
 8005e24:	e010      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e26:	f7ff f8d3 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
          break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3a:	d104      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005e3e:	61fb      	str	r3, [r7, #28]
          break;
 8005e40:	e001      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          break;
 8005e42:	bf00      	nop
 8005e44:	e0bf      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005e46:	bf00      	nop
        break;
 8005e48:	e0bd      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e4a:	4b16      	ldr	r3, [pc, #88]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e5c:	d030      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e64:	d837      	bhi.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e6c:	d01e      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e74:	d82f      	bhi.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e82:	d004      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          break;
 8005e84:	e027      	b.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7ff f93b 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005e8a:	61f8      	str	r0, [r7, #28]
          break;
 8005e8c:	e02a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d11e      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
              frequency = LSI_VALUE;
 8005e9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ea0:	61fb      	str	r3, [r7, #28]
          break;
 8005ea2:	e01a      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b48      	ldr	r3, [pc, #288]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb8:	d111      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = HSI_VALUE;
 8005eba:	4b46      	ldr	r3, [pc, #280]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8005ebc:	61fb      	str	r3, [r7, #28]
          break;
 8005ebe:	e00e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ec0:	4b43      	ldr	r3, [pc, #268]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
            frequency = LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed2:	61fb      	str	r3, [r7, #28]
          break;
 8005ed4:	e005      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 8005ed6:	bf00      	nop
 8005ed8:	e075      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005eda:	bf00      	nop
 8005edc:	e073      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005ede:	bf00      	nop
 8005ee0:	e071      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005ee2:	bf00      	nop
        break;
 8005ee4:	e06f      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ef8:	d02c      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f00:	d833      	bhi.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f08:	d01a      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f10:	d82b      	bhi.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f1e:	d004      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          break;
 8005f20:	e023      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7ff f8ed 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005f26:	61f8      	str	r0, [r7, #28]
          break;
 8005f28:	e026      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f2a:	4b29      	ldr	r3, [pc, #164]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d11a      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
              frequency = LSI_VALUE;
 8005f38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f3c:	61fb      	str	r3, [r7, #28]
          break;
 8005f3e:	e016      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f40:	4b23      	ldr	r3, [pc, #140]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f4c:	d111      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = HSI_VALUE;
 8005f4e:	4b21      	ldr	r3, [pc, #132]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8005f50:	61fb      	str	r3, [r7, #28]
          break;
 8005f52:	e00e      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f54:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
            frequency = LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f66:	61fb      	str	r3, [r7, #28]
          break;
 8005f68:	e005      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8005f6a:	bf00      	nop
 8005f6c:	e02b      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005f6e:	bf00      	nop
 8005f70:	e029      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005f72:	bf00      	nop
 8005f74:	e027      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8005f76:	bf00      	nop
        break;
 8005f78:	e025      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005f7a:	4b15      	ldr	r3, [pc, #84]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d004      	beq.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 8005f94:	e00d      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f96:	f7ff f8b3 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8005f9a:	61f8      	str	r0, [r7, #28]
          break;
 8005f9c:	e009      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
            frequency = HSI_VALUE;
 8005fac:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8005fae:	61fb      	str	r3, [r7, #28]
          break;
 8005fb0:	bf00      	nop
        break;
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8005fc4:	bf00      	nop
    }
  }

  return(frequency);
 8005fc6:	69fb      	ldr	r3, [r7, #28]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	00f42400 	.word	0x00f42400

08005fd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fe6:	4b74      	ldr	r3, [pc, #464]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ff2:	4b71      	ldr	r3, [pc, #452]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0203 	and.w	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10d      	bne.n	800601e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
       ||
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800600a:	4b6b      	ldr	r3, [pc, #428]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
       ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d047      	beq.n	80060ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	e044      	b.n	80060ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d018      	beq.n	800605e <RCCEx_PLLSAI1_Config+0x86>
 800602c:	2b03      	cmp	r3, #3
 800602e:	d825      	bhi.n	800607c <RCCEx_PLLSAI1_Config+0xa4>
 8006030:	2b01      	cmp	r3, #1
 8006032:	d002      	beq.n	800603a <RCCEx_PLLSAI1_Config+0x62>
 8006034:	2b02      	cmp	r3, #2
 8006036:	d009      	beq.n	800604c <RCCEx_PLLSAI1_Config+0x74>
 8006038:	e020      	b.n	800607c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800603a:	4b5f      	ldr	r3, [pc, #380]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11d      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800604a:	e01a      	b.n	8006082 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800604c:	4b5a      	ldr	r3, [pc, #360]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	2b00      	cmp	r3, #0
 8006056:	d116      	bne.n	8006086 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800605c:	e013      	b.n	8006086 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800605e:	4b56      	ldr	r3, [pc, #344]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800606a:	4b53      	ldr	r3, [pc, #332]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800607a:	e006      	b.n	800608a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	e004      	b.n	800608c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006082:	bf00      	nop
 8006084:	e002      	b.n	800608c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800608a:	bf00      	nop
    }

    if(status == HAL_OK)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10d      	bne.n	80060ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006092:	4b49      	ldr	r3, [pc, #292]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	430b      	orrs	r3, r1
 80060a8:	4943      	ldr	r1, [pc, #268]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d17c      	bne.n	80061ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060b4:	4b40      	ldr	r3, [pc, #256]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a3f      	ldr	r2, [pc, #252]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c0:	f7fc fc78 	bl	80029b4 <HAL_GetTick>
 80060c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060c6:	e009      	b.n	80060dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060c8:	f7fc fc74 	bl	80029b4 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d902      	bls.n	80060dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	73fb      	strb	r3, [r7, #15]
        break;
 80060da:	e005      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060dc:	4b36      	ldr	r3, [pc, #216]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ef      	bne.n	80060c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d15f      	bne.n	80061ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d110      	bne.n	8006116 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060f4:	4b30      	ldr	r3, [pc, #192]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80060fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6892      	ldr	r2, [r2, #8]
 8006104:	0211      	lsls	r1, r2, #8
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68d2      	ldr	r2, [r2, #12]
 800610a:	06d2      	lsls	r2, r2, #27
 800610c:	430a      	orrs	r2, r1
 800610e:	492a      	ldr	r1, [pc, #168]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006110:	4313      	orrs	r3, r2
 8006112:	610b      	str	r3, [r1, #16]
 8006114:	e027      	b.n	8006166 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d112      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800611c:	4b26      	ldr	r3, [pc, #152]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006124:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6892      	ldr	r2, [r2, #8]
 800612c:	0211      	lsls	r1, r2, #8
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6912      	ldr	r2, [r2, #16]
 8006132:	0852      	lsrs	r2, r2, #1
 8006134:	3a01      	subs	r2, #1
 8006136:	0552      	lsls	r2, r2, #21
 8006138:	430a      	orrs	r2, r1
 800613a:	491f      	ldr	r1, [pc, #124]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800613c:	4313      	orrs	r3, r2
 800613e:	610b      	str	r3, [r1, #16]
 8006140:	e011      	b.n	8006166 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006142:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800614a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6892      	ldr	r2, [r2, #8]
 8006152:	0211      	lsls	r1, r2, #8
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6952      	ldr	r2, [r2, #20]
 8006158:	0852      	lsrs	r2, r2, #1
 800615a:	3a01      	subs	r2, #1
 800615c:	0652      	lsls	r2, r2, #25
 800615e:	430a      	orrs	r2, r1
 8006160:	4915      	ldr	r1, [pc, #84]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006162:	4313      	orrs	r3, r2
 8006164:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006166:	4b14      	ldr	r3, [pc, #80]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800616c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006170:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006172:	f7fc fc1f 	bl	80029b4 <HAL_GetTick>
 8006176:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006178:	e009      	b.n	800618e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800617a:	f7fc fc1b 	bl	80029b4 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d902      	bls.n	800618e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	73fb      	strb	r3, [r7, #15]
          break;
 800618c:	e005      	b.n	800619a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ef      	beq.n	800617a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	4903      	ldr	r1, [pc, #12]	@ (80061b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021000 	.word	0x40021000

080061bc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	@ 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061d8:	d10b      	bne.n	80061f2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061da:	4b53      	ldr	r3, [pc, #332]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80061e4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061ec:	d101      	bne.n	80061f2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061ee:	4b4f      	ldr	r3, [pc, #316]	@ (800632c <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 80061f0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8090 	bne.w	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006204:	d143      	bne.n	800628e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8006206:	4b48      	ldr	r3, [pc, #288]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006212:	d132      	bne.n	800627a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8006214:	4b44      	ldr	r3, [pc, #272]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02c      	beq.n	800627a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006220:	4b41      	ldr	r3, [pc, #260]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	3301      	adds	r3, #1
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006234:	4b3c      	ldr	r3, [pc, #240]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	0a1b      	lsrs	r3, r3, #8
 800623a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800623e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006240:	4b39      	ldr	r3, [pc, #228]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	0edb      	lsrs	r3, r3, #27
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006252:	4b35      	ldr	r3, [pc, #212]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 800625e:	2311      	movs	r3, #17
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e001      	b.n	8006268 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8006264:	2307      	movs	r3, #7
 8006266:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	fb03 f202 	mul.w	r2, r3, r2
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e04f      	b.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800627a:	4b2b      	ldr	r3, [pc, #172]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006286:	d148      	bne.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8006288:	4b29      	ldr	r3, [pc, #164]	@ (8006330 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e045      	b.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d142      	bne.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006294:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800629c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062a0:	d132      	bne.n	8006308 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 80062a2:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02c      	beq.n	8006308 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	3301      	adds	r3, #1
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062c2:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062cc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80062ce:	4b16      	ldr	r3, [pc, #88]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	0edb      	lsrs	r3, r3, #27
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80062e0:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 80062ec:	2311      	movs	r3, #17
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e001      	b.n	80062f6 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 80062f2:	2307      	movs	r3, #7
 80062f4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	fb03 f202 	mul.w	r2, r3, r2
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	e008      	b.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006308:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006314:	d101      	bne.n	800631a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8006316:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8006318:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800631a:	69fb      	ldr	r3, [r7, #28]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3724      	adds	r7, #36	@ 0x24
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	40021000 	.word	0x40021000
 800632c:	001fff68 	.word	0x001fff68
 8006330:	00f42400 	.word	0x00f42400

08006334 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d079      	beq.n	800643a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb fc6c 	bl	8001c38 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d058      	beq.n	8006428 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	22ca      	movs	r2, #202	@ 0xca
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2253      	movs	r2, #83	@ 0x53
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fad2 	bl	8006930 <RTC_EnterInitMode>
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d127      	bne.n	80063e6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80063a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68d2      	ldr	r2, [r2, #12]
 80063d0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6919      	ldr	r1, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	041a      	lsls	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fad6 	bl	8006998 <RTC_ExitInitMode>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d113      	bne.n	800641e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	22ff      	movs	r2, #255	@ 0xff
 8006424:	625a      	str	r2, [r3, #36]	@ 0x24
 8006426:	e001      	b.n	800642c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_RTC_SetTime+0x1a>
 800645a:	2302      	movs	r3, #2
 800645c:	e08b      	b.n	8006576 <HAL_RTC_SetTime+0x132>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	22ca      	movs	r2, #202	@ 0xca
 8006474:	625a      	str	r2, [r3, #36]	@ 0x24
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2253      	movs	r2, #83	@ 0x53
 800647c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa56 	bl	8006930 <RTC_EnterInitMode>
 8006484:	4603      	mov	r3, r0
 8006486:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d163      	bne.n	8006556 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d126      	bne.n	80064e2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fab1 	bl	8006a14 <RTC_ByteToBcd2>
 80064b2:	4603      	mov	r3, r0
 80064b4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 faaa 	bl	8006a14 <RTC_ByteToBcd2>
 80064c0:	4603      	mov	r3, r0
 80064c2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80064c4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 faa2 	bl	8006a14 <RTC_ByteToBcd2>
 80064d0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064d2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	78db      	ldrb	r3, [r3, #3]
 80064da:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e018      	b.n	8006514 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006502:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006508:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	78db      	ldrb	r3, [r3, #3]
 800650e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800651e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006522:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006532:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6899      	ldr	r1, [r3, #8]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	431a      	orrs	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fa23 	bl	8006998 <RTC_ExitInitMode>
 8006552:	4603      	mov	r3, r0
 8006554:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	22ff      	movs	r2, #255	@ 0xff
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
}
 8006576:	4618      	mov	r0, r3
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd90      	pop	{r4, r7, pc}

0800657e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800657e:	b590      	push	{r4, r7, lr}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_RTC_SetDate+0x1a>
 8006594:	2302      	movs	r3, #2
 8006596:	e075      	b.n	8006684 <HAL_RTC_SetDate+0x106>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10e      	bne.n	80065cc <HAL_RTC_SetDate+0x4e>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d008      	beq.n	80065cc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	f023 0310 	bic.w	r3, r3, #16
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	330a      	adds	r3, #10
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11c      	bne.n	800660c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fa1c 	bl	8006a14 <RTC_ByteToBcd2>
 80065dc:	4603      	mov	r3, r0
 80065de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fa15 	bl	8006a14 <RTC_ByteToBcd2>
 80065ea:	4603      	mov	r3, r0
 80065ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80065ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	789b      	ldrb	r3, [r3, #2]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fa0d 	bl	8006a14 <RTC_ByteToBcd2>
 80065fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e00e      	b.n	800662a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	78db      	ldrb	r3, [r3, #3]
 8006610:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006618:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800661e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	22ca      	movs	r2, #202	@ 0xca
 8006630:	625a      	str	r2, [r3, #36]	@ 0x24
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2253      	movs	r2, #83	@ 0x53
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f978 	bl	8006930 <RTC_EnterInitMode>
 8006640:	4603      	mov	r3, r0
 8006642:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10c      	bne.n	8006664 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006654:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006658:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f99c 	bl	8006998 <RTC_ExitInitMode>
 8006660:	4603      	mov	r3, r0
 8006662:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	22ff      	movs	r2, #255	@ 0xff
 800666a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006682:	7cfb      	ldrb	r3, [r7, #19]
}
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd90      	pop	{r4, r7, pc}

0800668c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b089      	sub	sp, #36	@ 0x24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_RTC_SetAlarm+0x1a>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e11b      	b.n	80068de <HAL_RTC_SetAlarm+0x252>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d137      	bne.n	800672c <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2200      	movs	r2, #0
 80066ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f99d 	bl	8006a14 <RTC_ByteToBcd2>
 80066da:	4603      	mov	r3, r0
 80066dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f996 	bl	8006a14 <RTC_ByteToBcd2>
 80066e8:	4603      	mov	r3, r0
 80066ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	789b      	ldrb	r3, [r3, #2]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f98e 	bl	8006a14 <RTC_ByteToBcd2>
 80066f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	78db      	ldrb	r3, [r3, #3]
 8006702:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006704:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f980 	bl	8006a14 <RTC_ByteToBcd2>
 8006714:	4603      	mov	r3, r0
 8006716:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006718:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006720:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006726:	4313      	orrs	r3, r2
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e023      	b.n	8006774 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800674c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006752:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800675a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006762:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006764:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800676a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006770:	4313      	orrs	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	22ca      	movs	r2, #202	@ 0xca
 8006786:	625a      	str	r2, [r3, #36]	@ 0x24
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2253      	movs	r2, #83	@ 0x53
 800678e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006798:	d14a      	bne.n	8006830 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067a8:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80067ba:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067ca:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80067cc:	f7fc f8f2 	bl	80029b4 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80067d2:	e015      	b.n	8006800 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d4:	f7fc f8ee 	bl	80029b4 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e2:	d90d      	bls.n	8006800 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2203      	movs	r2, #3
 80067f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e06e      	b.n	80068de <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0e2      	beq.n	80067d4 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800682c:	609a      	str	r2, [r3, #8]
 800682e:	e049      	b.n	80068c4 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800683e:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006850:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006860:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006862:	f7fc f8a7 	bl	80029b4 <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006868:	e015      	b.n	8006896 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800686a:	f7fc f8a3 	bl	80029b4 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006878:	d90d      	bls.n	8006896 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	22ff      	movs	r2, #255	@ 0xff
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2203      	movs	r2, #3
 8006886:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e023      	b.n	80068de <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0e2      	beq.n	800686a <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	22ff      	movs	r2, #255	@ 0xff
 80068ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3724      	adds	r7, #36	@ 0x24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd90      	pop	{r4, r7, pc}
	...

080068e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0d      	ldr	r2, [pc, #52]	@ (800692c <HAL_RTC_WaitForSynchro+0x44>)
 80068f6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80068f8:	f7fc f85c 	bl	80029b4 <HAL_GetTick>
 80068fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068fe:	e009      	b.n	8006914 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006900:	f7fc f858 	bl	80029b4 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800690e:	d901      	bls.n	8006914 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e007      	b.n	8006924 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0ee      	beq.n	8006900 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	0003ff5f 	.word	0x0003ff5f

08006930 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d120      	bne.n	800698c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f04f 32ff 	mov.w	r2, #4294967295
 8006952:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006954:	f7fc f82e 	bl	80029b4 <HAL_GetTick>
 8006958:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800695a:	e00d      	b.n	8006978 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800695c:	f7fc f82a 	bl	80029b4 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800696a:	d905      	bls.n	8006978 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2203      	movs	r2, #3
 8006974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <RTC_EnterInitMode+0x5c>
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d1e7      	bne.n	800695c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80069a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a19      	ldr	r2, [pc, #100]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069b0:	4b17      	ldr	r3, [pc, #92]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10c      	bne.n	80069d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff93 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01e      	beq.n	8006a06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	e017      	b.n	8006a06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	4a0d      	ldr	r2, [pc, #52]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ff80 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2203      	movs	r2, #3
 80069f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069fa:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4a04      	ldr	r2, [pc, #16]	@ (8006a10 <RTC_ExitInitMode+0x78>)
 8006a00:	f043 0320 	orr.w	r3, r3, #32
 8006a04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40002800 	.word	0x40002800

08006a14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006a26:	e005      	b.n	8006a34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	3b0a      	subs	r3, #10
 8006a32:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d8f6      	bhi.n	8006a28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b2db      	uxtb	r3, r3
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e022      	b.n	8006aac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fb f90d 	bl	8001c98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2203      	movs	r2, #3
 8006a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f814 	bl	8006ab4 <HAL_SD_InitCard>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e00a      	b.n	8006aac <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ab4:	b5b0      	push	{r4, r5, r7, lr}
 8006ab6:	b08e      	sub	sp, #56	@ 0x38
 8006ab8:	af04      	add	r7, sp, #16
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006ad0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006ad4:	f7fe fdea 	bl	80056ac <HAL_RCCEx_GetPeriphCLKFreq>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006aee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e07b      	b.n	8006bec <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf4 <HAL_SD_InitCard+0x140>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	3b02      	subs	r3, #2
 8006b02:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681d      	ldr	r5, [r3, #0]
 8006b08:	466c      	mov	r4, sp
 8006b0a:	f107 0314 	add.w	r3, r7, #20
 8006b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f004 f837 	bl	800ab90 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b30:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f004 f875 	bl	800ac26 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b4a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006b58:	4a27      	ldr	r2, [pc, #156]	@ (8006bf8 <HAL_SD_InitCard+0x144>)
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	3301      	adds	r3, #1
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fb ff32 	bl	80029cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ffdf 	bl	8007b2c <SD_PowerON>
 8006b6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e02e      	b.n	8006bec <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fefe 	bl	8007990 <SD_InitCard>
 8006b94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e01b      	b.n	8006bec <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f004 f8c5 	bl	800ad4c <SDMMC_CmdBlockLength>
 8006bc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00f      	beq.n	8006bea <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a0b      	ldr	r2, [pc, #44]	@ (8006bfc <HAL_SD_InitCard+0x148>)
 8006bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3728      	adds	r7, #40	@ 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf4:	014f8b59 	.word	0x014f8b59
 8006bf8:	00012110 	.word	0x00012110
 8006bfc:	004005ff 	.word	0x004005ff

08006c00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	@ 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0a9      	b.n	8006d7c <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	f040 80a2 	bne.w	8006d7a <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d907      	bls.n	8006c5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e090      	b.n	8006d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	4a45      	ldr	r2, [pc, #276]	@ (8006d84 <HAL_SD_ReadBlocks_DMA+0x184>)
 8006c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	4a44      	ldr	r2, [pc, #272]	@ (8006d88 <HAL_SD_ReadBlocks_DMA+0x188>)
 8006c78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	2200      	movs	r2, #0
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3380      	adds	r3, #128	@ 0x80
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	025b      	lsls	r3, r3, #9
 8006c94:	089b      	lsrs	r3, r3, #2
 8006c96:	f7fc f949 	bl	8002f2c <HAL_DMA_Start_IT>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a39      	ldr	r2, [pc, #228]	@ (8006d8c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e05d      	b.n	8006d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cea:	2390      	movs	r3, #144	@ 0x90
 8006cec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 fff5 	bl	800acf4 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d90a      	bls.n	8006d26 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2282      	movs	r2, #130	@ 0x82
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f004 f859 	bl	800add4 <SDMMC_CmdReadMultiBlock>
 8006d22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006d24:	e009      	b.n	8006d3a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2281      	movs	r2, #129	@ 0x81
 8006d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d32:	4618      	mov	r0, r3
 8006d34:	f004 f82c 	bl	800ad90 <SDMMC_CmdReadSingleBlock>
 8006d38:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8006d46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e00a      	b.n	8006d7c <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006d74:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	@ 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	080077ab 	.word	0x080077ab
 8006d88:	0800781d 	.word	0x0800781d
 8006d8c:	004005ff 	.word	0x004005ff

08006d90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08c      	sub	sp, #48	@ 0x30
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0ac      	b.n	8006f12 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f040 80a5 	bne.w	8006f10 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d907      	bls.n	8006dea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e093      	b.n	8006f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2203      	movs	r2, #3
 8006dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfe:	4a47      	ldr	r2, [pc, #284]	@ (8006f1c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8006e00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	4a46      	ldr	r2, [pc, #280]	@ (8006f20 <HAL_SD_WriteBlocks_DMA+0x190>)
 8006e08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0e:	2200      	movs	r2, #0
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d002      	beq.n	8006e20 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1c:	025b      	lsls	r3, r3, #9
 8006e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d90a      	bls.n	8006e3c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	22a0      	movs	r2, #160	@ 0xa0
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e32:	4618      	mov	r0, r3
 8006e34:	f004 f812 	bl	800ae5c <SDMMC_CmdWriteMultiBlock>
 8006e38:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006e3a:	e009      	b.n	8006e50 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2290      	movs	r2, #144	@ 0x90
 8006e40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f003 ffe5 	bl	800ae18 <SDMMC_CmdWriteSingleBlock>
 8006e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d012      	beq.n	8006e7c <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a32      	ldr	r2, [pc, #200]	@ (8006f24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e04a      	b.n	8006f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3380      	adds	r3, #128	@ 0x80
 8006e98:	461a      	mov	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	025b      	lsls	r3, r3, #9
 8006e9e:	089b      	lsrs	r3, r3, #2
 8006ea0:	f7fc f844 	bl	8002f2c <HAL_DMA_Start_IT>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1d      	ldr	r2, [pc, #116]	@ (8006f24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8006eb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e020      	b.n	8006f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	025b      	lsls	r3, r3, #9
 8006eda:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006edc:	2390      	movs	r3, #144	@ 0x90
 8006ede:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f107 0210 	add.w	r2, r7, #16
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 fefc 	bl	800acf4 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 021a 	orr.w	r2, r2, #26
 8006f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3730      	adds	r7, #48	@ 0x30
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08007781 	.word	0x08007781
 8006f20:	0800781d 	.word	0x0800781d
 8006f24:	004005ff 	.word	0x004005ff

08006f28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_SD_IRQHandler+0x2e>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f802 	bl	8007f58 <SD_Read_IT>
 8006f54:	e155      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 808f 	beq.w	8007084 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f6e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8006f7e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006f82:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d039      	beq.n	8007012 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_SD_IRQHandler+0x8a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f003 ff72 	bl	800aea0 <SDMMC_CmdStopTransfer>
 8006fbc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f91f 	bl	8007214 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006fde:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_SD_IRQHandler+0xda>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f004 fcae 	bl	800b964 <HAL_SD_RxCpltCallback>
 8007008:	e0fb      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f004 fca0 	bl	800b950 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007010:	e0f7      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80f2 	beq.w	8007202 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d011      	beq.n	800704c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f003 ff37 	bl	800aea0 <SDMMC_CmdStopTransfer>
 8007032:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8e4 	bl	8007214 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80d5 	bne.w	8007202 <HAL_SD_IRQHandler+0x2da>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 80cf 	bne.w	8007202 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0208 	bic.w	r2, r2, #8
 8007072:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f004 fc67 	bl	800b950 <HAL_SD_TxCpltCallback>
}
 8007082:	e0be      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_SD_IRQHandler+0x17c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 ffac 	bl	8007ffa <SD_Write_IT>
 80070a2:	e0ae      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070aa:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80a7 	beq.w	8007202 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	f043 0202 	orr.w	r2, r3, #2
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	f043 0208 	orr.w	r2, r3, #8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	f043 0210 	orr.w	r2, r3, #16
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007124:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007134:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f003 feb0 	bl	800aea0 <SDMMC_CmdStopTransfer>
 8007140:	4602      	mov	r2, r0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f855 	bl	8007214 <HAL_SD_ErrorCallback>
}
 800716a:	e04a      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d045      	beq.n	8007202 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <HAL_SD_IRQHandler+0x262>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d011      	beq.n	80071ae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718e:	4a1f      	ldr	r2, [pc, #124]	@ (800720c <HAL_SD_IRQHandler+0x2e4>)
 8007190:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007196:	4618      	mov	r0, r3
 8007198:	f7fb ff66 	bl	8003068 <HAL_DMA_Abort_IT>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d02f      	beq.n	8007202 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fb84 	bl	80078b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80071ac:	e029      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <HAL_SD_IRQHandler+0x29a>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d011      	beq.n	80071e6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	4a12      	ldr	r2, [pc, #72]	@ (8007210 <HAL_SD_IRQHandler+0x2e8>)
 80071c8:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb ff4a 	bl	8003068 <HAL_DMA_Abort_IT>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fb9f 	bl	8007922 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80071e4:	e00d      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f004 fb9e 	bl	800b93c <HAL_SD_AbortCallback>
}
 8007200:	e7ff      	b.n	8007202 <HAL_SD_IRQHandler+0x2da>
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	080078b5 	.word	0x080078b5
 8007210:	08007923 	.word	0x08007923

08007214 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007236:	0f9b      	lsrs	r3, r3, #30
 8007238:	b2da      	uxtb	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007242:	0e9b      	lsrs	r3, r3, #26
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	b2da      	uxtb	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	b2da      	uxtb	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	b2da      	uxtb	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	b2da      	uxtb	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800727e:	b2da      	uxtb	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007288:	0d1b      	lsrs	r3, r3, #20
 800728a:	b29a      	uxth	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	b2da      	uxtb	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072a6:	0bdb      	lsrs	r3, r3, #15
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072b8:	0b9b      	lsrs	r3, r3, #14
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ca:	0b5b      	lsrs	r3, r3, #13
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072dc:	0b1b      	lsrs	r3, r3, #12
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2200      	movs	r2, #0
 80072ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d163      	bne.n	80073c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fc:	009a      	lsls	r2, r3, #2
 80072fe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007302:	4013      	ands	r3, r2
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007308:	0f92      	lsrs	r2, r2, #30
 800730a:	431a      	orrs	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007314:	0edb      	lsrs	r3, r3, #27
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	b2da      	uxtb	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007326:	0e1b      	lsrs	r3, r3, #24
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	b2da      	uxtb	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007338:	0d5b      	lsrs	r3, r3, #21
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800734a:	0c9b      	lsrs	r3, r3, #18
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b2da      	uxtb	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	0bdb      	lsrs	r3, r3, #15
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	b2da      	uxtb	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	7e1b      	ldrb	r3, [r3, #24]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	3302      	adds	r3, #2
 8007380:	2201      	movs	r2, #1
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800738a:	fb03 f202 	mul.w	r2, r3, r2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	7a1b      	ldrb	r3, [r3, #8]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	2201      	movs	r2, #1
 800739e:	409a      	lsls	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80073ac:	0a52      	lsrs	r2, r2, #9
 80073ae:	fb03 f202 	mul.w	r2, r3, r2
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80073be:	e031      	b.n	8007424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d11d      	bne.n	8007404 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	431a      	orrs	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	3301      	adds	r3, #1
 80073e4:	029a      	lsls	r2, r3, #10
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073f8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	661a      	str	r2, [r3, #96]	@ 0x60
 8007402:	e00f      	b.n	8007424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a58      	ldr	r2, [pc, #352]	@ (800756c <HAL_SD_GetCardCSD+0x344>)
 800740a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007410:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e09d      	b.n	8007560 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007428:	0b9b      	lsrs	r3, r3, #14
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	b2da      	uxtb	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800743a:	09db      	lsrs	r3, r3, #7
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007442:	b2da      	uxtb	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007452:	b2da      	uxtb	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745c:	0fdb      	lsrs	r3, r3, #31
 800745e:	b2da      	uxtb	r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007468:	0f5b      	lsrs	r3, r3, #29
 800746a:	b2db      	uxtb	r3, r3
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	b2da      	uxtb	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747a:	0e9b      	lsrs	r3, r3, #26
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	b2da      	uxtb	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800748c:	0d9b      	lsrs	r3, r3, #22
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	b2da      	uxtb	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749e:	0d5b      	lsrs	r3, r3, #21
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ce:	0bdb      	lsrs	r3, r3, #15
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e2:	0b9b      	lsrs	r3, r3, #14
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f6:	0b5b      	lsrs	r3, r3, #13
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	0b1b      	lsrs	r3, r3, #12
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	0a9b      	lsrs	r3, r3, #10
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	b2da      	uxtb	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	b2da      	uxtb	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007546:	085b      	lsrs	r3, r3, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754e:	b2da      	uxtb	r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	004005ff 	.word	0x004005ff

08007570 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b090      	sub	sp, #64	@ 0x40
 80075cc:	af04      	add	r7, sp, #16
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2203      	movs	r2, #3
 80075dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d02e      	beq.n	8007646 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ee:	d106      	bne.n	80075fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80075fc:	e029      	b.n	8007652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007604:	d10a      	bne.n	800761c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb46 	bl	8007c98 <SD_WideBus_Enable>
 800760c:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
 800761a:	e01a      	b.n	8007652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fb83 	bl	8007d2e <SD_WideBus_Disable>
 8007628:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	639a      	str	r2, [r3, #56]	@ 0x38
 8007636:	e00c      	b.n	8007652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	639a      	str	r2, [r3, #56]	@ 0x38
 8007644:	e005      	b.n	8007652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a35      	ldr	r2, [pc, #212]	@ (8007734 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007668:	e042      	b.n	80076f0 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800766a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800766e:	f7fe f81d 	bl	80056ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007672:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d031      	beq.n	80076de <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	3302      	adds	r3, #2
 800769c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	4a25      	ldr	r2, [pc, #148]	@ (8007738 <HAL_SD_ConfigWideBusOperation+0x170>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d907      	bls.n	80076b8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	4a24      	ldr	r2, [pc, #144]	@ (800773c <HAL_SD_ConfigWideBusOperation+0x174>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	0ddb      	lsrs	r3, r3, #23
 80076b2:	3b02      	subs	r3, #2
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	e002      	b.n	80076be <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	466c      	mov	r4, sp
 80076c4:	f107 0318 	add.w	r3, r7, #24
 80076c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076d0:	f107 030c 	add.w	r3, r7, #12
 80076d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076d6:	4628      	mov	r0, r5
 80076d8:	f003 fa5a 	bl	800ab90 <SDMMC_Init>
 80076dc:	e008      	b.n	80076f0 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076f8:	4618      	mov	r0, r3
 80076fa:	f003 fb27 	bl	800ad4c <SDMMC_CmdBlockLength>
 80076fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0a      	ldr	r2, [pc, #40]	@ (8007734 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800772c:	4618      	mov	r0, r3
 800772e:	3730      	adds	r7, #48	@ 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bdb0      	pop	{r4, r5, r7, pc}
 8007734:	004005ff 	.word	0x004005ff
 8007738:	017d7840 	.word	0x017d7840
 800773c:	55e63b89 	.word	0x55e63b89

08007740 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800774c:	f107 030c 	add.w	r3, r7, #12
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa78 	bl	8007c48 <SD_SendStatus>
 8007758:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0a5b      	lsrs	r3, r3, #9
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007776:	693b      	ldr	r3, [r7, #16]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800779c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	2b82      	cmp	r3, #130	@ 0x82
 80077be:	d111      	bne.n	80077e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f003 fb6b 	bl	800aea0 <SDMMC_CmdStopTransfer>
 80077ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	431a      	orrs	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fd18 	bl	8007214 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0208 	bic.w	r2, r2, #8
 80077f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f004 f8a9 	bl	800b964 <HAL_SD_RxCpltCallback>
#endif
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007830:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007838:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d002      	beq.n	8007846 <SD_DMAError+0x2a>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d12d      	bne.n	80078a2 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a19      	ldr	r2, [pc, #100]	@ (80078b0 <SD_DMAError+0x94>)
 800784c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800785c:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800786a:	6978      	ldr	r0, [r7, #20]
 800786c:	f7ff ff68 	bl	8007740 <HAL_SD_GetCardState>
 8007870:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b06      	cmp	r3, #6
 8007876:	d002      	beq.n	800787e <SD_DMAError+0x62>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b05      	cmp	r3, #5
 800787c:	d10a      	bne.n	8007894 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f003 fb0c 	bl	800aea0 <SDMMC_CmdStopTransfer>
 8007888:	4602      	mov	r2, r0
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	431a      	orrs	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2200      	movs	r2, #0
 80078a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f7ff fcb6 	bl	8007214 <HAL_SD_ErrorCallback>
#endif
}
 80078a8:	bf00      	nop
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	004005ff 	.word	0x004005ff

080078b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80078ca:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff ff37 	bl	8007740 <HAL_SD_GetCardState>
 80078d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b06      	cmp	r3, #6
 80078e6:	d002      	beq.n	80078ee <SD_DMATxAbort+0x3a>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d10a      	bne.n	8007904 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f003 fad4 	bl	800aea0 <SDMMC_CmdStopTransfer>
 80078f8:	4602      	mov	r2, r0
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fe:	431a      	orrs	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f004 f815 	bl	800b93c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007912:	e002      	b.n	800791a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f7ff fc7d 	bl	8007214 <HAL_SD_ErrorCallback>
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff ff00 	bl	8007740 <HAL_SD_GetCardState>
 8007940:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b06      	cmp	r3, #6
 8007954:	d002      	beq.n	800795c <SD_DMARxAbort+0x3a>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b05      	cmp	r3, #5
 800795a:	d10a      	bne.n	8007972 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f003 fa9d 	bl	800aea0 <SDMMC_CmdStopTransfer>
 8007966:	4602      	mov	r2, r0
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	431a      	orrs	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f003 ffde 	bl	800b93c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007980:	e002      	b.n	8007988 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fc46 	bl	8007214 <HAL_SD_ErrorCallback>
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007990:	b5b0      	push	{r4, r5, r7, lr}
 8007992:	b094      	sub	sp, #80	@ 0x50
 8007994:	af04      	add	r7, sp, #16
 8007996:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f003 f94f 	bl	800ac44 <SDMMC_GetPowerState>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80079b0:	e0b8      	b.n	8007b24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d02f      	beq.n	8007a1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f003 fb78 	bl	800b0b4 <SDMMC_CmdSendCID>
 80079c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80079cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ce:	e0a9      	b.n	8007b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f003 f979 	bl	800acce <SDMMC_GetResponse>
 80079dc:	4602      	mov	r2, r0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2104      	movs	r1, #4
 80079e8:	4618      	mov	r0, r3
 80079ea:	f003 f970 	bl	800acce <SDMMC_GetResponse>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2108      	movs	r1, #8
 80079fa:	4618      	mov	r0, r3
 80079fc:	f003 f967 	bl	800acce <SDMMC_GetResponse>
 8007a00:	4602      	mov	r2, r0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	210c      	movs	r1, #12
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f003 f95e 	bl	800acce <SDMMC_GetResponse>
 8007a12:	4602      	mov	r2, r0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d00d      	beq.n	8007a3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f107 020e 	add.w	r2, r7, #14
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f003 fb7e 	bl	800b12e <SDMMC_CmdSetRelAdd>
 8007a32:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <SD_InitCard+0xae>
    {
      return errorstate;
 8007a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a3c:	e072      	b.n	8007b24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d036      	beq.n	8007ab4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a46:	89fb      	ldrh	r3, [r7, #14]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f003 fb48 	bl	800b0f0 <SDMMC_CmdSendCSD>
 8007a60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6a:	e05b      	b.n	8007b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f003 f92b 	bl	800acce <SDMMC_GetResponse>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2104      	movs	r1, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f003 f922 	bl	800acce <SDMMC_GetResponse>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2108      	movs	r1, #8
 8007a96:	4618      	mov	r0, r3
 8007a98:	f003 f919 	bl	800acce <SDMMC_GetResponse>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	210c      	movs	r1, #12
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f003 f910 	bl	800acce <SDMMC_GetResponse>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2104      	movs	r1, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f003 f907 	bl	800acce <SDMMC_GetResponse>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	0d1a      	lsrs	r2, r3, #20
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ac8:	f107 0310 	add.w	r3, r7, #16
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fbaa 	bl	8007228 <HAL_SD_GetCardCSD>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ada:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007ade:	e021      	b.n	8007b24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae8:	041b      	lsls	r3, r3, #16
 8007aea:	2200      	movs	r2, #0
 8007aec:	461c      	mov	r4, r3
 8007aee:	4615      	mov	r5, r2
 8007af0:	4622      	mov	r2, r4
 8007af2:	462b      	mov	r3, r5
 8007af4:	4608      	mov	r0, r1
 8007af6:	f003 f9f5 	bl	800aee4 <SDMMC_CmdSelDesel>
 8007afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <SD_InitCard+0x176>
  {
    return errorstate;
 8007b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b04:	e00e      	b.n	8007b24 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681d      	ldr	r5, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	466c      	mov	r4, sp
 8007b0e:	f103 0210 	add.w	r2, r3, #16
 8007b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b18:	3304      	adds	r3, #4
 8007b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f003 f837 	bl	800ab90 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3740      	adds	r7, #64	@ 0x40
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bdb0      	pop	{r4, r5, r7, pc}

08007b2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f003 f9f0 	bl	800af2a <SDMMC_CmdGoIdleState>
 8007b4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	e072      	b.n	8007c3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f003 fa03 	bl	800af66 <SDMMC_CmdOperCond>
 8007b60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f003 f9d9 	bl	800af2a <SDMMC_CmdGoIdleState>
 8007b78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	e05b      	b.n	8007c3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d137      	bne.n	8007c02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f003 fa03 	bl	800afa4 <SDMMC_CmdAppCommand>
 8007b9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d02d      	beq.n	8007c02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ba6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007baa:	e047      	b.n	8007c3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f003 f9f6 	bl	800afa4 <SDMMC_CmdAppCommand>
 8007bb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	e03b      	b.n	8007c3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	491e      	ldr	r1, [pc, #120]	@ (8007c44 <SD_PowerON+0x118>)
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f003 fa0c 	bl	800afe8 <SDMMC_CmdAppOperCommand>
 8007bd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007bdc:	e02e      	b.n	8007c3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f003 f872 	bl	800acce <SDMMC_GetResponse>
 8007bea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	0fdb      	lsrs	r3, r3, #31
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <SD_PowerON+0xcc>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <SD_PowerON+0xce>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]

    count++;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d802      	bhi.n	8007c12 <SD_PowerON+0xe6>
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0cc      	beq.n	8007bac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d902      	bls.n	8007c22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c20:	e00c      	b.n	8007c3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	645a      	str	r2, [r3, #68]	@ 0x44
 8007c32:	e002      	b.n	8007c3a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	c1100000 	.word	0xc1100000

08007c48 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007c58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c5c:	e018      	b.n	8007c90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f003 fa80 	bl	800b170 <SDMMC_CmdSendStatus>
 8007c70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	e009      	b.n	8007c90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2100      	movs	r1, #0
 8007c82:	4618      	mov	r0, r3
 8007c84:	f003 f823 	bl	800acce <SDMMC_GetResponse>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f003 f80d 	bl	800acce <SDMMC_GetResponse>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cbe:	d102      	bne.n	8007cc6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cc4:	e02f      	b.n	8007d26 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007cc6:	f107 030c 	add.w	r3, r7, #12
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f879 	bl	8007dc4 <SD_FindSCR>
 8007cd2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	e023      	b.n	8007d26 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01c      	beq.n	8007d22 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f003 f955 	bl	800afa4 <SDMMC_CmdAppCommand>
 8007cfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	e00f      	b.n	8007d26 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f003 f98e 	bl	800b02e <SDMMC_CmdBusWidth>
 8007d12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	e003      	b.n	8007d26 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e001      	b.n	8007d26 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f002 ffc2 	bl	800acce <SDMMC_GetResponse>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d54:	d102      	bne.n	8007d5c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d5a:	e02f      	b.n	8007dbc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f82e 	bl	8007dc4 <SD_FindSCR>
 8007d68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	e023      	b.n	8007dbc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01c      	beq.n	8007db8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f003 f90a 	bl	800afa4 <SDMMC_CmdAppCommand>
 8007d90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	e00f      	b.n	8007dbc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f003 f943 	bl	800b02e <SDMMC_CmdBusWidth>
 8007da8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	e003      	b.n	8007dbc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e001      	b.n	8007dbc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007db8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007dc4:	b590      	push	{r4, r7, lr}
 8007dc6:	b08f      	sub	sp, #60	@ 0x3c
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007dce:	f7fa fdf1 	bl	80029b4 <HAL_GetTick>
 8007dd2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2108      	movs	r1, #8
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 ffae 	bl	800ad4c <SDMMC_CmdBlockLength>
 8007df0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <SD_FindSCR+0x38>
  {
    return errorstate;
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	e0a9      	b.n	8007f50 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	4619      	mov	r1, r3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f003 f8cb 	bl	800afa4 <SDMMC_CmdAppCommand>
 8007e0e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	e09a      	b.n	8007f50 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007e20:	2308      	movs	r3, #8
 8007e22:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007e24:	2330      	movs	r3, #48	@ 0x30
 8007e26:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f107 0210 	add.w	r2, r7, #16
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f002 ff58 	bl	800acf4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f003 f912 	bl	800b072 <SDMMC_CmdSendSCR>
 8007e4e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d022      	beq.n	8007e9c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	e07a      	b.n	8007f50 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	f107 0208 	add.w	r2, r7, #8
 8007e74:	18d4      	adds	r4, r2, r3
 8007e76:	4608      	mov	r0, r1
 8007e78:	f002 feb7 	bl	800abea <SDMMC_ReadFIFO>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	6023      	str	r3, [r4, #0]
      index++;
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	3301      	adds	r3, #1
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e86:	f7fa fd95 	bl	80029b4 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e94:	d102      	bne.n	8007e9c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e9a:	e059      	b.n	8007f50 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea2:	f240 432a 	movw	r3, #1066	@ 0x42a
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0d6      	beq.n	8007e5a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007ec2:	2308      	movs	r3, #8
 8007ec4:	e044      	b.n	8007f50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007edc:	2302      	movs	r3, #2
 8007ede:	e037      	b.n	8007f50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ef6:	2320      	movs	r3, #32
 8007ef8:	e02a      	b.n	8007f50 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	061a      	lsls	r2, r3, #24
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0e1b      	lsrs	r3, r3, #24
 8007f20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f24:	601a      	str	r2, [r3, #0]
    scr++;
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	3304      	adds	r3, #4
 8007f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	061a      	lsls	r2, r3, #24
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	0a1b      	lsrs	r3, r3, #8
 8007f3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	0e1b      	lsrs	r3, r3, #24
 8007f48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	373c      	adds	r7, #60	@ 0x3c
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd90      	pop	{r4, r7, pc}

08007f58 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d03f      	beq.n	8007ff2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e033      	b.n	8007fe0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 fe34 	bl	800abea <SDMMC_ReadFIFO>
 8007f82:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	0e1b      	lsrs	r3, r3, #24
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b07      	cmp	r3, #7
 8007fe4:	d9c8      	bls.n	8007f78 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d043      	beq.n	800809c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e037      	b.n	800808a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3b01      	subs	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4313      	orrs	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3b01      	subs	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4313      	orrs	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3b01      	subs	r3, #1
 800805a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	061a      	lsls	r2, r3, #24
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4313      	orrs	r3, r2
 8008066:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3b01      	subs	r3, #1
 8008072:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f107 0208 	add.w	r2, r7, #8
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f002 fdc0 	bl	800ac04 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3301      	adds	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b07      	cmp	r3, #7
 800808e:	d9c4      	bls.n	800801a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e095      	b.n	80081e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d108      	bne.n	80080d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080c6:	d009      	beq.n	80080dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	61da      	str	r2, [r3, #28]
 80080ce:	e005      	b.n	80080dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7f9 feb2 	bl	8001e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008112:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800811c:	d902      	bls.n	8008124 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e002      	b.n	800812a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008128:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008132:	d007      	beq.n	8008144 <HAL_SPI_Init+0xa0>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800813c:	d002      	beq.n	8008144 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	ea42 0103 	orr.w	r1, r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	f003 0204 	and.w	r2, r3, #4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80081c0:	ea42 0103 	orr.w	r1, r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e049      	b.n	8008290 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d106      	bne.n	8008216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7f9 feb7 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3304      	adds	r3, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f000 fb59 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d001      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e03b      	b.n	8008328 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a19      	ldr	r2, [pc, #100]	@ (8008334 <HAL_TIM_Base_Start_IT+0x9c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0x4e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082da:	d004      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0x4e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a15      	ldr	r2, [pc, #84]	@ (8008338 <HAL_TIM_Base_Start_IT+0xa0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d115      	bne.n	8008312 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	4b13      	ldr	r3, [pc, #76]	@ (800833c <HAL_TIM_Base_Start_IT+0xa4>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b06      	cmp	r3, #6
 80082f6:	d015      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0x8c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fe:	d011      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	e008      	b.n	8008324 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e000      	b.n	8008326 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008324:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40014000 	.word	0x40014000
 800833c:	00010007 	.word	0x00010007

08008340 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e049      	b.n	80083e6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f841 	bl	80083ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f000 faae 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d020      	beq.n	8008466 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01b      	beq.n	8008466 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f06f 0202 	mvn.w	r2, #2
 8008436:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa28 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 8008452:	e005      	b.n	8008460 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fa1a 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa2b 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d020      	beq.n	80084b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01b      	beq.n	80084b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f06f 0204 	mvn.w	r2, #4
 8008482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fa02 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 800849e:	e005      	b.n	80084ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f9f4 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa05 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d020      	beq.n	80084fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f06f 0208 	mvn.w	r2, #8
 80084ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2204      	movs	r2, #4
 80084d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9dc 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 80084ea:	e005      	b.n	80084f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9ce 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9df 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01b      	beq.n	800854a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0210 	mvn.w	r2, #16
 800851a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2208      	movs	r2, #8
 8008520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9b6 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 8008536:	e005      	b.n	8008544 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9a8 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9b9 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0201 	mvn.w	r2, #1
 8008566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7f9 f963 	bl	8001834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800858a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fe0b 	bl	80091a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fe03 	bl	80091bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f978 	bl	80088ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f06f 0220 	mvn.w	r2, #32
 80085f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fdcb 	bl	8009194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d101      	bne.n	8008626 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008622:	2302      	movs	r3, #2
 8008624:	e066      	b.n	80086f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b14      	cmp	r3, #20
 8008632:	d857      	bhi.n	80086e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008634:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	08008691 	.word	0x08008691
 8008640:	080086e5 	.word	0x080086e5
 8008644:	080086e5 	.word	0x080086e5
 8008648:	080086e5 	.word	0x080086e5
 800864c:	0800869f 	.word	0x0800869f
 8008650:	080086e5 	.word	0x080086e5
 8008654:	080086e5 	.word	0x080086e5
 8008658:	080086e5 	.word	0x080086e5
 800865c:	080086ad 	.word	0x080086ad
 8008660:	080086e5 	.word	0x080086e5
 8008664:	080086e5 	.word	0x080086e5
 8008668:	080086e5 	.word	0x080086e5
 800866c:	080086bb 	.word	0x080086bb
 8008670:	080086e5 	.word	0x080086e5
 8008674:	080086e5 	.word	0x080086e5
 8008678:	080086e5 	.word	0x080086e5
 800867c:	080086c9 	.word	0x080086c9
 8008680:	080086e5 	.word	0x080086e5
 8008684:	080086e5 	.word	0x080086e5
 8008688:	080086e5 	.word	0x080086e5
 800868c:	080086d7 	.word	0x080086d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f986 	bl	80089a8 <TIM_OC1_SetConfig>
      break;
 800869c:	e025      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f9fb 	bl	8008aa0 <TIM_OC2_SetConfig>
      break;
 80086aa:	e01e      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fa6e 	bl	8008b94 <TIM_OC3_SetConfig>
      break;
 80086b8:	e017      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fadf 	bl	8008c84 <TIM_OC4_SetConfig>
      break;
 80086c6:	e010      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fb36 	bl	8008d40 <TIM_OC5_SetConfig>
      break;
 80086d4:	e009      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fb87 	bl	8008df0 <TIM_OC6_SetConfig>
      break;
 80086e2:	e002      	b.n	80086ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
      break;
 80086e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIM_ConfigClockSource+0x1c>
 8008714:	2302      	movs	r3, #2
 8008716:	e0b6      	b.n	8008886 <HAL_TIM_ConfigClockSource+0x18a>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008736:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800873a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008754:	d03e      	beq.n	80087d4 <HAL_TIM_ConfigClockSource+0xd8>
 8008756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800875a:	f200 8087 	bhi.w	800886c <HAL_TIM_ConfigClockSource+0x170>
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008762:	f000 8086 	beq.w	8008872 <HAL_TIM_ConfigClockSource+0x176>
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876a:	d87f      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 800876c:	2b70      	cmp	r3, #112	@ 0x70
 800876e:	d01a      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0xaa>
 8008770:	2b70      	cmp	r3, #112	@ 0x70
 8008772:	d87b      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 8008774:	2b60      	cmp	r3, #96	@ 0x60
 8008776:	d050      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x11e>
 8008778:	2b60      	cmp	r3, #96	@ 0x60
 800877a:	d877      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 800877c:	2b50      	cmp	r3, #80	@ 0x50
 800877e:	d03c      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0xfe>
 8008780:	2b50      	cmp	r3, #80	@ 0x50
 8008782:	d873      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d058      	beq.n	800883a <HAL_TIM_ConfigClockSource+0x13e>
 8008788:	2b40      	cmp	r3, #64	@ 0x40
 800878a:	d86f      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 800878c:	2b30      	cmp	r3, #48	@ 0x30
 800878e:	d064      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x15e>
 8008790:	2b30      	cmp	r3, #48	@ 0x30
 8008792:	d86b      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 8008794:	2b20      	cmp	r3, #32
 8008796:	d060      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x15e>
 8008798:	2b20      	cmp	r3, #32
 800879a:	d867      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x170>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d05c      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x15e>
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d05a      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x15e>
 80087a4:	e062      	b.n	800886c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087b6:	f000 fbef 	bl	8008f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	609a      	str	r2, [r3, #8]
      break;
 80087d2:	e04f      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087e4:	f000 fbd8 	bl	8008f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f6:	609a      	str	r2, [r3, #8]
      break;
 80087f8:	e03c      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008806:	461a      	mov	r2, r3
 8008808:	f000 fb4c 	bl	8008ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2150      	movs	r1, #80	@ 0x50
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fba5 	bl	8008f62 <TIM_ITRx_SetConfig>
      break;
 8008818:	e02c      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008826:	461a      	mov	r2, r3
 8008828:	f000 fb6b 	bl	8008f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2160      	movs	r1, #96	@ 0x60
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fb95 	bl	8008f62 <TIM_ITRx_SetConfig>
      break;
 8008838:	e01c      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008846:	461a      	mov	r2, r3
 8008848:	f000 fb2c 	bl	8008ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2140      	movs	r1, #64	@ 0x40
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fb85 	bl	8008f62 <TIM_ITRx_SetConfig>
      break;
 8008858:	e00c      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f000 fb7c 	bl	8008f62 <TIM_ITRx_SetConfig>
      break;
 800886a:	e003      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
      break;
 8008870:	e000      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <TIM_Base_SetConfig+0xbc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_Base_SetConfig+0x20>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fe:	d108      	bne.n	8008912 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a21      	ldr	r2, [pc, #132]	@ (800899c <TIM_Base_SetConfig+0xbc>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00b      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008920:	d007      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a1e      	ldr	r2, [pc, #120]	@ (80089a0 <TIM_Base_SetConfig+0xc0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a1d      	ldr	r2, [pc, #116]	@ (80089a4 <TIM_Base_SetConfig+0xc4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d108      	bne.n	8008944 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a0c      	ldr	r2, [pc, #48]	@ (800899c <TIM_Base_SetConfig+0xbc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d007      	beq.n	8008980 <TIM_Base_SetConfig+0xa0>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a0b      	ldr	r2, [pc, #44]	@ (80089a0 <TIM_Base_SetConfig+0xc0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_Base_SetConfig+0xa0>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a0a      	ldr	r2, [pc, #40]	@ (80089a4 <TIM_Base_SetConfig+0xc4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d103      	bne.n	8008988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	615a      	str	r2, [r3, #20]
}
 800898e:	bf00      	nop
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40012c00 	.word	0x40012c00
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400

080089a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	f023 0201 	bic.w	r2, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 0302 	bic.w	r3, r3, #2
 80089f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a24      	ldr	r2, [pc, #144]	@ (8008a94 <TIM_OC1_SetConfig+0xec>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_OC1_SetConfig+0x70>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a23      	ldr	r2, [pc, #140]	@ (8008a98 <TIM_OC1_SetConfig+0xf0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_OC1_SetConfig+0x70>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a22      	ldr	r2, [pc, #136]	@ (8008a9c <TIM_OC1_SetConfig+0xf4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10c      	bne.n	8008a32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0308 	bic.w	r3, r3, #8
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f023 0304 	bic.w	r3, r3, #4
 8008a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <TIM_OC1_SetConfig+0xec>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <TIM_OC1_SetConfig+0xa2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <TIM_OC1_SetConfig+0xf0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_OC1_SetConfig+0xa2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a15      	ldr	r2, [pc, #84]	@ (8008a9c <TIM_OC1_SetConfig+0xf4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d111      	bne.n	8008a6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	621a      	str	r2, [r3, #32]
}
 8008a88:	bf00      	nop
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400

08008aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	f023 0210 	bic.w	r2, r3, #16
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0320 	bic.w	r3, r3, #32
 8008aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a22      	ldr	r2, [pc, #136]	@ (8008b88 <TIM_OC2_SetConfig+0xe8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d10d      	bne.n	8008b20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <TIM_OC2_SetConfig+0xe8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d007      	beq.n	8008b38 <TIM_OC2_SetConfig+0x98>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a18      	ldr	r2, [pc, #96]	@ (8008b8c <TIM_OC2_SetConfig+0xec>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_OC2_SetConfig+0x98>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a17      	ldr	r2, [pc, #92]	@ (8008b90 <TIM_OC2_SetConfig+0xf0>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d113      	bne.n	8008b60 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400

08008b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a21      	ldr	r2, [pc, #132]	@ (8008c78 <TIM_OC3_SetConfig+0xe4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d10d      	bne.n	8008c12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a18      	ldr	r2, [pc, #96]	@ (8008c78 <TIM_OC3_SetConfig+0xe4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d007      	beq.n	8008c2a <TIM_OC3_SetConfig+0x96>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a17      	ldr	r2, [pc, #92]	@ (8008c7c <TIM_OC3_SetConfig+0xe8>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d003      	beq.n	8008c2a <TIM_OC3_SetConfig+0x96>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a16      	ldr	r2, [pc, #88]	@ (8008c80 <TIM_OC3_SetConfig+0xec>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d113      	bne.n	8008c52 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40014400 	.word	0x40014400

08008c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	031b      	lsls	r3, r3, #12
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a14      	ldr	r2, [pc, #80]	@ (8008d34 <TIM_OC4_SetConfig+0xb0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d007      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x74>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a13      	ldr	r2, [pc, #76]	@ (8008d38 <TIM_OC4_SetConfig+0xb4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x74>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a12      	ldr	r2, [pc, #72]	@ (8008d3c <TIM_OC4_SetConfig+0xb8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d109      	bne.n	8008d0c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400

08008d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a13      	ldr	r2, [pc, #76]	@ (8008de4 <TIM_OC5_SetConfig+0xa4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <TIM_OC5_SetConfig+0x6a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a12      	ldr	r2, [pc, #72]	@ (8008de8 <TIM_OC5_SetConfig+0xa8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_OC5_SetConfig+0x6a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a11      	ldr	r2, [pc, #68]	@ (8008dec <TIM_OC5_SetConfig+0xac>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d109      	bne.n	8008dbe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008db0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	621a      	str	r2, [r3, #32]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40012c00 	.word	0x40012c00
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400

08008df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	051b      	lsls	r3, r3, #20
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a14      	ldr	r2, [pc, #80]	@ (8008e98 <TIM_OC6_SetConfig+0xa8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d007      	beq.n	8008e5c <TIM_OC6_SetConfig+0x6c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a13      	ldr	r2, [pc, #76]	@ (8008e9c <TIM_OC6_SetConfig+0xac>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_OC6_SetConfig+0x6c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a12      	ldr	r2, [pc, #72]	@ (8008ea0 <TIM_OC6_SetConfig+0xb0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d109      	bne.n	8008e70 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	029b      	lsls	r3, r3, #10
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	621a      	str	r2, [r3, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400

08008ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f023 0201 	bic.w	r2, r3, #1
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f023 030a 	bic.w	r3, r3, #10
 8008ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b087      	sub	sp, #28
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f023 0210 	bic.w	r2, r3, #16
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	031b      	lsls	r3, r3, #12
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f043 0307 	orr.w	r3, r3, #7
 8008f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	609a      	str	r2, [r3, #8]
}
 8008f8c:	bf00      	nop
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	021a      	lsls	r2, r3, #8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e04f      	b.n	8009090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a21      	ldr	r2, [pc, #132]	@ (800909c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d108      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a14      	ldr	r2, [pc, #80]	@ (800909c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d009      	beq.n	8009064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009058:	d004      	beq.n	8009064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a10      	ldr	r2, [pc, #64]	@ (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d10c      	bne.n	800907e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800906a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	4313      	orrs	r3, r2
 8009074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	40012c00 	.word	0x40012c00
 80090a0:	40014000 	.word	0x40014000

080090a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e060      	b.n	8009182 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a14      	ldr	r2, [pc, #80]	@ (8009190 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d115      	bne.n	8009170 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914e:	051b      	lsls	r3, r3, #20
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	40012c00 	.word	0x40012c00

08009194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e040      	b.n	8009264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f8 ff4a 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2224      	movs	r2, #36	@ 0x24
 80091fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0201 	bic.w	r2, r2, #1
 800920c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fd8c 	bl	8009d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb2f 	bl	8009880 <UART_SetConfig>
 8009222:	4603      	mov	r3, r0
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e01b      	b.n	8009264 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800923a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800924a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fe0b 	bl	8009e78 <UART_CheckIdleState>
 8009262:	4603      	mov	r3, r0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b0ba      	sub	sp, #232	@ 0xe8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009296:	f640 030f 	movw	r3, #2063	@ 0x80f
 800929a:	4013      	ands	r3, r2
 800929c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80092a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d115      	bne.n	80092d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 82ae 	beq.w	8009826 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
      }
      return;
 80092d2:	e2a8      	b.n	8009826 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80092d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8117 	beq.w	800950c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80092de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80092ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80092ee:	4b85      	ldr	r3, [pc, #532]	@ (8009504 <HAL_UART_IRQHandler+0x298>)
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 810a 	beq.w	800950c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	d011      	beq.n	8009328 <HAL_UART_IRQHandler+0xbc>
 8009304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2201      	movs	r2, #1
 8009316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800931e:	f043 0201 	orr.w	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d011      	beq.n	8009358 <HAL_UART_IRQHandler+0xec>
 8009334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2202      	movs	r2, #2
 8009346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800934e:	f043 0204 	orr.w	r2, r3, #4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d011      	beq.n	8009388 <HAL_UART_IRQHandler+0x11c>
 8009364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2204      	movs	r2, #4
 8009376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800937e:	f043 0202 	orr.w	r2, r3, #2
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b00      	cmp	r3, #0
 8009392:	d017      	beq.n	80093c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80093a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2208      	movs	r2, #8
 80093b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ba:	f043 0208 	orr.w	r2, r3, #8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d012      	beq.n	80093f6 <HAL_UART_IRQHandler+0x18a>
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00c      	beq.n	80093f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ec:	f043 0220 	orr.w	r2, r3, #32
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8214 	beq.w	800982a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00d      	beq.n	800942a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800940e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009430:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943e:	2b40      	cmp	r3, #64	@ 0x40
 8009440:	d005      	beq.n	800944e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009446:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800944a:	2b00      	cmp	r3, #0
 800944c:	d04f      	beq.n	80094ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fe21 	bl	800a096 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945e:	2b40      	cmp	r3, #64	@ 0x40
 8009460:	d141      	bne.n	80094e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800947c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800948e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800949a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1d9      	bne.n	8009462 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d013      	beq.n	80094de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ba:	4a13      	ldr	r2, [pc, #76]	@ (8009508 <HAL_UART_IRQHandler+0x29c>)
 80094bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f9 fdd0 	bl	8003068 <HAL_DMA_Abort_IT>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d017      	beq.n	80094fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	e00f      	b.n	80094fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9b8 	bl	8009854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	e00b      	b.n	80094fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f9b4 	bl	8009854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ec:	e007      	b.n	80094fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f9b0 	bl	8009854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80094fc:	e195      	b.n	800982a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fe:	bf00      	nop
    return;
 8009500:	e193      	b.n	800982a <HAL_UART_IRQHandler+0x5be>
 8009502:	bf00      	nop
 8009504:	04000120 	.word	0x04000120
 8009508:	0800a15f 	.word	0x0800a15f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009510:	2b01      	cmp	r3, #1
 8009512:	f040 814e 	bne.w	80097b2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 8147 	beq.w	80097b2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8140 	beq.w	80097b2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2210      	movs	r2, #16
 8009538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009544:	2b40      	cmp	r3, #64	@ 0x40
 8009546:	f040 80b8 	bne.w	80096ba <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009556:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8167 	beq.w	800982e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800956a:	429a      	cmp	r2, r3
 800956c:	f080 815f 	bcs.w	800982e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	f040 8086 	bne.w	8009698 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1da      	bne.n	800958c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800960c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e1      	bne.n	80095d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3308      	adds	r3, #8
 8009618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3308      	adds	r3, #8
 8009632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800963c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e3      	bne.n	8009612 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009668:	f023 0310 	bic.w	r3, r3, #16
 800966c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800967a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800967c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e4      	bne.n	8009658 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009692:	4618      	mov	r0, r3
 8009694:	f7f9 fcaa 	bl	8002fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f8d8 	bl	8009868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096b8:	e0b9      	b.n	800982e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80ab 	beq.w	8009832 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80096dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80a6 	beq.w	8009832 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009708:	647b      	str	r3, [r7, #68]	@ 0x44
 800970a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800970e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e4      	bne.n	80096e6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	623b      	str	r3, [r7, #32]
   return(result);
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	f023 0301 	bic.w	r3, r3, #1
 8009732:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009740:	633a      	str	r2, [r7, #48]	@ 0x30
 8009742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e3      	bne.n	800971c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	60fb      	str	r3, [r7, #12]
   return(result);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f023 0310 	bic.w	r3, r3, #16
 800977c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800978a:	61fb      	str	r3, [r7, #28]
 800978c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	69b9      	ldr	r1, [r7, #24]
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	617b      	str	r3, [r7, #20]
   return(result);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e4      	bne.n	8009768 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2202      	movs	r2, #2
 80097a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f85c 	bl	8009868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097b0:	e03f      	b.n	8009832 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <HAL_UART_IRQHandler+0x570>
 80097be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80097d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fd02 	bl	800a1de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097da:	e02d      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80097dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01c      	beq.n	8009836 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
    }
    return;
 8009804:	e017      	b.n	8009836 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d012      	beq.n	8009838 <HAL_UART_IRQHandler+0x5cc>
 8009812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00c      	beq.n	8009838 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fcb3 	bl	800a18a <UART_EndTransmit_IT>
    return;
 8009824:	e008      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009826:	bf00      	nop
 8009828:	e006      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
    return;
 800982a:	bf00      	nop
 800982c:	e004      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
      return;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009836:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009838:	37e8      	adds	r7, #232	@ 0xe8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop

08009840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009884:	b08a      	sub	sp, #40	@ 0x28
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	431a      	orrs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	4b9e      	ldr	r3, [pc, #632]	@ (8009b28 <UART_SetConfig+0x2a8>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	6812      	ldr	r2, [r2, #0]
 80098b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a93      	ldr	r2, [pc, #588]	@ (8009b2c <UART_SetConfig+0x2ac>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d004      	beq.n	80098ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e8:	4313      	orrs	r3, r2
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098fc:	430a      	orrs	r2, r1
 80098fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a8a      	ldr	r2, [pc, #552]	@ (8009b30 <UART_SetConfig+0x2b0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d126      	bne.n	8009958 <UART_SetConfig+0xd8>
 800990a:	4b8a      	ldr	r3, [pc, #552]	@ (8009b34 <UART_SetConfig+0x2b4>)
 800990c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b03      	cmp	r3, #3
 8009916:	d81b      	bhi.n	8009950 <UART_SetConfig+0xd0>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <UART_SetConfig+0xa0>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009931 	.word	0x08009931
 8009924:	08009941 	.word	0x08009941
 8009928:	08009939 	.word	0x08009939
 800992c:	08009949 	.word	0x08009949
 8009930:	2301      	movs	r3, #1
 8009932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009936:	e0ab      	b.n	8009a90 <UART_SetConfig+0x210>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800993e:	e0a7      	b.n	8009a90 <UART_SetConfig+0x210>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009946:	e0a3      	b.n	8009a90 <UART_SetConfig+0x210>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800994e:	e09f      	b.n	8009a90 <UART_SetConfig+0x210>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009956:	e09b      	b.n	8009a90 <UART_SetConfig+0x210>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a76      	ldr	r2, [pc, #472]	@ (8009b38 <UART_SetConfig+0x2b8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d138      	bne.n	80099d4 <UART_SetConfig+0x154>
 8009962:	4b74      	ldr	r3, [pc, #464]	@ (8009b34 <UART_SetConfig+0x2b4>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009968:	f003 030c 	and.w	r3, r3, #12
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d82d      	bhi.n	80099cc <UART_SetConfig+0x14c>
 8009970:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0xf8>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099cd 	.word	0x080099cd
 8009980:	080099cd 	.word	0x080099cd
 8009984:	080099cd 	.word	0x080099cd
 8009988:	080099bd 	.word	0x080099bd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099b5 	.word	0x080099b5
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099c5 	.word	0x080099c5
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b2:	e06d      	b.n	8009a90 <UART_SetConfig+0x210>
 80099b4:	2302      	movs	r3, #2
 80099b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ba:	e069      	b.n	8009a90 <UART_SetConfig+0x210>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c2:	e065      	b.n	8009a90 <UART_SetConfig+0x210>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ca:	e061      	b.n	8009a90 <UART_SetConfig+0x210>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099d2:	e05d      	b.n	8009a90 <UART_SetConfig+0x210>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a58      	ldr	r2, [pc, #352]	@ (8009b3c <UART_SetConfig+0x2bc>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d125      	bne.n	8009a2a <UART_SetConfig+0x1aa>
 80099de:	4b55      	ldr	r3, [pc, #340]	@ (8009b34 <UART_SetConfig+0x2b4>)
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099e8:	2b30      	cmp	r3, #48	@ 0x30
 80099ea:	d016      	beq.n	8009a1a <UART_SetConfig+0x19a>
 80099ec:	2b30      	cmp	r3, #48	@ 0x30
 80099ee:	d818      	bhi.n	8009a22 <UART_SetConfig+0x1a2>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d00a      	beq.n	8009a0a <UART_SetConfig+0x18a>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d814      	bhi.n	8009a22 <UART_SetConfig+0x1a2>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <UART_SetConfig+0x182>
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d008      	beq.n	8009a12 <UART_SetConfig+0x192>
 8009a00:	e00f      	b.n	8009a22 <UART_SetConfig+0x1a2>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a08:	e042      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a10:	e03e      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a12:	2304      	movs	r3, #4
 8009a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a18:	e03a      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a20:	e036      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a22:	2310      	movs	r3, #16
 8009a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a28:	e032      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b2c <UART_SetConfig+0x2ac>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d12a      	bne.n	8009a8a <UART_SetConfig+0x20a>
 8009a34:	4b3f      	ldr	r3, [pc, #252]	@ (8009b34 <UART_SetConfig+0x2b4>)
 8009a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a42:	d01a      	beq.n	8009a7a <UART_SetConfig+0x1fa>
 8009a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a48:	d81b      	bhi.n	8009a82 <UART_SetConfig+0x202>
 8009a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a4e:	d00c      	beq.n	8009a6a <UART_SetConfig+0x1ea>
 8009a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a54:	d815      	bhi.n	8009a82 <UART_SetConfig+0x202>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <UART_SetConfig+0x1e2>
 8009a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a5e:	d008      	beq.n	8009a72 <UART_SetConfig+0x1f2>
 8009a60:	e00f      	b.n	8009a82 <UART_SetConfig+0x202>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a68:	e012      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a70:	e00e      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a72:	2304      	movs	r3, #4
 8009a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a78:	e00a      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a80:	e006      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a82:	2310      	movs	r3, #16
 8009a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a88:	e002      	b.n	8009a90 <UART_SetConfig+0x210>
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a25      	ldr	r2, [pc, #148]	@ (8009b2c <UART_SetConfig+0x2ac>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	f040 808a 	bne.w	8009bb0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d824      	bhi.n	8009aee <UART_SetConfig+0x26e>
 8009aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0x22c>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009aef 	.word	0x08009aef
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009aef 	.word	0x08009aef
 8009abc:	08009adf 	.word	0x08009adf
 8009ac0:	08009aef 	.word	0x08009aef
 8009ac4:	08009aef 	.word	0x08009aef
 8009ac8:	08009aef 	.word	0x08009aef
 8009acc:	08009ae7 	.word	0x08009ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad0:	f7fb fb16 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8009ad4:	61f8      	str	r0, [r7, #28]
        break;
 8009ad6:	e010      	b.n	8009afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ad8:	4b19      	ldr	r3, [pc, #100]	@ (8009b40 <UART_SetConfig+0x2c0>)
 8009ada:	61fb      	str	r3, [r7, #28]
        break;
 8009adc:	e00d      	b.n	8009afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ade:	f7fb fa77 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8009ae2:	61f8      	str	r0, [r7, #28]
        break;
 8009ae4:	e009      	b.n	8009afa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aea:	61fb      	str	r3, [r7, #28]
        break;
 8009aec:	e005      	b.n	8009afa <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 8109 	beq.w	8009d14 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	69fa      	ldr	r2, [r7, #28]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d305      	bcc.n	8009b1e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d912      	bls.n	8009b44 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009b24:	e0f6      	b.n	8009d14 <UART_SetConfig+0x494>
 8009b26:	bf00      	nop
 8009b28:	efff69f3 	.word	0xefff69f3
 8009b2c:	40008000 	.word	0x40008000
 8009b30:	40013800 	.word	0x40013800
 8009b34:	40021000 	.word	0x40021000
 8009b38:	40004400 	.word	0x40004400
 8009b3c:	40004800 	.word	0x40004800
 8009b40:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2200      	movs	r2, #0
 8009b48:	461c      	mov	r4, r3
 8009b4a:	4615      	mov	r5, r2
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	022b      	lsls	r3, r5, #8
 8009b56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b5a:	0222      	lsls	r2, r4, #8
 8009b5c:	68f9      	ldr	r1, [r7, #12]
 8009b5e:	6849      	ldr	r1, [r1, #4]
 8009b60:	0849      	lsrs	r1, r1, #1
 8009b62:	2000      	movs	r0, #0
 8009b64:	4688      	mov	r8, r1
 8009b66:	4681      	mov	r9, r0
 8009b68:	eb12 0a08 	adds.w	sl, r2, r8
 8009b6c:	eb43 0b09 	adc.w	fp, r3, r9
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	f7f6 fb2d 	bl	80001e0 <__aeabi_uldivmod>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b94:	d308      	bcc.n	8009ba8 <UART_SetConfig+0x328>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9c:	d204      	bcs.n	8009ba8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	e0b5      	b.n	8009d14 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009bae:	e0b1      	b.n	8009d14 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb8:	d15d      	bne.n	8009c76 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009bba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d827      	bhi.n	8009c12 <UART_SetConfig+0x392>
 8009bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x348>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	08009c13 	.word	0x08009c13
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009c13 	.word	0x08009c13
 8009be0:	08009c13 	.word	0x08009c13
 8009be4:	08009c13 	.word	0x08009c13
 8009be8:	08009c0b 	.word	0x08009c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bec:	f7fb fa88 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8009bf0:	61f8      	str	r0, [r7, #28]
        break;
 8009bf2:	e014      	b.n	8009c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf4:	f7fb fa9a 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8009bf8:	61f8      	str	r0, [r7, #28]
        break;
 8009bfa:	e010      	b.n	8009c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8009d30 <UART_SetConfig+0x4b0>)
 8009bfe:	61fb      	str	r3, [r7, #28]
        break;
 8009c00:	e00d      	b.n	8009c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c02:	f7fb f9e5 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8009c06:	61f8      	str	r0, [r7, #28]
        break;
 8009c08:	e009      	b.n	8009c1e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c0e:	61fb      	str	r3, [r7, #28]
        break;
 8009c10:	e005      	b.n	8009c1e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d077      	beq.n	8009d14 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	005a      	lsls	r2, r3, #1
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	441a      	add	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b0f      	cmp	r3, #15
 8009c3e:	d916      	bls.n	8009c6e <UART_SetConfig+0x3ee>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c46:	d212      	bcs.n	8009c6e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f023 030f 	bic.w	r3, r3, #15
 8009c50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	8afb      	ldrh	r3, [r7, #22]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	8afa      	ldrh	r2, [r7, #22]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	e052      	b.n	8009d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c74:	e04e      	b.n	8009d14 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	d827      	bhi.n	8009cce <UART_SetConfig+0x44e>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <UART_SetConfig+0x404>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	08009ccf 	.word	0x08009ccf
 8009c94:	08009cbf 	.word	0x08009cbf
 8009c98:	08009ccf 	.word	0x08009ccf
 8009c9c:	08009ccf 	.word	0x08009ccf
 8009ca0:	08009ccf 	.word	0x08009ccf
 8009ca4:	08009cc7 	.word	0x08009cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca8:	f7fb fa2a 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8009cac:	61f8      	str	r0, [r7, #28]
        break;
 8009cae:	e014      	b.n	8009cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb0:	f7fb fa3c 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8009cb4:	61f8      	str	r0, [r7, #28]
        break;
 8009cb6:	e010      	b.n	8009cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <UART_SetConfig+0x4b0>)
 8009cba:	61fb      	str	r3, [r7, #28]
        break;
 8009cbc:	e00d      	b.n	8009cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cbe:	f7fb f987 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8009cc2:	61f8      	str	r0, [r7, #28]
        break;
 8009cc4:	e009      	b.n	8009cda <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cca:	61fb      	str	r3, [r7, #28]
        break;
 8009ccc:	e005      	b.n	8009cda <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d019      	beq.n	8009d14 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	085a      	lsrs	r2, r3, #1
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	441a      	add	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	d909      	bls.n	8009d0e <UART_SetConfig+0x48e>
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d00:	d205      	bcs.n	8009d0e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	60da      	str	r2, [r3, #12]
 8009d0c:	e002      	b.n	8009d14 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009d20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3728      	adds	r7, #40	@ 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d2e:	bf00      	nop
 8009d30:	00f42400 	.word	0x00f42400

08009d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01a      	beq.n	8009e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e32:	d10a      	bne.n	8009e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	605a      	str	r2, [r3, #4]
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b098      	sub	sp, #96	@ 0x60
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e88:	f7f8 fd94 	bl	80029b4 <HAL_GetTick>
 8009e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d12e      	bne.n	8009efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f88c 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d021      	beq.n	8009efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e6      	bne.n	8009eb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e062      	b.n	8009fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d149      	bne.n	8009f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f10:	2200      	movs	r2, #0
 8009f12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f856 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d03c      	beq.n	8009f9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e6      	bne.n	8009f22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0301 	bic.w	r3, r3, #1
 8009f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3308      	adds	r3, #8
 8009f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f74:	61fa      	str	r2, [r7, #28]
 8009f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	69b9      	ldr	r1, [r7, #24]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	617b      	str	r3, [r7, #20]
   return(result);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e5      	bne.n	8009f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e011      	b.n	8009fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3758      	adds	r7, #88	@ 0x58
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd8:	e049      	b.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d045      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe2:	f7f8 fce7 	bl	80029b4 <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e048      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	d031      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b08      	cmp	r3, #8
 800a016:	d110      	bne.n	800a03a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2208      	movs	r2, #8
 800a01e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f838 	bl	800a096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2208      	movs	r2, #8
 800a02a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e029      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a048:	d111      	bne.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f81e 	bl	800a096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e00f      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4013      	ands	r3, r2
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	bf0c      	ite	eq
 800a07e:	2301      	moveq	r3, #1
 800a080:	2300      	movne	r3, #0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d0a6      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a096:	b480      	push	{r7}
 800a098:	b095      	sub	sp, #84	@ 0x54
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a6:	e853 3f00 	ldrex	r3, [r3]
 800a0aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e6      	bne.n	800a09e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f023 0301 	bic.w	r3, r3, #1
 800a0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e5      	bne.n	800a0d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d118      	bne.n	800a13e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	60bb      	str	r3, [r7, #8]
   return(result);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f023 0310 	bic.w	r3, r3, #16
 800a120:	647b      	str	r3, [r7, #68]	@ 0x44
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a12a:	61bb      	str	r3, [r7, #24]
 800a12c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12e:	6979      	ldr	r1, [r7, #20]
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	e841 2300 	strex	r3, r2, [r1]
 800a136:	613b      	str	r3, [r7, #16]
   return(result);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1e6      	bne.n	800a10c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a152:	bf00      	nop
 800a154:	3754      	adds	r7, #84	@ 0x54
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff fb69 	bl	8009854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a182:	bf00      	nop
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b088      	sub	sp, #32
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff fb35 	bl	8009840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d6:	bf00      	nop
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b08b      	sub	sp, #44	@ 0x2c
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	fa93 f3a3 	rbit	r3, r3
 800a20c:	613b      	str	r3, [r7, #16]
  return result;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a218:	2320      	movs	r3, #32
 800a21a:	e003      	b.n	800a224 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	fab3 f383 	clz	r3, r3
 800a222:	b2db      	uxtb	r3, r3
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	2103      	movs	r1, #3
 800a228:	fa01 f303 	lsl.w	r3, r1, r3
 800a22c:	43db      	mvns	r3, r3
 800a22e:	401a      	ands	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	fa93 f3a3 	rbit	r3, r3
 800a23a:	61fb      	str	r3, [r7, #28]
  return result;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a246:	2320      	movs	r3, #32
 800a248:	e003      	b.n	800a252 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	fab3 f383 	clz	r3, r3
 800a250:	b2db      	uxtb	r3, r3
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	431a      	orrs	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]
}
 800a260:	bf00      	nop
 800a262:	372c      	adds	r7, #44	@ 0x2c
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	43db      	mvns	r3, r3
 800a280:	401a      	ands	r2, r3
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	fb01 f303 	mul.w	r3, r1, r3
 800a28a:	431a      	orrs	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	605a      	str	r2, [r3, #4]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b08b      	sub	sp, #44	@ 0x2c
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	fa93 f3a3 	rbit	r3, r3
 800a2b6:	613b      	str	r3, [r7, #16]
  return result;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a2c2:	2320      	movs	r3, #32
 800a2c4:	e003      	b.n	800a2ce <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	fab3 f383 	clz	r3, r3
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	2103      	movs	r1, #3
 800a2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	401a      	ands	r2, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	fa93 f3a3 	rbit	r3, r3
 800a2e4:	61fb      	str	r3, [r7, #28]
  return result;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	e003      	b.n	800a2fc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f6:	fab3 f383 	clz	r3, r3
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	fa01 f303 	lsl.w	r3, r1, r3
 800a304:	431a      	orrs	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a30a:	bf00      	nop
 800a30c:	372c      	adds	r7, #44	@ 0x2c
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a316:	b480      	push	{r7}
 800a318:	b08b      	sub	sp, #44	@ 0x2c
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	fa93 f3a3 	rbit	r3, r3
 800a330:	613b      	str	r3, [r7, #16]
  return result;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a33c:	2320      	movs	r3, #32
 800a33e:	e003      	b.n	800a348 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	fab3 f383 	clz	r3, r3
 800a346:	b2db      	uxtb	r3, r3
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	2103      	movs	r1, #3
 800a34c:	fa01 f303 	lsl.w	r3, r1, r3
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	fa93 f3a3 	rbit	r3, r3
 800a35e:	61fb      	str	r3, [r7, #28]
  return result;
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a36a:	2320      	movs	r3, #32
 800a36c:	e003      	b.n	800a376 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	fab3 f383 	clz	r3, r3
 800a374:	b2db      	uxtb	r3, r3
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	fa01 f303 	lsl.w	r3, r1, r3
 800a37e:	431a      	orrs	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	60da      	str	r2, [r3, #12]
}
 800a384:	bf00      	nop
 800a386:	372c      	adds	r7, #44	@ 0x2c
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a390:	b480      	push	{r7}
 800a392:	b08b      	sub	sp, #44	@ 0x2c
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	fa93 f3a3 	rbit	r3, r3
 800a3aa:	613b      	str	r3, [r7, #16]
  return result;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	e003      	b.n	800a3c2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	fab3 f383 	clz	r3, r3
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	210f      	movs	r1, #15
 800a3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ca:	43db      	mvns	r3, r3
 800a3cc:	401a      	ands	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	fa93 f3a3 	rbit	r3, r3
 800a3d8:	61fb      	str	r3, [r7, #28]
  return result;
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	e003      	b.n	800a3f0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	fab3 f383 	clz	r3, r3
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a3fe:	bf00      	nop
 800a400:	372c      	adds	r7, #44	@ 0x2c
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b08b      	sub	sp, #44	@ 0x2c
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	0a1b      	lsrs	r3, r3, #8
 800a41e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	fa93 f3a3 	rbit	r3, r3
 800a426:	613b      	str	r3, [r7, #16]
  return result;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a432:	2320      	movs	r3, #32
 800a434:	e003      	b.n	800a43e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	fab3 f383 	clz	r3, r3
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	210f      	movs	r1, #15
 800a442:	fa01 f303 	lsl.w	r3, r1, r3
 800a446:	43db      	mvns	r3, r3
 800a448:	401a      	ands	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	0a1b      	lsrs	r3, r3, #8
 800a44e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	fa93 f3a3 	rbit	r3, r3
 800a456:	61fb      	str	r3, [r7, #28]
  return result;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a462:	2320      	movs	r3, #32
 800a464:	e003      	b.n	800a46e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	fab3 f383 	clz	r3, r3
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	fa01 f303 	lsl.w	r3, r1, r3
 800a476:	431a      	orrs	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a47c:	bf00      	nop
 800a47e:	372c      	adds	r7, #44	@ 0x2c
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	fa93 f3a3 	rbit	r3, r3
 800a49e:	60fb      	str	r3, [r7, #12]
  return result;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <LL_GPIO_Init+0x26>
    return 32U;
 800a4aa:	2320      	movs	r3, #32
 800a4ac:	e003      	b.n	800a4b6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	fab3 f383 	clz	r3, r3
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a4b8:	e048      	b.n	800a54c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	2101      	movs	r1, #1
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d03a      	beq.n	800a546 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d003      	beq.n	800a4e0 <LL_GPIO_Init+0x58>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d10e      	bne.n	800a4fe <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	69b9      	ldr	r1, [r7, #24]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff fed7 	bl	800a29c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff feb7 	bl	800a26c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	461a      	mov	r2, r3
 800a504:	69b9      	ldr	r1, [r7, #24]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ff05 	bl	800a316 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d111      	bne.n	800a538 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2bff      	cmp	r3, #255	@ 0xff
 800a518:	d807      	bhi.n	800a52a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	461a      	mov	r2, r3
 800a520:	69b9      	ldr	r1, [r7, #24]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff ff34 	bl	800a390 <LL_GPIO_SetAFPin_0_7>
 800a528:	e006      	b.n	800a538 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	461a      	mov	r2, r3
 800a530:	69b9      	ldr	r1, [r7, #24]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff ff69 	bl	800a40a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	461a      	mov	r2, r3
 800a53e:	69b9      	ldr	r1, [r7, #24]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fe56 	bl	800a1f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	3301      	adds	r3, #1
 800a54a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1af      	bne.n	800a4ba <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a568:	4b07      	ldr	r3, [pc, #28]	@ (800a588 <LL_RCC_HSI_IsReady+0x24>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a574:	d101      	bne.n	800a57a <LL_RCC_HSI_IsReady+0x16>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <LL_RCC_HSI_IsReady+0x18>
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40021000 	.word	0x40021000

0800a58c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800a590:	4b07      	ldr	r3, [pc, #28]	@ (800a5b0 <LL_RCC_LSE_IsReady+0x24>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d101      	bne.n	800a5a2 <LL_RCC_LSE_IsReady+0x16>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <LL_RCC_LSE_IsReady+0x18>
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40021000 	.word	0x40021000

0800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800a5b8:	4b06      	ldr	r3, [pc, #24]	@ (800a5d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d101      	bne.n	800a5c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	40021000 	.word	0x40021000

0800a5d8 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800a5dc:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <LL_RCC_MSI_GetRange+0x18>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	40021000 	.word	0x40021000

0800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800a5f8:	4b04      	ldr	r3, [pc, #16]	@ (800a60c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800a5fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800a602:	4618      	mov	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	40021000 	.word	0x40021000

0800a610 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a610:	b480      	push	{r7}
 800a612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a614:	4b04      	ldr	r3, [pc, #16]	@ (800a628 <LL_RCC_GetSysClkSource+0x18>)
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f003 030c 	and.w	r3, r3, #12
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	40021000 	.word	0x40021000

0800a62c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a630:	4b04      	ldr	r3, [pc, #16]	@ (800a644 <LL_RCC_GetAHBPrescaler+0x18>)
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	40021000 	.word	0x40021000

0800a648 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <LL_RCC_GetAPB1Prescaler+0x18>)
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a654:	4618      	mov	r0, r3
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40021000 	.word	0x40021000

0800a664 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a668:	4b04      	ldr	r3, [pc, #16]	@ (800a67c <LL_RCC_GetAPB2Prescaler+0x18>)
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a670:	4618      	mov	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40021000 	.word	0x40021000

0800a680 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a688:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <LL_RCC_GetUSARTClockSource+0x24>)
 800a68a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	401a      	ands	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	041b      	lsls	r3, r3, #16
 800a696:	4313      	orrs	r3, r2
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	40021000 	.word	0x40021000

0800a6a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a6ac:	4b04      	ldr	r3, [pc, #16]	@ (800a6c0 <LL_RCC_PLL_GetMainSource+0x18>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f003 0303 	and.w	r3, r3, #3
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	40021000 	.word	0x40021000

0800a6c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a6c8:	4b04      	ldr	r3, [pc, #16]	@ (800a6dc <LL_RCC_PLL_GetN+0x18>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	0a1b      	lsrs	r3, r3, #8
 800a6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	40021000 	.word	0x40021000

0800a6e0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a6e4:	4b04      	ldr	r3, [pc, #16]	@ (800a6f8 <LL_RCC_PLL_GetR+0x18>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	40021000 	.word	0x40021000

0800a6fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a700:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <LL_RCC_PLL_GetDivider+0x18>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a708:	4618      	mov	r0, r3
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40021000 	.word	0x40021000

0800a718 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d137      	bne.n	800a79a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff ffa8 	bl	800a680 <LL_RCC_GetUSARTClockSource>
 800a730:	4603      	mov	r3, r0
 800a732:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800a736:	2b03      	cmp	r3, #3
 800a738:	f200 80b3 	bhi.w	800a8a2 <LL_RCC_GetUSARTClockFreq+0x18a>
 800a73c:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a783 	.word	0x0800a783
 800a748:	0800a755 	.word	0x0800a755
 800a74c:	0800a75d 	.word	0x0800a75d
 800a750:	0800a76f 	.word	0x0800a76f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a754:	f000 f8c2 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a758:	60f8      	str	r0, [r7, #12]
        break;
 800a75a:	e0b3      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a75c:	f7ff ff02 	bl	800a564 <LL_RCC_HSI_IsReady>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 809f 	beq.w	800a8a6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800a768:	4b59      	ldr	r3, [pc, #356]	@ (800a8d0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800a76a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a76c:	e09b      	b.n	800a8a6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a76e:	f7ff ff0d 	bl	800a58c <LL_RCC_LSE_IsReady>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8098 	beq.w	800a8aa <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800a77a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a77e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a780:	e093      	b.n	800a8aa <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a782:	f000 f8ab 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a786:	4603      	mov	r3, r0
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f937 	bl	800a9fc <RCC_GetHCLKClockFreq>
 800a78e:	4603      	mov	r3, r0
 800a790:	4618      	mov	r0, r3
 800a792:	f000 f95d 	bl	800aa50 <RCC_GetPCLK2ClockFreq>
 800a796:	60f8      	str	r0, [r7, #12]
        break;
 800a798:	e094      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b0c      	cmp	r3, #12
 800a79e:	d146      	bne.n	800a82e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff6d 	bl	800a680 <LL_RCC_GetUSARTClockSource>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	d87e      	bhi.n	800a8ae <LL_RCC_GetUSARTClockFreq+0x196>
 800a7b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800a7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b6:	bf00      	nop
 800a7b8:	0800a817 	.word	0x0800a817
 800a7bc:	0800a8af 	.word	0x0800a8af
 800a7c0:	0800a8af 	.word	0x0800a8af
 800a7c4:	0800a8af 	.word	0x0800a8af
 800a7c8:	0800a7ed 	.word	0x0800a7ed
 800a7cc:	0800a8af 	.word	0x0800a8af
 800a7d0:	0800a8af 	.word	0x0800a8af
 800a7d4:	0800a8af 	.word	0x0800a8af
 800a7d8:	0800a7f5 	.word	0x0800a7f5
 800a7dc:	0800a8af 	.word	0x0800a8af
 800a7e0:	0800a8af 	.word	0x0800a8af
 800a7e4:	0800a8af 	.word	0x0800a8af
 800a7e8:	0800a805 	.word	0x0800a805
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a7ec:	f000 f876 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a7f0:	60f8      	str	r0, [r7, #12]
        break;
 800a7f2:	e067      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a7f4:	f7ff feb6 	bl	800a564 <LL_RCC_HSI_IsReady>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d059      	beq.n	800a8b2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800a7fe:	4b34      	ldr	r3, [pc, #208]	@ (800a8d0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800a800:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a802:	e056      	b.n	800a8b2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a804:	f7ff fec2 	bl	800a58c <LL_RCC_LSE_IsReady>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d053      	beq.n	800a8b6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800a80e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a812:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a814:	e04f      	b.n	800a8b6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a816:	f000 f861 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a81a:	4603      	mov	r3, r0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 f8ed 	bl	800a9fc <RCC_GetHCLKClockFreq>
 800a822:	4603      	mov	r3, r0
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f8ff 	bl	800aa28 <RCC_GetPCLK1ClockFreq>
 800a82a:	60f8      	str	r0, [r7, #12]
        break;
 800a82c:	e04a      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b30      	cmp	r3, #48	@ 0x30
 800a832:	d147      	bne.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff ff23 	bl	800a680 <LL_RCC_GetUSARTClockSource>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800a840:	d01a      	beq.n	800a878 <LL_RCC_GetUSARTClockFreq+0x160>
 800a842:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800a846:	d838      	bhi.n	800a8ba <LL_RCC_GetUSARTClockFreq+0x1a2>
 800a848:	4a22      	ldr	r2, [pc, #136]	@ (800a8d4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00c      	beq.n	800a868 <LL_RCC_GetUSARTClockFreq+0x150>
 800a84e:	4a21      	ldr	r2, [pc, #132]	@ (800a8d4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d832      	bhi.n	800a8ba <LL_RCC_GetUSARTClockFreq+0x1a2>
 800a854:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a858:	d017      	beq.n	800a88a <LL_RCC_GetUSARTClockFreq+0x172>
 800a85a:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d12c      	bne.n	800a8ba <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800a860:	f000 f83c 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a864:	60f8      	str	r0, [r7, #12]
          break;
 800a866:	e02d      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800a868:	f7ff fe7c 	bl	800a564 <LL_RCC_HSI_IsReady>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d025      	beq.n	800a8be <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800a872:	4b17      	ldr	r3, [pc, #92]	@ (800a8d0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800a874:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a876:	e022      	b.n	800a8be <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800a878:	f7ff fe88 	bl	800a58c <LL_RCC_LSE_IsReady>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01f      	beq.n	800a8c2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800a882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a886:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a888:	e01b      	b.n	800a8c2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a88a:	f000 f827 	bl	800a8dc <RCC_GetSystemClockFreq>
 800a88e:	4603      	mov	r3, r0
 800a890:	4618      	mov	r0, r3
 800a892:	f000 f8b3 	bl	800a9fc <RCC_GetHCLKClockFreq>
 800a896:	4603      	mov	r3, r0
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f8c5 	bl	800aa28 <RCC_GetPCLK1ClockFreq>
 800a89e:	60f8      	str	r0, [r7, #12]
          break;
 800a8a0:	e010      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8a2:	bf00      	nop
 800a8a4:	e00e      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8a6:	bf00      	nop
 800a8a8:	e00c      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8aa:	bf00      	nop
 800a8ac:	e00a      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8ae:	bf00      	nop
 800a8b0:	e008      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8b2:	bf00      	nop
 800a8b4:	e006      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800a8b6:	bf00      	nop
 800a8b8:	e004      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 800a8ba:	bf00      	nop
 800a8bc:	e002      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800a8be:	bf00      	nop
 800a8c0:	e000      	b.n	800a8c4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800a8c2:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	00f42400 	.word	0x00f42400
 800a8d4:	00300020 	.word	0x00300020
 800a8d8:	00300010 	.word	0x00300010

0800a8dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a8e2:	f7ff fe95 	bl	800a610 <LL_RCC_GetSysClkSource>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b0c      	cmp	r3, #12
 800a8ea:	d851      	bhi.n	800a990 <RCC_GetSystemClockFreq+0xb4>
 800a8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <RCC_GetSystemClockFreq+0x18>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a929 	.word	0x0800a929
 800a8f8:	0800a991 	.word	0x0800a991
 800a8fc:	0800a991 	.word	0x0800a991
 800a900:	0800a991 	.word	0x0800a991
 800a904:	0800a97d 	.word	0x0800a97d
 800a908:	0800a991 	.word	0x0800a991
 800a90c:	0800a991 	.word	0x0800a991
 800a910:	0800a991 	.word	0x0800a991
 800a914:	0800a983 	.word	0x0800a983
 800a918:	0800a991 	.word	0x0800a991
 800a91c:	0800a991 	.word	0x0800a991
 800a920:	0800a991 	.word	0x0800a991
 800a924:	0800a989 	.word	0x0800a989
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a928:	f7ff fe44 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d111      	bne.n	800a956 <RCC_GetSystemClockFreq+0x7a>
 800a932:	f7ff fe3f 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <RCC_GetSystemClockFreq+0x6a>
 800a93c:	f7ff fe4c 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800a940:	4603      	mov	r3, r0
 800a942:	0a1b      	lsrs	r3, r3, #8
 800a944:	e003      	b.n	800a94e <RCC_GetSystemClockFreq+0x72>
 800a946:	f7ff fe55 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a94a:	4603      	mov	r3, r0
 800a94c:	0a1b      	lsrs	r3, r3, #8
 800a94e:	4a28      	ldr	r2, [pc, #160]	@ (800a9f0 <RCC_GetSystemClockFreq+0x114>)
 800a950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a954:	e010      	b.n	800a978 <RCC_GetSystemClockFreq+0x9c>
 800a956:	f7ff fe2d 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <RCC_GetSystemClockFreq+0x8e>
 800a960:	f7ff fe3a 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800a964:	4603      	mov	r3, r0
 800a966:	091b      	lsrs	r3, r3, #4
 800a968:	e003      	b.n	800a972 <RCC_GetSystemClockFreq+0x96>
 800a96a:	f7ff fe43 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a96e:	4603      	mov	r3, r0
 800a970:	091b      	lsrs	r3, r3, #4
 800a972:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f0 <RCC_GetSystemClockFreq+0x114>)
 800a974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a978:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800a97a:	e033      	b.n	800a9e4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800a97c:	4b1d      	ldr	r3, [pc, #116]	@ (800a9f4 <RCC_GetSystemClockFreq+0x118>)
 800a97e:	607b      	str	r3, [r7, #4]
      break;
 800a980:	e030      	b.n	800a9e4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a982:	4b1d      	ldr	r3, [pc, #116]	@ (800a9f8 <RCC_GetSystemClockFreq+0x11c>)
 800a984:	607b      	str	r3, [r7, #4]
      break;
 800a986:	e02d      	b.n	800a9e4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a988:	f000 f876 	bl	800aa78 <RCC_PLL_GetFreqDomain_SYS>
 800a98c:	6078      	str	r0, [r7, #4]
      break;
 800a98e:	e029      	b.n	800a9e4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a990:	f7ff fe10 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d111      	bne.n	800a9be <RCC_GetSystemClockFreq+0xe2>
 800a99a:	f7ff fe0b 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <RCC_GetSystemClockFreq+0xd2>
 800a9a4:	f7ff fe18 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	e003      	b.n	800a9b6 <RCC_GetSystemClockFreq+0xda>
 800a9ae:	f7ff fe21 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	0a1b      	lsrs	r3, r3, #8
 800a9b6:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f0 <RCC_GetSystemClockFreq+0x114>)
 800a9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9bc:	e010      	b.n	800a9e0 <RCC_GetSystemClockFreq+0x104>
 800a9be:	f7ff fdf9 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <RCC_GetSystemClockFreq+0xf6>
 800a9c8:	f7ff fe06 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	091b      	lsrs	r3, r3, #4
 800a9d0:	e003      	b.n	800a9da <RCC_GetSystemClockFreq+0xfe>
 800a9d2:	f7ff fe0f 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	091b      	lsrs	r3, r3, #4
 800a9da:	4a05      	ldr	r2, [pc, #20]	@ (800a9f0 <RCC_GetSystemClockFreq+0x114>)
 800a9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800a9e2:	bf00      	nop
  }

  return frequency;
 800a9e4:	687b      	ldr	r3, [r7, #4]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	0800f958 	.word	0x0800f958
 800a9f4:	00f42400 	.word	0x00f42400
 800a9f8:	007a1200 	.word	0x007a1200

0800a9fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800aa04:	f7ff fe12 	bl	800a62c <LL_RCC_GetAHBPrescaler>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	091b      	lsrs	r3, r3, #4
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	4a04      	ldr	r2, [pc, #16]	@ (800aa24 <RCC_GetHCLKClockFreq+0x28>)
 800aa12:	5cd3      	ldrb	r3, [r2, r3]
 800aa14:	461a      	mov	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	40d3      	lsrs	r3, r2
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800f940 	.word	0x0800f940

0800aa28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800aa30:	f7ff fe0a 	bl	800a648 <LL_RCC_GetAPB1Prescaler>
 800aa34:	4603      	mov	r3, r0
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	4a04      	ldr	r2, [pc, #16]	@ (800aa4c <RCC_GetPCLK1ClockFreq+0x24>)
 800aa3a:	5cd3      	ldrb	r3, [r2, r3]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	40d3      	lsrs	r3, r2
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800f950 	.word	0x0800f950

0800aa50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800aa58:	f7ff fe04 	bl	800a664 <LL_RCC_GetAPB2Prescaler>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	0adb      	lsrs	r3, r3, #11
 800aa60:	4a04      	ldr	r2, [pc, #16]	@ (800aa74 <RCC_GetPCLK2ClockFreq+0x24>)
 800aa62:	5cd3      	ldrb	r3, [r2, r3]
 800aa64:	461a      	mov	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	40d3      	lsrs	r3, r2
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	0800f950 	.word	0x0800f950

0800aa78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800aa78:	b590      	push	{r4, r7, lr}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800aa7e:	f7ff fe13 	bl	800a6a8 <LL_RCC_PLL_GetMainSource>
 800aa82:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d036      	beq.n	800aaf8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d836      	bhi.n	800aafe <RCC_PLL_GetFreqDomain_SYS+0x86>
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d003      	beq.n	800aa9e <RCC_PLL_GetFreqDomain_SYS+0x26>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d02a      	beq.n	800aaf2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800aa9c:	e02f      	b.n	800aafe <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800aa9e:	f7ff fd89 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d111      	bne.n	800aacc <RCC_PLL_GetFreqDomain_SYS+0x54>
 800aaa8:	f7ff fd84 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <RCC_PLL_GetFreqDomain_SYS+0x44>
 800aab2:	f7ff fd91 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800aab6:	4603      	mov	r3, r0
 800aab8:	0a1b      	lsrs	r3, r3, #8
 800aaba:	e003      	b.n	800aac4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800aabc:	f7ff fd9a 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800aac0:	4603      	mov	r3, r0
 800aac2:	0a1b      	lsrs	r3, r3, #8
 800aac4:	4a2f      	ldr	r2, [pc, #188]	@ (800ab84 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaca:	e010      	b.n	800aaee <RCC_PLL_GetFreqDomain_SYS+0x76>
 800aacc:	f7ff fd72 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800aad6:	f7ff fd7f 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800aada:	4603      	mov	r3, r0
 800aadc:	091b      	lsrs	r3, r3, #4
 800aade:	e003      	b.n	800aae8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800aae0:	f7ff fd88 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800aae4:	4603      	mov	r3, r0
 800aae6:	091b      	lsrs	r3, r3, #4
 800aae8:	4a26      	ldr	r2, [pc, #152]	@ (800ab84 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aaea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaee:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800aaf0:	e02f      	b.n	800ab52 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800aaf2:	4b25      	ldr	r3, [pc, #148]	@ (800ab88 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800aaf4:	607b      	str	r3, [r7, #4]
      break;
 800aaf6:	e02c      	b.n	800ab52 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800aaf8:	4b24      	ldr	r3, [pc, #144]	@ (800ab8c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800aafa:	607b      	str	r3, [r7, #4]
      break;
 800aafc:	e029      	b.n	800ab52 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800aafe:	f7ff fd59 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d111      	bne.n	800ab2c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800ab08:	f7ff fd54 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800ab12:	f7ff fd61 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800ab16:	4603      	mov	r3, r0
 800ab18:	0a1b      	lsrs	r3, r3, #8
 800ab1a:	e003      	b.n	800ab24 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800ab1c:	f7ff fd6a 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800ab20:	4603      	mov	r3, r0
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	4a17      	ldr	r2, [pc, #92]	@ (800ab84 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800ab26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab2a:	e010      	b.n	800ab4e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800ab2c:	f7ff fd42 	bl	800a5b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d004      	beq.n	800ab40 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800ab36:	f7ff fd4f 	bl	800a5d8 <LL_RCC_MSI_GetRange>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	091b      	lsrs	r3, r3, #4
 800ab3e:	e003      	b.n	800ab48 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800ab40:	f7ff fd58 	bl	800a5f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800ab44:	4603      	mov	r3, r0
 800ab46:	091b      	lsrs	r3, r3, #4
 800ab48:	4a0e      	ldr	r2, [pc, #56]	@ (800ab84 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800ab4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab4e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800ab50:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ab52:	f7ff fdd3 	bl	800a6fc <LL_RCC_PLL_GetDivider>
 800ab56:	4603      	mov	r3, r0
 800ab58:	091b      	lsrs	r3, r3, #4
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	fbb2 f4f3 	udiv	r4, r2, r3
 800ab62:	f7ff fdaf 	bl	800a6c4 <LL_RCC_PLL_GetN>
 800ab66:	4603      	mov	r3, r0
 800ab68:	fb03 f404 	mul.w	r4, r3, r4
 800ab6c:	f7ff fdb8 	bl	800a6e0 <LL_RCC_PLL_GetR>
 800ab70:	4603      	mov	r3, r0
 800ab72:	0e5b      	lsrs	r3, r3, #25
 800ab74:	3301      	adds	r3, #1
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd90      	pop	{r4, r7, pc}
 800ab84:	0800f958 	.word	0x0800f958
 800ab88:	00f42400 	.word	0x00f42400
 800ab8c:	007a1200 	.word	0x007a1200

0800ab90 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab90:	b084      	sub	sp, #16
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	f107 001c 	add.w	r0, r7, #28
 800ab9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800abae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800abb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800abb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800abb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800abba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800abbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800abce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	b004      	add	sp, #16
 800abe8:	4770      	bx	lr

0800abea <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2203      	movs	r2, #3
 800ac32:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ac34:	2002      	movs	r0, #2
 800ac36:	f7f7 fec9 	bl	80029cc <HAL_Delay>

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0303 	and.w	r3, r3, #3
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac84:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ac9a:	f023 030f 	bic.w	r3, r3, #15
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	b2db      	uxtb	r3, r3
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800acce:	b480      	push	{r7}
 800acd0:	b085      	sub	sp, #20
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3314      	adds	r3, #20
 800acdc:	461a      	mov	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	4413      	add	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ad20:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ad26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad32:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0

}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad5a:	2310      	movs	r3, #16
 800ad5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5e:	2340      	movs	r3, #64	@ 0x40
 800ad60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad6c:	f107 0308 	add.w	r3, r7, #8
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff ff74 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad7c:	2110      	movs	r1, #16
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa18 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800ad84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad86:	69fb      	ldr	r3, [r7, #28]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad9e:	2311      	movs	r3, #17
 800ada0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada2:	2340      	movs	r3, #64	@ 0x40
 800ada4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff ff52 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800adbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adc0:	2111      	movs	r1, #17
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9f6 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ade2:	2312      	movs	r3, #18
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade6:	2340      	movs	r3, #64	@ 0x40
 800ade8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff ff30 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae04:	2112      	movs	r1, #18
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9d4 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800ae0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae26:	2318      	movs	r3, #24
 800ae28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae2a:	2340      	movs	r3, #64	@ 0x40
 800ae2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae38:	f107 0308 	add.w	r3, r7, #8
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff ff0e 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ae44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae48:	2118      	movs	r1, #24
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9b2 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800ae50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae52:	69fb      	ldr	r3, [r7, #28]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3720      	adds	r7, #32
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae6a:	2319      	movs	r3, #25
 800ae6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae6e:	2340      	movs	r3, #64	@ 0x40
 800ae70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae7c:	f107 0308 	add.w	r3, r7, #8
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff feec 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae8c:	2119      	movs	r1, #25
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f990 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800ae94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae96:	69fb      	ldr	r3, [r7, #28]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3720      	adds	r7, #32
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aeac:	230c      	movs	r3, #12
 800aeae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb0:	2340      	movs	r3, #64	@ 0x40
 800aeb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aebc:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebe:	f107 0308 	add.w	r3, r7, #8
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fecb 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aeca:	4a05      	ldr	r2, [pc, #20]	@ (800aee0 <SDMMC_CmdStopTransfer+0x40>)
 800aecc:	210c      	movs	r1, #12
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f970 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800aed4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800aed6:	69fb      	ldr	r3, [r7, #28]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3720      	adds	r7, #32
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	05f5e100 	.word	0x05f5e100

0800aee4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08a      	sub	sp, #40	@ 0x28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aef4:	2307      	movs	r3, #7
 800aef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef8:	2340      	movs	r3, #64	@ 0x40
 800aefa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aefc:	2300      	movs	r3, #0
 800aefe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af04:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af06:	f107 0310 	add.w	r3, r7, #16
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff fea7 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800af12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af16:	2107      	movs	r1, #7
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 f94b 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800af1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af22:	4618      	mov	r0, r3
 800af24:	3728      	adds	r7, #40	@ 0x28
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b088      	sub	sp, #32
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800af3a:	2300      	movs	r3, #0
 800af3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af48:	f107 0308 	add.w	r3, r7, #8
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fe86 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fb65 	bl	800b624 <SDMMC_GetCmdError>
 800af5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800af72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af74:	2308      	movs	r3, #8
 800af76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af78:	2340      	movs	r3, #64	@ 0x40
 800af7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af7c:	2300      	movs	r3, #0
 800af7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff fe67 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 faf8 	bl	800b588 <SDMMC_GetCmdResp7>
 800af98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af9a:	69fb      	ldr	r3, [r7, #28]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800afb2:	2337      	movs	r3, #55	@ 0x37
 800afb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afb6:	2340      	movs	r3, #64	@ 0x40
 800afb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc4:	f107 0308 	add.w	r3, r7, #8
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fe48 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afd4:	2137      	movs	r1, #55	@ 0x37
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8ec 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800afdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afde:	69fb      	ldr	r3, [r7, #28]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3720      	adds	r7, #32
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aff8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800affc:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800affe:	2329      	movs	r3, #41	@ 0x29
 800b000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b002:	2340      	movs	r3, #64	@ 0x40
 800b004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b00e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff fe22 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9ff 	bl	800b420 <SDMMC_GetCmdResp3>
 800b022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b024:	69fb      	ldr	r3, [r7, #28]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b088      	sub	sp, #32
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b03c:	2306      	movs	r3, #6
 800b03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b040:	2340      	movs	r3, #64	@ 0x40
 800b042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b044:	2300      	movs	r3, #0
 800b046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b04c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b04e:	f107 0308 	add.w	r3, r7, #8
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fe03 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b05a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b05e:	2106      	movs	r1, #6
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f8a7 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800b066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b068:	69fb      	ldr	r3, [r7, #28]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b07e:	2333      	movs	r3, #51	@ 0x33
 800b080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b082:	2340      	movs	r3, #64	@ 0x40
 800b084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b086:	2300      	movs	r3, #0
 800b088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b08e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b090:	f107 0308 	add.w	r3, r7, #8
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7ff fde2 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b09c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0a0:	2133      	movs	r1, #51	@ 0x33
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f886 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800b0a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0aa:	69fb      	ldr	r3, [r7, #28]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3720      	adds	r7, #32
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0c4:	23c0      	movs	r3, #192	@ 0xc0
 800b0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d2:	f107 0308 	add.w	r3, r7, #8
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7ff fdc1 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f956 	bl	800b390 <SDMMC_GetCmdResp2>
 800b0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0fe:	2309      	movs	r3, #9
 800b100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b102:	23c0      	movs	r3, #192	@ 0xc0
 800b104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b106:	2300      	movs	r3, #0
 800b108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fda2 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f937 	bl	800b390 <SDMMC_GetCmdResp2>
 800b122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b124:	69fb      	ldr	r3, [r7, #28]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b13c:	2303      	movs	r3, #3
 800b13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b140:	2340      	movs	r3, #64	@ 0x40
 800b142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b14c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff fd83 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	2103      	movs	r1, #3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f99c 	bl	800b49c <SDMMC_GetCmdResp6>
 800b164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b166:	69fb      	ldr	r3, [r7, #28]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3720      	adds	r7, #32
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b088      	sub	sp, #32
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b17e:	230d      	movs	r3, #13
 800b180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b182:	2340      	movs	r3, #64	@ 0x40
 800b184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b18e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b190:	f107 0308 	add.w	r3, r7, #8
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7ff fd62 	bl	800ac60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b19c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1a0:	210d      	movs	r1, #13
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f806 	bl	800b1b4 <SDMMC_GetCmdResp1>
 800b1a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3720      	adds	r7, #32
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1c2:	4b70      	ldr	r3, [pc, #448]	@ (800b384 <SDMMC_GetCmdResp1+0x1d0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a70      	ldr	r2, [pc, #448]	@ (800b388 <SDMMC_GetCmdResp1+0x1d4>)
 800b1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1cc:	0a5a      	lsrs	r2, r3, #9
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	fb02 f303 	mul.w	r3, r2, r3
 800b1d4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	1e5a      	subs	r2, r3, #1
 800b1da:	61fa      	str	r2, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1e4:	e0c9      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ea:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0ef      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ea      	bne.n	800b1d6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2204      	movs	r2, #4
 800b210:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b212:	2304      	movs	r3, #4
 800b214:	e0b1      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b228:	2301      	movs	r3, #1
 800b22a:	e0a6      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	22c5      	movs	r2, #197	@ 0xc5
 800b230:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff fd3e 	bl	800acb4 <SDMMC_GetCommandResponse>
 800b238:	4603      	mov	r3, r0
 800b23a:	461a      	mov	r2, r3
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	4293      	cmp	r3, r2
 800b240:	d001      	beq.n	800b246 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b242:	2301      	movs	r3, #1
 800b244:	e099      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b246:	2100      	movs	r1, #0
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7ff fd40 	bl	800acce <SDMMC_GetResponse>
 800b24e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	4b4e      	ldr	r3, [pc, #312]	@ (800b38c <SDMMC_GetCmdResp1+0x1d8>)
 800b254:	4013      	ands	r3, r2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e08d      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	da02      	bge.n	800b26a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b268:	e087      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b274:	2340      	movs	r3, #64	@ 0x40
 800b276:	e080      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b282:	2380      	movs	r3, #128	@ 0x80
 800b284:	e079      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b294:	e071      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2a4:	e069      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2b4:	e061      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b2c4:	e059      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2d4:	e051      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2e4:	e049      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b2f4:	e041      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b304:	e039      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b314:	e031      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b320:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b324:	e029      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b330:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b334:	e021      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b340:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b344:	e019      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b350:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b354:	e011      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b360:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b364:	e009      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b370:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b374:	e001      	b.n	800b37a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3720      	adds	r7, #32
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20000000 	.word	0x20000000
 800b388:	10624dd3 	.word	0x10624dd3
 800b38c:	fdffe008 	.word	0xfdffe008

0800b390 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b398:	4b1f      	ldr	r3, [pc, #124]	@ (800b418 <SDMMC_GetCmdResp2+0x88>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a1f      	ldr	r2, [pc, #124]	@ (800b41c <SDMMC_GetCmdResp2+0x8c>)
 800b39e:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a2:	0a5b      	lsrs	r3, r3, #9
 800b3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3a8:	fb02 f303 	mul.w	r3, r2, r3
 800b3ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1e5a      	subs	r2, r3, #1
 800b3b2:	60fa      	str	r2, [r7, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3bc:	e026      	b.n	800b40c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0ef      	beq.n	800b3ae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1ea      	bne.n	800b3ae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3dc:	f003 0304 	and.w	r3, r3, #4
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d004      	beq.n	800b3ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2204      	movs	r2, #4
 800b3e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ea:	2304      	movs	r3, #4
 800b3ec:	e00e      	b.n	800b40c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d004      	beq.n	800b404 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b400:	2301      	movs	r3, #1
 800b402:	e003      	b.n	800b40c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	22c5      	movs	r2, #197	@ 0xc5
 800b408:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20000000 	.word	0x20000000
 800b41c:	10624dd3 	.word	0x10624dd3

0800b420 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b428:	4b1a      	ldr	r3, [pc, #104]	@ (800b494 <SDMMC_GetCmdResp3+0x74>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1a      	ldr	r2, [pc, #104]	@ (800b498 <SDMMC_GetCmdResp3+0x78>)
 800b42e:	fba2 2303 	umull	r2, r3, r2, r3
 800b432:	0a5b      	lsrs	r3, r3, #9
 800b434:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b438:	fb02 f303 	mul.w	r3, r2, r3
 800b43c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	1e5a      	subs	r2, r3, #1
 800b442:	60fa      	str	r2, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d102      	bne.n	800b44e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b448:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b44c:	e01b      	b.n	800b486 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b452:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0ef      	beq.n	800b43e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1ea      	bne.n	800b43e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2204      	movs	r2, #4
 800b478:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b47a:	2304      	movs	r3, #4
 800b47c:	e003      	b.n	800b486 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	22c5      	movs	r2, #197	@ 0xc5
 800b482:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	20000000 	.word	0x20000000
 800b498:	10624dd3 	.word	0x10624dd3

0800b49c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4aa:	4b35      	ldr	r3, [pc, #212]	@ (800b580 <SDMMC_GetCmdResp6+0xe4>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a35      	ldr	r2, [pc, #212]	@ (800b584 <SDMMC_GetCmdResp6+0xe8>)
 800b4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b4:	0a5b      	lsrs	r3, r3, #9
 800b4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
 800b4be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	1e5a      	subs	r2, r3, #1
 800b4c4:	61fa      	str	r2, [r7, #28]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4ce:	e052      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0ef      	beq.n	800b4c0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1ea      	bne.n	800b4c0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ee:	f003 0304 	and.w	r3, r3, #4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2204      	movs	r2, #4
 800b4fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	e03a      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2201      	movs	r2, #1
 800b510:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b512:	2301      	movs	r3, #1
 800b514:	e02f      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fbcc 	bl	800acb4 <SDMMC_GetCommandResponse>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	4293      	cmp	r3, r2
 800b524:	d001      	beq.n	800b52a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b526:	2301      	movs	r3, #1
 800b528:	e025      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22c5      	movs	r2, #197	@ 0xc5
 800b52e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b530:	2100      	movs	r1, #0
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fbcb 	bl	800acce <SDMMC_GetResponse>
 800b538:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	0c1b      	lsrs	r3, r3, #16
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	e011      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b55c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b560:	e009      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b56c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b570:	e001      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b576:	4618      	mov	r0, r3
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000000 	.word	0x20000000
 800b584:	10624dd3 	.word	0x10624dd3

0800b588 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b590:	4b22      	ldr	r3, [pc, #136]	@ (800b61c <SDMMC_GetCmdResp7+0x94>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a22      	ldr	r2, [pc, #136]	@ (800b620 <SDMMC_GetCmdResp7+0x98>)
 800b596:	fba2 2303 	umull	r2, r3, r2, r3
 800b59a:	0a5b      	lsrs	r3, r3, #9
 800b59c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5a0:	fb02 f303 	mul.w	r3, r2, r3
 800b5a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	1e5a      	subs	r2, r3, #1
 800b5aa:	60fa      	str	r2, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5b4:	e02c      	b.n	800b610 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0ef      	beq.n	800b5a6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1ea      	bne.n	800b5a6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2204      	movs	r2, #4
 800b5e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	e014      	b.n	800b610 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d004      	beq.n	800b5fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e009      	b.n	800b610 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2240      	movs	r2, #64	@ 0x40
 800b60c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b60e:	2300      	movs	r3, #0

}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	20000000 	.word	0x20000000
 800b620:	10624dd3 	.word	0x10624dd3

0800b624 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b62c:	4b11      	ldr	r3, [pc, #68]	@ (800b674 <SDMMC_GetCmdError+0x50>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a11      	ldr	r2, [pc, #68]	@ (800b678 <SDMMC_GetCmdError+0x54>)
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	0a5b      	lsrs	r3, r3, #9
 800b638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b63c:	fb02 f303 	mul.w	r3, r2, r3
 800b640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1e5a      	subs	r2, r3, #1
 800b646:	60fa      	str	r2, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b64c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b650:	e009      	b.n	800b666 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0f1      	beq.n	800b642 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	22c5      	movs	r2, #197	@ 0xc5
 800b662:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000000 	.word	0x20000000
 800b678:	10624dd3 	.word	0x10624dd3

0800b67c <LL_USART_IsEnabled>:
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <LL_USART_IsEnabled+0x18>
 800b690:	2301      	movs	r3, #1
 800b692:	e000      	b.n	800b696 <LL_USART_IsEnabled+0x1a>
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <LL_USART_SetStopBitsLength>:
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <LL_USART_SetHWFlowCtrl>:
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	609a      	str	r2, [r3, #8]
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LL_USART_SetBaudRate>:
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b087      	sub	sp, #28
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b702:	d11a      	bne.n	800b73a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	005a      	lsls	r2, r3, #1
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	085b      	lsrs	r3, r3, #1
 800b70c:	441a      	add	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	fbb2 f3f3 	udiv	r3, r2, r3
 800b714:	b29b      	uxth	r3, r3
 800b716:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800b71e:	4013      	ands	r3, r2
 800b720:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	085b      	lsrs	r3, r3, #1
 800b726:	b29b      	uxth	r3, r3
 800b728:	f003 0307 	and.w	r3, r3, #7
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	4313      	orrs	r3, r2
 800b730:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	60da      	str	r2, [r3, #12]
}
 800b738:	e00a      	b.n	800b750 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	085a      	lsrs	r2, r3, #1
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	441a      	add	r2, r3
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	fbb2 f3f3 	udiv	r3, r2, r3
 800b748:	b29b      	uxth	r3, r3
 800b74a:	461a      	mov	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	60da      	str	r2, [r3, #12]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff ff84 	bl	800b67c <LL_USART_IsEnabled>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d148      	bne.n	800b80c <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b26      	ldr	r3, [pc, #152]	@ (800b818 <LL_USART_Init+0xbc>)
 800b780:	4013      	ands	r3, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6851      	ldr	r1, [r2, #4]
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	68d2      	ldr	r2, [r2, #12]
 800b78a:	4311      	orrs	r1, r2
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	6912      	ldr	r2, [r2, #16]
 800b790:	4311      	orrs	r1, r2
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	6992      	ldr	r2, [r2, #24]
 800b796:	430a      	orrs	r2, r1
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ff7c 	bl	800b6a2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff ff89 	bl	800b6c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a18      	ldr	r2, [pc, #96]	@ (800b81c <LL_USART_Init+0xc0>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d104      	bne.n	800b7c8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800b7be:	2003      	movs	r0, #3
 800b7c0:	f7fe ffaa 	bl	800a718 <LL_RCC_GetUSARTClockFreq>
 800b7c4:	60b8      	str	r0, [r7, #8]
 800b7c6:	e010      	b.n	800b7ea <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a15      	ldr	r2, [pc, #84]	@ (800b820 <LL_USART_Init+0xc4>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d104      	bne.n	800b7da <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800b7d0:	200c      	movs	r0, #12
 800b7d2:	f7fe ffa1 	bl	800a718 <LL_RCC_GetUSARTClockFreq>
 800b7d6:	60b8      	str	r0, [r7, #8]
 800b7d8:	e007      	b.n	800b7ea <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a11      	ldr	r2, [pc, #68]	@ (800b824 <LL_USART_Init+0xc8>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d103      	bne.n	800b7ea <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800b7e2:	2030      	movs	r0, #48	@ 0x30
 800b7e4:	f7fe ff98 	bl	800a718 <LL_RCC_GetUSARTClockFreq>
 800b7e8:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00d      	beq.n	800b80c <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff ff71 	bl	800b6ee <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	efff69f3 	.word	0xefff69f3
 800b81c:	40013800 	.word	0x40013800
 800b820:	40004400 	.word	0x40004400
 800b824:	40004800 	.word	0x40004800

0800b828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b82c:	4904      	ldr	r1, [pc, #16]	@ (800b840 <MX_FATFS_Init+0x18>)
 800b82e:	4805      	ldr	r0, [pc, #20]	@ (800b844 <MX_FATFS_Init+0x1c>)
 800b830:	f000 fab8 	bl	800bda4 <FATFS_LinkDriver>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <MX_FATFS_Init+0x20>)
 800b83a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b83c:	bf00      	nop
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000678 	.word	0x20000678
 800b844:	0800f990 	.word	0x0800f990
 800b848:	20000674 	.word	0x20000674

0800b84c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b856:	f000 f896 	bl	800b986 <BSP_SD_IsDetected>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d001      	beq.n	800b864 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b860:	2302      	movs	r3, #2
 800b862:	e012      	b.n	800b88a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b864:	480b      	ldr	r0, [pc, #44]	@ (800b894 <BSP_SD_Init+0x48>)
 800b866:	f7fb f8f5 	bl	8006a54 <HAL_SD_Init>
 800b86a:	4603      	mov	r3, r0
 800b86c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b874:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b878:	4806      	ldr	r0, [pc, #24]	@ (800b894 <BSP_SD_Init+0x48>)
 800b87a:	f7fb fea5 	bl	80075c8 <HAL_SD_ConfigWideBusOperation>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b888:	79fb      	ldrb	r3, [r7, #7]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20000294 	.word	0x20000294

0800b898 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	68f9      	ldr	r1, [r7, #12]
 800b8ae:	4806      	ldr	r0, [pc, #24]	@ (800b8c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b8b0:	f7fb f9a6 	bl	8006c00 <HAL_SD_ReadBlocks_DMA>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20000294 	.word	0x20000294

0800b8cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	68f9      	ldr	r1, [r7, #12]
 800b8e2:	4806      	ldr	r0, [pc, #24]	@ (800b8fc <BSP_SD_WriteBlocks_DMA+0x30>)
 800b8e4:	f7fb fa54 	bl	8006d90 <HAL_SD_WriteBlocks_DMA>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20000294 	.word	0x20000294

0800b900 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b904:	4805      	ldr	r0, [pc, #20]	@ (800b91c <BSP_SD_GetCardState+0x1c>)
 800b906:	f7fb ff1b 	bl	8007740 <HAL_SD_GetCardState>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	bf14      	ite	ne
 800b910:	2301      	movne	r3, #1
 800b912:	2300      	moveq	r3, #0
 800b914:	b2db      	uxtb	r3, r3
}
 800b916:	4618      	mov	r0, r3
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000294 	.word	0x20000294

0800b920 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b928:	6879      	ldr	r1, [r7, #4]
 800b92a:	4803      	ldr	r0, [pc, #12]	@ (800b938 <BSP_SD_GetCardInfo+0x18>)
 800b92c:	f7fb fe20 	bl	8007570 <HAL_SD_GetCardInfo>
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20000294 	.word	0x20000294

0800b93c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b944:	f000 f818 	bl	800b978 <BSP_SD_AbortCallback>
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b958:	f000 f9b4 	bl	800bcc4 <BSP_SD_WriteCpltCallback>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b96c:	f000 f9bc 	bl	800bce8 <BSP_SD_ReadCpltCallback>
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b978:	b480      	push	{r7}
 800b97a:	af00      	add	r7, sp, #0

}
 800b97c:	bf00      	nop
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b98c:	2301      	movs	r3, #1
 800b98e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b990:	f000 f80c 	bl	800b9ac <BSP_PlatformIsDetected>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b99a:	2300      	movs	r3, #0
 800b99c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	b2db      	uxtb	r3, r3
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b9b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b9ba:	4806      	ldr	r0, [pc, #24]	@ (800b9d4 <BSP_PlatformIsDetected+0x28>)
 800b9bc:	f7f7 fdfc 	bl	80035b8 <HAL_GPIO_ReadPin>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	48000800 	.word	0x48000800

0800b9d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b9e0:	f000 faa0 	bl	800bf24 <osKernelGetTickCount>
 800b9e4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b9e6:	e006      	b.n	800b9f6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9e8:	f7ff ff8a 	bl	800b900 <BSP_SD_GetCardState>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e009      	b.n	800ba0a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b9f6:	f000 fa95 	bl	800bf24 <osKernelGetTickCount>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d8f0      	bhi.n	800b9e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ba06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ba1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba4c <SD_CheckStatus+0x38>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba24:	f7ff ff6c 	bl	800b900 <BSP_SD_GetCardState>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d107      	bne.n	800ba3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ba2e:	4b07      	ldr	r3, [pc, #28]	@ (800ba4c <SD_CheckStatus+0x38>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f023 0301 	bic.w	r3, r3, #1
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b04      	ldr	r3, [pc, #16]	@ (800ba4c <SD_CheckStatus+0x38>)
 800ba3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ba3e:	4b03      	ldr	r3, [pc, #12]	@ (800ba4c <SD_CheckStatus+0x38>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b2db      	uxtb	r3, r3
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20000009 	.word	0x20000009

0800ba50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ba5a:	4b1c      	ldr	r3, [pc, #112]	@ (800bacc <SD_initialize+0x7c>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800ba60:	f000 fa18 	bl	800be94 <osKernelGetState>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d129      	bne.n	800babe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ba6a:	f7ff feef 	bl	800b84c <BSP_SD_Init>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d107      	bne.n	800ba84 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff ffcc 	bl	800ba14 <SD_CheckStatus>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4b12      	ldr	r3, [pc, #72]	@ (800bacc <SD_initialize+0x7c>)
 800ba82:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ba84:	4b11      	ldr	r3, [pc, #68]	@ (800bacc <SD_initialize+0x7c>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d017      	beq.n	800babe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800ba8e:	4b10      	ldr	r3, [pc, #64]	@ (800bad0 <SD_initialize+0x80>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d107      	bne.n	800baa6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800ba96:	2200      	movs	r2, #0
 800ba98:	2102      	movs	r1, #2
 800ba9a:	200a      	movs	r0, #10
 800ba9c:	f000 fb04 	bl	800c0a8 <osMessageQueueNew>
 800baa0:	4603      	mov	r3, r0
 800baa2:	4a0b      	ldr	r2, [pc, #44]	@ (800bad0 <SD_initialize+0x80>)
 800baa4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800baa6:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <SD_initialize+0x80>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d107      	bne.n	800babe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800baae:	4b07      	ldr	r3, [pc, #28]	@ (800bacc <SD_initialize+0x7c>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	f043 0301 	orr.w	r3, r3, #1
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	4b04      	ldr	r3, [pc, #16]	@ (800bacc <SD_initialize+0x7c>)
 800babc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800babe:	4b03      	ldr	r3, [pc, #12]	@ (800bacc <SD_initialize+0x7c>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b2db      	uxtb	r3, r3
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	20000009 	.word	0x20000009
 800bad0:	2000067c 	.word	0x2000067c

0800bad4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bade:	79fb      	ldrb	r3, [r7, #7]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff ff97 	bl	800ba14 <SD_CheckStatus>
 800bae6:	4603      	mov	r3, r0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb04:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bb08:	f7ff ff66 	bl	800b9d8 <SD_CheckStatusWithTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da01      	bge.n	800bb16 <SD_read+0x26>
  {
    return res;
 800bb12:	7ffb      	ldrb	r3, [r7, #31]
 800bb14:	e02f      	b.n	800bb76 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	68b8      	ldr	r0, [r7, #8]
 800bb1c:	f7ff febc 	bl	800b898 <BSP_SD_ReadBlocks_DMA>
 800bb20:	4603      	mov	r3, r0
 800bb22:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bb24:	7fbb      	ldrb	r3, [r7, #30]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d124      	bne.n	800bb74 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bb2a:	4b15      	ldr	r3, [pc, #84]	@ (800bb80 <SD_read+0x90>)
 800bb2c:	6818      	ldr	r0, [r3, #0]
 800bb2e:	f107 0112 	add.w	r1, r7, #18
 800bb32:	f247 5330 	movw	r3, #30000	@ 0x7530
 800bb36:	2200      	movs	r2, #0
 800bb38:	f000 fb8a 	bl	800c250 <osMessageQueueGet>
 800bb3c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d117      	bne.n	800bb74 <SD_read+0x84>
 800bb44:	8a7b      	ldrh	r3, [r7, #18]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d114      	bne.n	800bb74 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bb4a:	f000 f9eb 	bl	800bf24 <osKernelGetTickCount>
 800bb4e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bb50:	e007      	b.n	800bb62 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb52:	f7ff fed5 	bl	800b900 <BSP_SD_GetCardState>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <SD_read+0x72>
              {
                res = RES_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bb60:	e008      	b.n	800bb74 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bb62:	f000 f9df 	bl	800bf24 <osKernelGetTickCount>
 800bb66:	4602      	mov	r2, r0
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d9ee      	bls.n	800bb52 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bb74:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000067c 	.word	0x2000067c

0800bb84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb98:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bb9c:	f7ff ff1c 	bl	800b9d8 <SD_CheckStatusWithTimeout>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	da01      	bge.n	800bbaa <SD_write+0x26>
  {
    return res;
 800bba6:	7ffb      	ldrb	r3, [r7, #31]
 800bba8:	e02d      	b.n	800bc06 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	68b8      	ldr	r0, [r7, #8]
 800bbb0:	f7ff fe8c 	bl	800b8cc <BSP_SD_WriteBlocks_DMA>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d124      	bne.n	800bc04 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bbba:	4b15      	ldr	r3, [pc, #84]	@ (800bc10 <SD_write+0x8c>)
 800bbbc:	6818      	ldr	r0, [r3, #0]
 800bbbe:	f107 0112 	add.w	r1, r7, #18
 800bbc2:	f247 5330 	movw	r3, #30000	@ 0x7530
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f000 fb42 	bl	800c250 <osMessageQueueGet>
 800bbcc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d117      	bne.n	800bc04 <SD_write+0x80>
 800bbd4:	8a7b      	ldrh	r3, [r7, #18]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d114      	bne.n	800bc04 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800bbda:	f000 f9a3 	bl	800bf24 <osKernelGetTickCount>
 800bbde:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bbe0:	e007      	b.n	800bbf2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bbe2:	f7ff fe8d 	bl	800b900 <BSP_SD_GetCardState>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <SD_write+0x6e>
          {
            res = RES_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	77fb      	strb	r3, [r7, #31]
            break;
 800bbf0:	e008      	b.n	800bc04 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bbf2:	f000 f997 	bl	800bf24 <osKernelGetTickCount>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d9ee      	bls.n	800bbe2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800bc04:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3720      	adds	r7, #32
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	2000067c 	.word	0x2000067c

0800bc14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08c      	sub	sp, #48	@ 0x30
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	603a      	str	r2, [r7, #0]
 800bc1e:	71fb      	strb	r3, [r7, #7]
 800bc20:	460b      	mov	r3, r1
 800bc22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc2a:	4b25      	ldr	r3, [pc, #148]	@ (800bcc0 <SD_ioctl+0xac>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <SD_ioctl+0x28>
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e03c      	b.n	800bcb6 <SD_ioctl+0xa2>

  switch (cmd)
 800bc3c:	79bb      	ldrb	r3, [r7, #6]
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d834      	bhi.n	800bcac <SD_ioctl+0x98>
 800bc42:	a201      	add	r2, pc, #4	@ (adr r2, 800bc48 <SD_ioctl+0x34>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc59 	.word	0x0800bc59
 800bc4c:	0800bc61 	.word	0x0800bc61
 800bc50:	0800bc79 	.word	0x0800bc79
 800bc54:	0800bc93 	.word	0x0800bc93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bc5e:	e028      	b.n	800bcb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff fe5b 	bl	800b920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bc6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bc76:	e01c      	b.n	800bcb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff fe4f 	bl	800b920 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bc90:	e00f      	b.n	800bcb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc92:	f107 030c 	add.w	r3, r7, #12
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fe42 	bl	800b920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	0a5a      	lsrs	r2, r3, #9
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bcaa:	e002      	b.n	800bcb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bcac:	2304      	movs	r3, #4
 800bcae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800bcb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3730      	adds	r7, #48	@ 0x30
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000009 	.word	0x20000009

0800bcc4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800bcca:	2302      	movs	r3, #2
 800bccc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800bcce:	4b05      	ldr	r3, [pc, #20]	@ (800bce4 <BSP_SD_WriteCpltCallback+0x20>)
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	1db9      	adds	r1, r7, #6
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f000 fa5a 	bl	800c190 <osMessageQueuePut>
#endif
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	2000067c 	.word	0x2000067c

0800bce8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800bcf2:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <BSP_SD_ReadCpltCallback+0x20>)
 800bcf4:	6818      	ldr	r0, [r3, #0]
 800bcf6:	1db9      	adds	r1, r7, #6
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f000 fa48 	bl	800c190 <osMessageQueuePut>
#endif
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	2000067c 	.word	0x2000067c

0800bd0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bd22:	4b1f      	ldr	r3, [pc, #124]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd24:	7a5b      	ldrb	r3, [r3, #9]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d131      	bne.n	800bd90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bd2c:	4b1c      	ldr	r3, [pc, #112]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd2e:	7a5b      	ldrb	r3, [r3, #9]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	4b1a      	ldr	r3, [pc, #104]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd36:	2100      	movs	r1, #0
 800bd38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bd3a:	4b19      	ldr	r3, [pc, #100]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd3c:	7a5b      	ldrb	r3, [r3, #9]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	4a17      	ldr	r2, [pc, #92]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd4a:	4b15      	ldr	r3, [pc, #84]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd4c:	7a5b      	ldrb	r3, [r3, #9]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	4b13      	ldr	r3, [pc, #76]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd54:	4413      	add	r3, r2
 800bd56:	79fa      	ldrb	r2, [r7, #7]
 800bd58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd5a:	4b11      	ldr	r3, [pc, #68]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd5c:	7a5b      	ldrb	r3, [r3, #9]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	b2d1      	uxtb	r1, r2
 800bd64:	4a0e      	ldr	r2, [pc, #56]	@ (800bda0 <FATFS_LinkDriverEx+0x94>)
 800bd66:	7251      	strb	r1, [r2, #9]
 800bd68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd6a:	7dbb      	ldrb	r3, [r7, #22]
 800bd6c:	3330      	adds	r3, #48	@ 0x30
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	3301      	adds	r3, #1
 800bd78:	223a      	movs	r2, #58	@ 0x3a
 800bd7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3302      	adds	r3, #2
 800bd80:	222f      	movs	r2, #47	@ 0x2f
 800bd82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	3303      	adds	r3, #3
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	371c      	adds	r7, #28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	20000680 	.word	0x20000680

0800bda4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff ffaa 	bl	800bd0c <FATFS_LinkDriverEx>
 800bdb8:	4603      	mov	r3, r0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <__NVIC_SetPriority>:
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	4603      	mov	r3, r0
 800bdcc:	6039      	str	r1, [r7, #0]
 800bdce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	db0a      	blt.n	800bdee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	490c      	ldr	r1, [pc, #48]	@ (800be10 <__NVIC_SetPriority+0x4c>)
 800bdde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bde2:	0112      	lsls	r2, r2, #4
 800bde4:	b2d2      	uxtb	r2, r2
 800bde6:	440b      	add	r3, r1
 800bde8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bdec:	e00a      	b.n	800be04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	4908      	ldr	r1, [pc, #32]	@ (800be14 <__NVIC_SetPriority+0x50>)
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	f003 030f 	and.w	r3, r3, #15
 800bdfa:	3b04      	subs	r3, #4
 800bdfc:	0112      	lsls	r2, r2, #4
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	440b      	add	r3, r1
 800be02:	761a      	strb	r2, [r3, #24]
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	e000e100 	.word	0xe000e100
 800be14:	e000ed00 	.word	0xe000ed00

0800be18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be1c:	4b05      	ldr	r3, [pc, #20]	@ (800be34 <SysTick_Handler+0x1c>)
 800be1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be20:	f001 ff7e 	bl	800dd20 <xTaskGetSchedulerState>
 800be24:	4603      	mov	r3, r0
 800be26:	2b01      	cmp	r3, #1
 800be28:	d001      	beq.n	800be2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be2a:	f002 fd75 	bl	800e918 <xPortSysTickHandler>
  }
}
 800be2e:	bf00      	nop
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	e000e010 	.word	0xe000e010

0800be38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be38:	b580      	push	{r7, lr}
 800be3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be3c:	2100      	movs	r1, #0
 800be3e:	f06f 0004 	mvn.w	r0, #4
 800be42:	f7ff ffbf 	bl	800bdc4 <__NVIC_SetPriority>
#endif
}
 800be46:	bf00      	nop
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be52:	f3ef 8305 	mrs	r3, IPSR
 800be56:	603b      	str	r3, [r7, #0]
  return(result);
 800be58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be5e:	f06f 0305 	mvn.w	r3, #5
 800be62:	607b      	str	r3, [r7, #4]
 800be64:	e00c      	b.n	800be80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be66:	4b0a      	ldr	r3, [pc, #40]	@ (800be90 <osKernelInitialize+0x44>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be6e:	4b08      	ldr	r3, [pc, #32]	@ (800be90 <osKernelInitialize+0x44>)
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be74:	2300      	movs	r3, #0
 800be76:	607b      	str	r3, [r7, #4]
 800be78:	e002      	b.n	800be80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be7a:	f04f 33ff 	mov.w	r3, #4294967295
 800be7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be80:	687b      	ldr	r3, [r7, #4]
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	2000068c 	.word	0x2000068c

0800be94 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800be9a:	f001 ff41 	bl	800dd20 <xTaskGetSchedulerState>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <osKernelGetState+0x1a>
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d105      	bne.n	800beb4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800bea8:	2302      	movs	r3, #2
 800beaa:	607b      	str	r3, [r7, #4]
      break;
 800beac:	e00c      	b.n	800bec8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800beae:	2303      	movs	r3, #3
 800beb0:	607b      	str	r3, [r7, #4]
      break;
 800beb2:	e009      	b.n	800bec8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800beb4:	4b07      	ldr	r3, [pc, #28]	@ (800bed4 <osKernelGetState+0x40>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d102      	bne.n	800bec2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800bebc:	2301      	movs	r3, #1
 800bebe:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800bec0:	e001      	b.n	800bec6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800bec2:	2300      	movs	r3, #0
 800bec4:	607b      	str	r3, [r7, #4]
      break;
 800bec6:	bf00      	nop
  }

  return (state);
 800bec8:	687b      	ldr	r3, [r7, #4]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	2000068c 	.word	0x2000068c

0800bed8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bede:	f3ef 8305 	mrs	r3, IPSR
 800bee2:	603b      	str	r3, [r7, #0]
  return(result);
 800bee4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800beea:	f06f 0305 	mvn.w	r3, #5
 800beee:	607b      	str	r3, [r7, #4]
 800bef0:	e010      	b.n	800bf14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bef2:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <osKernelStart+0x48>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d109      	bne.n	800bf0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800befa:	f7ff ff9d 	bl	800be38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800befe:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <osKernelStart+0x48>)
 800bf00:	2202      	movs	r2, #2
 800bf02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf04:	f001 fa96 	bl	800d434 <vTaskStartScheduler>
      stat = osOK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	e002      	b.n	800bf14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf14:	687b      	ldr	r3, [r7, #4]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	2000068c 	.word	0x2000068c

0800bf24 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2a:	f3ef 8305 	mrs	r3, IPSR
 800bf2e:	603b      	str	r3, [r7, #0]
  return(result);
 800bf30:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bf36:	f001 fba9 	bl	800d68c <xTaskGetTickCountFromISR>
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	e002      	b.n	800bf44 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bf3e:	f001 fb95 	bl	800d66c <xTaskGetTickCount>
 800bf42:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bf44:	687b      	ldr	r3, [r7, #4]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b08e      	sub	sp, #56	@ 0x38
 800bf52:	af04      	add	r7, sp, #16
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	60b9      	str	r1, [r7, #8]
 800bf58:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf5e:	f3ef 8305 	mrs	r3, IPSR
 800bf62:	617b      	str	r3, [r7, #20]
  return(result);
 800bf64:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d17e      	bne.n	800c068 <osThreadNew+0x11a>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d07b      	beq.n	800c068 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf70:	2380      	movs	r3, #128	@ 0x80
 800bf72:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf74:	2318      	movs	r3, #24
 800bf76:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d045      	beq.n	800c014 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <osThreadNew+0x48>
        name = attr->name;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d008      	beq.n	800bfbc <osThreadNew+0x6e>
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	2b38      	cmp	r3, #56	@ 0x38
 800bfae:	d805      	bhi.n	800bfbc <osThreadNew+0x6e>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <osThreadNew+0x72>
        return (NULL);
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e054      	b.n	800c06a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	089b      	lsrs	r3, r3, #2
 800bfce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00e      	beq.n	800bff6 <osThreadNew+0xa8>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2ba7      	cmp	r3, #167	@ 0xa7
 800bfde:	d90a      	bls.n	800bff6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d006      	beq.n	800bff6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <osThreadNew+0xa8>
        mem = 1;
 800bff0:	2301      	movs	r3, #1
 800bff2:	61bb      	str	r3, [r7, #24]
 800bff4:	e010      	b.n	800c018 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10c      	bne.n	800c018 <osThreadNew+0xca>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d108      	bne.n	800c018 <osThreadNew+0xca>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d104      	bne.n	800c018 <osThreadNew+0xca>
          mem = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	61bb      	str	r3, [r7, #24]
 800c012:	e001      	b.n	800c018 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d110      	bne.n	800c040 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c026:	9202      	str	r2, [sp, #8]
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6a3a      	ldr	r2, [r7, #32]
 800c032:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f001 f809 	bl	800d04c <xTaskCreateStatic>
 800c03a:	4603      	mov	r3, r0
 800c03c:	613b      	str	r3, [r7, #16]
 800c03e:	e013      	b.n	800c068 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d110      	bne.n	800c068 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	b29a      	uxth	r2, r3
 800c04a:	f107 0310 	add.w	r3, r7, #16
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f001 f857 	bl	800d10c <xTaskCreate>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b01      	cmp	r3, #1
 800c062:	d001      	beq.n	800c068 <osThreadNew+0x11a>
            hTask = NULL;
 800c064:	2300      	movs	r3, #0
 800c066:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c068:	693b      	ldr	r3, [r7, #16]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3728      	adds	r7, #40	@ 0x28
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c07a:	f3ef 8305 	mrs	r3, IPSR
 800c07e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c080:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <osDelay+0x1c>
    stat = osErrorISR;
 800c086:	f06f 0305 	mvn.w	r3, #5
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	e007      	b.n	800c09e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f995 	bl	800d3c8 <vTaskDelay>
    }
  }

  return (stat);
 800c09e:	68fb      	ldr	r3, [r7, #12]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	@ 0x28
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0b8:	f3ef 8305 	mrs	r3, IPSR
 800c0bc:	613b      	str	r3, [r7, #16]
  return(result);
 800c0be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d15f      	bne.n	800c184 <osMessageQueueNew+0xdc>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d05c      	beq.n	800c184 <osMessageQueueNew+0xdc>
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d059      	beq.n	800c184 <osMessageQueueNew+0xdc>
    mem = -1;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d029      	beq.n	800c130 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d012      	beq.n	800c10a <osMessageQueueNew+0x62>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	2b4f      	cmp	r3, #79	@ 0x4f
 800c0ea:	d90e      	bls.n	800c10a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00a      	beq.n	800c10a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695a      	ldr	r2, [r3, #20]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	fb01 f303 	mul.w	r3, r1, r3
 800c100:	429a      	cmp	r2, r3
 800c102:	d302      	bcc.n	800c10a <osMessageQueueNew+0x62>
        mem = 1;
 800c104:	2301      	movs	r3, #1
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	e014      	b.n	800c134 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d110      	bne.n	800c134 <osMessageQueueNew+0x8c>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10c      	bne.n	800c134 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <osMessageQueueNew+0x8c>
          mem = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	61bb      	str	r3, [r7, #24]
 800c12e:	e001      	b.n	800c134 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d10b      	bne.n	800c152 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	691a      	ldr	r2, [r3, #16]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	2100      	movs	r1, #0
 800c144:	9100      	str	r1, [sp, #0]
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 fa31 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c14e:	61f8      	str	r0, [r7, #28]
 800c150:	e008      	b.n	800c164 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c158:	2200      	movs	r2, #0
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 faa4 	bl	800c6aa <xQueueGenericCreate>
 800c162:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00c      	beq.n	800c184 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	e001      	b.n	800c17c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c17c:	6979      	ldr	r1, [r7, #20]
 800c17e:	69f8      	ldr	r0, [r7, #28]
 800c180:	f000 ff06 	bl	800cf90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c184:	69fb      	ldr	r3, [r7, #28]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a8:	f3ef 8305 	mrs	r3, IPSR
 800c1ac:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d028      	beq.n	800c206 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c1c6:	f06f 0303 	mvn.w	r3, #3
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	e038      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1d2:	f107 0210 	add.w	r2, r7, #16
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	69b8      	ldr	r0, [r7, #24]
 800c1dc:	f000 fbc6 	bl	800c96c <xQueueGenericSendFromISR>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d003      	beq.n	800c1ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1e6:	f06f 0302 	mvn.w	r3, #2
 800c1ea:	61fb      	str	r3, [r7, #28]
 800c1ec:	e028      	b.n	800c240 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d025      	beq.n	800c240 <osMessageQueuePut+0xb0>
 800c1f4:	4b15      	ldr	r3, [pc, #84]	@ (800c24c <osMessageQueuePut+0xbc>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e01c      	b.n	800c240 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <osMessageQueuePut+0x82>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c212:	f06f 0303 	mvn.w	r3, #3
 800c216:	61fb      	str	r3, [r7, #28]
 800c218:	e012      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c21a:	2300      	movs	r3, #0
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	69b8      	ldr	r0, [r7, #24]
 800c222:	f000 faa1 	bl	800c768 <xQueueGenericSend>
 800c226:	4603      	mov	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d009      	beq.n	800c240 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c232:	f06f 0301 	mvn.w	r3, #1
 800c236:	61fb      	str	r3, [r7, #28]
 800c238:	e002      	b.n	800c240 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c23a:	f06f 0302 	mvn.w	r3, #2
 800c23e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c240:	69fb      	ldr	r3, [r7, #28]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	e000ed04 	.word	0xe000ed04

0800c250 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c266:	f3ef 8305 	mrs	r3, IPSR
 800c26a:	617b      	str	r3, [r7, #20]
  return(result);
 800c26c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d028      	beq.n	800c2c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c284:	f06f 0303 	mvn.w	r3, #3
 800c288:	61fb      	str	r3, [r7, #28]
 800c28a:	e037      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c28c:	2300      	movs	r3, #0
 800c28e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c290:	f107 0310 	add.w	r3, r7, #16
 800c294:	461a      	mov	r2, r3
 800c296:	68b9      	ldr	r1, [r7, #8]
 800c298:	69b8      	ldr	r0, [r7, #24]
 800c29a:	f000 fce7 	bl	800cc6c <xQueueReceiveFromISR>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d003      	beq.n	800c2ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c2a4:	f06f 0302 	mvn.w	r3, #2
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	e027      	b.n	800c2fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d024      	beq.n	800c2fc <osMessageQueueGet+0xac>
 800c2b2:	4b15      	ldr	r3, [pc, #84]	@ (800c308 <osMessageQueueGet+0xb8>)
 800c2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	e01b      	b.n	800c2fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <osMessageQueueGet+0x80>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c2d0:	f06f 0303 	mvn.w	r3, #3
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e011      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	69b8      	ldr	r0, [r7, #24]
 800c2de:	f000 fbe3 	bl	800caa8 <xQueueReceive>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d009      	beq.n	800c2fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2ee:	f06f 0301 	mvn.w	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e002      	b.n	800c2fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2f6:	f06f 0302 	mvn.w	r3, #2
 800c2fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2fc:	69fb      	ldr	r3, [r7, #28]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4a07      	ldr	r2, [pc, #28]	@ (800c338 <vApplicationGetIdleTaskMemory+0x2c>)
 800c31c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4a06      	ldr	r2, [pc, #24]	@ (800c33c <vApplicationGetIdleTaskMemory+0x30>)
 800c322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2280      	movs	r2, #128	@ 0x80
 800c328:	601a      	str	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	20000690 	.word	0x20000690
 800c33c:	20000738 	.word	0x20000738

0800c340 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a07      	ldr	r2, [pc, #28]	@ (800c36c <vApplicationGetTimerTaskMemory+0x2c>)
 800c350:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4a06      	ldr	r2, [pc, #24]	@ (800c370 <vApplicationGetTimerTaskMemory+0x30>)
 800c356:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c35e:	601a      	str	r2, [r3, #0]
}
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20000938 	.word	0x20000938
 800c370:	200009e0 	.word	0x200009e0

0800c374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 0208 	add.w	r2, r3, #8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0208 	add.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3308      	adds	r3, #8
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e002      	b.n	800c444 <vListInsert+0x2e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2f6      	bcs.n	800c43e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6892      	ldr	r2, [r2, #8]
 800c49e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6852      	ldr	r2, [r2, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d103      	bne.n	800c4bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c502:	bf00      	nop
 800c504:	bf00      	nop
 800c506:	e7fd      	b.n	800c504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c508:	f002 f976 	bl	800e7f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c514:	68f9      	ldr	r1, [r7, #12]
 800c516:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c518:	fb01 f303 	mul.w	r3, r1, r3
 800c51c:	441a      	add	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c538:	3b01      	subs	r3, #1
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c53e:	fb01 f303 	mul.w	r3, r1, r3
 800c542:	441a      	add	r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	22ff      	movs	r2, #255	@ 0xff
 800c54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	22ff      	movs	r2, #255	@ 0xff
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d114      	bne.n	800c588 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d01a      	beq.n	800c59c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3310      	adds	r3, #16
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fa12 	bl	800d994 <xTaskRemoveFromEventList>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d012      	beq.n	800c59c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c576:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ac <xQueueGenericReset+0xd0>)
 800c578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	e009      	b.n	800c59c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3310      	adds	r3, #16
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fef1 	bl	800c374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3324      	adds	r3, #36	@ 0x24
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff feec 	bl	800c374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59c:	f002 f95e 	bl	800e85c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5a0:	2301      	movs	r3, #1
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	@ 0x38
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10b      	bne.n	800c5dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c5d6:	bf00      	nop
 800c5d8:	bf00      	nop
 800c5da:	e7fd      	b.n	800c5d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10b      	bne.n	800c5fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop
 800c5f8:	e7fd      	b.n	800c5f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <xQueueGenericCreateStatic+0x56>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <xQueueGenericCreateStatic+0x5a>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <xQueueGenericCreateStatic+0x5c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10b      	bne.n	800c628 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	623b      	str	r3, [r7, #32]
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	e7fd      	b.n	800c624 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <xQueueGenericCreateStatic+0x84>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueGenericCreateStatic+0x88>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueGenericCreateStatic+0x8a>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10b      	bne.n	800c656 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	61fb      	str	r3, [r7, #28]
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	e7fd      	b.n	800c652 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c656:	2350      	movs	r3, #80	@ 0x50
 800c658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b50      	cmp	r3, #80	@ 0x50
 800c65e:	d00b      	beq.n	800c678 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	61bb      	str	r3, [r7, #24]
}
 800c672:	bf00      	nop
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00d      	beq.n	800c6a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c68c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	4613      	mov	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 f840 	bl	800c720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3730      	adds	r7, #48	@ 0x30
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b08a      	sub	sp, #40	@ 0x28
 800c6ae:	af02      	add	r7, sp, #8
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	613b      	str	r3, [r7, #16]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
 800c6de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	3350      	adds	r3, #80	@ 0x50
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f002 f9a9 	bl	800ea3c <pvPortMalloc>
 800c6ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d011      	beq.n	800c716 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	3350      	adds	r3, #80	@ 0x50
 800c6fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c704:	79fa      	ldrb	r2, [r7, #7]
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	4613      	mov	r3, r2
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	68b9      	ldr	r1, [r7, #8]
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 f805 	bl	800c720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c716:	69bb      	ldr	r3, [r7, #24]
	}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d103      	bne.n	800c73c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	e002      	b.n	800c742 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c74e:	2101      	movs	r1, #1
 800c750:	69b8      	ldr	r0, [r7, #24]
 800c752:	f7ff fec3 	bl	800c4dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	78fa      	ldrb	r2, [r7, #3]
 800c75a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c75e:	bf00      	nop
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08e      	sub	sp, #56	@ 0x38
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c776:	2300      	movs	r3, #0
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10b      	bne.n	800c79c <xQueueGenericSend+0x34>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c796:	bf00      	nop
 800c798:	bf00      	nop
 800c79a:	e7fd      	b.n	800c798 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d103      	bne.n	800c7aa <xQueueGenericSend+0x42>
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <xQueueGenericSend+0x46>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e000      	b.n	800c7b0 <xQueueGenericSend+0x48>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <xQueueGenericSend+0x64>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	e7fd      	b.n	800c7c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d103      	bne.n	800c7da <xQueueGenericSend+0x72>
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d101      	bne.n	800c7de <xQueueGenericSend+0x76>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e000      	b.n	800c7e0 <xQueueGenericSend+0x78>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <xQueueGenericSend+0x94>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	623b      	str	r3, [r7, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7fc:	f001 fa90 	bl	800dd20 <xTaskGetSchedulerState>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d102      	bne.n	800c80c <xQueueGenericSend+0xa4>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <xQueueGenericSend+0xa8>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e000      	b.n	800c812 <xQueueGenericSend+0xaa>
 800c810:	2300      	movs	r3, #0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <xQueueGenericSend+0xc6>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	61fb      	str	r3, [r7, #28]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c82e:	f001 ffe3 	bl	800e7f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d302      	bcc.n	800c844 <xQueueGenericSend+0xdc>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b02      	cmp	r3, #2
 800c842:	d129      	bne.n	800c898 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	68b9      	ldr	r1, [r7, #8]
 800c848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c84a:	f000 fa91 	bl	800cd70 <prvCopyDataToQueue>
 800c84e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c854:	2b00      	cmp	r3, #0
 800c856:	d010      	beq.n	800c87a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	3324      	adds	r3, #36	@ 0x24
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 f899 	bl	800d994 <xTaskRemoveFromEventList>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d013      	beq.n	800c890 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c868:	4b3f      	ldr	r3, [pc, #252]	@ (800c968 <xQueueGenericSend+0x200>)
 800c86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	e00a      	b.n	800c890 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d007      	beq.n	800c890 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c880:	4b39      	ldr	r3, [pc, #228]	@ (800c968 <xQueueGenericSend+0x200>)
 800c882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c890:	f001 ffe4 	bl	800e85c <vPortExitCritical>
				return pdPASS;
 800c894:	2301      	movs	r3, #1
 800c896:	e063      	b.n	800c960 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c89e:	f001 ffdd 	bl	800e85c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e05c      	b.n	800c960 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8ac:	f107 0314 	add.w	r3, r7, #20
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f001 f8d3 	bl	800da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8ba:	f001 ffcf 	bl	800e85c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8be:	f000 fe29 	bl	800d514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8c2:	f001 ff99 	bl	800e7f8 <vPortEnterCritical>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8cc:	b25b      	sxtb	r3, r3
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d103      	bne.n	800c8dc <xQueueGenericSend+0x174>
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8e2:	b25b      	sxtb	r3, r3
 800c8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e8:	d103      	bne.n	800c8f2 <xQueueGenericSend+0x18a>
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8f2:	f001 ffb3 	bl	800e85c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8f6:	1d3a      	adds	r2, r7, #4
 800c8f8:	f107 0314 	add.w	r3, r7, #20
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 f8c2 	bl	800da88 <xTaskCheckForTimeOut>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d124      	bne.n	800c954 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c90a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c90c:	f000 fb28 	bl	800cf60 <prvIsQueueFull>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d018      	beq.n	800c948 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	3310      	adds	r3, #16
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 ffe6 	bl	800d8f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c924:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c926:	f000 fab3 	bl	800ce90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c92a:	f000 fe01 	bl	800d530 <xTaskResumeAll>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	f47f af7c 	bne.w	800c82e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c936:	4b0c      	ldr	r3, [pc, #48]	@ (800c968 <xQueueGenericSend+0x200>)
 800c938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	e772      	b.n	800c82e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c948:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c94a:	f000 faa1 	bl	800ce90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c94e:	f000 fdef 	bl	800d530 <xTaskResumeAll>
 800c952:	e76c      	b.n	800c82e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c956:	f000 fa9b 	bl	800ce90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c95a:	f000 fde9 	bl	800d530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c95e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c960:	4618      	mov	r0, r3
 800c962:	3738      	adds	r7, #56	@ 0x38
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b090      	sub	sp, #64	@ 0x40
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10b      	bne.n	800c99c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c996:	bf00      	nop
 800c998:	bf00      	nop
 800c99a:	e7fd      	b.n	800c998 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d103      	bne.n	800c9aa <xQueueGenericSendFromISR+0x3e>
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <xQueueGenericSendFromISR+0x42>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <xQueueGenericSendFromISR+0x44>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10b      	bne.n	800c9cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c9c6:	bf00      	nop
 800c9c8:	bf00      	nop
 800c9ca:	e7fd      	b.n	800c9c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d103      	bne.n	800c9da <xQueueGenericSendFromISR+0x6e>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <xQueueGenericSendFromISR+0x72>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e000      	b.n	800c9e0 <xQueueGenericSendFromISR+0x74>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10b      	bne.n	800c9fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	623b      	str	r3, [r7, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	bf00      	nop
 800c9fa:	e7fd      	b.n	800c9f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9fc:	f001 ffdc 	bl	800e9b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca00:	f3ef 8211 	mrs	r2, BASEPRI
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	61fa      	str	r2, [r7, #28]
 800ca16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d302      	bcc.n	800ca2e <xQueueGenericSendFromISR+0xc2>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d12f      	bne.n	800ca8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca44:	f000 f994 	bl	800cd70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ca4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca50:	d112      	bne.n	800ca78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d016      	beq.n	800ca88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5c:	3324      	adds	r3, #36	@ 0x24
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 ff98 	bl	800d994 <xTaskRemoveFromEventList>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00e      	beq.n	800ca88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00b      	beq.n	800ca88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	e007      	b.n	800ca88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	b25a      	sxtb	r2, r3
 800ca82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ca8c:	e001      	b.n	800ca92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3740      	adds	r7, #64	@ 0x40
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08c      	sub	sp, #48	@ 0x30
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10b      	bne.n	800cada <xQueueReceive+0x32>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	623b      	str	r3, [r7, #32]
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	e7fd      	b.n	800cad6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d103      	bne.n	800cae8 <xQueueReceive+0x40>
 800cae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d101      	bne.n	800caec <xQueueReceive+0x44>
 800cae8:	2301      	movs	r3, #1
 800caea:	e000      	b.n	800caee <xQueueReceive+0x46>
 800caec:	2300      	movs	r3, #0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10b      	bne.n	800cb0a <xQueueReceive+0x62>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	61fb      	str	r3, [r7, #28]
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	e7fd      	b.n	800cb06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb0a:	f001 f909 	bl	800dd20 <xTaskGetSchedulerState>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <xQueueReceive+0x72>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <xQueueReceive+0x76>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e000      	b.n	800cb20 <xQueueReceive+0x78>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10b      	bne.n	800cb3c <xQueueReceive+0x94>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	61bb      	str	r3, [r7, #24]
}
 800cb36:	bf00      	nop
 800cb38:	bf00      	nop
 800cb3a:	e7fd      	b.n	800cb38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb3c:	f001 fe5c 	bl	800e7f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d01f      	beq.n	800cb8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb50:	f000 f978 	bl	800ce44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb56:	1e5a      	subs	r2, r3, #1
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00f      	beq.n	800cb84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb66:	3310      	adds	r3, #16
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 ff13 	bl	800d994 <xTaskRemoveFromEventList>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d007      	beq.n	800cb84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb74:	4b3c      	ldr	r3, [pc, #240]	@ (800cc68 <xQueueReceive+0x1c0>)
 800cb76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb84:	f001 fe6a 	bl	800e85c <vPortExitCritical>
				return pdPASS;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e069      	b.n	800cc60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d103      	bne.n	800cb9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb92:	f001 fe63 	bl	800e85c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb96:	2300      	movs	r3, #0
 800cb98:	e062      	b.n	800cc60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cba0:	f107 0310 	add.w	r3, r7, #16
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 ff59 	bl	800da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbae:	f001 fe55 	bl	800e85c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbb2:	f000 fcaf 	bl	800d514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbb6:	f001 fe1f 	bl	800e7f8 <vPortEnterCritical>
 800cbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbc0:	b25b      	sxtb	r3, r3
 800cbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc6:	d103      	bne.n	800cbd0 <xQueueReceive+0x128>
 800cbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbd6:	b25b      	sxtb	r3, r3
 800cbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbdc:	d103      	bne.n	800cbe6 <xQueueReceive+0x13e>
 800cbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbe6:	f001 fe39 	bl	800e85c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbea:	1d3a      	adds	r2, r7, #4
 800cbec:	f107 0310 	add.w	r3, r7, #16
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 ff48 	bl	800da88 <xTaskCheckForTimeOut>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d123      	bne.n	800cc46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc00:	f000 f998 	bl	800cf34 <prvIsQueueEmpty>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d017      	beq.n	800cc3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0c:	3324      	adds	r3, #36	@ 0x24
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	4611      	mov	r1, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fe6c 	bl	800d8f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc1a:	f000 f939 	bl	800ce90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc1e:	f000 fc87 	bl	800d530 <xTaskResumeAll>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d189      	bne.n	800cb3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cc28:	4b0f      	ldr	r3, [pc, #60]	@ (800cc68 <xQueueReceive+0x1c0>)
 800cc2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	e780      	b.n	800cb3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc3c:	f000 f928 	bl	800ce90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc40:	f000 fc76 	bl	800d530 <xTaskResumeAll>
 800cc44:	e77a      	b.n	800cb3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc48:	f000 f922 	bl	800ce90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc4c:	f000 fc70 	bl	800d530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc52:	f000 f96f 	bl	800cf34 <prvIsQueueEmpty>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f43f af6f 	beq.w	800cb3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3730      	adds	r7, #48	@ 0x30
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08e      	sub	sp, #56	@ 0x38
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10b      	bne.n	800cc9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	623b      	str	r3, [r7, #32]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <xQueueReceiveFromISR+0x3c>
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <xQueueReceiveFromISR+0x40>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <xQueueReceiveFromISR+0x42>
 800ccac:	2300      	movs	r3, #0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10b      	bne.n	800ccca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	61fb      	str	r3, [r7, #28]
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop
 800ccc8:	e7fd      	b.n	800ccc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccca:	f001 fe75 	bl	800e9b8 <vPortValidateInterruptPriority>
	__asm volatile
 800ccce:	f3ef 8211 	mrs	r2, BASEPRI
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	61ba      	str	r2, [r7, #24]
 800cce4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cce6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d02f      	beq.n	800cd56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd00:	68b9      	ldr	r1, [r7, #8]
 800cd02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd04:	f000 f89e 	bl	800ce44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	1e5a      	subs	r2, r3, #1
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd18:	d112      	bne.n	800cd40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d016      	beq.n	800cd50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	3310      	adds	r3, #16
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 fe34 	bl	800d994 <xTaskRemoveFromEventList>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00e      	beq.n	800cd50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	e007      	b.n	800cd50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd44:	3301      	adds	r3, #1
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	b25a      	sxtb	r2, r3
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cd50:	2301      	movs	r3, #1
 800cd52:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd54:	e001      	b.n	800cd5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f383 8811 	msr	BASEPRI, r3
}
 800cd64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3738      	adds	r7, #56	@ 0x38
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10d      	bne.n	800cdaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d14d      	bne.n	800ce32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 ffde 	bl	800dd5c <xTaskPriorityDisinherit>
 800cda0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	609a      	str	r2, [r3, #8]
 800cda8:	e043      	b.n	800ce32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d119      	bne.n	800cde4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6858      	ldr	r0, [r3, #4]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb8:	461a      	mov	r2, r3
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	f002 faf5 	bl	800f3aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc8:	441a      	add	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d32b      	bcc.n	800ce32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	605a      	str	r2, [r3, #4]
 800cde2:	e026      	b.n	800ce32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68d8      	ldr	r0, [r3, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	461a      	mov	r2, r3
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	f002 fadb 	bl	800f3aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68da      	ldr	r2, [r3, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdfc:	425b      	negs	r3, r3
 800cdfe:	441a      	add	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68da      	ldr	r2, [r3, #12]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d207      	bcs.n	800ce20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	425b      	negs	r3, r3
 800ce1a:	441a      	add	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d105      	bne.n	800ce32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ce3a:	697b      	ldr	r3, [r7, #20]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d018      	beq.n	800ce88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68da      	ldr	r2, [r3, #12]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5e:	441a      	add	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68da      	ldr	r2, [r3, #12]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d303      	bcc.n	800ce78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68d9      	ldr	r1, [r3, #12]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce80:	461a      	mov	r2, r3
 800ce82:	6838      	ldr	r0, [r7, #0]
 800ce84:	f002 fa91 	bl	800f3aa <memcpy>
	}
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce98:	f001 fcae 	bl	800e7f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cea4:	e011      	b.n	800ceca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d012      	beq.n	800ced4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3324      	adds	r3, #36	@ 0x24
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fd6e 	bl	800d994 <xTaskRemoveFromEventList>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cebe:	f000 fe47 	bl	800db50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ceca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	dce9      	bgt.n	800cea6 <prvUnlockQueue+0x16>
 800ced2:	e000      	b.n	800ced6 <prvUnlockQueue+0x46>
					break;
 800ced4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	22ff      	movs	r2, #255	@ 0xff
 800ceda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cede:	f001 fcbd 	bl	800e85c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cee2:	f001 fc89 	bl	800e7f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ceec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ceee:	e011      	b.n	800cf14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	3310      	adds	r3, #16
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fd49 	bl	800d994 <xTaskRemoveFromEventList>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf08:	f000 fe22 	bl	800db50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dce9      	bgt.n	800cef0 <prvUnlockQueue+0x60>
 800cf1c:	e000      	b.n	800cf20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	22ff      	movs	r2, #255	@ 0xff
 800cf24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cf28:	f001 fc98 	bl	800e85c <vPortExitCritical>
}
 800cf2c:	bf00      	nop
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf3c:	f001 fc5c 	bl	800e7f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	e001      	b.n	800cf52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf52:	f001 fc83 	bl	800e85c <vPortExitCritical>

	return xReturn;
 800cf56:	68fb      	ldr	r3, [r7, #12]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf68:	f001 fc46 	bl	800e7f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d102      	bne.n	800cf7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	e001      	b.n	800cf82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf82:	f001 fc6b 	bl	800e85c <vPortExitCritical>

	return xReturn;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e014      	b.n	800cfca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfa0:	4a0f      	ldr	r2, [pc, #60]	@ (800cfe0 <vQueueAddToRegistry+0x50>)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10b      	bne.n	800cfc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cfac:	490c      	ldr	r1, [pc, #48]	@ (800cfe0 <vQueueAddToRegistry+0x50>)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cfb6:	4a0a      	ldr	r2, [pc, #40]	@ (800cfe0 <vQueueAddToRegistry+0x50>)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	4413      	add	r3, r2
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cfc2:	e006      	b.n	800cfd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b07      	cmp	r3, #7
 800cfce:	d9e7      	bls.n	800cfa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	20000de0 	.word	0x20000de0

0800cfe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cff4:	f001 fc00 	bl	800e7f8 <vPortEnterCritical>
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cffe:	b25b      	sxtb	r3, r3
 800d000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d004:	d103      	bne.n	800d00e <vQueueWaitForMessageRestricted+0x2a>
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d014:	b25b      	sxtb	r3, r3
 800d016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01a:	d103      	bne.n	800d024 <vQueueWaitForMessageRestricted+0x40>
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d024:	f001 fc1a 	bl	800e85c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d106      	bne.n	800d03e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	3324      	adds	r3, #36	@ 0x24
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	68b9      	ldr	r1, [r7, #8]
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 fc7f 	bl	800d93c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d03e:	6978      	ldr	r0, [r7, #20]
 800d040:	f7ff ff26 	bl	800ce90 <prvUnlockQueue>
	}
 800d044:	bf00      	nop
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08e      	sub	sp, #56	@ 0x38
 800d050:	af04      	add	r7, sp, #16
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10b      	bne.n	800d078 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	623b      	str	r3, [r7, #32]
}
 800d072:	bf00      	nop
 800d074:	bf00      	nop
 800d076:	e7fd      	b.n	800d074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10b      	bne.n	800d096 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	61fb      	str	r3, [r7, #28]
}
 800d090:	bf00      	nop
 800d092:	bf00      	nop
 800d094:	e7fd      	b.n	800d092 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d096:	23a8      	movs	r3, #168	@ 0xa8
 800d098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	2ba8      	cmp	r3, #168	@ 0xa8
 800d09e:	d00b      	beq.n	800d0b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	61bb      	str	r3, [r7, #24]
}
 800d0b2:	bf00      	nop
 800d0b4:	bf00      	nop
 800d0b6:	e7fd      	b.n	800d0b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01e      	beq.n	800d0fe <xTaskCreateStatic+0xb2>
 800d0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d01b      	beq.n	800d0fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0d8:	2300      	movs	r3, #0
 800d0da:	9303      	str	r3, [sp, #12]
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0de:	9302      	str	r3, [sp, #8]
 800d0e0:	f107 0314 	add.w	r3, r7, #20
 800d0e4:	9301      	str	r3, [sp, #4]
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 f851 	bl	800d198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0f8:	f000 f8f6 	bl	800d2e8 <prvAddNewTaskToReadyList>
 800d0fc:	e001      	b.n	800d102 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d102:	697b      	ldr	r3, [r7, #20]
	}
 800d104:	4618      	mov	r0, r3
 800d106:	3728      	adds	r7, #40	@ 0x28
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08c      	sub	sp, #48	@ 0x30
 800d110:	af04      	add	r7, sp, #16
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	4613      	mov	r3, r2
 800d11a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4618      	mov	r0, r3
 800d122:	f001 fc8b 	bl	800ea3c <pvPortMalloc>
 800d126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00e      	beq.n	800d14c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d12e:	20a8      	movs	r0, #168	@ 0xa8
 800d130:	f001 fc84 	bl	800ea3c <pvPortMalloc>
 800d134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	631a      	str	r2, [r3, #48]	@ 0x30
 800d142:	e005      	b.n	800d150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d144:	6978      	ldr	r0, [r7, #20]
 800d146:	f001 fd47 	bl	800ebd8 <vPortFree>
 800d14a:	e001      	b.n	800d150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d14c:	2300      	movs	r3, #0
 800d14e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d017      	beq.n	800d186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d15e:	88fa      	ldrh	r2, [r7, #6]
 800d160:	2300      	movs	r3, #0
 800d162:	9303      	str	r3, [sp, #12]
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	68b9      	ldr	r1, [r7, #8]
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 f80f 	bl	800d198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d17a:	69f8      	ldr	r0, [r7, #28]
 800d17c:	f000 f8b4 	bl	800d2e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d180:	2301      	movs	r3, #1
 800d182:	61bb      	str	r3, [r7, #24]
 800d184:	e002      	b.n	800d18c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d186:	f04f 33ff 	mov.w	r3, #4294967295
 800d18a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d18c:	69bb      	ldr	r3, [r7, #24]
	}
 800d18e:	4618      	mov	r0, r3
 800d190:	3720      	adds	r7, #32
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	21a5      	movs	r1, #165	@ 0xa5
 800d1b2:	f002 f829 	bl	800f208 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4413      	add	r3, r2
 800d1c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	f023 0307 	bic.w	r3, r3, #7
 800d1ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	617b      	str	r3, [r7, #20]
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	e7fd      	b.n	800d1ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01f      	beq.n	800d238 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	61fb      	str	r3, [r7, #28]
 800d1fc:	e012      	b.n	800d224 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	4413      	add	r3, r2
 800d204:	7819      	ldrb	r1, [r3, #0]
 800d206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	4413      	add	r3, r2
 800d20c:	3334      	adds	r3, #52	@ 0x34
 800d20e:	460a      	mov	r2, r1
 800d210:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	4413      	add	r3, r2
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d006      	beq.n	800d22c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	3301      	adds	r3, #1
 800d222:	61fb      	str	r3, [r7, #28]
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	2b0f      	cmp	r3, #15
 800d228:	d9e9      	bls.n	800d1fe <prvInitialiseNewTask+0x66>
 800d22a:	e000      	b.n	800d22e <prvInitialiseNewTask+0x96>
			{
				break;
 800d22c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d236:	e003      	b.n	800d240 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	2b37      	cmp	r3, #55	@ 0x37
 800d244:	d901      	bls.n	800d24a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d246:	2337      	movs	r3, #55	@ 0x37
 800d248:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d24e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d254:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d258:	2200      	movs	r2, #0
 800d25a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25e:	3304      	adds	r3, #4
 800d260:	4618      	mov	r0, r3
 800d262:	f7ff f8a7 	bl	800c3b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	3318      	adds	r3, #24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7ff f8a2 	bl	800c3b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d274:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d284:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d288:	2200      	movs	r2, #0
 800d28a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	2200      	movs	r2, #0
 800d292:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	3354      	adds	r3, #84	@ 0x54
 800d29a:	224c      	movs	r2, #76	@ 0x4c
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f001 ffb2 	bl	800f208 <memset>
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a6:	4a0d      	ldr	r2, [pc, #52]	@ (800d2dc <prvInitialiseNewTask+0x144>)
 800d2a8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	4a0c      	ldr	r2, [pc, #48]	@ (800d2e0 <prvInitialiseNewTask+0x148>)
 800d2ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d2e4 <prvInitialiseNewTask+0x14c>)
 800d2b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	68f9      	ldr	r1, [r7, #12]
 800d2ba:	69b8      	ldr	r0, [r7, #24]
 800d2bc:	f001 f96c 	bl	800e598 <pxPortInitialiseStack>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2d2:	bf00      	nop
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	2000202c 	.word	0x2000202c
 800d2e0:	20002094 	.word	0x20002094
 800d2e4:	200020fc 	.word	0x200020fc

0800d2e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2f0:	f001 fa82 	bl	800e7f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2f4:	4b2d      	ldr	r3, [pc, #180]	@ (800d3ac <prvAddNewTaskToReadyList+0xc4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	4a2c      	ldr	r2, [pc, #176]	@ (800d3ac <prvAddNewTaskToReadyList+0xc4>)
 800d2fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2fe:	4b2c      	ldr	r3, [pc, #176]	@ (800d3b0 <prvAddNewTaskToReadyList+0xc8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d109      	bne.n	800d31a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d306:	4a2a      	ldr	r2, [pc, #168]	@ (800d3b0 <prvAddNewTaskToReadyList+0xc8>)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d30c:	4b27      	ldr	r3, [pc, #156]	@ (800d3ac <prvAddNewTaskToReadyList+0xc4>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d110      	bne.n	800d336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d314:	f000 fc40 	bl	800db98 <prvInitialiseTaskLists>
 800d318:	e00d      	b.n	800d336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d31a:	4b26      	ldr	r3, [pc, #152]	@ (800d3b4 <prvAddNewTaskToReadyList+0xcc>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d109      	bne.n	800d336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d322:	4b23      	ldr	r3, [pc, #140]	@ (800d3b0 <prvAddNewTaskToReadyList+0xc8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d802      	bhi.n	800d336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d330:	4a1f      	ldr	r2, [pc, #124]	@ (800d3b0 <prvAddNewTaskToReadyList+0xc8>)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d336:	4b20      	ldr	r3, [pc, #128]	@ (800d3b8 <prvAddNewTaskToReadyList+0xd0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3301      	adds	r3, #1
 800d33c:	4a1e      	ldr	r2, [pc, #120]	@ (800d3b8 <prvAddNewTaskToReadyList+0xd0>)
 800d33e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d340:	4b1d      	ldr	r3, [pc, #116]	@ (800d3b8 <prvAddNewTaskToReadyList+0xd0>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34c:	4b1b      	ldr	r3, [pc, #108]	@ (800d3bc <prvAddNewTaskToReadyList+0xd4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d903      	bls.n	800d35c <prvAddNewTaskToReadyList+0x74>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d358:	4a18      	ldr	r2, [pc, #96]	@ (800d3bc <prvAddNewTaskToReadyList+0xd4>)
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4a15      	ldr	r2, [pc, #84]	@ (800d3c0 <prvAddNewTaskToReadyList+0xd8>)
 800d36a:	441a      	add	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3304      	adds	r3, #4
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7ff f82b 	bl	800c3ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d378:	f001 fa70 	bl	800e85c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d37c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b4 <prvAddNewTaskToReadyList+0xcc>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00e      	beq.n	800d3a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d384:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b0 <prvAddNewTaskToReadyList+0xc8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d38e:	429a      	cmp	r2, r3
 800d390:	d207      	bcs.n	800d3a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d392:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c4 <prvAddNewTaskToReadyList+0xdc>)
 800d394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d398:	601a      	str	r2, [r3, #0]
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3a2:	bf00      	nop
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	200012f4 	.word	0x200012f4
 800d3b0:	20000e20 	.word	0x20000e20
 800d3b4:	20001300 	.word	0x20001300
 800d3b8:	20001310 	.word	0x20001310
 800d3bc:	200012fc 	.word	0x200012fc
 800d3c0:	20000e24 	.word	0x20000e24
 800d3c4:	e000ed04 	.word	0xe000ed04

0800d3c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d018      	beq.n	800d40c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3da:	4b14      	ldr	r3, [pc, #80]	@ (800d42c <vTaskDelay+0x64>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00b      	beq.n	800d3fa <vTaskDelay+0x32>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	60bb      	str	r3, [r7, #8]
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	e7fd      	b.n	800d3f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d3fa:	f000 f88b 	bl	800d514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3fe:	2100      	movs	r1, #0
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fd1b 	bl	800de3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d406:	f000 f893 	bl	800d530 <xTaskResumeAll>
 800d40a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d412:	4b07      	ldr	r3, [pc, #28]	@ (800d430 <vTaskDelay+0x68>)
 800d414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d422:	bf00      	nop
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	2000131c 	.word	0x2000131c
 800d430:	e000ed04 	.word	0xe000ed04

0800d434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	@ 0x28
 800d438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d442:	463a      	mov	r2, r7
 800d444:	1d39      	adds	r1, r7, #4
 800d446:	f107 0308 	add.w	r3, r7, #8
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe ff5e 	bl	800c30c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	9202      	str	r2, [sp, #8]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	2300      	movs	r3, #0
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	2300      	movs	r3, #0
 800d460:	460a      	mov	r2, r1
 800d462:	4924      	ldr	r1, [pc, #144]	@ (800d4f4 <vTaskStartScheduler+0xc0>)
 800d464:	4824      	ldr	r0, [pc, #144]	@ (800d4f8 <vTaskStartScheduler+0xc4>)
 800d466:	f7ff fdf1 	bl	800d04c <xTaskCreateStatic>
 800d46a:	4603      	mov	r3, r0
 800d46c:	4a23      	ldr	r2, [pc, #140]	@ (800d4fc <vTaskStartScheduler+0xc8>)
 800d46e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d470:	4b22      	ldr	r3, [pc, #136]	@ (800d4fc <vTaskStartScheduler+0xc8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d478:	2301      	movs	r3, #1
 800d47a:	617b      	str	r3, [r7, #20]
 800d47c:	e001      	b.n	800d482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d47e:	2300      	movs	r3, #0
 800d480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d102      	bne.n	800d48e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d488:	f000 fd2c 	bl	800dee4 <xTimerCreateTimerTask>
 800d48c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d11b      	bne.n	800d4cc <vTaskStartScheduler+0x98>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	613b      	str	r3, [r7, #16]
}
 800d4a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4a8:	4b15      	ldr	r3, [pc, #84]	@ (800d500 <vTaskStartScheduler+0xcc>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3354      	adds	r3, #84	@ 0x54
 800d4ae:	4a15      	ldr	r2, [pc, #84]	@ (800d504 <vTaskStartScheduler+0xd0>)
 800d4b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4b2:	4b15      	ldr	r3, [pc, #84]	@ (800d508 <vTaskStartScheduler+0xd4>)
 800d4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4ba:	4b14      	ldr	r3, [pc, #80]	@ (800d50c <vTaskStartScheduler+0xd8>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4c0:	4b13      	ldr	r3, [pc, #76]	@ (800d510 <vTaskStartScheduler+0xdc>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4c6:	f001 f8f3 	bl	800e6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4ca:	e00f      	b.n	800d4ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d2:	d10b      	bne.n	800d4ec <vTaskStartScheduler+0xb8>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	60fb      	str	r3, [r7, #12]
}
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	e7fd      	b.n	800d4e8 <vTaskStartScheduler+0xb4>
}
 800d4ec:	bf00      	nop
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	0800f8d8 	.word	0x0800f8d8
 800d4f8:	0800db69 	.word	0x0800db69
 800d4fc:	20001318 	.word	0x20001318
 800d500:	20000e20 	.word	0x20000e20
 800d504:	2000001c 	.word	0x2000001c
 800d508:	20001314 	.word	0x20001314
 800d50c:	20001300 	.word	0x20001300
 800d510:	200012f8 	.word	0x200012f8

0800d514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d518:	4b04      	ldr	r3, [pc, #16]	@ (800d52c <vTaskSuspendAll+0x18>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3301      	adds	r3, #1
 800d51e:	4a03      	ldr	r2, [pc, #12]	@ (800d52c <vTaskSuspendAll+0x18>)
 800d520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d522:	bf00      	nop
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	2000131c 	.word	0x2000131c

0800d530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d53e:	4b42      	ldr	r3, [pc, #264]	@ (800d648 <xTaskResumeAll+0x118>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10b      	bne.n	800d55e <xTaskResumeAll+0x2e>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	603b      	str	r3, [r7, #0]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d55e:	f001 f94b 	bl	800e7f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d562:	4b39      	ldr	r3, [pc, #228]	@ (800d648 <xTaskResumeAll+0x118>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3b01      	subs	r3, #1
 800d568:	4a37      	ldr	r2, [pc, #220]	@ (800d648 <xTaskResumeAll+0x118>)
 800d56a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d56c:	4b36      	ldr	r3, [pc, #216]	@ (800d648 <xTaskResumeAll+0x118>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d162      	bne.n	800d63a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d574:	4b35      	ldr	r3, [pc, #212]	@ (800d64c <xTaskResumeAll+0x11c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d05e      	beq.n	800d63a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d57c:	e02f      	b.n	800d5de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d57e:	4b34      	ldr	r3, [pc, #208]	@ (800d650 <xTaskResumeAll+0x120>)
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3318      	adds	r3, #24
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe ff7c 	bl	800c488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3304      	adds	r3, #4
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe ff77 	bl	800c488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59e:	4b2d      	ldr	r3, [pc, #180]	@ (800d654 <xTaskResumeAll+0x124>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d903      	bls.n	800d5ae <xTaskResumeAll+0x7e>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d654 <xTaskResumeAll+0x124>)
 800d5ac:	6013      	str	r3, [r2, #0]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4a27      	ldr	r2, [pc, #156]	@ (800d658 <xTaskResumeAll+0x128>)
 800d5bc:	441a      	add	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7fe ff02 	bl	800c3ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ce:	4b23      	ldr	r3, [pc, #140]	@ (800d65c <xTaskResumeAll+0x12c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d5d8:	4b21      	ldr	r3, [pc, #132]	@ (800d660 <xTaskResumeAll+0x130>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5de:	4b1c      	ldr	r3, [pc, #112]	@ (800d650 <xTaskResumeAll+0x120>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1cb      	bne.n	800d57e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d5ec:	f000 fb78 	bl	800dce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d5f0:	4b1c      	ldr	r3, [pc, #112]	@ (800d664 <xTaskResumeAll+0x134>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d010      	beq.n	800d61e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5fc:	f000 f858 	bl	800d6b0 <xTaskIncrementTick>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d606:	4b16      	ldr	r3, [pc, #88]	@ (800d660 <xTaskResumeAll+0x130>)
 800d608:	2201      	movs	r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3b01      	subs	r3, #1
 800d610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1f1      	bne.n	800d5fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d618:	4b12      	ldr	r3, [pc, #72]	@ (800d664 <xTaskResumeAll+0x134>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d61e:	4b10      	ldr	r3, [pc, #64]	@ (800d660 <xTaskResumeAll+0x130>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d009      	beq.n	800d63a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d626:	2301      	movs	r3, #1
 800d628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d62a:	4b0f      	ldr	r3, [pc, #60]	@ (800d668 <xTaskResumeAll+0x138>)
 800d62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d63a:	f001 f90f 	bl	800e85c <vPortExitCritical>

	return xAlreadyYielded;
 800d63e:	68bb      	ldr	r3, [r7, #8]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	2000131c 	.word	0x2000131c
 800d64c:	200012f4 	.word	0x200012f4
 800d650:	200012b4 	.word	0x200012b4
 800d654:	200012fc 	.word	0x200012fc
 800d658:	20000e24 	.word	0x20000e24
 800d65c:	20000e20 	.word	0x20000e20
 800d660:	20001308 	.word	0x20001308
 800d664:	20001304 	.word	0x20001304
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d672:	4b05      	ldr	r3, [pc, #20]	@ (800d688 <xTaskGetTickCount+0x1c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d678:	687b      	ldr	r3, [r7, #4]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	200012f8 	.word	0x200012f8

0800d68c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d692:	f001 f991 	bl	800e9b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d696:	2300      	movs	r3, #0
 800d698:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d69a:	4b04      	ldr	r3, [pc, #16]	@ (800d6ac <xTaskGetTickCountFromISR+0x20>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6a0:	683b      	ldr	r3, [r7, #0]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	200012f8 	.word	0x200012f8

0800d6b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6ba:	4b4f      	ldr	r3, [pc, #316]	@ (800d7f8 <xTaskIncrementTick+0x148>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f040 8090 	bne.w	800d7e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d6c4:	4b4d      	ldr	r3, [pc, #308]	@ (800d7fc <xTaskIncrementTick+0x14c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d6cc:	4a4b      	ldr	r2, [pc, #300]	@ (800d7fc <xTaskIncrementTick+0x14c>)
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d121      	bne.n	800d71c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6d8:	4b49      	ldr	r3, [pc, #292]	@ (800d800 <xTaskIncrementTick+0x150>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00b      	beq.n	800d6fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	603b      	str	r3, [r7, #0]
}
 800d6f4:	bf00      	nop
 800d6f6:	bf00      	nop
 800d6f8:	e7fd      	b.n	800d6f6 <xTaskIncrementTick+0x46>
 800d6fa:	4b41      	ldr	r3, [pc, #260]	@ (800d800 <xTaskIncrementTick+0x150>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	4b40      	ldr	r3, [pc, #256]	@ (800d804 <xTaskIncrementTick+0x154>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a3e      	ldr	r2, [pc, #248]	@ (800d800 <xTaskIncrementTick+0x150>)
 800d706:	6013      	str	r3, [r2, #0]
 800d708:	4a3e      	ldr	r2, [pc, #248]	@ (800d804 <xTaskIncrementTick+0x154>)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	4b3e      	ldr	r3, [pc, #248]	@ (800d808 <xTaskIncrementTick+0x158>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a3c      	ldr	r2, [pc, #240]	@ (800d808 <xTaskIncrementTick+0x158>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	f000 fae2 	bl	800dce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d71c:	4b3b      	ldr	r3, [pc, #236]	@ (800d80c <xTaskIncrementTick+0x15c>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	429a      	cmp	r2, r3
 800d724:	d349      	bcc.n	800d7ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d726:	4b36      	ldr	r3, [pc, #216]	@ (800d800 <xTaskIncrementTick+0x150>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d730:	4b36      	ldr	r3, [pc, #216]	@ (800d80c <xTaskIncrementTick+0x15c>)
 800d732:	f04f 32ff 	mov.w	r2, #4294967295
 800d736:	601a      	str	r2, [r3, #0]
					break;
 800d738:	e03f      	b.n	800d7ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d73a:	4b31      	ldr	r3, [pc, #196]	@ (800d800 <xTaskIncrementTick+0x150>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d203      	bcs.n	800d75a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d752:	4a2e      	ldr	r2, [pc, #184]	@ (800d80c <xTaskIncrementTick+0x15c>)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d758:	e02f      	b.n	800d7ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	3304      	adds	r3, #4
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fe92 	bl	800c488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	3318      	adds	r3, #24
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fe89 	bl	800c488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77a:	4b25      	ldr	r3, [pc, #148]	@ (800d810 <xTaskIncrementTick+0x160>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d903      	bls.n	800d78a <xTaskIncrementTick+0xda>
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d786:	4a22      	ldr	r2, [pc, #136]	@ (800d810 <xTaskIncrementTick+0x160>)
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4a1f      	ldr	r2, [pc, #124]	@ (800d814 <xTaskIncrementTick+0x164>)
 800d798:	441a      	add	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	3304      	adds	r3, #4
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	f7fe fe14 	bl	800c3ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d818 <xTaskIncrementTick+0x168>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d3b8      	bcc.n	800d726 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7b8:	e7b5      	b.n	800d726 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7ba:	4b17      	ldr	r3, [pc, #92]	@ (800d818 <xTaskIncrementTick+0x168>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7c0:	4914      	ldr	r1, [pc, #80]	@ (800d814 <xTaskIncrementTick+0x164>)
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	4413      	add	r3, r2
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	440b      	add	r3, r1
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d901      	bls.n	800d7d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d7d6:	4b11      	ldr	r3, [pc, #68]	@ (800d81c <xTaskIncrementTick+0x16c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d007      	beq.n	800d7ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	e004      	b.n	800d7ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800d820 <xTaskIncrementTick+0x170>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	4a0d      	ldr	r2, [pc, #52]	@ (800d820 <xTaskIncrementTick+0x170>)
 800d7ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d7ee:	697b      	ldr	r3, [r7, #20]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	2000131c 	.word	0x2000131c
 800d7fc:	200012f8 	.word	0x200012f8
 800d800:	200012ac 	.word	0x200012ac
 800d804:	200012b0 	.word	0x200012b0
 800d808:	2000130c 	.word	0x2000130c
 800d80c:	20001314 	.word	0x20001314
 800d810:	200012fc 	.word	0x200012fc
 800d814:	20000e24 	.word	0x20000e24
 800d818:	20000e20 	.word	0x20000e20
 800d81c:	20001308 	.word	0x20001308
 800d820:	20001304 	.word	0x20001304

0800d824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d82a:	4b2b      	ldr	r3, [pc, #172]	@ (800d8d8 <vTaskSwitchContext+0xb4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d003      	beq.n	800d83a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d832:	4b2a      	ldr	r3, [pc, #168]	@ (800d8dc <vTaskSwitchContext+0xb8>)
 800d834:	2201      	movs	r2, #1
 800d836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d838:	e047      	b.n	800d8ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d83a:	4b28      	ldr	r3, [pc, #160]	@ (800d8dc <vTaskSwitchContext+0xb8>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d840:	4b27      	ldr	r3, [pc, #156]	@ (800d8e0 <vTaskSwitchContext+0xbc>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	e011      	b.n	800d86c <vTaskSwitchContext+0x48>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10b      	bne.n	800d866 <vTaskSwitchContext+0x42>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	607b      	str	r3, [r7, #4]
}
 800d860:	bf00      	nop
 800d862:	bf00      	nop
 800d864:	e7fd      	b.n	800d862 <vTaskSwitchContext+0x3e>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	3b01      	subs	r3, #1
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	491d      	ldr	r1, [pc, #116]	@ (800d8e4 <vTaskSwitchContext+0xc0>)
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	4613      	mov	r3, r2
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	4413      	add	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	440b      	add	r3, r1
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d0e3      	beq.n	800d848 <vTaskSwitchContext+0x24>
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	4613      	mov	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4a16      	ldr	r2, [pc, #88]	@ (800d8e4 <vTaskSwitchContext+0xc0>)
 800d88c:	4413      	add	r3, r2
 800d88e:	60bb      	str	r3, [r7, #8]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	605a      	str	r2, [r3, #4]
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	685a      	ldr	r2, [r3, #4]
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	3308      	adds	r3, #8
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d104      	bne.n	800d8b0 <vTaskSwitchContext+0x8c>
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	605a      	str	r2, [r3, #4]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d8e8 <vTaskSwitchContext+0xc4>)
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	4a09      	ldr	r2, [pc, #36]	@ (800d8e0 <vTaskSwitchContext+0xbc>)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d8c0:	4b09      	ldr	r3, [pc, #36]	@ (800d8e8 <vTaskSwitchContext+0xc4>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3354      	adds	r3, #84	@ 0x54
 800d8c6:	4a09      	ldr	r2, [pc, #36]	@ (800d8ec <vTaskSwitchContext+0xc8>)
 800d8c8:	6013      	str	r3, [r2, #0]
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	2000131c 	.word	0x2000131c
 800d8dc:	20001308 	.word	0x20001308
 800d8e0:	200012fc 	.word	0x200012fc
 800d8e4:	20000e24 	.word	0x20000e24
 800d8e8:	20000e20 	.word	0x20000e20
 800d8ec:	2000001c 	.word	0x2000001c

0800d8f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	60fb      	str	r3, [r7, #12]
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d918:	4b07      	ldr	r3, [pc, #28]	@ (800d938 <vTaskPlaceOnEventList+0x48>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3318      	adds	r3, #24
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7fe fd78 	bl	800c416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d926:	2101      	movs	r1, #1
 800d928:	6838      	ldr	r0, [r7, #0]
 800d92a:	f000 fa87 	bl	800de3c <prvAddCurrentTaskToDelayedList>
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20000e20 	.word	0x20000e20

0800d93c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10b      	bne.n	800d966 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	617b      	str	r3, [r7, #20]
}
 800d960:	bf00      	nop
 800d962:	bf00      	nop
 800d964:	e7fd      	b.n	800d962 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d966:	4b0a      	ldr	r3, [pc, #40]	@ (800d990 <vTaskPlaceOnEventListRestricted+0x54>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	3318      	adds	r3, #24
 800d96c:	4619      	mov	r1, r3
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7fe fd2d 	bl	800c3ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d002      	beq.n	800d980 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d97a:	f04f 33ff 	mov.w	r3, #4294967295
 800d97e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	68b8      	ldr	r0, [r7, #8]
 800d984:	f000 fa5a 	bl	800de3c <prvAddCurrentTaskToDelayedList>
	}
 800d988:	bf00      	nop
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000e20 	.word	0x20000e20

0800d994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10b      	bne.n	800d9c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	60fb      	str	r3, [r7, #12]
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	e7fd      	b.n	800d9be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3318      	adds	r3, #24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fd5e 	bl	800c488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9cc:	4b1d      	ldr	r3, [pc, #116]	@ (800da44 <xTaskRemoveFromEventList+0xb0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d11d      	bne.n	800da10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fd55 	bl	800c488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9e2:	4b19      	ldr	r3, [pc, #100]	@ (800da48 <xTaskRemoveFromEventList+0xb4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d903      	bls.n	800d9f2 <xTaskRemoveFromEventList+0x5e>
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ee:	4a16      	ldr	r2, [pc, #88]	@ (800da48 <xTaskRemoveFromEventList+0xb4>)
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4413      	add	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4a13      	ldr	r2, [pc, #76]	@ (800da4c <xTaskRemoveFromEventList+0xb8>)
 800da00:	441a      	add	r2, r3
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	3304      	adds	r3, #4
 800da06:	4619      	mov	r1, r3
 800da08:	4610      	mov	r0, r2
 800da0a:	f7fe fce0 	bl	800c3ce <vListInsertEnd>
 800da0e:	e005      	b.n	800da1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	3318      	adds	r3, #24
 800da14:	4619      	mov	r1, r3
 800da16:	480e      	ldr	r0, [pc, #56]	@ (800da50 <xTaskRemoveFromEventList+0xbc>)
 800da18:	f7fe fcd9 	bl	800c3ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da20:	4b0c      	ldr	r3, [pc, #48]	@ (800da54 <xTaskRemoveFromEventList+0xc0>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da26:	429a      	cmp	r2, r3
 800da28:	d905      	bls.n	800da36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da2a:	2301      	movs	r3, #1
 800da2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da2e:	4b0a      	ldr	r3, [pc, #40]	@ (800da58 <xTaskRemoveFromEventList+0xc4>)
 800da30:	2201      	movs	r2, #1
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	e001      	b.n	800da3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800da36:	2300      	movs	r3, #0
 800da38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da3a:	697b      	ldr	r3, [r7, #20]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	2000131c 	.word	0x2000131c
 800da48:	200012fc 	.word	0x200012fc
 800da4c:	20000e24 	.word	0x20000e24
 800da50:	200012b4 	.word	0x200012b4
 800da54:	20000e20 	.word	0x20000e20
 800da58:	20001308 	.word	0x20001308

0800da5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da64:	4b06      	ldr	r3, [pc, #24]	@ (800da80 <vTaskInternalSetTimeOutState+0x24>)
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da6c:	4b05      	ldr	r3, [pc, #20]	@ (800da84 <vTaskInternalSetTimeOutState+0x28>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	605a      	str	r2, [r3, #4]
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	2000130c 	.word	0x2000130c
 800da84:	200012f8 	.word	0x200012f8

0800da88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800da98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9c:	f383 8811 	msr	BASEPRI, r3
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	613b      	str	r3, [r7, #16]
}
 800daaa:	bf00      	nop
 800daac:	bf00      	nop
 800daae:	e7fd      	b.n	800daac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60fb      	str	r3, [r7, #12]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dace:	f000 fe93 	bl	800e7f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dad2:	4b1d      	ldr	r3, [pc, #116]	@ (800db48 <xTaskCheckForTimeOut+0xc0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	69ba      	ldr	r2, [r7, #24]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daea:	d102      	bne.n	800daf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800daec:	2300      	movs	r3, #0
 800daee:	61fb      	str	r3, [r7, #28]
 800daf0:	e023      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	4b15      	ldr	r3, [pc, #84]	@ (800db4c <xTaskCheckForTimeOut+0xc4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d007      	beq.n	800db0e <xTaskCheckForTimeOut+0x86>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	429a      	cmp	r2, r3
 800db06:	d302      	bcc.n	800db0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db08:	2301      	movs	r3, #1
 800db0a:	61fb      	str	r3, [r7, #28]
 800db0c:	e015      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	429a      	cmp	r2, r3
 800db16:	d20b      	bcs.n	800db30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ff99 	bl	800da5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db2a:	2300      	movs	r3, #0
 800db2c:	61fb      	str	r3, [r7, #28]
 800db2e:	e004      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2200      	movs	r2, #0
 800db34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800db36:	2301      	movs	r3, #1
 800db38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800db3a:	f000 fe8f 	bl	800e85c <vPortExitCritical>

	return xReturn;
 800db3e:	69fb      	ldr	r3, [r7, #28]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	200012f8 	.word	0x200012f8
 800db4c:	2000130c 	.word	0x2000130c

0800db50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db50:	b480      	push	{r7}
 800db52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db54:	4b03      	ldr	r3, [pc, #12]	@ (800db64 <vTaskMissedYield+0x14>)
 800db56:	2201      	movs	r2, #1
 800db58:	601a      	str	r2, [r3, #0]
}
 800db5a:	bf00      	nop
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	20001308 	.word	0x20001308

0800db68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800db70:	f000 f852 	bl	800dc18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db74:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <prvIdleTask+0x28>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d9f9      	bls.n	800db70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800db7c:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <prvIdleTask+0x2c>)
 800db7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db8c:	e7f0      	b.n	800db70 <prvIdleTask+0x8>
 800db8e:	bf00      	nop
 800db90:	20000e24 	.word	0x20000e24
 800db94:	e000ed04 	.word	0xe000ed04

0800db98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
 800dba2:	e00c      	b.n	800dbbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	4613      	mov	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4a12      	ldr	r2, [pc, #72]	@ (800dbf8 <prvInitialiseTaskLists+0x60>)
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fbde 	bl	800c374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	607b      	str	r3, [r7, #4]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b37      	cmp	r3, #55	@ 0x37
 800dbc2:	d9ef      	bls.n	800dba4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dbc4:	480d      	ldr	r0, [pc, #52]	@ (800dbfc <prvInitialiseTaskLists+0x64>)
 800dbc6:	f7fe fbd5 	bl	800c374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dbca:	480d      	ldr	r0, [pc, #52]	@ (800dc00 <prvInitialiseTaskLists+0x68>)
 800dbcc:	f7fe fbd2 	bl	800c374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dbd0:	480c      	ldr	r0, [pc, #48]	@ (800dc04 <prvInitialiseTaskLists+0x6c>)
 800dbd2:	f7fe fbcf 	bl	800c374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dbd6:	480c      	ldr	r0, [pc, #48]	@ (800dc08 <prvInitialiseTaskLists+0x70>)
 800dbd8:	f7fe fbcc 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dbdc:	480b      	ldr	r0, [pc, #44]	@ (800dc0c <prvInitialiseTaskLists+0x74>)
 800dbde:	f7fe fbc9 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800dc10 <prvInitialiseTaskLists+0x78>)
 800dbe4:	4a05      	ldr	r2, [pc, #20]	@ (800dbfc <prvInitialiseTaskLists+0x64>)
 800dbe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc14 <prvInitialiseTaskLists+0x7c>)
 800dbea:	4a05      	ldr	r2, [pc, #20]	@ (800dc00 <prvInitialiseTaskLists+0x68>)
 800dbec:	601a      	str	r2, [r3, #0]
}
 800dbee:	bf00      	nop
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20000e24 	.word	0x20000e24
 800dbfc:	20001284 	.word	0x20001284
 800dc00:	20001298 	.word	0x20001298
 800dc04:	200012b4 	.word	0x200012b4
 800dc08:	200012c8 	.word	0x200012c8
 800dc0c:	200012e0 	.word	0x200012e0
 800dc10:	200012ac 	.word	0x200012ac
 800dc14:	200012b0 	.word	0x200012b0

0800dc18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc1e:	e019      	b.n	800dc54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dc20:	f000 fdea 	bl	800e7f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc24:	4b10      	ldr	r3, [pc, #64]	@ (800dc68 <prvCheckTasksWaitingTermination+0x50>)
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fe fc29 	bl	800c488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dc36:	4b0d      	ldr	r3, [pc, #52]	@ (800dc6c <prvCheckTasksWaitingTermination+0x54>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	4a0b      	ldr	r2, [pc, #44]	@ (800dc6c <prvCheckTasksWaitingTermination+0x54>)
 800dc3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dc40:	4b0b      	ldr	r3, [pc, #44]	@ (800dc70 <prvCheckTasksWaitingTermination+0x58>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	4a0a      	ldr	r2, [pc, #40]	@ (800dc70 <prvCheckTasksWaitingTermination+0x58>)
 800dc48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dc4a:	f000 fe07 	bl	800e85c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f810 	bl	800dc74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc54:	4b06      	ldr	r3, [pc, #24]	@ (800dc70 <prvCheckTasksWaitingTermination+0x58>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1e1      	bne.n	800dc20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	200012c8 	.word	0x200012c8
 800dc6c:	200012f4 	.word	0x200012f4
 800dc70:	200012dc 	.word	0x200012dc

0800dc74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	3354      	adds	r3, #84	@ 0x54
 800dc80:	4618      	mov	r0, r3
 800dc82:	f001 fad9 	bl	800f238 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d108      	bne.n	800dca2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 ff9f 	bl	800ebd8 <vPortFree>
				vPortFree( pxTCB );
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 ff9c 	bl	800ebd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dca0:	e019      	b.n	800dcd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d103      	bne.n	800dcb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 ff93 	bl	800ebd8 <vPortFree>
	}
 800dcb2:	e010      	b.n	800dcd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d00b      	beq.n	800dcd6 <prvDeleteTCB+0x62>
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	60fb      	str	r3, [r7, #12]
}
 800dcd0:	bf00      	nop
 800dcd2:	bf00      	nop
 800dcd4:	e7fd      	b.n	800dcd2 <prvDeleteTCB+0x5e>
	}
 800dcd6:	bf00      	nop
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dce6:	4b0c      	ldr	r3, [pc, #48]	@ (800dd18 <prvResetNextTaskUnblockTime+0x38>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d104      	bne.n	800dcfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dcf0:	4b0a      	ldr	r3, [pc, #40]	@ (800dd1c <prvResetNextTaskUnblockTime+0x3c>)
 800dcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dcf8:	e008      	b.n	800dd0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcfa:	4b07      	ldr	r3, [pc, #28]	@ (800dd18 <prvResetNextTaskUnblockTime+0x38>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	4a04      	ldr	r2, [pc, #16]	@ (800dd1c <prvResetNextTaskUnblockTime+0x3c>)
 800dd0a:	6013      	str	r3, [r2, #0]
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	200012ac 	.word	0x200012ac
 800dd1c:	20001314 	.word	0x20001314

0800dd20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd26:	4b0b      	ldr	r3, [pc, #44]	@ (800dd54 <xTaskGetSchedulerState+0x34>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	607b      	str	r3, [r7, #4]
 800dd32:	e008      	b.n	800dd46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd34:	4b08      	ldr	r3, [pc, #32]	@ (800dd58 <xTaskGetSchedulerState+0x38>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	607b      	str	r3, [r7, #4]
 800dd40:	e001      	b.n	800dd46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd42:	2300      	movs	r3, #0
 800dd44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dd46:	687b      	ldr	r3, [r7, #4]
	}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr
 800dd54:	20001300 	.word	0x20001300
 800dd58:	2000131c 	.word	0x2000131c

0800dd5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d058      	beq.n	800de24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd72:	4b2f      	ldr	r3, [pc, #188]	@ (800de30 <xTaskPriorityDisinherit+0xd4>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	693a      	ldr	r2, [r7, #16]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d00b      	beq.n	800dd94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	60fb      	str	r3, [r7, #12]
}
 800dd8e:	bf00      	nop
 800dd90:	bf00      	nop
 800dd92:	e7fd      	b.n	800dd90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10b      	bne.n	800ddb4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60bb      	str	r3, [r7, #8]
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	e7fd      	b.n	800ddb0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddb8:	1e5a      	subs	r2, r3, #1
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d02c      	beq.n	800de24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d128      	bne.n	800de24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fe fb56 	bl	800c488 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dde8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddf4:	4b0f      	ldr	r3, [pc, #60]	@ (800de34 <xTaskPriorityDisinherit+0xd8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d903      	bls.n	800de04 <xTaskPriorityDisinherit+0xa8>
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de00:	4a0c      	ldr	r2, [pc, #48]	@ (800de34 <xTaskPriorityDisinherit+0xd8>)
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4a09      	ldr	r2, [pc, #36]	@ (800de38 <xTaskPriorityDisinherit+0xdc>)
 800de12:	441a      	add	r2, r3
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fe fad7 	bl	800c3ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de20:	2301      	movs	r3, #1
 800de22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de24:	697b      	ldr	r3, [r7, #20]
	}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	20000e20 	.word	0x20000e20
 800de34:	200012fc 	.word	0x200012fc
 800de38:	20000e24 	.word	0x20000e24

0800de3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de46:	4b21      	ldr	r3, [pc, #132]	@ (800decc <prvAddCurrentTaskToDelayedList+0x90>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de4c:	4b20      	ldr	r3, [pc, #128]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3304      	adds	r3, #4
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fb18 	bl	800c488 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5e:	d10a      	bne.n	800de76 <prvAddCurrentTaskToDelayedList+0x3a>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d007      	beq.n	800de76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de66:	4b1a      	ldr	r3, [pc, #104]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3304      	adds	r3, #4
 800de6c:	4619      	mov	r1, r3
 800de6e:	4819      	ldr	r0, [pc, #100]	@ (800ded4 <prvAddCurrentTaskToDelayedList+0x98>)
 800de70:	f7fe faad 	bl	800c3ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de74:	e026      	b.n	800dec4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4413      	add	r3, r2
 800de7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de7e:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d209      	bcs.n	800dea2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de8e:	4b12      	ldr	r3, [pc, #72]	@ (800ded8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	3304      	adds	r3, #4
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7fe fabb 	bl	800c416 <vListInsert>
}
 800dea0:	e010      	b.n	800dec4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dea2:	4b0e      	ldr	r3, [pc, #56]	@ (800dedc <prvAddCurrentTaskToDelayedList+0xa0>)
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	4b0a      	ldr	r3, [pc, #40]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3304      	adds	r3, #4
 800deac:	4619      	mov	r1, r3
 800deae:	4610      	mov	r0, r2
 800deb0:	f7fe fab1 	bl	800c416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800deb4:	4b0a      	ldr	r3, [pc, #40]	@ (800dee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	429a      	cmp	r2, r3
 800debc:	d202      	bcs.n	800dec4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800debe:	4a08      	ldr	r2, [pc, #32]	@ (800dee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	6013      	str	r3, [r2, #0]
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	200012f8 	.word	0x200012f8
 800ded0:	20000e20 	.word	0x20000e20
 800ded4:	200012e0 	.word	0x200012e0
 800ded8:	200012b0 	.word	0x200012b0
 800dedc:	200012ac 	.word	0x200012ac
 800dee0:	20001314 	.word	0x20001314

0800dee4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08a      	sub	sp, #40	@ 0x28
 800dee8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800deee:	f000 fb13 	bl	800e518 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800def2:	4b1d      	ldr	r3, [pc, #116]	@ (800df68 <xTimerCreateTimerTask+0x84>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d021      	beq.n	800df3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df02:	1d3a      	adds	r2, r7, #4
 800df04:	f107 0108 	add.w	r1, r7, #8
 800df08:	f107 030c 	add.w	r3, r7, #12
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fa17 	bl	800c340 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df12:	6879      	ldr	r1, [r7, #4]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	9202      	str	r2, [sp, #8]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	2302      	movs	r3, #2
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	460a      	mov	r2, r1
 800df24:	4911      	ldr	r1, [pc, #68]	@ (800df6c <xTimerCreateTimerTask+0x88>)
 800df26:	4812      	ldr	r0, [pc, #72]	@ (800df70 <xTimerCreateTimerTask+0x8c>)
 800df28:	f7ff f890 	bl	800d04c <xTaskCreateStatic>
 800df2c:	4603      	mov	r3, r0
 800df2e:	4a11      	ldr	r2, [pc, #68]	@ (800df74 <xTimerCreateTimerTask+0x90>)
 800df30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df32:	4b10      	ldr	r3, [pc, #64]	@ (800df74 <xTimerCreateTimerTask+0x90>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df3a:	2301      	movs	r3, #1
 800df3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10b      	bne.n	800df5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	613b      	str	r3, [r7, #16]
}
 800df56:	bf00      	nop
 800df58:	bf00      	nop
 800df5a:	e7fd      	b.n	800df58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df5c:	697b      	ldr	r3, [r7, #20]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20001350 	.word	0x20001350
 800df6c:	0800f8e0 	.word	0x0800f8e0
 800df70:	0800e0b1 	.word	0x0800e0b1
 800df74:	20001354 	.word	0x20001354

0800df78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	@ 0x28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df86:	2300      	movs	r3, #0
 800df88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10b      	bne.n	800dfa8 <xTimerGenericCommand+0x30>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	623b      	str	r3, [r7, #32]
}
 800dfa2:	bf00      	nop
 800dfa4:	bf00      	nop
 800dfa6:	e7fd      	b.n	800dfa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dfa8:	4b19      	ldr	r3, [pc, #100]	@ (800e010 <xTimerGenericCommand+0x98>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d02a      	beq.n	800e006 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	2b05      	cmp	r3, #5
 800dfc0:	dc18      	bgt.n	800dff4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dfc2:	f7ff fead 	bl	800dd20 <xTaskGetSchedulerState>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d109      	bne.n	800dfe0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfcc:	4b10      	ldr	r3, [pc, #64]	@ (800e010 <xTimerGenericCommand+0x98>)
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	f107 0110 	add.w	r1, r7, #16
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfd8:	f7fe fbc6 	bl	800c768 <xQueueGenericSend>
 800dfdc:	6278      	str	r0, [r7, #36]	@ 0x24
 800dfde:	e012      	b.n	800e006 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <xTimerGenericCommand+0x98>)
 800dfe2:	6818      	ldr	r0, [r3, #0]
 800dfe4:	f107 0110 	add.w	r1, r7, #16
 800dfe8:	2300      	movs	r3, #0
 800dfea:	2200      	movs	r2, #0
 800dfec:	f7fe fbbc 	bl	800c768 <xQueueGenericSend>
 800dff0:	6278      	str	r0, [r7, #36]	@ 0x24
 800dff2:	e008      	b.n	800e006 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dff4:	4b06      	ldr	r3, [pc, #24]	@ (800e010 <xTimerGenericCommand+0x98>)
 800dff6:	6818      	ldr	r0, [r3, #0]
 800dff8:	f107 0110 	add.w	r1, r7, #16
 800dffc:	2300      	movs	r3, #0
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	f7fe fcb4 	bl	800c96c <xQueueGenericSendFromISR>
 800e004:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3728      	adds	r7, #40	@ 0x28
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20001350 	.word	0x20001350

0800e014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af02      	add	r7, sp, #8
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e01e:	4b23      	ldr	r3, [pc, #140]	@ (800e0ac <prvProcessExpiredTimer+0x98>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	3304      	adds	r3, #4
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fa2b 	bl	800c488 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e038:	f003 0304 	and.w	r3, r3, #4
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d023      	beq.n	800e088 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	699a      	ldr	r2, [r3, #24]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	18d1      	adds	r1, r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	6978      	ldr	r0, [r7, #20]
 800e04e:	f000 f8d5 	bl	800e1fc <prvInsertTimerInActiveList>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d020      	beq.n	800e09a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e058:	2300      	movs	r3, #0
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	2300      	movs	r3, #0
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	2100      	movs	r1, #0
 800e062:	6978      	ldr	r0, [r7, #20]
 800e064:	f7ff ff88 	bl	800df78 <xTimerGenericCommand>
 800e068:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d114      	bne.n	800e09a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	60fb      	str	r3, [r7, #12]
}
 800e082:	bf00      	nop
 800e084:	bf00      	nop
 800e086:	e7fd      	b.n	800e084 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e08e:	f023 0301 	bic.w	r3, r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	6978      	ldr	r0, [r7, #20]
 800e0a0:	4798      	blx	r3
}
 800e0a2:	bf00      	nop
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20001348 	.word	0x20001348

0800e0b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0b8:	f107 0308 	add.w	r3, r7, #8
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f859 	bl	800e174 <prvGetNextExpireTime>
 800e0c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 f805 	bl	800e0d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0ce:	f000 f8d7 	bl	800e280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0d2:	bf00      	nop
 800e0d4:	e7f0      	b.n	800e0b8 <prvTimerTask+0x8>
	...

0800e0d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0e2:	f7ff fa17 	bl	800d514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0e6:	f107 0308 	add.w	r3, r7, #8
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 f866 	bl	800e1bc <prvSampleTimeNow>
 800e0f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d130      	bne.n	800e15a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10a      	bne.n	800e114 <prvProcessTimerOrBlockTask+0x3c>
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	429a      	cmp	r2, r3
 800e104:	d806      	bhi.n	800e114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e106:	f7ff fa13 	bl	800d530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e10a:	68f9      	ldr	r1, [r7, #12]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ff81 	bl	800e014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e112:	e024      	b.n	800e15e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d008      	beq.n	800e12c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e11a:	4b13      	ldr	r3, [pc, #76]	@ (800e168 <prvProcessTimerOrBlockTask+0x90>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d101      	bne.n	800e128 <prvProcessTimerOrBlockTask+0x50>
 800e124:	2301      	movs	r3, #1
 800e126:	e000      	b.n	800e12a <prvProcessTimerOrBlockTask+0x52>
 800e128:	2300      	movs	r3, #0
 800e12a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e12c:	4b0f      	ldr	r3, [pc, #60]	@ (800e16c <prvProcessTimerOrBlockTask+0x94>)
 800e12e:	6818      	ldr	r0, [r3, #0]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4619      	mov	r1, r3
 800e13a:	f7fe ff53 	bl	800cfe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e13e:	f7ff f9f7 	bl	800d530 <xTaskResumeAll>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e148:	4b09      	ldr	r3, [pc, #36]	@ (800e170 <prvProcessTimerOrBlockTask+0x98>)
 800e14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
}
 800e158:	e001      	b.n	800e15e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e15a:	f7ff f9e9 	bl	800d530 <xTaskResumeAll>
}
 800e15e:	bf00      	nop
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2000134c 	.word	0x2000134c
 800e16c:	20001350 	.word	0x20001350
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e17c:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b8 <prvGetNextExpireTime+0x44>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <prvGetNextExpireTime+0x16>
 800e186:	2201      	movs	r2, #1
 800e188:	e000      	b.n	800e18c <prvGetNextExpireTime+0x18>
 800e18a:	2200      	movs	r2, #0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d105      	bne.n	800e1a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e198:	4b07      	ldr	r3, [pc, #28]	@ (800e1b8 <prvGetNextExpireTime+0x44>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	e001      	b.n	800e1a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	20001348 	.word	0x20001348

0800e1bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e1c4:	f7ff fa52 	bl	800d66c <xTaskGetTickCount>
 800e1c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e1f8 <prvSampleTimeNow+0x3c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d205      	bcs.n	800e1e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1d4:	f000 f93a 	bl	800e44c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	e002      	b.n	800e1e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1e6:	4a04      	ldr	r2, [pc, #16]	@ (800e1f8 <prvSampleTimeNow+0x3c>)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20001358 	.word	0x20001358

0800e1fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e20a:	2300      	movs	r3, #0
 800e20c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d812      	bhi.n	800e248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	1ad2      	subs	r2, r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d302      	bcc.n	800e236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e230:	2301      	movs	r3, #1
 800e232:	617b      	str	r3, [r7, #20]
 800e234:	e01b      	b.n	800e26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e236:	4b10      	ldr	r3, [pc, #64]	@ (800e278 <prvInsertTimerInActiveList+0x7c>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3304      	adds	r3, #4
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f7fe f8e8 	bl	800c416 <vListInsert>
 800e246:	e012      	b.n	800e26e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d206      	bcs.n	800e25e <prvInsertTimerInActiveList+0x62>
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	429a      	cmp	r2, r3
 800e256:	d302      	bcc.n	800e25e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e258:	2301      	movs	r3, #1
 800e25a:	617b      	str	r3, [r7, #20]
 800e25c:	e007      	b.n	800e26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e25e:	4b07      	ldr	r3, [pc, #28]	@ (800e27c <prvInsertTimerInActiveList+0x80>)
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	3304      	adds	r3, #4
 800e266:	4619      	mov	r1, r3
 800e268:	4610      	mov	r0, r2
 800e26a:	f7fe f8d4 	bl	800c416 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e26e:	697b      	ldr	r3, [r7, #20]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	2000134c 	.word	0x2000134c
 800e27c:	20001348 	.word	0x20001348

0800e280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08e      	sub	sp, #56	@ 0x38
 800e284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e286:	e0ce      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	da19      	bge.n	800e2c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e28e:	1d3b      	adds	r3, r7, #4
 800e290:	3304      	adds	r3, #4
 800e292:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10b      	bne.n	800e2b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	61fb      	str	r3, [r7, #28]
}
 800e2ac:	bf00      	nop
 800e2ae:	bf00      	nop
 800e2b0:	e7fd      	b.n	800e2ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2b8:	6850      	ldr	r0, [r2, #4]
 800e2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2bc:	6892      	ldr	r2, [r2, #8]
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f2c0 80ae 	blt.w	800e426 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d004      	beq.n	800e2e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	3304      	adds	r3, #4
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe f8d4 	bl	800c488 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2e0:	463b      	mov	r3, r7
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7ff ff6a 	bl	800e1bc <prvSampleTimeNow>
 800e2e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b09      	cmp	r3, #9
 800e2ee:	f200 8097 	bhi.w	800e420 <prvProcessReceivedCommands+0x1a0>
 800e2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f8 <prvProcessReceivedCommands+0x78>)
 800e2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f8:	0800e321 	.word	0x0800e321
 800e2fc:	0800e321 	.word	0x0800e321
 800e300:	0800e321 	.word	0x0800e321
 800e304:	0800e397 	.word	0x0800e397
 800e308:	0800e3ab 	.word	0x0800e3ab
 800e30c:	0800e3f7 	.word	0x0800e3f7
 800e310:	0800e321 	.word	0x0800e321
 800e314:	0800e321 	.word	0x0800e321
 800e318:	0800e397 	.word	0x0800e397
 800e31c:	0800e3ab 	.word	0x0800e3ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e326:	f043 0301 	orr.w	r3, r3, #1
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	18d1      	adds	r1, r2, r3
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e33e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e340:	f7ff ff5c 	bl	800e1fc <prvInsertTimerInActiveList>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d06c      	beq.n	800e424 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e350:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d061      	beq.n	800e424 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	441a      	add	r2, r3
 800e368:	2300      	movs	r3, #0
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	2300      	movs	r3, #0
 800e36e:	2100      	movs	r1, #0
 800e370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e372:	f7ff fe01 	bl	800df78 <xTimerGenericCommand>
 800e376:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d152      	bne.n	800e424 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	61bb      	str	r3, [r7, #24]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e39c:	f023 0301 	bic.w	r3, r3, #1
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e3a8:	e03d      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3b0:	f043 0301 	orr.w	r3, r3, #1
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c4:	699b      	ldr	r3, [r3, #24]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10b      	bne.n	800e3e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	617b      	str	r3, [r7, #20]
}
 800e3dc:	bf00      	nop
 800e3de:	bf00      	nop
 800e3e0:	e7fd      	b.n	800e3de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	699a      	ldr	r2, [r3, #24]
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e8:	18d1      	adds	r1, r2, r3
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3f0:	f7ff ff04 	bl	800e1fc <prvInsertTimerInActiveList>
					break;
 800e3f4:	e017      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3fc:	f003 0302 	and.w	r3, r3, #2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e406:	f000 fbe7 	bl	800ebd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e40a:	e00c      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e412:	f023 0301 	bic.w	r3, r3, #1
 800e416:	b2da      	uxtb	r2, r3
 800e418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e41e:	e002      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e420:	bf00      	nop
 800e422:	e000      	b.n	800e426 <prvProcessReceivedCommands+0x1a6>
					break;
 800e424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e426:	4b08      	ldr	r3, [pc, #32]	@ (800e448 <prvProcessReceivedCommands+0x1c8>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	1d39      	adds	r1, r7, #4
 800e42c:	2200      	movs	r2, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fb3a 	bl	800caa8 <xQueueReceive>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	f47f af26 	bne.w	800e288 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e43c:	bf00      	nop
 800e43e:	bf00      	nop
 800e440:	3730      	adds	r7, #48	@ 0x30
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20001350 	.word	0x20001350

0800e44c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e452:	e049      	b.n	800e4e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e454:	4b2e      	ldr	r3, [pc, #184]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e45e:	4b2c      	ldr	r3, [pc, #176]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3304      	adds	r3, #4
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe f80b 	bl	800c488 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e480:	f003 0304 	and.w	r3, r3, #4
 800e484:	2b00      	cmp	r3, #0
 800e486:	d02f      	beq.n	800e4e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	4413      	add	r3, r2
 800e490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	429a      	cmp	r2, r3
 800e498:	d90e      	bls.n	800e4b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	f7fd ffb0 	bl	800c416 <vListInsert>
 800e4b6:	e017      	b.n	800e4e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f7ff fd58 	bl	800df78 <xTimerGenericCommand>
 800e4c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10b      	bne.n	800e4e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	603b      	str	r3, [r7, #0]
}
 800e4e2:	bf00      	nop
 800e4e4:	bf00      	nop
 800e4e6:	e7fd      	b.n	800e4e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4e8:	4b09      	ldr	r3, [pc, #36]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1b0      	bne.n	800e454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e4f2:	4b07      	ldr	r3, [pc, #28]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e4f8:	4b06      	ldr	r3, [pc, #24]	@ (800e514 <prvSwitchTimerLists+0xc8>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a04      	ldr	r2, [pc, #16]	@ (800e510 <prvSwitchTimerLists+0xc4>)
 800e4fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e500:	4a04      	ldr	r2, [pc, #16]	@ (800e514 <prvSwitchTimerLists+0xc8>)
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	6013      	str	r3, [r2, #0]
}
 800e506:	bf00      	nop
 800e508:	3718      	adds	r7, #24
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	20001348 	.word	0x20001348
 800e514:	2000134c 	.word	0x2000134c

0800e518 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e51e:	f000 f96b 	bl	800e7f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e522:	4b15      	ldr	r3, [pc, #84]	@ (800e578 <prvCheckForValidListAndQueue+0x60>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d120      	bne.n	800e56c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e52a:	4814      	ldr	r0, [pc, #80]	@ (800e57c <prvCheckForValidListAndQueue+0x64>)
 800e52c:	f7fd ff22 	bl	800c374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e530:	4813      	ldr	r0, [pc, #76]	@ (800e580 <prvCheckForValidListAndQueue+0x68>)
 800e532:	f7fd ff1f 	bl	800c374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e536:	4b13      	ldr	r3, [pc, #76]	@ (800e584 <prvCheckForValidListAndQueue+0x6c>)
 800e538:	4a10      	ldr	r2, [pc, #64]	@ (800e57c <prvCheckForValidListAndQueue+0x64>)
 800e53a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e53c:	4b12      	ldr	r3, [pc, #72]	@ (800e588 <prvCheckForValidListAndQueue+0x70>)
 800e53e:	4a10      	ldr	r2, [pc, #64]	@ (800e580 <prvCheckForValidListAndQueue+0x68>)
 800e540:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e542:	2300      	movs	r3, #0
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	4b11      	ldr	r3, [pc, #68]	@ (800e58c <prvCheckForValidListAndQueue+0x74>)
 800e548:	4a11      	ldr	r2, [pc, #68]	@ (800e590 <prvCheckForValidListAndQueue+0x78>)
 800e54a:	2110      	movs	r1, #16
 800e54c:	200a      	movs	r0, #10
 800e54e:	f7fe f82f 	bl	800c5b0 <xQueueGenericCreateStatic>
 800e552:	4603      	mov	r3, r0
 800e554:	4a08      	ldr	r2, [pc, #32]	@ (800e578 <prvCheckForValidListAndQueue+0x60>)
 800e556:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e558:	4b07      	ldr	r3, [pc, #28]	@ (800e578 <prvCheckForValidListAndQueue+0x60>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e560:	4b05      	ldr	r3, [pc, #20]	@ (800e578 <prvCheckForValidListAndQueue+0x60>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	490b      	ldr	r1, [pc, #44]	@ (800e594 <prvCheckForValidListAndQueue+0x7c>)
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fd12 	bl	800cf90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e56c:	f000 f976 	bl	800e85c <vPortExitCritical>
}
 800e570:	bf00      	nop
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20001350 	.word	0x20001350
 800e57c:	20001320 	.word	0x20001320
 800e580:	20001334 	.word	0x20001334
 800e584:	20001348 	.word	0x20001348
 800e588:	2000134c 	.word	0x2000134c
 800e58c:	200013fc 	.word	0x200013fc
 800e590:	2000135c 	.word	0x2000135c
 800e594:	0800f8e8 	.word	0x0800f8e8

0800e598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3b04      	subs	r3, #4
 800e5a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3b04      	subs	r3, #4
 800e5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	f023 0201 	bic.w	r2, r3, #1
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3b04      	subs	r3, #4
 800e5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5c8:	4a0c      	ldr	r2, [pc, #48]	@ (800e5fc <pxPortInitialiseStack+0x64>)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3b14      	subs	r3, #20
 800e5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	3b04      	subs	r3, #4
 800e5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f06f 0202 	mvn.w	r2, #2
 800e5e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3b20      	subs	r3, #32
 800e5ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	0800e601 	.word	0x0800e601

0800e600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e60a:	4b13      	ldr	r3, [pc, #76]	@ (800e658 <prvTaskExitError+0x58>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e612:	d00b      	beq.n	800e62c <prvTaskExitError+0x2c>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	60fb      	str	r3, [r7, #12]
}
 800e626:	bf00      	nop
 800e628:	bf00      	nop
 800e62a:	e7fd      	b.n	800e628 <prvTaskExitError+0x28>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60bb      	str	r3, [r7, #8]
}
 800e63e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e640:	bf00      	nop
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0fc      	beq.n	800e642 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e648:	bf00      	nop
 800e64a:	bf00      	nop
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	2000000c 	.word	0x2000000c
 800e65c:	00000000 	.word	0x00000000

0800e660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e660:	4b07      	ldr	r3, [pc, #28]	@ (800e680 <pxCurrentTCBConst2>)
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	6808      	ldr	r0, [r1, #0]
 800e666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66a:	f380 8809 	msr	PSP, r0
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f04f 0000 	mov.w	r0, #0
 800e676:	f380 8811 	msr	BASEPRI, r0
 800e67a:	4770      	bx	lr
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst2>:
 800e680:	20000e20 	.word	0x20000e20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop

0800e688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e688:	4808      	ldr	r0, [pc, #32]	@ (800e6ac <prvPortStartFirstTask+0x24>)
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	6800      	ldr	r0, [r0, #0]
 800e68e:	f380 8808 	msr	MSP, r0
 800e692:	f04f 0000 	mov.w	r0, #0
 800e696:	f380 8814 	msr	CONTROL, r0
 800e69a:	b662      	cpsie	i
 800e69c:	b661      	cpsie	f
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	df00      	svc	0
 800e6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6aa:	bf00      	nop
 800e6ac:	e000ed08 	.word	0xe000ed08

0800e6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6b6:	4b47      	ldr	r3, [pc, #284]	@ (800e7d4 <xPortStartScheduler+0x124>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a47      	ldr	r2, [pc, #284]	@ (800e7d8 <xPortStartScheduler+0x128>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d10b      	bne.n	800e6d8 <xPortStartScheduler+0x28>
	__asm volatile
 800e6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	f3bf 8f6f 	isb	sy
 800e6cc:	f3bf 8f4f 	dsb	sy
 800e6d0:	613b      	str	r3, [r7, #16]
}
 800e6d2:	bf00      	nop
 800e6d4:	bf00      	nop
 800e6d6:	e7fd      	b.n	800e6d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e7d4 <xPortStartScheduler+0x124>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a3f      	ldr	r2, [pc, #252]	@ (800e7dc <xPortStartScheduler+0x12c>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d10b      	bne.n	800e6fa <xPortStartScheduler+0x4a>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60fb      	str	r3, [r7, #12]
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
 800e6f8:	e7fd      	b.n	800e6f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6fa:	4b39      	ldr	r3, [pc, #228]	@ (800e7e0 <xPortStartScheduler+0x130>)
 800e6fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	b2db      	uxtb	r3, r3
 800e704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	22ff      	movs	r2, #255	@ 0xff
 800e70a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	b2db      	uxtb	r3, r3
 800e712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	4b31      	ldr	r3, [pc, #196]	@ (800e7e4 <xPortStartScheduler+0x134>)
 800e720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e722:	4b31      	ldr	r3, [pc, #196]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e724:	2207      	movs	r2, #7
 800e726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e728:	e009      	b.n	800e73e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e72a:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3b01      	subs	r3, #1
 800e730:	4a2d      	ldr	r2, [pc, #180]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	b2db      	uxtb	r3, r3
 800e738:	005b      	lsls	r3, r3, #1
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e73e:	78fb      	ldrb	r3, [r7, #3]
 800e740:	b2db      	uxtb	r3, r3
 800e742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e746:	2b80      	cmp	r3, #128	@ 0x80
 800e748:	d0ef      	beq.n	800e72a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e74a:	4b27      	ldr	r3, [pc, #156]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1c3 0307 	rsb	r3, r3, #7
 800e752:	2b04      	cmp	r3, #4
 800e754:	d00b      	beq.n	800e76e <xPortStartScheduler+0xbe>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	60bb      	str	r3, [r7, #8]
}
 800e768:	bf00      	nop
 800e76a:	bf00      	nop
 800e76c:	e7fd      	b.n	800e76a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e76e:	4b1e      	ldr	r3, [pc, #120]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	021b      	lsls	r3, r3, #8
 800e774:	4a1c      	ldr	r2, [pc, #112]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e778:	4b1b      	ldr	r3, [pc, #108]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e780:	4a19      	ldr	r2, [pc, #100]	@ (800e7e8 <xPortStartScheduler+0x138>)
 800e782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	b2da      	uxtb	r2, r3
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e78c:	4b17      	ldr	r3, [pc, #92]	@ (800e7ec <xPortStartScheduler+0x13c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a16      	ldr	r2, [pc, #88]	@ (800e7ec <xPortStartScheduler+0x13c>)
 800e792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e798:	4b14      	ldr	r3, [pc, #80]	@ (800e7ec <xPortStartScheduler+0x13c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a13      	ldr	r2, [pc, #76]	@ (800e7ec <xPortStartScheduler+0x13c>)
 800e79e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e7a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7a4:	f000 f8da 	bl	800e95c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7a8:	4b11      	ldr	r3, [pc, #68]	@ (800e7f0 <xPortStartScheduler+0x140>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7ae:	f000 f8f9 	bl	800e9a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7b2:	4b10      	ldr	r3, [pc, #64]	@ (800e7f4 <xPortStartScheduler+0x144>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e7f4 <xPortStartScheduler+0x144>)
 800e7b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e7bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7be:	f7ff ff63 	bl	800e688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7c2:	f7ff f82f 	bl	800d824 <vTaskSwitchContext>
	prvTaskExitError();
 800e7c6:	f7ff ff1b 	bl	800e600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	e000ed00 	.word	0xe000ed00
 800e7d8:	410fc271 	.word	0x410fc271
 800e7dc:	410fc270 	.word	0x410fc270
 800e7e0:	e000e400 	.word	0xe000e400
 800e7e4:	2000144c 	.word	0x2000144c
 800e7e8:	20001450 	.word	0x20001450
 800e7ec:	e000ed20 	.word	0xe000ed20
 800e7f0:	2000000c 	.word	0x2000000c
 800e7f4:	e000ef34 	.word	0xe000ef34

0800e7f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	607b      	str	r3, [r7, #4]
}
 800e810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e812:	4b10      	ldr	r3, [pc, #64]	@ (800e854 <vPortEnterCritical+0x5c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3301      	adds	r3, #1
 800e818:	4a0e      	ldr	r2, [pc, #56]	@ (800e854 <vPortEnterCritical+0x5c>)
 800e81a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e81c:	4b0d      	ldr	r3, [pc, #52]	@ (800e854 <vPortEnterCritical+0x5c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d110      	bne.n	800e846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e824:	4b0c      	ldr	r3, [pc, #48]	@ (800e858 <vPortEnterCritical+0x60>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <vPortEnterCritical+0x4e>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	603b      	str	r3, [r7, #0]
}
 800e840:	bf00      	nop
 800e842:	bf00      	nop
 800e844:	e7fd      	b.n	800e842 <vPortEnterCritical+0x4a>
	}
}
 800e846:	bf00      	nop
 800e848:	370c      	adds	r7, #12
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	2000000c 	.word	0x2000000c
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e862:	4b12      	ldr	r3, [pc, #72]	@ (800e8ac <vPortExitCritical+0x50>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10b      	bne.n	800e882 <vPortExitCritical+0x26>
	__asm volatile
 800e86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	607b      	str	r3, [r7, #4]
}
 800e87c:	bf00      	nop
 800e87e:	bf00      	nop
 800e880:	e7fd      	b.n	800e87e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e882:	4b0a      	ldr	r3, [pc, #40]	@ (800e8ac <vPortExitCritical+0x50>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	3b01      	subs	r3, #1
 800e888:	4a08      	ldr	r2, [pc, #32]	@ (800e8ac <vPortExitCritical+0x50>)
 800e88a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e88c:	4b07      	ldr	r3, [pc, #28]	@ (800e8ac <vPortExitCritical+0x50>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <vPortExitCritical+0x44>
 800e894:	2300      	movs	r3, #0
 800e896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f383 8811 	msr	BASEPRI, r3
}
 800e89e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	2000000c 	.word	0x2000000c

0800e8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8b0:	f3ef 8009 	mrs	r0, PSP
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	4b15      	ldr	r3, [pc, #84]	@ (800e910 <pxCurrentTCBConst>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	f01e 0f10 	tst.w	lr, #16
 800e8c0:	bf08      	it	eq
 800e8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ca:	6010      	str	r0, [r2, #0]
 800e8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e8d4:	f380 8811 	msr	BASEPRI, r0
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f7fe ffa0 	bl	800d824 <vTaskSwitchContext>
 800e8e4:	f04f 0000 	mov.w	r0, #0
 800e8e8:	f380 8811 	msr	BASEPRI, r0
 800e8ec:	bc09      	pop	{r0, r3}
 800e8ee:	6819      	ldr	r1, [r3, #0]
 800e8f0:	6808      	ldr	r0, [r1, #0]
 800e8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f6:	f01e 0f10 	tst.w	lr, #16
 800e8fa:	bf08      	it	eq
 800e8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e900:	f380 8809 	msr	PSP, r0
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	f3af 8000 	nop.w

0800e910 <pxCurrentTCBConst>:
 800e910:	20000e20 	.word	0x20000e20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop

0800e918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
	__asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e922:	f383 8811 	msr	BASEPRI, r3
 800e926:	f3bf 8f6f 	isb	sy
 800e92a:	f3bf 8f4f 	dsb	sy
 800e92e:	607b      	str	r3, [r7, #4]
}
 800e930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e932:	f7fe febd 	bl	800d6b0 <xTaskIncrementTick>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d003      	beq.n	800e944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e93c:	4b06      	ldr	r3, [pc, #24]	@ (800e958 <xPortSysTickHandler+0x40>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	2300      	movs	r3, #0
 800e946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	f383 8811 	msr	BASEPRI, r3
}
 800e94e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	e000ed04 	.word	0xe000ed04

0800e95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e960:	4b0b      	ldr	r3, [pc, #44]	@ (800e990 <vPortSetupTimerInterrupt+0x34>)
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e966:	4b0b      	ldr	r3, [pc, #44]	@ (800e994 <vPortSetupTimerInterrupt+0x38>)
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e96c:	4b0a      	ldr	r3, [pc, #40]	@ (800e998 <vPortSetupTimerInterrupt+0x3c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a0a      	ldr	r2, [pc, #40]	@ (800e99c <vPortSetupTimerInterrupt+0x40>)
 800e972:	fba2 2303 	umull	r2, r3, r2, r3
 800e976:	099b      	lsrs	r3, r3, #6
 800e978:	4a09      	ldr	r2, [pc, #36]	@ (800e9a0 <vPortSetupTimerInterrupt+0x44>)
 800e97a:	3b01      	subs	r3, #1
 800e97c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e97e:	4b04      	ldr	r3, [pc, #16]	@ (800e990 <vPortSetupTimerInterrupt+0x34>)
 800e980:	2207      	movs	r2, #7
 800e982:	601a      	str	r2, [r3, #0]
}
 800e984:	bf00      	nop
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr
 800e98e:	bf00      	nop
 800e990:	e000e010 	.word	0xe000e010
 800e994:	e000e018 	.word	0xe000e018
 800e998:	20000000 	.word	0x20000000
 800e99c:	10624dd3 	.word	0x10624dd3
 800e9a0:	e000e014 	.word	0xe000e014

0800e9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e9b4 <vPortEnableVFP+0x10>
 800e9a8:	6801      	ldr	r1, [r0, #0]
 800e9aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e9ae:	6001      	str	r1, [r0, #0]
 800e9b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9b2:	bf00      	nop
 800e9b4:	e000ed88 	.word	0xe000ed88

0800e9b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9be:	f3ef 8305 	mrs	r3, IPSR
 800e9c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2b0f      	cmp	r3, #15
 800e9c8:	d915      	bls.n	800e9f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9ca:	4a18      	ldr	r2, [pc, #96]	@ (800ea2c <vPortValidateInterruptPriority+0x74>)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e9d4:	4b16      	ldr	r3, [pc, #88]	@ (800ea30 <vPortValidateInterruptPriority+0x78>)
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	7afa      	ldrb	r2, [r7, #11]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d20b      	bcs.n	800e9f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	607b      	str	r3, [r7, #4]
}
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
 800e9f4:	e7fd      	b.n	800e9f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <vPortValidateInterruptPriority+0x7c>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800ea38 <vPortValidateInterruptPriority+0x80>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d90b      	bls.n	800ea1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	603b      	str	r3, [r7, #0]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <vPortValidateInterruptPriority+0x62>
	}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	e000e3f0 	.word	0xe000e3f0
 800ea30:	2000144c 	.word	0x2000144c
 800ea34:	e000ed0c 	.word	0xe000ed0c
 800ea38:	20001450 	.word	0x20001450

0800ea3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08a      	sub	sp, #40	@ 0x28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea44:	2300      	movs	r3, #0
 800ea46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea48:	f7fe fd64 	bl	800d514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea4c:	4b5c      	ldr	r3, [pc, #368]	@ (800ebc0 <pvPortMalloc+0x184>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d101      	bne.n	800ea58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea54:	f000 f924 	bl	800eca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea58:	4b5a      	ldr	r3, [pc, #360]	@ (800ebc4 <pvPortMalloc+0x188>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4013      	ands	r3, r2
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f040 8095 	bne.w	800eb90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d01e      	beq.n	800eaaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ea6c:	2208      	movs	r2, #8
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4413      	add	r3, r2
 800ea72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d015      	beq.n	800eaaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f023 0307 	bic.w	r3, r3, #7
 800ea84:	3308      	adds	r3, #8
 800ea86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f003 0307 	and.w	r3, r3, #7
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00b      	beq.n	800eaaa <pvPortMalloc+0x6e>
	__asm volatile
 800ea92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea96:	f383 8811 	msr	BASEPRI, r3
 800ea9a:	f3bf 8f6f 	isb	sy
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	617b      	str	r3, [r7, #20]
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop
 800eaa8:	e7fd      	b.n	800eaa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d06f      	beq.n	800eb90 <pvPortMalloc+0x154>
 800eab0:	4b45      	ldr	r3, [pc, #276]	@ (800ebc8 <pvPortMalloc+0x18c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d86a      	bhi.n	800eb90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eaba:	4b44      	ldr	r3, [pc, #272]	@ (800ebcc <pvPortMalloc+0x190>)
 800eabc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eabe:	4b43      	ldr	r3, [pc, #268]	@ (800ebcc <pvPortMalloc+0x190>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eac4:	e004      	b.n	800ead0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d903      	bls.n	800eae2 <pvPortMalloc+0xa6>
 800eada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1f1      	bne.n	800eac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eae2:	4b37      	ldr	r3, [pc, #220]	@ (800ebc0 <pvPortMalloc+0x184>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d051      	beq.n	800eb90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eaec:	6a3b      	ldr	r3, [r7, #32]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2208      	movs	r2, #8
 800eaf2:	4413      	add	r3, r2
 800eaf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	1ad2      	subs	r2, r2, r3
 800eb06:	2308      	movs	r3, #8
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d920      	bls.n	800eb50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4413      	add	r3, r2
 800eb14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	f003 0307 	and.w	r3, r3, #7
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00b      	beq.n	800eb38 <pvPortMalloc+0xfc>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	613b      	str	r3, [r7, #16]
}
 800eb32:	bf00      	nop
 800eb34:	bf00      	nop
 800eb36:	e7fd      	b.n	800eb34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb4a:	69b8      	ldr	r0, [r7, #24]
 800eb4c:	f000 f90a 	bl	800ed64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb50:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc8 <pvPortMalloc+0x18c>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc8 <pvPortMalloc+0x18c>)
 800eb5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb5e:	4b1a      	ldr	r3, [pc, #104]	@ (800ebc8 <pvPortMalloc+0x18c>)
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	4b1b      	ldr	r3, [pc, #108]	@ (800ebd0 <pvPortMalloc+0x194>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d203      	bcs.n	800eb72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb6a:	4b17      	ldr	r3, [pc, #92]	@ (800ebc8 <pvPortMalloc+0x18c>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a18      	ldr	r2, [pc, #96]	@ (800ebd0 <pvPortMalloc+0x194>)
 800eb70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb74:	685a      	ldr	r2, [r3, #4]
 800eb76:	4b13      	ldr	r3, [pc, #76]	@ (800ebc4 <pvPortMalloc+0x188>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	431a      	orrs	r2, r3
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb86:	4b13      	ldr	r3, [pc, #76]	@ (800ebd4 <pvPortMalloc+0x198>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	4a11      	ldr	r2, [pc, #68]	@ (800ebd4 <pvPortMalloc+0x198>)
 800eb8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb90:	f7fe fcce 	bl	800d530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	f003 0307 	and.w	r3, r3, #7
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00b      	beq.n	800ebb6 <pvPortMalloc+0x17a>
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	60fb      	str	r3, [r7, #12]
}
 800ebb0:	bf00      	nop
 800ebb2:	bf00      	nop
 800ebb4:	e7fd      	b.n	800ebb2 <pvPortMalloc+0x176>
	return pvReturn;
 800ebb6:	69fb      	ldr	r3, [r7, #28]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3728      	adds	r7, #40	@ 0x28
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	20002014 	.word	0x20002014
 800ebc4:	20002028 	.word	0x20002028
 800ebc8:	20002018 	.word	0x20002018
 800ebcc:	2000200c 	.word	0x2000200c
 800ebd0:	2000201c 	.word	0x2000201c
 800ebd4:	20002020 	.word	0x20002020

0800ebd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d04f      	beq.n	800ec8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ebea:	2308      	movs	r3, #8
 800ebec:	425b      	negs	r3, r3
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	685a      	ldr	r2, [r3, #4]
 800ebfc:	4b25      	ldr	r3, [pc, #148]	@ (800ec94 <vPortFree+0xbc>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4013      	ands	r3, r2
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10b      	bne.n	800ec1e <vPortFree+0x46>
	__asm volatile
 800ec06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	60fb      	str	r3, [r7, #12]
}
 800ec18:	bf00      	nop
 800ec1a:	bf00      	nop
 800ec1c:	e7fd      	b.n	800ec1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00b      	beq.n	800ec3e <vPortFree+0x66>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	60bb      	str	r3, [r7, #8]
}
 800ec38:	bf00      	nop
 800ec3a:	bf00      	nop
 800ec3c:	e7fd      	b.n	800ec3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	4b14      	ldr	r3, [pc, #80]	@ (800ec94 <vPortFree+0xbc>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4013      	ands	r3, r2
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d01e      	beq.n	800ec8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d11a      	bne.n	800ec8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	4b0e      	ldr	r3, [pc, #56]	@ (800ec94 <vPortFree+0xbc>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	43db      	mvns	r3, r3
 800ec5e:	401a      	ands	r2, r3
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec64:	f7fe fc56 	bl	800d514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec98 <vPortFree+0xc0>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4413      	add	r3, r2
 800ec72:	4a09      	ldr	r2, [pc, #36]	@ (800ec98 <vPortFree+0xc0>)
 800ec74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec76:	6938      	ldr	r0, [r7, #16]
 800ec78:	f000 f874 	bl	800ed64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec7c:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <vPortFree+0xc4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	3301      	adds	r3, #1
 800ec82:	4a06      	ldr	r2, [pc, #24]	@ (800ec9c <vPortFree+0xc4>)
 800ec84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec86:	f7fe fc53 	bl	800d530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec8a:	bf00      	nop
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20002028 	.word	0x20002028
 800ec98:	20002018 	.word	0x20002018
 800ec9c:	20002024 	.word	0x20002024

0800eca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eca6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ecaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ecac:	4b27      	ldr	r3, [pc, #156]	@ (800ed4c <prvHeapInit+0xac>)
 800ecae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f003 0307 	and.w	r3, r3, #7
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00c      	beq.n	800ecd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	3307      	adds	r3, #7
 800ecbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f023 0307 	bic.w	r3, r3, #7
 800ecc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	4a1f      	ldr	r2, [pc, #124]	@ (800ed4c <prvHeapInit+0xac>)
 800ecd0:	4413      	add	r3, r2
 800ecd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ed50 <prvHeapInit+0xb0>)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ecde:	4b1c      	ldr	r3, [pc, #112]	@ (800ed50 <prvHeapInit+0xb0>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	4413      	add	r3, r2
 800ecea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ecec:	2208      	movs	r2, #8
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	1a9b      	subs	r3, r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f023 0307 	bic.w	r3, r3, #7
 800ecfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	4a15      	ldr	r2, [pc, #84]	@ (800ed54 <prvHeapInit+0xb4>)
 800ed00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed02:	4b14      	ldr	r3, [pc, #80]	@ (800ed54 <prvHeapInit+0xb4>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2200      	movs	r2, #0
 800ed08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed0a:	4b12      	ldr	r3, [pc, #72]	@ (800ed54 <prvHeapInit+0xb4>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed20:	4b0c      	ldr	r3, [pc, #48]	@ (800ed54 <prvHeapInit+0xb4>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ed58 <prvHeapInit+0xb8>)
 800ed2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4a09      	ldr	r2, [pc, #36]	@ (800ed5c <prvHeapInit+0xbc>)
 800ed36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed38:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <prvHeapInit+0xc0>)
 800ed3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ed3e:	601a      	str	r2, [r3, #0]
}
 800ed40:	bf00      	nop
 800ed42:	3714      	adds	r7, #20
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr
 800ed4c:	20001454 	.word	0x20001454
 800ed50:	2000200c 	.word	0x2000200c
 800ed54:	20002014 	.word	0x20002014
 800ed58:	2000201c 	.word	0x2000201c
 800ed5c:	20002018 	.word	0x20002018
 800ed60:	20002028 	.word	0x20002028

0800ed64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed6c:	4b28      	ldr	r3, [pc, #160]	@ (800ee10 <prvInsertBlockIntoFreeList+0xac>)
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e002      	b.n	800ed78 <prvInsertBlockIntoFreeList+0x14>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	60fb      	str	r3, [r7, #12]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d8f7      	bhi.n	800ed72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d108      	bne.n	800eda6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	441a      	add	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d118      	bne.n	800edec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	4b15      	ldr	r3, [pc, #84]	@ (800ee14 <prvInsertBlockIntoFreeList+0xb0>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d00d      	beq.n	800ede2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	441a      	add	r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	601a      	str	r2, [r3, #0]
 800ede0:	e008      	b.n	800edf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ede2:	4b0c      	ldr	r3, [pc, #48]	@ (800ee14 <prvInsertBlockIntoFreeList+0xb0>)
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	e003      	b.n	800edf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d002      	beq.n	800ee02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee02:	bf00      	nop
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	2000200c 	.word	0x2000200c
 800ee14:	20002014 	.word	0x20002014

0800ee18 <std>:
 800ee18:	2300      	movs	r3, #0
 800ee1a:	b510      	push	{r4, lr}
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee26:	6083      	str	r3, [r0, #8]
 800ee28:	8181      	strh	r1, [r0, #12]
 800ee2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee2c:	81c2      	strh	r2, [r0, #14]
 800ee2e:	6183      	str	r3, [r0, #24]
 800ee30:	4619      	mov	r1, r3
 800ee32:	2208      	movs	r2, #8
 800ee34:	305c      	adds	r0, #92	@ 0x5c
 800ee36:	f000 f9e7 	bl	800f208 <memset>
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee70 <std+0x58>)
 800ee3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee74 <std+0x5c>)
 800ee40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee42:	4b0d      	ldr	r3, [pc, #52]	@ (800ee78 <std+0x60>)
 800ee44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee46:	4b0d      	ldr	r3, [pc, #52]	@ (800ee7c <std+0x64>)
 800ee48:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee80 <std+0x68>)
 800ee4c:	6224      	str	r4, [r4, #32]
 800ee4e:	429c      	cmp	r4, r3
 800ee50:	d006      	beq.n	800ee60 <std+0x48>
 800ee52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee56:	4294      	cmp	r4, r2
 800ee58:	d002      	beq.n	800ee60 <std+0x48>
 800ee5a:	33d0      	adds	r3, #208	@ 0xd0
 800ee5c:	429c      	cmp	r4, r3
 800ee5e:	d105      	bne.n	800ee6c <std+0x54>
 800ee60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee68:	f000 ba9c 	b.w	800f3a4 <__retarget_lock_init_recursive>
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	bf00      	nop
 800ee70:	0800f059 	.word	0x0800f059
 800ee74:	0800f07b 	.word	0x0800f07b
 800ee78:	0800f0b3 	.word	0x0800f0b3
 800ee7c:	0800f0d7 	.word	0x0800f0d7
 800ee80:	2000202c 	.word	0x2000202c

0800ee84 <stdio_exit_handler>:
 800ee84:	4a02      	ldr	r2, [pc, #8]	@ (800ee90 <stdio_exit_handler+0xc>)
 800ee86:	4903      	ldr	r1, [pc, #12]	@ (800ee94 <stdio_exit_handler+0x10>)
 800ee88:	4803      	ldr	r0, [pc, #12]	@ (800ee98 <stdio_exit_handler+0x14>)
 800ee8a:	f000 b869 	b.w	800ef60 <_fwalk_sglue>
 800ee8e:	bf00      	nop
 800ee90:	20000010 	.word	0x20000010
 800ee94:	0800f6c1 	.word	0x0800f6c1
 800ee98:	20000020 	.word	0x20000020

0800ee9c <cleanup_stdio>:
 800ee9c:	6841      	ldr	r1, [r0, #4]
 800ee9e:	4b0c      	ldr	r3, [pc, #48]	@ (800eed0 <cleanup_stdio+0x34>)
 800eea0:	4299      	cmp	r1, r3
 800eea2:	b510      	push	{r4, lr}
 800eea4:	4604      	mov	r4, r0
 800eea6:	d001      	beq.n	800eeac <cleanup_stdio+0x10>
 800eea8:	f000 fc0a 	bl	800f6c0 <_fflush_r>
 800eeac:	68a1      	ldr	r1, [r4, #8]
 800eeae:	4b09      	ldr	r3, [pc, #36]	@ (800eed4 <cleanup_stdio+0x38>)
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <cleanup_stdio+0x1e>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 fc03 	bl	800f6c0 <_fflush_r>
 800eeba:	68e1      	ldr	r1, [r4, #12]
 800eebc:	4b06      	ldr	r3, [pc, #24]	@ (800eed8 <cleanup_stdio+0x3c>)
 800eebe:	4299      	cmp	r1, r3
 800eec0:	d004      	beq.n	800eecc <cleanup_stdio+0x30>
 800eec2:	4620      	mov	r0, r4
 800eec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eec8:	f000 bbfa 	b.w	800f6c0 <_fflush_r>
 800eecc:	bd10      	pop	{r4, pc}
 800eece:	bf00      	nop
 800eed0:	2000202c 	.word	0x2000202c
 800eed4:	20002094 	.word	0x20002094
 800eed8:	200020fc 	.word	0x200020fc

0800eedc <global_stdio_init.part.0>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4b0b      	ldr	r3, [pc, #44]	@ (800ef0c <global_stdio_init.part.0+0x30>)
 800eee0:	4c0b      	ldr	r4, [pc, #44]	@ (800ef10 <global_stdio_init.part.0+0x34>)
 800eee2:	4a0c      	ldr	r2, [pc, #48]	@ (800ef14 <global_stdio_init.part.0+0x38>)
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	4620      	mov	r0, r4
 800eee8:	2200      	movs	r2, #0
 800eeea:	2104      	movs	r1, #4
 800eeec:	f7ff ff94 	bl	800ee18 <std>
 800eef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eef4:	2201      	movs	r2, #1
 800eef6:	2109      	movs	r1, #9
 800eef8:	f7ff ff8e 	bl	800ee18 <std>
 800eefc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ef00:	2202      	movs	r2, #2
 800ef02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef06:	2112      	movs	r1, #18
 800ef08:	f7ff bf86 	b.w	800ee18 <std>
 800ef0c:	20002164 	.word	0x20002164
 800ef10:	2000202c 	.word	0x2000202c
 800ef14:	0800ee85 	.word	0x0800ee85

0800ef18 <__sfp_lock_acquire>:
 800ef18:	4801      	ldr	r0, [pc, #4]	@ (800ef20 <__sfp_lock_acquire+0x8>)
 800ef1a:	f000 ba44 	b.w	800f3a6 <__retarget_lock_acquire_recursive>
 800ef1e:	bf00      	nop
 800ef20:	2000216d 	.word	0x2000216d

0800ef24 <__sfp_lock_release>:
 800ef24:	4801      	ldr	r0, [pc, #4]	@ (800ef2c <__sfp_lock_release+0x8>)
 800ef26:	f000 ba3f 	b.w	800f3a8 <__retarget_lock_release_recursive>
 800ef2a:	bf00      	nop
 800ef2c:	2000216d 	.word	0x2000216d

0800ef30 <__sinit>:
 800ef30:	b510      	push	{r4, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	f7ff fff0 	bl	800ef18 <__sfp_lock_acquire>
 800ef38:	6a23      	ldr	r3, [r4, #32]
 800ef3a:	b11b      	cbz	r3, 800ef44 <__sinit+0x14>
 800ef3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef40:	f7ff bff0 	b.w	800ef24 <__sfp_lock_release>
 800ef44:	4b04      	ldr	r3, [pc, #16]	@ (800ef58 <__sinit+0x28>)
 800ef46:	6223      	str	r3, [r4, #32]
 800ef48:	4b04      	ldr	r3, [pc, #16]	@ (800ef5c <__sinit+0x2c>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1f5      	bne.n	800ef3c <__sinit+0xc>
 800ef50:	f7ff ffc4 	bl	800eedc <global_stdio_init.part.0>
 800ef54:	e7f2      	b.n	800ef3c <__sinit+0xc>
 800ef56:	bf00      	nop
 800ef58:	0800ee9d 	.word	0x0800ee9d
 800ef5c:	20002164 	.word	0x20002164

0800ef60 <_fwalk_sglue>:
 800ef60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef64:	4607      	mov	r7, r0
 800ef66:	4688      	mov	r8, r1
 800ef68:	4614      	mov	r4, r2
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef70:	f1b9 0901 	subs.w	r9, r9, #1
 800ef74:	d505      	bpl.n	800ef82 <_fwalk_sglue+0x22>
 800ef76:	6824      	ldr	r4, [r4, #0]
 800ef78:	2c00      	cmp	r4, #0
 800ef7a:	d1f7      	bne.n	800ef6c <_fwalk_sglue+0xc>
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef82:	89ab      	ldrh	r3, [r5, #12]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d907      	bls.n	800ef98 <_fwalk_sglue+0x38>
 800ef88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	d003      	beq.n	800ef98 <_fwalk_sglue+0x38>
 800ef90:	4629      	mov	r1, r5
 800ef92:	4638      	mov	r0, r7
 800ef94:	47c0      	blx	r8
 800ef96:	4306      	orrs	r6, r0
 800ef98:	3568      	adds	r5, #104	@ 0x68
 800ef9a:	e7e9      	b.n	800ef70 <_fwalk_sglue+0x10>

0800ef9c <_puts_r>:
 800ef9c:	6a03      	ldr	r3, [r0, #32]
 800ef9e:	b570      	push	{r4, r5, r6, lr}
 800efa0:	6884      	ldr	r4, [r0, #8]
 800efa2:	4605      	mov	r5, r0
 800efa4:	460e      	mov	r6, r1
 800efa6:	b90b      	cbnz	r3, 800efac <_puts_r+0x10>
 800efa8:	f7ff ffc2 	bl	800ef30 <__sinit>
 800efac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efae:	07db      	lsls	r3, r3, #31
 800efb0:	d405      	bmi.n	800efbe <_puts_r+0x22>
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	0598      	lsls	r0, r3, #22
 800efb6:	d402      	bmi.n	800efbe <_puts_r+0x22>
 800efb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efba:	f000 f9f4 	bl	800f3a6 <__retarget_lock_acquire_recursive>
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	0719      	lsls	r1, r3, #28
 800efc2:	d502      	bpl.n	800efca <_puts_r+0x2e>
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d135      	bne.n	800f036 <_puts_r+0x9a>
 800efca:	4621      	mov	r1, r4
 800efcc:	4628      	mov	r0, r5
 800efce:	f000 f8c5 	bl	800f15c <__swsetup_r>
 800efd2:	b380      	cbz	r0, 800f036 <_puts_r+0x9a>
 800efd4:	f04f 35ff 	mov.w	r5, #4294967295
 800efd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efda:	07da      	lsls	r2, r3, #31
 800efdc:	d405      	bmi.n	800efea <_puts_r+0x4e>
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	059b      	lsls	r3, r3, #22
 800efe2:	d402      	bmi.n	800efea <_puts_r+0x4e>
 800efe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efe6:	f000 f9df 	bl	800f3a8 <__retarget_lock_release_recursive>
 800efea:	4628      	mov	r0, r5
 800efec:	bd70      	pop	{r4, r5, r6, pc}
 800efee:	2b00      	cmp	r3, #0
 800eff0:	da04      	bge.n	800effc <_puts_r+0x60>
 800eff2:	69a2      	ldr	r2, [r4, #24]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	dc17      	bgt.n	800f028 <_puts_r+0x8c>
 800eff8:	290a      	cmp	r1, #10
 800effa:	d015      	beq.n	800f028 <_puts_r+0x8c>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	6022      	str	r2, [r4, #0]
 800f002:	7019      	strb	r1, [r3, #0]
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f00a:	3b01      	subs	r3, #1
 800f00c:	60a3      	str	r3, [r4, #8]
 800f00e:	2900      	cmp	r1, #0
 800f010:	d1ed      	bne.n	800efee <_puts_r+0x52>
 800f012:	2b00      	cmp	r3, #0
 800f014:	da11      	bge.n	800f03a <_puts_r+0x9e>
 800f016:	4622      	mov	r2, r4
 800f018:	210a      	movs	r1, #10
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f85f 	bl	800f0de <__swbuf_r>
 800f020:	3001      	adds	r0, #1
 800f022:	d0d7      	beq.n	800efd4 <_puts_r+0x38>
 800f024:	250a      	movs	r5, #10
 800f026:	e7d7      	b.n	800efd8 <_puts_r+0x3c>
 800f028:	4622      	mov	r2, r4
 800f02a:	4628      	mov	r0, r5
 800f02c:	f000 f857 	bl	800f0de <__swbuf_r>
 800f030:	3001      	adds	r0, #1
 800f032:	d1e7      	bne.n	800f004 <_puts_r+0x68>
 800f034:	e7ce      	b.n	800efd4 <_puts_r+0x38>
 800f036:	3e01      	subs	r6, #1
 800f038:	e7e4      	b.n	800f004 <_puts_r+0x68>
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	1c5a      	adds	r2, r3, #1
 800f03e:	6022      	str	r2, [r4, #0]
 800f040:	220a      	movs	r2, #10
 800f042:	701a      	strb	r2, [r3, #0]
 800f044:	e7ee      	b.n	800f024 <_puts_r+0x88>
	...

0800f048 <puts>:
 800f048:	4b02      	ldr	r3, [pc, #8]	@ (800f054 <puts+0xc>)
 800f04a:	4601      	mov	r1, r0
 800f04c:	6818      	ldr	r0, [r3, #0]
 800f04e:	f7ff bfa5 	b.w	800ef9c <_puts_r>
 800f052:	bf00      	nop
 800f054:	2000001c 	.word	0x2000001c

0800f058 <__sread>:
 800f058:	b510      	push	{r4, lr}
 800f05a:	460c      	mov	r4, r1
 800f05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f060:	f000 f952 	bl	800f308 <_read_r>
 800f064:	2800      	cmp	r0, #0
 800f066:	bfab      	itete	ge
 800f068:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f06a:	89a3      	ldrhlt	r3, [r4, #12]
 800f06c:	181b      	addge	r3, r3, r0
 800f06e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f072:	bfac      	ite	ge
 800f074:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f076:	81a3      	strhlt	r3, [r4, #12]
 800f078:	bd10      	pop	{r4, pc}

0800f07a <__swrite>:
 800f07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07e:	461f      	mov	r7, r3
 800f080:	898b      	ldrh	r3, [r1, #12]
 800f082:	05db      	lsls	r3, r3, #23
 800f084:	4605      	mov	r5, r0
 800f086:	460c      	mov	r4, r1
 800f088:	4616      	mov	r6, r2
 800f08a:	d505      	bpl.n	800f098 <__swrite+0x1e>
 800f08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f090:	2302      	movs	r3, #2
 800f092:	2200      	movs	r2, #0
 800f094:	f000 f926 	bl	800f2e4 <_lseek_r>
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f09e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0a2:	81a3      	strh	r3, [r4, #12]
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	463b      	mov	r3, r7
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ae:	f000 b93d 	b.w	800f32c <_write_r>

0800f0b2 <__sseek>:
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ba:	f000 f913 	bl	800f2e4 <_lseek_r>
 800f0be:	1c43      	adds	r3, r0, #1
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	bf15      	itete	ne
 800f0c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f0c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f0ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f0ce:	81a3      	strheq	r3, [r4, #12]
 800f0d0:	bf18      	it	ne
 800f0d2:	81a3      	strhne	r3, [r4, #12]
 800f0d4:	bd10      	pop	{r4, pc}

0800f0d6 <__sclose>:
 800f0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0da:	f000 b89d 	b.w	800f218 <_close_r>

0800f0de <__swbuf_r>:
 800f0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e0:	460e      	mov	r6, r1
 800f0e2:	4614      	mov	r4, r2
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	b118      	cbz	r0, 800f0f0 <__swbuf_r+0x12>
 800f0e8:	6a03      	ldr	r3, [r0, #32]
 800f0ea:	b90b      	cbnz	r3, 800f0f0 <__swbuf_r+0x12>
 800f0ec:	f7ff ff20 	bl	800ef30 <__sinit>
 800f0f0:	69a3      	ldr	r3, [r4, #24]
 800f0f2:	60a3      	str	r3, [r4, #8]
 800f0f4:	89a3      	ldrh	r3, [r4, #12]
 800f0f6:	071a      	lsls	r2, r3, #28
 800f0f8:	d501      	bpl.n	800f0fe <__swbuf_r+0x20>
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	b943      	cbnz	r3, 800f110 <__swbuf_r+0x32>
 800f0fe:	4621      	mov	r1, r4
 800f100:	4628      	mov	r0, r5
 800f102:	f000 f82b 	bl	800f15c <__swsetup_r>
 800f106:	b118      	cbz	r0, 800f110 <__swbuf_r+0x32>
 800f108:	f04f 37ff 	mov.w	r7, #4294967295
 800f10c:	4638      	mov	r0, r7
 800f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	6922      	ldr	r2, [r4, #16]
 800f114:	1a98      	subs	r0, r3, r2
 800f116:	6963      	ldr	r3, [r4, #20]
 800f118:	b2f6      	uxtb	r6, r6
 800f11a:	4283      	cmp	r3, r0
 800f11c:	4637      	mov	r7, r6
 800f11e:	dc05      	bgt.n	800f12c <__swbuf_r+0x4e>
 800f120:	4621      	mov	r1, r4
 800f122:	4628      	mov	r0, r5
 800f124:	f000 facc 	bl	800f6c0 <_fflush_r>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1ed      	bne.n	800f108 <__swbuf_r+0x2a>
 800f12c:	68a3      	ldr	r3, [r4, #8]
 800f12e:	3b01      	subs	r3, #1
 800f130:	60a3      	str	r3, [r4, #8]
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	6022      	str	r2, [r4, #0]
 800f138:	701e      	strb	r6, [r3, #0]
 800f13a:	6962      	ldr	r2, [r4, #20]
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	429a      	cmp	r2, r3
 800f140:	d004      	beq.n	800f14c <__swbuf_r+0x6e>
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	07db      	lsls	r3, r3, #31
 800f146:	d5e1      	bpl.n	800f10c <__swbuf_r+0x2e>
 800f148:	2e0a      	cmp	r6, #10
 800f14a:	d1df      	bne.n	800f10c <__swbuf_r+0x2e>
 800f14c:	4621      	mov	r1, r4
 800f14e:	4628      	mov	r0, r5
 800f150:	f000 fab6 	bl	800f6c0 <_fflush_r>
 800f154:	2800      	cmp	r0, #0
 800f156:	d0d9      	beq.n	800f10c <__swbuf_r+0x2e>
 800f158:	e7d6      	b.n	800f108 <__swbuf_r+0x2a>
	...

0800f15c <__swsetup_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4b29      	ldr	r3, [pc, #164]	@ (800f204 <__swsetup_r+0xa8>)
 800f160:	4605      	mov	r5, r0
 800f162:	6818      	ldr	r0, [r3, #0]
 800f164:	460c      	mov	r4, r1
 800f166:	b118      	cbz	r0, 800f170 <__swsetup_r+0x14>
 800f168:	6a03      	ldr	r3, [r0, #32]
 800f16a:	b90b      	cbnz	r3, 800f170 <__swsetup_r+0x14>
 800f16c:	f7ff fee0 	bl	800ef30 <__sinit>
 800f170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f174:	0719      	lsls	r1, r3, #28
 800f176:	d422      	bmi.n	800f1be <__swsetup_r+0x62>
 800f178:	06da      	lsls	r2, r3, #27
 800f17a:	d407      	bmi.n	800f18c <__swsetup_r+0x30>
 800f17c:	2209      	movs	r2, #9
 800f17e:	602a      	str	r2, [r5, #0]
 800f180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	f04f 30ff 	mov.w	r0, #4294967295
 800f18a:	e033      	b.n	800f1f4 <__swsetup_r+0x98>
 800f18c:	0758      	lsls	r0, r3, #29
 800f18e:	d512      	bpl.n	800f1b6 <__swsetup_r+0x5a>
 800f190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f192:	b141      	cbz	r1, 800f1a6 <__swsetup_r+0x4a>
 800f194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f198:	4299      	cmp	r1, r3
 800f19a:	d002      	beq.n	800f1a2 <__swsetup_r+0x46>
 800f19c:	4628      	mov	r0, r5
 800f19e:	f000 f913 	bl	800f3c8 <_free_r>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6063      	str	r3, [r4, #4]
 800f1b2:	6923      	ldr	r3, [r4, #16]
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	f043 0308 	orr.w	r3, r3, #8
 800f1bc:	81a3      	strh	r3, [r4, #12]
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	b94b      	cbnz	r3, 800f1d6 <__swsetup_r+0x7a>
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1cc:	d003      	beq.n	800f1d6 <__swsetup_r+0x7a>
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f000 fac3 	bl	800f75c <__smakebuf_r>
 800f1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1da:	f013 0201 	ands.w	r2, r3, #1
 800f1de:	d00a      	beq.n	800f1f6 <__swsetup_r+0x9a>
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	60a2      	str	r2, [r4, #8]
 800f1e4:	6962      	ldr	r2, [r4, #20]
 800f1e6:	4252      	negs	r2, r2
 800f1e8:	61a2      	str	r2, [r4, #24]
 800f1ea:	6922      	ldr	r2, [r4, #16]
 800f1ec:	b942      	cbnz	r2, 800f200 <__swsetup_r+0xa4>
 800f1ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1f2:	d1c5      	bne.n	800f180 <__swsetup_r+0x24>
 800f1f4:	bd38      	pop	{r3, r4, r5, pc}
 800f1f6:	0799      	lsls	r1, r3, #30
 800f1f8:	bf58      	it	pl
 800f1fa:	6962      	ldrpl	r2, [r4, #20]
 800f1fc:	60a2      	str	r2, [r4, #8]
 800f1fe:	e7f4      	b.n	800f1ea <__swsetup_r+0x8e>
 800f200:	2000      	movs	r0, #0
 800f202:	e7f7      	b.n	800f1f4 <__swsetup_r+0x98>
 800f204:	2000001c 	.word	0x2000001c

0800f208 <memset>:
 800f208:	4402      	add	r2, r0
 800f20a:	4603      	mov	r3, r0
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d100      	bne.n	800f212 <memset+0xa>
 800f210:	4770      	bx	lr
 800f212:	f803 1b01 	strb.w	r1, [r3], #1
 800f216:	e7f9      	b.n	800f20c <memset+0x4>

0800f218 <_close_r>:
 800f218:	b538      	push	{r3, r4, r5, lr}
 800f21a:	4d06      	ldr	r5, [pc, #24]	@ (800f234 <_close_r+0x1c>)
 800f21c:	2300      	movs	r3, #0
 800f21e:	4604      	mov	r4, r0
 800f220:	4608      	mov	r0, r1
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	f7f3 f909 	bl	800243a <_close>
 800f228:	1c43      	adds	r3, r0, #1
 800f22a:	d102      	bne.n	800f232 <_close_r+0x1a>
 800f22c:	682b      	ldr	r3, [r5, #0]
 800f22e:	b103      	cbz	r3, 800f232 <_close_r+0x1a>
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	bd38      	pop	{r3, r4, r5, pc}
 800f234:	20002168 	.word	0x20002168

0800f238 <_reclaim_reent>:
 800f238:	4b29      	ldr	r3, [pc, #164]	@ (800f2e0 <_reclaim_reent+0xa8>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4283      	cmp	r3, r0
 800f23e:	b570      	push	{r4, r5, r6, lr}
 800f240:	4604      	mov	r4, r0
 800f242:	d04b      	beq.n	800f2dc <_reclaim_reent+0xa4>
 800f244:	69c3      	ldr	r3, [r0, #28]
 800f246:	b1ab      	cbz	r3, 800f274 <_reclaim_reent+0x3c>
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	b16b      	cbz	r3, 800f268 <_reclaim_reent+0x30>
 800f24c:	2500      	movs	r5, #0
 800f24e:	69e3      	ldr	r3, [r4, #28]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	5959      	ldr	r1, [r3, r5]
 800f254:	2900      	cmp	r1, #0
 800f256:	d13b      	bne.n	800f2d0 <_reclaim_reent+0x98>
 800f258:	3504      	adds	r5, #4
 800f25a:	2d80      	cmp	r5, #128	@ 0x80
 800f25c:	d1f7      	bne.n	800f24e <_reclaim_reent+0x16>
 800f25e:	69e3      	ldr	r3, [r4, #28]
 800f260:	4620      	mov	r0, r4
 800f262:	68d9      	ldr	r1, [r3, #12]
 800f264:	f000 f8b0 	bl	800f3c8 <_free_r>
 800f268:	69e3      	ldr	r3, [r4, #28]
 800f26a:	6819      	ldr	r1, [r3, #0]
 800f26c:	b111      	cbz	r1, 800f274 <_reclaim_reent+0x3c>
 800f26e:	4620      	mov	r0, r4
 800f270:	f000 f8aa 	bl	800f3c8 <_free_r>
 800f274:	6961      	ldr	r1, [r4, #20]
 800f276:	b111      	cbz	r1, 800f27e <_reclaim_reent+0x46>
 800f278:	4620      	mov	r0, r4
 800f27a:	f000 f8a5 	bl	800f3c8 <_free_r>
 800f27e:	69e1      	ldr	r1, [r4, #28]
 800f280:	b111      	cbz	r1, 800f288 <_reclaim_reent+0x50>
 800f282:	4620      	mov	r0, r4
 800f284:	f000 f8a0 	bl	800f3c8 <_free_r>
 800f288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f28a:	b111      	cbz	r1, 800f292 <_reclaim_reent+0x5a>
 800f28c:	4620      	mov	r0, r4
 800f28e:	f000 f89b 	bl	800f3c8 <_free_r>
 800f292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f294:	b111      	cbz	r1, 800f29c <_reclaim_reent+0x64>
 800f296:	4620      	mov	r0, r4
 800f298:	f000 f896 	bl	800f3c8 <_free_r>
 800f29c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f29e:	b111      	cbz	r1, 800f2a6 <_reclaim_reent+0x6e>
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f000 f891 	bl	800f3c8 <_free_r>
 800f2a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f2a8:	b111      	cbz	r1, 800f2b0 <_reclaim_reent+0x78>
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 f88c 	bl	800f3c8 <_free_r>
 800f2b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f2b2:	b111      	cbz	r1, 800f2ba <_reclaim_reent+0x82>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 f887 	bl	800f3c8 <_free_r>
 800f2ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f2bc:	b111      	cbz	r1, 800f2c4 <_reclaim_reent+0x8c>
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 f882 	bl	800f3c8 <_free_r>
 800f2c4:	6a23      	ldr	r3, [r4, #32]
 800f2c6:	b14b      	cbz	r3, 800f2dc <_reclaim_reent+0xa4>
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2ce:	4718      	bx	r3
 800f2d0:	680e      	ldr	r6, [r1, #0]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 f878 	bl	800f3c8 <_free_r>
 800f2d8:	4631      	mov	r1, r6
 800f2da:	e7bb      	b.n	800f254 <_reclaim_reent+0x1c>
 800f2dc:	bd70      	pop	{r4, r5, r6, pc}
 800f2de:	bf00      	nop
 800f2e0:	2000001c 	.word	0x2000001c

0800f2e4 <_lseek_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	@ (800f304 <_lseek_r+0x20>)
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4608      	mov	r0, r1
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	602a      	str	r2, [r5, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f7f3 f8c8 	bl	8002488 <_lseek>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_lseek_r+0x1e>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_lseek_r+0x1e>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	20002168 	.word	0x20002168

0800f308 <_read_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d07      	ldr	r5, [pc, #28]	@ (800f328 <_read_r+0x20>)
 800f30c:	4604      	mov	r4, r0
 800f30e:	4608      	mov	r0, r1
 800f310:	4611      	mov	r1, r2
 800f312:	2200      	movs	r2, #0
 800f314:	602a      	str	r2, [r5, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f7f3 f872 	bl	8002400 <_read>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_read_r+0x1e>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_read_r+0x1e>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20002168 	.word	0x20002168

0800f32c <_write_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	@ (800f34c <_write_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f2 fa56 	bl	80017ec <_write>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_write_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_write_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	20002168 	.word	0x20002168

0800f350 <__errno>:
 800f350:	4b01      	ldr	r3, [pc, #4]	@ (800f358 <__errno+0x8>)
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	2000001c 	.word	0x2000001c

0800f35c <__libc_init_array>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	4d0d      	ldr	r5, [pc, #52]	@ (800f394 <__libc_init_array+0x38>)
 800f360:	4c0d      	ldr	r4, [pc, #52]	@ (800f398 <__libc_init_array+0x3c>)
 800f362:	1b64      	subs	r4, r4, r5
 800f364:	10a4      	asrs	r4, r4, #2
 800f366:	2600      	movs	r6, #0
 800f368:	42a6      	cmp	r6, r4
 800f36a:	d109      	bne.n	800f380 <__libc_init_array+0x24>
 800f36c:	4d0b      	ldr	r5, [pc, #44]	@ (800f39c <__libc_init_array+0x40>)
 800f36e:	4c0c      	ldr	r4, [pc, #48]	@ (800f3a0 <__libc_init_array+0x44>)
 800f370:	f000 fa62 	bl	800f838 <_init>
 800f374:	1b64      	subs	r4, r4, r5
 800f376:	10a4      	asrs	r4, r4, #2
 800f378:	2600      	movs	r6, #0
 800f37a:	42a6      	cmp	r6, r4
 800f37c:	d105      	bne.n	800f38a <__libc_init_array+0x2e>
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	f855 3b04 	ldr.w	r3, [r5], #4
 800f384:	4798      	blx	r3
 800f386:	3601      	adds	r6, #1
 800f388:	e7ee      	b.n	800f368 <__libc_init_array+0xc>
 800f38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38e:	4798      	blx	r3
 800f390:	3601      	adds	r6, #1
 800f392:	e7f2      	b.n	800f37a <__libc_init_array+0x1e>
 800f394:	0800f9ac 	.word	0x0800f9ac
 800f398:	0800f9ac 	.word	0x0800f9ac
 800f39c:	0800f9ac 	.word	0x0800f9ac
 800f3a0:	0800f9b0 	.word	0x0800f9b0

0800f3a4 <__retarget_lock_init_recursive>:
 800f3a4:	4770      	bx	lr

0800f3a6 <__retarget_lock_acquire_recursive>:
 800f3a6:	4770      	bx	lr

0800f3a8 <__retarget_lock_release_recursive>:
 800f3a8:	4770      	bx	lr

0800f3aa <memcpy>:
 800f3aa:	440a      	add	r2, r1
 800f3ac:	4291      	cmp	r1, r2
 800f3ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3b2:	d100      	bne.n	800f3b6 <memcpy+0xc>
 800f3b4:	4770      	bx	lr
 800f3b6:	b510      	push	{r4, lr}
 800f3b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c0:	4291      	cmp	r1, r2
 800f3c2:	d1f9      	bne.n	800f3b8 <memcpy+0xe>
 800f3c4:	bd10      	pop	{r4, pc}
	...

0800f3c8 <_free_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	2900      	cmp	r1, #0
 800f3ce:	d041      	beq.n	800f454 <_free_r+0x8c>
 800f3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d4:	1f0c      	subs	r4, r1, #4
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	bfb8      	it	lt
 800f3da:	18e4      	addlt	r4, r4, r3
 800f3dc:	f000 f8e0 	bl	800f5a0 <__malloc_lock>
 800f3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f458 <_free_r+0x90>)
 800f3e2:	6813      	ldr	r3, [r2, #0]
 800f3e4:	b933      	cbnz	r3, 800f3f4 <_free_r+0x2c>
 800f3e6:	6063      	str	r3, [r4, #4]
 800f3e8:	6014      	str	r4, [r2, #0]
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f0:	f000 b8dc 	b.w	800f5ac <__malloc_unlock>
 800f3f4:	42a3      	cmp	r3, r4
 800f3f6:	d908      	bls.n	800f40a <_free_r+0x42>
 800f3f8:	6820      	ldr	r0, [r4, #0]
 800f3fa:	1821      	adds	r1, r4, r0
 800f3fc:	428b      	cmp	r3, r1
 800f3fe:	bf01      	itttt	eq
 800f400:	6819      	ldreq	r1, [r3, #0]
 800f402:	685b      	ldreq	r3, [r3, #4]
 800f404:	1809      	addeq	r1, r1, r0
 800f406:	6021      	streq	r1, [r4, #0]
 800f408:	e7ed      	b.n	800f3e6 <_free_r+0x1e>
 800f40a:	461a      	mov	r2, r3
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	b10b      	cbz	r3, 800f414 <_free_r+0x4c>
 800f410:	42a3      	cmp	r3, r4
 800f412:	d9fa      	bls.n	800f40a <_free_r+0x42>
 800f414:	6811      	ldr	r1, [r2, #0]
 800f416:	1850      	adds	r0, r2, r1
 800f418:	42a0      	cmp	r0, r4
 800f41a:	d10b      	bne.n	800f434 <_free_r+0x6c>
 800f41c:	6820      	ldr	r0, [r4, #0]
 800f41e:	4401      	add	r1, r0
 800f420:	1850      	adds	r0, r2, r1
 800f422:	4283      	cmp	r3, r0
 800f424:	6011      	str	r1, [r2, #0]
 800f426:	d1e0      	bne.n	800f3ea <_free_r+0x22>
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	6053      	str	r3, [r2, #4]
 800f42e:	4408      	add	r0, r1
 800f430:	6010      	str	r0, [r2, #0]
 800f432:	e7da      	b.n	800f3ea <_free_r+0x22>
 800f434:	d902      	bls.n	800f43c <_free_r+0x74>
 800f436:	230c      	movs	r3, #12
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	e7d6      	b.n	800f3ea <_free_r+0x22>
 800f43c:	6820      	ldr	r0, [r4, #0]
 800f43e:	1821      	adds	r1, r4, r0
 800f440:	428b      	cmp	r3, r1
 800f442:	bf04      	itt	eq
 800f444:	6819      	ldreq	r1, [r3, #0]
 800f446:	685b      	ldreq	r3, [r3, #4]
 800f448:	6063      	str	r3, [r4, #4]
 800f44a:	bf04      	itt	eq
 800f44c:	1809      	addeq	r1, r1, r0
 800f44e:	6021      	streq	r1, [r4, #0]
 800f450:	6054      	str	r4, [r2, #4]
 800f452:	e7ca      	b.n	800f3ea <_free_r+0x22>
 800f454:	bd38      	pop	{r3, r4, r5, pc}
 800f456:	bf00      	nop
 800f458:	20002174 	.word	0x20002174

0800f45c <sbrk_aligned>:
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	4e0f      	ldr	r6, [pc, #60]	@ (800f49c <sbrk_aligned+0x40>)
 800f460:	460c      	mov	r4, r1
 800f462:	6831      	ldr	r1, [r6, #0]
 800f464:	4605      	mov	r5, r0
 800f466:	b911      	cbnz	r1, 800f46e <sbrk_aligned+0x12>
 800f468:	f000 f9d6 	bl	800f818 <_sbrk_r>
 800f46c:	6030      	str	r0, [r6, #0]
 800f46e:	4621      	mov	r1, r4
 800f470:	4628      	mov	r0, r5
 800f472:	f000 f9d1 	bl	800f818 <_sbrk_r>
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	d103      	bne.n	800f482 <sbrk_aligned+0x26>
 800f47a:	f04f 34ff 	mov.w	r4, #4294967295
 800f47e:	4620      	mov	r0, r4
 800f480:	bd70      	pop	{r4, r5, r6, pc}
 800f482:	1cc4      	adds	r4, r0, #3
 800f484:	f024 0403 	bic.w	r4, r4, #3
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d0f8      	beq.n	800f47e <sbrk_aligned+0x22>
 800f48c:	1a21      	subs	r1, r4, r0
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 f9c2 	bl	800f818 <_sbrk_r>
 800f494:	3001      	adds	r0, #1
 800f496:	d1f2      	bne.n	800f47e <sbrk_aligned+0x22>
 800f498:	e7ef      	b.n	800f47a <sbrk_aligned+0x1e>
 800f49a:	bf00      	nop
 800f49c:	20002170 	.word	0x20002170

0800f4a0 <_malloc_r>:
 800f4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a4:	1ccd      	adds	r5, r1, #3
 800f4a6:	f025 0503 	bic.w	r5, r5, #3
 800f4aa:	3508      	adds	r5, #8
 800f4ac:	2d0c      	cmp	r5, #12
 800f4ae:	bf38      	it	cc
 800f4b0:	250c      	movcc	r5, #12
 800f4b2:	2d00      	cmp	r5, #0
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	db01      	blt.n	800f4bc <_malloc_r+0x1c>
 800f4b8:	42a9      	cmp	r1, r5
 800f4ba:	d904      	bls.n	800f4c6 <_malloc_r+0x26>
 800f4bc:	230c      	movs	r3, #12
 800f4be:	6033      	str	r3, [r6, #0]
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f59c <_malloc_r+0xfc>
 800f4ca:	f000 f869 	bl	800f5a0 <__malloc_lock>
 800f4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d2:	461c      	mov	r4, r3
 800f4d4:	bb44      	cbnz	r4, 800f528 <_malloc_r+0x88>
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f7ff ffbf 	bl	800f45c <sbrk_aligned>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	d158      	bne.n	800f596 <_malloc_r+0xf6>
 800f4e4:	f8d8 4000 	ldr.w	r4, [r8]
 800f4e8:	4627      	mov	r7, r4
 800f4ea:	2f00      	cmp	r7, #0
 800f4ec:	d143      	bne.n	800f576 <_malloc_r+0xd6>
 800f4ee:	2c00      	cmp	r4, #0
 800f4f0:	d04b      	beq.n	800f58a <_malloc_r+0xea>
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	eb04 0903 	add.w	r9, r4, r3
 800f4fc:	f000 f98c 	bl	800f818 <_sbrk_r>
 800f500:	4581      	cmp	r9, r0
 800f502:	d142      	bne.n	800f58a <_malloc_r+0xea>
 800f504:	6821      	ldr	r1, [r4, #0]
 800f506:	1a6d      	subs	r5, r5, r1
 800f508:	4629      	mov	r1, r5
 800f50a:	4630      	mov	r0, r6
 800f50c:	f7ff ffa6 	bl	800f45c <sbrk_aligned>
 800f510:	3001      	adds	r0, #1
 800f512:	d03a      	beq.n	800f58a <_malloc_r+0xea>
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	442b      	add	r3, r5
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	f8d8 3000 	ldr.w	r3, [r8]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	bb62      	cbnz	r2, 800f57c <_malloc_r+0xdc>
 800f522:	f8c8 7000 	str.w	r7, [r8]
 800f526:	e00f      	b.n	800f548 <_malloc_r+0xa8>
 800f528:	6822      	ldr	r2, [r4, #0]
 800f52a:	1b52      	subs	r2, r2, r5
 800f52c:	d420      	bmi.n	800f570 <_malloc_r+0xd0>
 800f52e:	2a0b      	cmp	r2, #11
 800f530:	d917      	bls.n	800f562 <_malloc_r+0xc2>
 800f532:	1961      	adds	r1, r4, r5
 800f534:	42a3      	cmp	r3, r4
 800f536:	6025      	str	r5, [r4, #0]
 800f538:	bf18      	it	ne
 800f53a:	6059      	strne	r1, [r3, #4]
 800f53c:	6863      	ldr	r3, [r4, #4]
 800f53e:	bf08      	it	eq
 800f540:	f8c8 1000 	streq.w	r1, [r8]
 800f544:	5162      	str	r2, [r4, r5]
 800f546:	604b      	str	r3, [r1, #4]
 800f548:	4630      	mov	r0, r6
 800f54a:	f000 f82f 	bl	800f5ac <__malloc_unlock>
 800f54e:	f104 000b 	add.w	r0, r4, #11
 800f552:	1d23      	adds	r3, r4, #4
 800f554:	f020 0007 	bic.w	r0, r0, #7
 800f558:	1ac2      	subs	r2, r0, r3
 800f55a:	bf1c      	itt	ne
 800f55c:	1a1b      	subne	r3, r3, r0
 800f55e:	50a3      	strne	r3, [r4, r2]
 800f560:	e7af      	b.n	800f4c2 <_malloc_r+0x22>
 800f562:	6862      	ldr	r2, [r4, #4]
 800f564:	42a3      	cmp	r3, r4
 800f566:	bf0c      	ite	eq
 800f568:	f8c8 2000 	streq.w	r2, [r8]
 800f56c:	605a      	strne	r2, [r3, #4]
 800f56e:	e7eb      	b.n	800f548 <_malloc_r+0xa8>
 800f570:	4623      	mov	r3, r4
 800f572:	6864      	ldr	r4, [r4, #4]
 800f574:	e7ae      	b.n	800f4d4 <_malloc_r+0x34>
 800f576:	463c      	mov	r4, r7
 800f578:	687f      	ldr	r7, [r7, #4]
 800f57a:	e7b6      	b.n	800f4ea <_malloc_r+0x4a>
 800f57c:	461a      	mov	r2, r3
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	42a3      	cmp	r3, r4
 800f582:	d1fb      	bne.n	800f57c <_malloc_r+0xdc>
 800f584:	2300      	movs	r3, #0
 800f586:	6053      	str	r3, [r2, #4]
 800f588:	e7de      	b.n	800f548 <_malloc_r+0xa8>
 800f58a:	230c      	movs	r3, #12
 800f58c:	6033      	str	r3, [r6, #0]
 800f58e:	4630      	mov	r0, r6
 800f590:	f000 f80c 	bl	800f5ac <__malloc_unlock>
 800f594:	e794      	b.n	800f4c0 <_malloc_r+0x20>
 800f596:	6005      	str	r5, [r0, #0]
 800f598:	e7d6      	b.n	800f548 <_malloc_r+0xa8>
 800f59a:	bf00      	nop
 800f59c:	20002174 	.word	0x20002174

0800f5a0 <__malloc_lock>:
 800f5a0:	4801      	ldr	r0, [pc, #4]	@ (800f5a8 <__malloc_lock+0x8>)
 800f5a2:	f7ff bf00 	b.w	800f3a6 <__retarget_lock_acquire_recursive>
 800f5a6:	bf00      	nop
 800f5a8:	2000216c 	.word	0x2000216c

0800f5ac <__malloc_unlock>:
 800f5ac:	4801      	ldr	r0, [pc, #4]	@ (800f5b4 <__malloc_unlock+0x8>)
 800f5ae:	f7ff befb 	b.w	800f3a8 <__retarget_lock_release_recursive>
 800f5b2:	bf00      	nop
 800f5b4:	2000216c 	.word	0x2000216c

0800f5b8 <__sflush_r>:
 800f5b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c0:	0716      	lsls	r6, r2, #28
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	d454      	bmi.n	800f672 <__sflush_r+0xba>
 800f5c8:	684b      	ldr	r3, [r1, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dc02      	bgt.n	800f5d4 <__sflush_r+0x1c>
 800f5ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	dd48      	ble.n	800f666 <__sflush_r+0xae>
 800f5d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	d045      	beq.n	800f666 <__sflush_r+0xae>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5e0:	682f      	ldr	r7, [r5, #0]
 800f5e2:	6a21      	ldr	r1, [r4, #32]
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	d030      	beq.n	800f64a <__sflush_r+0x92>
 800f5e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	0759      	lsls	r1, r3, #29
 800f5ee:	d505      	bpl.n	800f5fc <__sflush_r+0x44>
 800f5f0:	6863      	ldr	r3, [r4, #4]
 800f5f2:	1ad2      	subs	r2, r2, r3
 800f5f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5f6:	b10b      	cbz	r3, 800f5fc <__sflush_r+0x44>
 800f5f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5fa:	1ad2      	subs	r2, r2, r3
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f600:	6a21      	ldr	r1, [r4, #32]
 800f602:	4628      	mov	r0, r5
 800f604:	47b0      	blx	r6
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	d106      	bne.n	800f61a <__sflush_r+0x62>
 800f60c:	6829      	ldr	r1, [r5, #0]
 800f60e:	291d      	cmp	r1, #29
 800f610:	d82b      	bhi.n	800f66a <__sflush_r+0xb2>
 800f612:	4a2a      	ldr	r2, [pc, #168]	@ (800f6bc <__sflush_r+0x104>)
 800f614:	410a      	asrs	r2, r1
 800f616:	07d6      	lsls	r6, r2, #31
 800f618:	d427      	bmi.n	800f66a <__sflush_r+0xb2>
 800f61a:	2200      	movs	r2, #0
 800f61c:	6062      	str	r2, [r4, #4]
 800f61e:	04d9      	lsls	r1, r3, #19
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	6022      	str	r2, [r4, #0]
 800f624:	d504      	bpl.n	800f630 <__sflush_r+0x78>
 800f626:	1c42      	adds	r2, r0, #1
 800f628:	d101      	bne.n	800f62e <__sflush_r+0x76>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	b903      	cbnz	r3, 800f630 <__sflush_r+0x78>
 800f62e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f632:	602f      	str	r7, [r5, #0]
 800f634:	b1b9      	cbz	r1, 800f666 <__sflush_r+0xae>
 800f636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f63a:	4299      	cmp	r1, r3
 800f63c:	d002      	beq.n	800f644 <__sflush_r+0x8c>
 800f63e:	4628      	mov	r0, r5
 800f640:	f7ff fec2 	bl	800f3c8 <_free_r>
 800f644:	2300      	movs	r3, #0
 800f646:	6363      	str	r3, [r4, #52]	@ 0x34
 800f648:	e00d      	b.n	800f666 <__sflush_r+0xae>
 800f64a:	2301      	movs	r3, #1
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b0      	blx	r6
 800f650:	4602      	mov	r2, r0
 800f652:	1c50      	adds	r0, r2, #1
 800f654:	d1c9      	bne.n	800f5ea <__sflush_r+0x32>
 800f656:	682b      	ldr	r3, [r5, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d0c6      	beq.n	800f5ea <__sflush_r+0x32>
 800f65c:	2b1d      	cmp	r3, #29
 800f65e:	d001      	beq.n	800f664 <__sflush_r+0xac>
 800f660:	2b16      	cmp	r3, #22
 800f662:	d11e      	bne.n	800f6a2 <__sflush_r+0xea>
 800f664:	602f      	str	r7, [r5, #0]
 800f666:	2000      	movs	r0, #0
 800f668:	e022      	b.n	800f6b0 <__sflush_r+0xf8>
 800f66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f66e:	b21b      	sxth	r3, r3
 800f670:	e01b      	b.n	800f6aa <__sflush_r+0xf2>
 800f672:	690f      	ldr	r7, [r1, #16]
 800f674:	2f00      	cmp	r7, #0
 800f676:	d0f6      	beq.n	800f666 <__sflush_r+0xae>
 800f678:	0793      	lsls	r3, r2, #30
 800f67a:	680e      	ldr	r6, [r1, #0]
 800f67c:	bf08      	it	eq
 800f67e:	694b      	ldreq	r3, [r1, #20]
 800f680:	600f      	str	r7, [r1, #0]
 800f682:	bf18      	it	ne
 800f684:	2300      	movne	r3, #0
 800f686:	eba6 0807 	sub.w	r8, r6, r7
 800f68a:	608b      	str	r3, [r1, #8]
 800f68c:	f1b8 0f00 	cmp.w	r8, #0
 800f690:	dde9      	ble.n	800f666 <__sflush_r+0xae>
 800f692:	6a21      	ldr	r1, [r4, #32]
 800f694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f696:	4643      	mov	r3, r8
 800f698:	463a      	mov	r2, r7
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b0      	blx	r6
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	dc08      	bgt.n	800f6b4 <__sflush_r+0xfc>
 800f6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6aa:	81a3      	strh	r3, [r4, #12]
 800f6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b4:	4407      	add	r7, r0
 800f6b6:	eba8 0800 	sub.w	r8, r8, r0
 800f6ba:	e7e7      	b.n	800f68c <__sflush_r+0xd4>
 800f6bc:	dfbffffe 	.word	0xdfbffffe

0800f6c0 <_fflush_r>:
 800f6c0:	b538      	push	{r3, r4, r5, lr}
 800f6c2:	690b      	ldr	r3, [r1, #16]
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	b913      	cbnz	r3, 800f6d0 <_fflush_r+0x10>
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	b118      	cbz	r0, 800f6da <_fflush_r+0x1a>
 800f6d2:	6a03      	ldr	r3, [r0, #32]
 800f6d4:	b90b      	cbnz	r3, 800f6da <_fflush_r+0x1a>
 800f6d6:	f7ff fc2b 	bl	800ef30 <__sinit>
 800f6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0f3      	beq.n	800f6ca <_fflush_r+0xa>
 800f6e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6e4:	07d0      	lsls	r0, r2, #31
 800f6e6:	d404      	bmi.n	800f6f2 <_fflush_r+0x32>
 800f6e8:	0599      	lsls	r1, r3, #22
 800f6ea:	d402      	bmi.n	800f6f2 <_fflush_r+0x32>
 800f6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ee:	f7ff fe5a 	bl	800f3a6 <__retarget_lock_acquire_recursive>
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	f7ff ff5f 	bl	800f5b8 <__sflush_r>
 800f6fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6fc:	07da      	lsls	r2, r3, #31
 800f6fe:	4605      	mov	r5, r0
 800f700:	d4e4      	bmi.n	800f6cc <_fflush_r+0xc>
 800f702:	89a3      	ldrh	r3, [r4, #12]
 800f704:	059b      	lsls	r3, r3, #22
 800f706:	d4e1      	bmi.n	800f6cc <_fflush_r+0xc>
 800f708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f70a:	f7ff fe4d 	bl	800f3a8 <__retarget_lock_release_recursive>
 800f70e:	e7dd      	b.n	800f6cc <_fflush_r+0xc>

0800f710 <__swhatbuf_r>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	460c      	mov	r4, r1
 800f714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f718:	2900      	cmp	r1, #0
 800f71a:	b096      	sub	sp, #88	@ 0x58
 800f71c:	4615      	mov	r5, r2
 800f71e:	461e      	mov	r6, r3
 800f720:	da0d      	bge.n	800f73e <__swhatbuf_r+0x2e>
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f728:	f04f 0100 	mov.w	r1, #0
 800f72c:	bf14      	ite	ne
 800f72e:	2340      	movne	r3, #64	@ 0x40
 800f730:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f734:	2000      	movs	r0, #0
 800f736:	6031      	str	r1, [r6, #0]
 800f738:	602b      	str	r3, [r5, #0]
 800f73a:	b016      	add	sp, #88	@ 0x58
 800f73c:	bd70      	pop	{r4, r5, r6, pc}
 800f73e:	466a      	mov	r2, sp
 800f740:	f000 f848 	bl	800f7d4 <_fstat_r>
 800f744:	2800      	cmp	r0, #0
 800f746:	dbec      	blt.n	800f722 <__swhatbuf_r+0x12>
 800f748:	9901      	ldr	r1, [sp, #4]
 800f74a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f74e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f752:	4259      	negs	r1, r3
 800f754:	4159      	adcs	r1, r3
 800f756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f75a:	e7eb      	b.n	800f734 <__swhatbuf_r+0x24>

0800f75c <__smakebuf_r>:
 800f75c:	898b      	ldrh	r3, [r1, #12]
 800f75e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f760:	079d      	lsls	r5, r3, #30
 800f762:	4606      	mov	r6, r0
 800f764:	460c      	mov	r4, r1
 800f766:	d507      	bpl.n	800f778 <__smakebuf_r+0x1c>
 800f768:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	6123      	str	r3, [r4, #16]
 800f770:	2301      	movs	r3, #1
 800f772:	6163      	str	r3, [r4, #20]
 800f774:	b003      	add	sp, #12
 800f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f778:	ab01      	add	r3, sp, #4
 800f77a:	466a      	mov	r2, sp
 800f77c:	f7ff ffc8 	bl	800f710 <__swhatbuf_r>
 800f780:	9f00      	ldr	r7, [sp, #0]
 800f782:	4605      	mov	r5, r0
 800f784:	4639      	mov	r1, r7
 800f786:	4630      	mov	r0, r6
 800f788:	f7ff fe8a 	bl	800f4a0 <_malloc_r>
 800f78c:	b948      	cbnz	r0, 800f7a2 <__smakebuf_r+0x46>
 800f78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f792:	059a      	lsls	r2, r3, #22
 800f794:	d4ee      	bmi.n	800f774 <__smakebuf_r+0x18>
 800f796:	f023 0303 	bic.w	r3, r3, #3
 800f79a:	f043 0302 	orr.w	r3, r3, #2
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	e7e2      	b.n	800f768 <__smakebuf_r+0xc>
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	6020      	str	r0, [r4, #0]
 800f7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7aa:	81a3      	strh	r3, [r4, #12]
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7b2:	b15b      	cbz	r3, 800f7cc <__smakebuf_r+0x70>
 800f7b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f000 f81d 	bl	800f7f8 <_isatty_r>
 800f7be:	b128      	cbz	r0, 800f7cc <__smakebuf_r+0x70>
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	f023 0303 	bic.w	r3, r3, #3
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	81a3      	strh	r3, [r4, #12]
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	431d      	orrs	r5, r3
 800f7d0:	81a5      	strh	r5, [r4, #12]
 800f7d2:	e7cf      	b.n	800f774 <__smakebuf_r+0x18>

0800f7d4 <_fstat_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d07      	ldr	r5, [pc, #28]	@ (800f7f4 <_fstat_r+0x20>)
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4608      	mov	r0, r1
 800f7de:	4611      	mov	r1, r2
 800f7e0:	602b      	str	r3, [r5, #0]
 800f7e2:	f7f2 fe36 	bl	8002452 <_fstat>
 800f7e6:	1c43      	adds	r3, r0, #1
 800f7e8:	d102      	bne.n	800f7f0 <_fstat_r+0x1c>
 800f7ea:	682b      	ldr	r3, [r5, #0]
 800f7ec:	b103      	cbz	r3, 800f7f0 <_fstat_r+0x1c>
 800f7ee:	6023      	str	r3, [r4, #0]
 800f7f0:	bd38      	pop	{r3, r4, r5, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20002168 	.word	0x20002168

0800f7f8 <_isatty_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d06      	ldr	r5, [pc, #24]	@ (800f814 <_isatty_r+0x1c>)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4604      	mov	r4, r0
 800f800:	4608      	mov	r0, r1
 800f802:	602b      	str	r3, [r5, #0]
 800f804:	f7f2 fe35 	bl	8002472 <_isatty>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_isatty_r+0x1a>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_isatty_r+0x1a>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20002168 	.word	0x20002168

0800f818 <_sbrk_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d06      	ldr	r5, [pc, #24]	@ (800f834 <_sbrk_r+0x1c>)
 800f81c:	2300      	movs	r3, #0
 800f81e:	4604      	mov	r4, r0
 800f820:	4608      	mov	r0, r1
 800f822:	602b      	str	r3, [r5, #0]
 800f824:	f7f2 fe3e 	bl	80024a4 <_sbrk>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	d102      	bne.n	800f832 <_sbrk_r+0x1a>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b103      	cbz	r3, 800f832 <_sbrk_r+0x1a>
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	bd38      	pop	{r3, r4, r5, pc}
 800f834:	20002168 	.word	0x20002168

0800f838 <_init>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	bf00      	nop
 800f83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83e:	bc08      	pop	{r3}
 800f840:	469e      	mov	lr, r3
 800f842:	4770      	bx	lr

0800f844 <_fini>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	bf00      	nop
 800f848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84a:	bc08      	pop	{r3}
 800f84c:	469e      	mov	lr, r3
 800f84e:	4770      	bx	lr
