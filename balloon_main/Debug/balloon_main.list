
balloon_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ae4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08010c74  08010c74  00011c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d9c  08010d9c  00012070  2**0
                  CONTENTS
  4 .ARM          00000008  08010d9c  08010d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010da4  08010da4  00012070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010da4  08010da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010da8  08010da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08010dac  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002144  20000070  08010e1c  00012070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200021b4  08010e1c  000121b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f9be  00000000  00000000  000120a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006701  00000000  00000000  00041a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a10  00000000  00000000  00048160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002088  00000000  00000000  0004ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a1a9  00000000  00000000  0004cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033515  00000000  00000000  00056da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc684  00000000  00000000  0008a2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018693a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bacc  00000000  00000000  00186980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0019244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c5c 	.word	0x08010c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08010c5c 	.word	0x08010c5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	@ (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c86:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c8a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d013      	beq.n	8000cbe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c96:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c9a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c9e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ca6:	e000      	b.n	8000caa <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ca8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000caa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cb4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d24:	4907      	ldr	r1, [pc, #28]	@ (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d54:	4907      	ldr	r1, [pc, #28]	@ (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000db8:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dcc:	f023 0310 	bic.w	r3, r3, #16
 8000dd0:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	440a      	add	r2, r1
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	440a      	add	r2, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	08010cb4 	.word	0x08010cb4

08000df8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <LL_DMA_SetMode+0x48>)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 0220 	bic.w	r2, r3, #32
 8000e1c:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <LL_DMA_SetMode+0x48>)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	440b      	add	r3, r1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	440b      	add	r3, r1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000e32:	bf00      	nop
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	08010cb4 	.word	0x08010cb4

08000e44 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LL_DMA_SetPeriphIncMode+0x48>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000e68:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <LL_DMA_SetPeriphIncMode+0x48>)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	440b      	add	r3, r1
 8000e76:	4619      	mov	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000e7e:	bf00      	nop
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	08010cb4 	.word	0x08010cb4

08000e90 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <LL_DMA_SetMemoryIncMode+0x48>)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000eb4:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <LL_DMA_SetMemoryIncMode+0x48>)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	440b      	add	r3, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	08010cb4 	.word	0x08010cb4

08000edc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LL_DMA_SetPeriphSize+0x48>)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000f00:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <LL_DMA_SetPeriphSize+0x48>)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	440b      	add	r3, r1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000f16:	bf00      	nop
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	08010cb4 	.word	0x08010cb4

08000f28 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <LL_DMA_SetMemorySize+0x48>)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4413      	add	r3, r2
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000f4c:	4908      	ldr	r1, [pc, #32]	@ (8000f70 <LL_DMA_SetMemorySize+0x48>)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	440b      	add	r3, r1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	440b      	add	r3, r1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	08010cb4 	.word	0x08010cb4

08000f74 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000f98:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	440b      	add	r3, r1
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	08010cb4 	.word	0x08010cb4

08000fc0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	33a8      	adds	r3, #168	@ 0xa8
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000ffe:	2320      	movs	r3, #32
 8001000:	e003      	b.n	800100a <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	408b      	lsls	r3, r1
 8001010:	68f9      	ldr	r1, [r7, #12]
 8001012:	31a8      	adds	r1, #168	@ 0xa8
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	@ 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001038:	d101      	bne.n	800103e <LL_DMA_IsActiveFlag_TC3+0x1a>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_DMA_IsActiveFlag_TC3+0x1c>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_DMA_IsActiveFlag_HT3>:
  * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001060:	d101      	bne.n	8001066 <LL_DMA_IsActiveFlag_HT3+0x1a>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_DMA_IsActiveFlag_HT3+0x1c>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001082:	605a      	str	r2, [r3, #4]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_DMA_ClearFlag_HT3>:
  * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109e:	605a      	str	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80010ba:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <LL_DMA_EnableIT_TC+0x40>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <LL_DMA_EnableIT_TC+0x40>)
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	440a      	add	r2, r1
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	4611      	mov	r1, r2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	440a      	add	r2, r1
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08010cb4 	.word	0x08010cb4

080010f0 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <LL_DMA_EnableIT_HT+0x40>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <LL_DMA_EnableIT_HT+0x40>)
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	440a      	add	r2, r1
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	4611      	mov	r1, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	440a      	add	r2, r1
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6013      	str	r3, [r2, #0]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	08010cb4 	.word	0x08010cb4

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b598      	push	{r3, r4, r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f002 fbdf 	bl	80038fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f876 	bl	800122c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  INIT_UART_DMA_DESC(3,1,3)
 8001140:	2102      	movs	r1, #2
 8001142:	4831      	ldr	r0, [pc, #196]	@ (8001208 <main+0xd4>)
 8001144:	f7ff ffd4 	bl	80010f0 <LL_DMA_EnableIT_HT>
 8001148:	2102      	movs	r1, #2
 800114a:	482f      	ldr	r0, [pc, #188]	@ (8001208 <main+0xd4>)
 800114c:	f7ff ffae 	bl	80010ac <LL_DMA_EnableIT_TC>
 8001150:	4c2e      	ldr	r4, [pc, #184]	@ (800120c <main+0xd8>)
 8001152:	2200      	movs	r2, #0
 8001154:	2104      	movs	r1, #4
 8001156:	200a      	movs	r0, #10
 8001158:	f00c f864 	bl	800d224 <osMessageQueueNew>
 800115c:	4603      	mov	r3, r0
 800115e:	6023      	str	r3, [r4, #0]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 fe02 	bl	8001d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f000 fd6e 	bl	8001c44 <MX_DMA_Init>
  MX_I2C1_Init();
 8001168:	f000 f8d8 	bl	800131c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800116c:	f000 fba4 	bl	80018b8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001170:	f000 f9c8 	bl	8001504 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8001174:	f000 fa56 	bl	8001624 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8001178:	f000 f8ae 	bl	80012d8 <MX_CRC_Init>
  MX_LPTIM2_Init();
 800117c:	f000 f98e 	bl	800149c <MX_LPTIM2_Init>
  MX_I2C2_Init();
 8001180:	f000 f90c 	bl	800139c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001184:	f000 f94a 	bl	800141c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001188:	f000 fc62 	bl	8001a50 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800118c:	f000 fa6c 	bl	8001668 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001190:	f000 faa8 	bl	80016e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001194:	f000 fae4 	bl	8001760 <MX_TIM1_Init>
  MX_FATFS_Init();
 8001198:	f00b fc04 	bl	800c9a4 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800119c:	f000 fd22 	bl	8001be4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ARGB_Init();  // Initialization
 80011a0:	f001 fd62 	bl	8002c68 <ARGB_Init>
  ARGB_FillRGB(200, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	20c8      	movs	r0, #200	@ 0xc8
 80011aa:	f001 fe41 	bl	8002e30 <ARGB_FillRGB>
  while (!ARGB_Show());
 80011ae:	bf00      	nop
 80011b0:	f001 fe60 	bl	8002e74 <ARGB_Show>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0fa      	beq.n	80011b0 <main+0x7c>
  HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f003 f9bd 	bl	8004540 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2120      	movs	r1, #32
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f003 f9b7 	bl	8004540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	480e      	ldr	r0, [pc, #56]	@ (8001210 <main+0xdc>)
 80011d8:	f003 f9b2 	bl	8004540 <HAL_GPIO_WritePin>
  printf("Hello World!!\r\n");
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <main+0xe0>)
 80011de:	f00e fe75 	bl	800fecc <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011e2:	f00b fef1 	bl	800cfc8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 80011e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <main+0xe4>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <main+0xe8>)
 80011ec:	f00b ff6d 	bl	800d0ca <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <main+0xec>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  START_UART_DMA(3)
 80011f6:	2200      	movs	r2, #0
 80011f8:	490a      	ldr	r1, [pc, #40]	@ (8001224 <main+0xf0>)
 80011fa:	480b      	ldr	r0, [pc, #44]	@ (8001228 <main+0xf4>)
 80011fc:	f00b ff65 	bl	800d0ca <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001200:	f00b ff28 	bl	800d054 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <main+0xd0>
 8001208:	40020000 	.word	0x40020000
 800120c:	200005dc 	.word	0x200005dc
 8001210:	48000800 	.word	0x48000800
 8001214:	08010c80 	.word	0x08010c80
 8001218:	08010cbc 	.word	0x08010cbc
 800121c:	08001ef1 	.word	0x08001ef1
 8001220:	200005d8 	.word	0x200005d8
 8001224:	08010ce0 	.word	0x08010ce0
 8001228:	08003769 	.word	0x08003769

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2244      	movs	r2, #68	@ 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00e ff26 	bl	801008c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001252:	f004 f8ff 	bl	8005454 <HAL_PWREx_ControlVoltageScaling>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800125c:	f000 fe6a 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001260:	2338      	movs	r3, #56	@ 0x38
 8001262:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800127c:	2301      	movs	r3, #1
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001284:	2328      	movs	r3, #40	@ 0x28
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001288:	2307      	movs	r3, #7
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f004 f931 	bl	8005500 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80012a4:	f000 fe46 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2104      	movs	r1, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fd31 	bl	8005d28 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80012cc:	f000 fe32 	bl	8001f34 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3758      	adds	r7, #88	@ 0x58
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <MX_CRC_Init+0x40>)
 80012e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_CRC_Init+0x3c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_CRC_Init+0x3c>)
 8001302:	f002 fc15 	bl	8003b30 <HAL_CRC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800130c:	f000 fe12 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000008c 	.word	0x2000008c
 8001318:	40023000 	.word	0x40023000

0800131c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <MX_I2C1_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001328:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <MX_I2C1_Init+0x7c>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001334:	2201      	movs	r2, #1
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_I2C1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <MX_I2C1_Init+0x74>)
 8001358:	f003 f90a 	bl	8004570 <HAL_I2C_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001362:	f000 fde7 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <MX_I2C1_Init+0x74>)
 800136a:	f003 ff2c 	bl	80051c6 <HAL_I2CEx_ConfigAnalogFilter>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 fdde 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_I2C1_Init+0x74>)
 800137c:	f003 ff6e 	bl	800525c <HAL_I2CEx_ConfigDigitalFilter>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 fdd5 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000b0 	.word	0x200000b0
 8001394:	40005400 	.word	0x40005400
 8001398:	10909cec 	.word	0x10909cec

0800139c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <MX_I2C2_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <MX_I2C2_Init+0x7c>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013d8:	f003 f8ca 	bl	8004570 <HAL_I2C_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013e2:	f000 fda7 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4809      	ldr	r0, [pc, #36]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013ea:	f003 feec 	bl	80051c6 <HAL_I2CEx_ConfigAnalogFilter>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013f4:	f000 fd9e 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013f8:	2100      	movs	r1, #0
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_I2C2_Init+0x74>)
 80013fc:	f003 ff2e 	bl	800525c <HAL_I2CEx_ConfigDigitalFilter>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 fd95 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000104 	.word	0x20000104
 8001414:	40005800 	.word	0x40005800
 8001418:	10909cec 	.word	0x10909cec

0800141c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <MX_I2C3_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <MX_I2C3_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_I2C3_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_I2C3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_I2C3_Init+0x74>)
 8001458:	f003 f88a 	bl	8004570 <HAL_I2C_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001462:	f000 fd67 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <MX_I2C3_Init+0x74>)
 800146a:	f003 feac 	bl	80051c6 <HAL_I2CEx_ConfigAnalogFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 fd5e 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_I2C3_Init+0x74>)
 800147c:	f003 feee 	bl	800525c <HAL_I2CEx_ConfigDigitalFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 fd55 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000158 	.word	0x20000158
 8001494:	40005c00 	.word	0x40005c00
 8001498:	10909cec 	.word	0x10909cec

0800149c <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <MX_LPTIM2_Init+0x64>)
 80014a4:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c4:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_LPTIM2_Init+0x60>)
 80014e8:	f003 ff04 	bl	80052f4 <HAL_LPTIM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 80014f2:	f000 fd1f 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000023c 	.word	0x2000023c
 8001500:	40009400 	.word	0x40009400

08001504 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b092      	sub	sp, #72	@ 0x48
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800150a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	222c      	movs	r2, #44	@ 0x2c
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00e fdb1 	bl	801008c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800152a:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <MX_RTC_Init+0x118>)
 800152c:	4a3c      	ldr	r2, [pc, #240]	@ (8001620 <MX_RTC_Init+0x11c>)
 800152e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001530:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <MX_RTC_Init+0x118>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001536:	4b39      	ldr	r3, [pc, #228]	@ (800161c <MX_RTC_Init+0x118>)
 8001538:	227f      	movs	r2, #127	@ 0x7f
 800153a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_RTC_Init+0x118>)
 800153e:	22ff      	movs	r2, #255	@ 0xff
 8001540:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <MX_RTC_Init+0x118>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_RTC_Init+0x118>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800154e:	4b33      	ldr	r3, [pc, #204]	@ (800161c <MX_RTC_Init+0x118>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001554:	4b31      	ldr	r3, [pc, #196]	@ (800161c <MX_RTC_Init+0x118>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800155a:	4830      	ldr	r0, [pc, #192]	@ (800161c <MX_RTC_Init+0x118>)
 800155c:	f005 fe96 	bl	800728c <HAL_RTC_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001566:	f000 fce5 	bl	8001f34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800157c:	2300      	movs	r3, #0
 800157e:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001584:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	4823      	ldr	r0, [pc, #140]	@ (800161c <MX_RTC_Init+0x118>)
 800158e:	f005 ff05 	bl	800739c <HAL_RTC_SetTime>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001598:	f000 fccc 	bl	8001f34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	4817      	ldr	r0, [pc, #92]	@ (800161c <MX_RTC_Init+0x118>)
 80015be:	f005 ff8a 	bl	80074d6 <HAL_RTC_SetDate>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80015c8:	f000 fcb4 	bl	8001f34 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80015f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2201      	movs	r2, #1
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	@ (800161c <MX_RTC_Init+0x118>)
 8001604:	f005 ffee 	bl	80075e4 <HAL_RTC_SetAlarm>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800160e:	f000 fc91 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3748      	adds	r7, #72	@ 0x48
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000274 	.word	0x20000274
 8001620:	40002800 	.word	0x40002800

08001624 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <MX_SDMMC1_SD_Init+0x40>)
 800162c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 8001642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001646:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <MX_SDMMC1_SD_Init+0x3c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000298 	.word	0x20000298
 8001664:	40012800 	.word	0x40012800

08001668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_SPI1_Init+0x74>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <MX_SPI1_Init+0x78>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_SPI1_Init+0x74>)
 8001674:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <MX_SPI1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_SPI1_Init+0x74>)
 8001682:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_SPI1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_SPI1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_SPI1_Init+0x74>)
 8001696:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800169a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_SPI1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016b6:	2207      	movs	r2, #7
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016c2:	2208      	movs	r2, #8
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_SPI1_Init+0x74>)
 80016c8:	f007 fc98 	bl	8008ffc <HAL_SPI_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016d2:	f000 fc2f 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003ac 	.word	0x200003ac
 80016e0:	40013000 	.word	0x40013000

080016e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_SPI2_Init+0x74>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <MX_SPI2_Init+0x78>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_SPI2_Init+0x74>)
 80016f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_SPI2_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_SPI2_Init+0x74>)
 80016fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001702:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <MX_SPI2_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001712:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001716:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_SPI2_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <MX_SPI2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001732:	2207      	movs	r2, #7
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_SPI2_Init+0x74>)
 800173e:	2208      	movs	r2, #8
 8001740:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_SPI2_Init+0x74>)
 8001744:	f007 fc5a 	bl	8008ffc <HAL_SPI_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 fbf1 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000410 	.word	0x20000410
 800175c:	40003800 	.word	0x40003800

08001760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b09a      	sub	sp, #104	@ 0x68
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	222c      	movs	r2, #44	@ 0x2c
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f00e fc76 	bl	801008c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017a2:	4a44      	ldr	r2, [pc, #272]	@ (80018b4 <MX_TIM1_Init+0x154>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80017a6:	4b42      	ldr	r3, [pc, #264]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32;
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017b4:	2220      	movs	r2, #32
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b3c      	ldr	r3, [pc, #240]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c4:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ca:	4839      	ldr	r0, [pc, #228]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017cc:	f007 fcb9 	bl	8009142 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017d6:	f000 fbad 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017de:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017e4:	4619      	mov	r1, r3
 80017e6:	4832      	ldr	r0, [pc, #200]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017e8:	f007 ffce 	bl	8009788 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017f2:	f000 fb9f 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f6:	482e      	ldr	r0, [pc, #184]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80017f8:	f007 fd4e 	bl	8009298 <HAL_TIM_PWM_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001802:	f000 fb97 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001806:	2340      	movs	r3, #64	@ 0x40
 8001808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001812:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001816:	4619      	mov	r1, r3
 8001818:	4825      	ldr	r0, [pc, #148]	@ (80018b0 <MX_TIM1_Init+0x150>)
 800181a:	f008 fc9b 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001824:	f000 fb86 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001828:	2360      	movs	r3, #96	@ 0x60
 800182a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001838:	2304      	movs	r3, #4
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	4818      	ldr	r0, [pc, #96]	@ (80018b0 <MX_TIM1_Init+0x150>)
 800184e:	f007 fe87 	bl	8009560 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001858:	f000 fb6c 	bl	8001f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_TIM1_Init+0x150>)
 8001892:	f008 fcc5 	bl	800a220 <HAL_TIMEx_ConfigBreakDeadTime>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800189c:	f000 fb4a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MX_TIM1_Init+0x150>)
 80018a2:	f000 ff29 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 80018a6:	bf00      	nop
 80018a8:	3768      	adds	r7, #104	@ 0x68
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000474 	.word	0x20000474
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0a4      	sub	sp, #144	@ 0x90
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	225c      	movs	r2, #92	@ 0x5c
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00e fbce 	bl	801008c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fc6a 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 fb15 	bl	8001f34 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800190a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800190e:	f7ff fa33 	bl	8000d78 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fa00 	bl	8000d18 <LL_AHB2_GRP1_EnableClock>
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA11   ------> USART1_CTS
  PA12   ------> USART1_RTS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001918:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800191c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800191e:	2302      	movs	r3, #2
 8001920:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192a:	2300      	movs	r3, #0
 800192c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800192e:	2307      	movs	r3, #7
 8001930:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193c:	f009 fe62 	bl	800b604 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMA_REQUEST_2);
 8001940:	2202      	movs	r2, #2
 8001942:	2104      	movs	r1, #4
 8001944:	4840      	ldr	r0, [pc, #256]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001946:	f7ff fb3b 	bl	8000fc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800194a:	2200      	movs	r2, #0
 800194c:	2104      	movs	r1, #4
 800194e:	483e      	ldr	r0, [pc, #248]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001950:	f7ff fa2a 	bl	8000da8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	483b      	ldr	r0, [pc, #236]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 800195a:	f7ff fb0b 	bl	8000f74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 800195e:	2200      	movs	r2, #0
 8001960:	2104      	movs	r1, #4
 8001962:	4839      	ldr	r0, [pc, #228]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001964:	f7ff fa48 	bl	8000df8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8001968:	2200      	movs	r2, #0
 800196a:	2104      	movs	r1, #4
 800196c:	4836      	ldr	r0, [pc, #216]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 800196e:	f7ff fa69 	bl	8000e44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	2104      	movs	r1, #4
 8001976:	4834      	ldr	r0, [pc, #208]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001978:	f7ff fa8a 	bl	8000e90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 800197c:	2200      	movs	r2, #0
 800197e:	2104      	movs	r1, #4
 8001980:	4831      	ldr	r0, [pc, #196]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001982:	f7ff faab 	bl	8000edc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8001986:	2200      	movs	r2, #0
 8001988:	2104      	movs	r1, #4
 800198a:	482f      	ldr	r0, [pc, #188]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 800198c:	f7ff facc 	bl	8000f28 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMA_REQUEST_2);
 8001990:	2202      	movs	r2, #2
 8001992:	2103      	movs	r1, #3
 8001994:	482c      	ldr	r0, [pc, #176]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 8001996:	f7ff fb13 	bl	8000fc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800199a:	2210      	movs	r2, #16
 800199c:	2103      	movs	r1, #3
 800199e:	482a      	ldr	r0, [pc, #168]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019a0:	f7ff fa02 	bl	8000da8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2103      	movs	r1, #3
 80019a8:	4827      	ldr	r0, [pc, #156]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019aa:	f7ff fae3 	bl	8000f74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2103      	movs	r1, #3
 80019b2:	4825      	ldr	r0, [pc, #148]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019b4:	f7ff fa20 	bl	8000df8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2103      	movs	r1, #3
 80019bc:	4822      	ldr	r0, [pc, #136]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019be:	f7ff fa41 	bl	8000e44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	2103      	movs	r1, #3
 80019c6:	4820      	ldr	r0, [pc, #128]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019c8:	f7ff fa62 	bl	8000e90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2103      	movs	r1, #3
 80019d0:	481d      	ldr	r0, [pc, #116]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019d2:	f7ff fa83 	bl	8000edc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2103      	movs	r1, #3
 80019da:	481b      	ldr	r0, [pc, #108]	@ (8001a48 <MX_USART1_UART_Init+0x190>)
 80019dc:	f7ff faa4 	bl	8000f28 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80019e0:	f7ff f8c4 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f914 	bl	8000c18 <NVIC_EncodePriority>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	2025      	movs	r0, #37	@ 0x25
 80019f6:	f7ff f8e5 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80019fa:	2025      	movs	r0, #37	@ 0x25
 80019fc:	f7ff f8c4 	bl	8000b88 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a00:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001a04:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a06:	2300      	movs	r3, #0
 8001a08:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a14:	230c      	movs	r3, #12
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_RTS_CTS;
 8001a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <MX_USART1_UART_Init+0x194>)
 8001a30:	f00a ff52 	bl	800c8d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_USART1_UART_Init+0x194>)
 8001a36:	f7ff f959 	bl	8000cec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001a3a:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <MX_USART1_UART_Init+0x194>)
 8001a3c:	f7ff f946 	bl	8000ccc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3790      	adds	r7, #144	@ 0x90
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40013800 	.word	0x40013800

08001a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0a4      	sub	sp, #144	@ 0x90
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	225c      	movs	r2, #92	@ 0x5c
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00e fb02 	bl	801008c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fb9e 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f000 fa49 	bl	8001f34 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001aa2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001aa6:	f7ff f94f 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff f934 	bl	8000d18 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad2:	f009 fd97 	bl	800b604 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	2105      	movs	r1, #5
 8001ada:	4840      	ldr	r0, [pc, #256]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001adc:	f7ff fa70 	bl	8000fc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2105      	movs	r1, #5
 8001ae4:	483d      	ldr	r0, [pc, #244]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001ae6:	f7ff f95f 	bl	8000da8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	483b      	ldr	r0, [pc, #236]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001af0:	f7ff fa40 	bl	8000f74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2105      	movs	r1, #5
 8001af8:	4838      	ldr	r0, [pc, #224]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001afa:	f7ff f97d 	bl	8000df8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	4836      	ldr	r0, [pc, #216]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b04:	f7ff f99e 	bl	8000e44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001b08:	2280      	movs	r2, #128	@ 0x80
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	4833      	ldr	r0, [pc, #204]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b0e:	f7ff f9bf 	bl	8000e90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	4831      	ldr	r0, [pc, #196]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b18:	f7ff f9e0 	bl	8000edc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2105      	movs	r1, #5
 8001b20:	482e      	ldr	r0, [pc, #184]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b22:	f7ff fa01 	bl	8000f28 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_2);
 8001b26:	2202      	movs	r2, #2
 8001b28:	2106      	movs	r1, #6
 8001b2a:	482c      	ldr	r0, [pc, #176]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b2c:	f7ff fa48 	bl	8000fc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b30:	2210      	movs	r2, #16
 8001b32:	2106      	movs	r1, #6
 8001b34:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b36:	f7ff f937 	bl	8000da8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2106      	movs	r1, #6
 8001b3e:	4827      	ldr	r0, [pc, #156]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b40:	f7ff fa18 	bl	8000f74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2106      	movs	r1, #6
 8001b48:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b4a:	f7ff f955 	bl	8000df8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2106      	movs	r1, #6
 8001b52:	4822      	ldr	r0, [pc, #136]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b54:	f7ff f976 	bl	8000e44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	2106      	movs	r1, #6
 8001b5c:	481f      	ldr	r0, [pc, #124]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b5e:	f7ff f997 	bl	8000e90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2106      	movs	r1, #6
 8001b66:	481d      	ldr	r0, [pc, #116]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b68:	f7ff f9b8 	bl	8000edc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2106      	movs	r1, #6
 8001b70:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <MX_USART2_UART_Init+0x18c>)
 8001b72:	f7ff f9d9 	bl	8000f28 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001b76:	f7fe fff9 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f849 	bl	8000c18 <NVIC_EncodePriority>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2026      	movs	r0, #38	@ 0x26
 8001b8c:	f7ff f81a 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b90:	2026      	movs	r0, #38	@ 0x26
 8001b92:	f7fe fff9 	bl	8000b88 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b96:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001b9a:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001baa:	230c      	movs	r3, #12
 8001bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001bbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <MX_USART2_UART_Init+0x190>)
 8001bc4:	f00a fe88 	bl	800c8d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bc8:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_USART2_UART_Init+0x190>)
 8001bca:	f7ff f88f 	bl	8000cec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bce:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <MX_USART2_UART_Init+0x190>)
 8001bd0:	f7ff f87c 	bl	8000ccc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3790      	adds	r7, #144	@ 0x90
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40004400 	.word	0x40004400

08001be4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <MX_USART3_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c28:	f008 fb90 	bl	800a34c <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f000 f97f 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000508 	.word	0x20000508
 8001c40:	40004800 	.word	0x40004800

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	4a45      	ldr	r2, [pc, #276]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c56:	4b43      	ldr	r3, [pc, #268]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c62:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c66:	4a3f      	ldr	r2, [pc, #252]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d64 <MX_DMA_Init+0x120>)
 8001c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2105      	movs	r1, #5
 8001c7e:	200c      	movs	r0, #12
 8001c80:	f001 ff2c 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c84:	200c      	movs	r0, #12
 8001c86:	f001 ff45 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	200d      	movs	r0, #13
 8001c90:	f001 ff24 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c94:	200d      	movs	r0, #13
 8001c96:	f001 ff3d 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001c9a:	f7fe ff67 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2105      	movs	r1, #5
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe ffb7 	bl	8000c18 <NVIC_EncodePriority>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	200e      	movs	r0, #14
 8001cb0:	f7fe ff88 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001cb4:	200e      	movs	r0, #14
 8001cb6:	f7fe ff67 	bl	8000b88 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cba:	f7fe ff57 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe ffa7 	bl	8000c18 <NVIC_EncodePriority>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f7fe ff78 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f7fe ff57 	bl	8000b88 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cda:	f7fe ff47 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff97 	bl	8000c18 <NVIC_EncodePriority>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	2010      	movs	r0, #16
 8001cf0:	f7fe ff68 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cf4:	2010      	movs	r0, #16
 8001cf6:	f7fe ff47 	bl	8000b88 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cfa:	f7fe ff37 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2200      	movs	r2, #0
 8001d02:	2105      	movs	r1, #5
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff87 	bl	8000c18 <NVIC_EncodePriority>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2011      	movs	r0, #17
 8001d10:	f7fe ff58 	bl	8000bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d14:	2011      	movs	r0, #17
 8001d16:	f7fe ff37 	bl	8000b88 <__NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	203b      	movs	r0, #59	@ 0x3b
 8001d20:	f001 fedc 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001d24:	203b      	movs	r0, #59	@ 0x3b
 8001d26:	f001 fef5 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	203c      	movs	r0, #60	@ 0x3c
 8001d30:	f001 fed4 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001d34:	203c      	movs	r0, #60	@ 0x3c
 8001d36:	f001 feed 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	2044      	movs	r0, #68	@ 0x44
 8001d40:	f001 fecc 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001d44:	2044      	movs	r0, #68	@ 0x44
 8001d46:	f001 fee5 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2105      	movs	r1, #5
 8001d4e:	2045      	movs	r0, #69	@ 0x45
 8001d50:	f001 fec4 	bl	8003adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001d54:	2045      	movs	r0, #69	@ 0x45
 8001d56:	f001 fedd 	bl	8003b14 <HAL_NVIC_EnableIRQ>

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b45      	ldr	r3, [pc, #276]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a44      	ldr	r2, [pc, #272]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b42      	ldr	r3, [pc, #264]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <MX_GPIO_Init+0x12c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPS_RESET_Pin|RM92A_RESEST_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2188      	movs	r1, #136	@ 0x88
 8001de2:	482d      	ldr	r0, [pc, #180]	@ (8001e98 <MX_GPIO_Init+0x130>)
 8001de4:	f002 fbac 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_SENSE_Pin|CTRL_COMM_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2160      	movs	r1, #96	@ 0x60
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df0:	f002 fba6 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BNO055_RESET_GPIO_Port, BNO055_RESET_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfa:	4828      	ldr	r0, [pc, #160]	@ (8001e9c <MX_GPIO_Init+0x134>)
 8001dfc:	f002 fba0 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_DET_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|GPS_INT_Pin;
 8001e00:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4820      	ldr	r0, [pc, #128]	@ (8001e98 <MX_GPIO_Init+0x130>)
 8001e16:	f002 fa01 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RESET_Pin RM92A_RESEST_Pin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin|RM92A_RESEST_Pin;
 8001e1a:	2388      	movs	r3, #136	@ 0x88
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4819      	ldr	r0, [pc, #100]	@ (8001e98 <MX_GPIO_Init+0x130>)
 8001e32:	f002 f9f3 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_SENSE_Pin CTRL_COMM_Pin */
  GPIO_InitStruct.Pin = CTRL_SENSE_Pin|CTRL_COMM_Pin;
 8001e36:	2360      	movs	r3, #96	@ 0x60
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e50:	f002 f9e4 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_SAFE_Pin */
  GPIO_InitStruct.Pin = GPS_SAFE_Pin;
 8001e54:	2340      	movs	r3, #64	@ 0x40
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_SAFE_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <MX_GPIO_Init+0x130>)
 8001e68:	f002 f9d8 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO055_RESET_Pin */
  GPIO_InitStruct.Pin = BNO055_RESET_Pin;
 8001e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BNO055_RESET_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_GPIO_Init+0x134>)
 8001e86:	f002 f9c9 	bl	800421c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000400 	.word	0x48000400

08001ea0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e009      	b.n	8001ec6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	60ba      	str	r2, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fedf 	bl	8000c7e <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dbf1      	blt.n	8001eb2 <_write+0x12>
  }
  return len;
 8001ece:	687b      	ldr	r3, [r7, #4]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_Delay>:
void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    osDelay(Delay);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f00b f984 	bl	800d1ee <osDelay>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      printf("Hello World!!\r\n");
 8001ef8:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <StartMainTask+0x1c>)
 8001efa:	f00d ffe7 	bl	800fecc <puts>
    osDelay(1000);
 8001efe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f02:	f00b f974 	bl	800d1ee <osDelay>
      printf("Hello World!!\r\n");
 8001f06:	bf00      	nop
 8001f08:	e7f6      	b.n	8001ef8 <StartMainTask+0x8>
 8001f0a:	bf00      	nop
 8001f0c:	08010c80 	.word	0x08010c80

08001f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f22:	f001 fd03 	bl	800392c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40001000 	.word	0x40001000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <Error_Handler+0x8>

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	210f      	movs	r1, #15
 8001f7a:	f06f 0001 	mvn.w	r0, #1
 8001f7e:	f001 fdad 	bl	8003adc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <HAL_CRC_MspInit+0x38>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10b      	bne.n	8001fba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa6:	4a09      	ldr	r2, [pc, #36]	@ (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fac:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023000 	.word	0x40023000
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0a4      	sub	sp, #144	@ 0x90
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	225c      	movs	r2, #92	@ 0x5c
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00e f84b 	bl	801008c <memset>
  if(hi2c->Instance==I2C1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a8f      	ldr	r2, [pc, #572]	@ (8002238 <HAL_I2C_MspInit+0x268>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	f040 8096 	bne.w	800212e <HAL_I2C_MspInit+0x15e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002002:	2340      	movs	r3, #64	@ 0x40
 8002004:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002006:	2300      	movs	r3, #0
 8002008:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4618      	mov	r0, r3
 8002010:	f004 f8e0 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800201a:	f7ff ff8b 	bl	8001f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b87      	ldr	r3, [pc, #540]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	4a86      	ldr	r2, [pc, #536]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202a:	4b84      	ldr	r3, [pc, #528]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002036:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800203a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203c:	2312      	movs	r3, #18
 800203e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204e:	2304      	movs	r3, #4
 8002050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002058:	4619      	mov	r1, r3
 800205a:	4879      	ldr	r0, [pc, #484]	@ (8002240 <HAL_I2C_MspInit+0x270>)
 800205c:	f002 f8de 	bl	800421c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002060:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800206a:	6593      	str	r3, [r2, #88]	@ 0x58
 800206c:	4b73      	ldr	r3, [pc, #460]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8002078:	4b72      	ldr	r3, [pc, #456]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 800207a:	4a73      	ldr	r2, [pc, #460]	@ (8002248 <HAL_I2C_MspInit+0x278>)
 800207c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 800207e:	4b71      	ldr	r3, [pc, #452]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 8002080:	2205      	movs	r2, #5
 8002082:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002084:	4b6f      	ldr	r3, [pc, #444]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 8002092:	2280      	movs	r2, #128	@ 0x80
 8002094:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002096:	4b6b      	ldr	r3, [pc, #428]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209c:	4b69      	ldr	r3, [pc, #420]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80020a2:	4b68      	ldr	r3, [pc, #416]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020a8:	4b66      	ldr	r3, [pc, #408]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80020ae:	4865      	ldr	r0, [pc, #404]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 80020b0:	f001 fe30 	bl	8003d14 <HAL_DMA_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80020ba:	f7ff ff3b 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a60      	ldr	r2, [pc, #384]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 80020c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002244 <HAL_I2C_MspInit+0x274>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 80020ca:	4b60      	ldr	r3, [pc, #384]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020cc:	4a60      	ldr	r2, [pc, #384]	@ (8002250 <HAL_I2C_MspInit+0x280>)
 80020ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020d2:	2205      	movs	r2, #5
 80020d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d6:	4b5d      	ldr	r3, [pc, #372]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020d8:	2210      	movs	r2, #16
 80020da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020dc:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020e2:	4b5a      	ldr	r3, [pc, #360]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e8:	4b58      	ldr	r3, [pc, #352]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ee:	4b57      	ldr	r3, [pc, #348]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80020f4:	4b55      	ldr	r3, [pc, #340]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020fa:	4b54      	ldr	r3, [pc, #336]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002100:	4852      	ldr	r0, [pc, #328]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 8002102:	f001 fe07 	bl	8003d14 <HAL_DMA_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 800210c:	f7ff ff12 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a4e      	ldr	r2, [pc, #312]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
 8002116:	4a4d      	ldr	r2, [pc, #308]	@ (800224c <HAL_I2C_MspInit+0x27c>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2105      	movs	r1, #5
 8002120:	2020      	movs	r0, #32
 8002122:	f001 fcdb 	bl	8003adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002126:	2020      	movs	r0, #32
 8002128:	f001 fcf4 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800212c:	e080      	b.n	8002230 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_I2C_MspInit+0x284>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d13b      	bne.n	80021b0 <HAL_I2C_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800213c:	2300      	movs	r3, #0
 800213e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f845 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_MspInit+0x184>
      Error_Handler();
 8002150:	f7ff fef0 	bl	8001f34 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002158:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002160:	4b36      	ldr	r3, [pc, #216]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800216c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002170:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002172:	2312      	movs	r3, #18
 8002174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002184:	2304      	movs	r3, #4
 8002186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800218e:	4619      	mov	r1, r3
 8002190:	482b      	ldr	r0, [pc, #172]	@ (8002240 <HAL_I2C_MspInit+0x270>)
 8002192:	f002 f843 	bl	800421c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002196:	4b29      	ldr	r3, [pc, #164]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a28      	ldr	r2, [pc, #160]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800219c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	e03f      	b.n	8002230 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a28      	ldr	r2, [pc, #160]	@ (8002258 <HAL_I2C_MspInit+0x288>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d13a      	bne.n	8002230 <HAL_I2C_MspInit+0x260>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 f803 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_MspInit+0x208>
      Error_Handler();
 80021d4:	f7ff feae 	bl	8001f34 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f0:	2303      	movs	r3, #3
 80021f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f4:	2312      	movs	r3, #18
 80021f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002206:	2304      	movs	r3, #4
 8002208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002210:	4619      	mov	r1, r3
 8002212:	4812      	ldr	r0, [pc, #72]	@ (800225c <HAL_I2C_MspInit+0x28c>)
 8002214:	f002 f802 	bl	800421c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a07      	ldr	r2, [pc, #28]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 800221e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_I2C_MspInit+0x26c>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
}
 8002230:	bf00      	nop
 8002232:	3790      	adds	r7, #144	@ 0x90
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40005400 	.word	0x40005400
 800223c:	40021000 	.word	0x40021000
 8002240:	48000400 	.word	0x48000400
 8002244:	200001ac 	.word	0x200001ac
 8002248:	4002046c 	.word	0x4002046c
 800224c:	200001f4 	.word	0x200001f4
 8002250:	40020480 	.word	0x40020480
 8002254:	40005800 	.word	0x40005800
 8002258:	40005c00 	.word	0x40005c00
 800225c:	48000800 	.word	0x48000800

08002260 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a0      	sub	sp, #128	@ 0x80
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	225c      	movs	r2, #92	@ 0x5c
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f00d ff03 	bl	801008c <memset>
  if(hlptim->Instance==LPTIM2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	@ (8002308 <HAL_LPTIM_MspInit+0xa8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d136      	bne.n	80022fe <HAL_LPTIM_MspInit+0x9e>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002294:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8002296:	2300      	movs	r3, #0
 8002298:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 ff98 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80022aa:	f7ff fe43 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	4a16      	ldr	r2, [pc, #88]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022b4:	f043 0320 	orr.w	r3, r3, #32
 80022b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_LPTIM_MspInit+0xac>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM2 GPIO Configuration
    PB1     ------> LPTIM2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022de:	2302      	movs	r3, #2
 80022e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80022ee:	230e      	movs	r3, #14
 80022f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	@ (8002310 <HAL_LPTIM_MspInit+0xb0>)
 80022fa:	f001 ff8f 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3780      	adds	r7, #128	@ 0x80
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40009400 	.word	0x40009400
 800230c:	40021000 	.word	0x40021000
 8002310:	48000400 	.word	0x48000400

08002314 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b09a      	sub	sp, #104	@ 0x68
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	225c      	movs	r2, #92	@ 0x5c
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f00d feb1 	bl	801008c <memset>
  if(hrtc->Instance==RTC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <HAL_RTC_MspInit+0x58>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d117      	bne.n	8002364 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002334:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002338:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800233a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800233e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f003 ff45 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002350:	f7ff fdf0 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RTC_MspInit+0x5c>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <HAL_RTC_MspInit+0x5c>)
 800235c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3768      	adds	r7, #104	@ 0x68
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40002800 	.word	0x40002800
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0a2      	sub	sp, #136	@ 0x88
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800238c:	f107 0318 	add.w	r3, r7, #24
 8002390:	225c      	movs	r2, #92	@ 0x5c
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f00d fe79 	bl	801008c <memset>
  if(hsd->Instance==SDMMC1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f040 80b6 	bne.w	8002512 <HAL_SD_MspInit+0x19e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80023a6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80023aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 80023ac:	2300      	movs	r3, #0
 80023ae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 ff0d 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80023c0:	f7ff fdb8 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023c4:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	4a55      	ldr	r2, [pc, #340]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d0:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002400:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800240c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002410:	677b      	str	r3, [r7, #116]	@ 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002420:	230c      	movs	r3, #12
 8002422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002426:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800242a:	4619      	mov	r1, r3
 800242c:	483d      	ldr	r0, [pc, #244]	@ (8002524 <HAL_SD_MspInit+0x1b0>)
 800242e:	f001 fef5 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002432:	2304      	movs	r3, #4
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002444:	230c      	movs	r3, #12
 8002446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800244e:	4619      	mov	r1, r3
 8002450:	4835      	ldr	r0, [pc, #212]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002452:	f001 fee3 	bl	800421c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8002456:	4b35      	ldr	r3, [pc, #212]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002458:	4a35      	ldr	r2, [pc, #212]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 800245a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 800245c:	4b33      	ldr	r3, [pc, #204]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 800245e:	2207      	movs	r2, #7
 8002460:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002462:	4b32      	ldr	r3, [pc, #200]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002468:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002470:	2280      	movs	r2, #128	@ 0x80
 8002472:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 800247e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002482:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800248a:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002490:	4826      	ldr	r0, [pc, #152]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002492:	f001 fc3f 	bl	8003d14 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_SD_MspInit+0x12c>
    {
      Error_Handler();
 800249c:	f7ff fd4a 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a22      	ldr	r2, [pc, #136]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024ae:	4a22      	ldr	r2, [pc, #136]	@ (8002538 <HAL_SD_MspInit+0x1c4>)
 80024b0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 80024b2:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024ba:	2210      	movs	r2, #16
 80024bc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024be:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024d8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 80024da:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80024e6:	4813      	ldr	r0, [pc, #76]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024e8:	f001 fc14 	bl	8003d14 <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_SD_MspInit+0x182>
    {
      Error_Handler();
 80024f2:	f7ff fd1f 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	2031      	movs	r0, #49	@ 0x31
 8002508:	f001 fae8 	bl	8003adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800250c:	2031      	movs	r0, #49	@ 0x31
 800250e:	f001 fb01 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3788      	adds	r7, #136	@ 0x88
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40012800 	.word	0x40012800
 8002520:	40021000 	.word	0x40021000
 8002524:	48000800 	.word	0x48000800
 8002528:	48000c00 	.word	0x48000c00
 800252c:	2000031c 	.word	0x2000031c
 8002530:	40020444 	.word	0x40020444
 8002534:	20000364 	.word	0x20000364
 8002538:	40020458 	.word	0x40020458

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	@ 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3d      	ldr	r2, [pc, #244]	@ (8002650 <HAL_SPI_MspInit+0x114>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d145      	bne.n	80025ea <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	4a3c      	ldr	r2, [pc, #240]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002564:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002568:	6613      	str	r3, [r2, #96]	@ 0x60
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	4a36      	ldr	r2, [pc, #216]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a30      	ldr	r2, [pc, #192]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259a:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80025a6:	2312      	movs	r3, #18
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b6:	2305      	movs	r3, #5
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c4:	f001 fe2a 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025c8:	2330      	movs	r3, #48	@ 0x30
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d8:	2305      	movs	r3, #5
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	481d      	ldr	r0, [pc, #116]	@ (8002658 <HAL_SPI_MspInit+0x11c>)
 80025e4:	f001 fe1a 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025e8:	e02d      	b.n	8002646 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_SPI_MspInit+0x120>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d128      	bne.n	8002646 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	4a16      	ldr	r2, [pc, #88]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 80025fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002610:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HAL_SPI_MspInit+0x118>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002624:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002636:	2305      	movs	r3, #5
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4805      	ldr	r0, [pc, #20]	@ (8002658 <HAL_SPI_MspInit+0x11c>)
 8002642:	f001 fdeb 	bl	800421c <HAL_GPIO_Init>
}
 8002646:	bf00      	nop
 8002648:	3730      	adds	r7, #48	@ 0x30
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40013000 	.word	0x40013000
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400
 800265c:	40003800 	.word	0x40003800

08002660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <HAL_TIM_Base_MspInit+0x88>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d135      	bne.n	80026de <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_TIM_Base_MspInit+0x8c>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_TIM_Base_MspInit+0x8c>)
 8002678:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800267c:	6613      	str	r3, [r2, #96]	@ 0x60
 800267e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_TIM_Base_MspInit+0x8c>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 800268c:	4a19      	ldr	r2, [pc, #100]	@ (80026f4 <HAL_TIM_Base_MspInit+0x94>)
 800268e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8002690:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 8002692:	2207      	movs	r2, #7
 8002694:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026b8:	2220      	movs	r2, #32
 80026ba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80026c2:	480b      	ldr	r0, [pc, #44]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026c4:	f001 fb26 	bl	8003d14 <HAL_DMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80026ce:	f7ff fc31 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a06      	ldr	r2, [pc, #24]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80026d8:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_TIM_Base_MspInit+0x90>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	200004c0 	.word	0x200004c0
 80026f4:	4002001c 	.word	0x4002001c

080026f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_TIM_MspPostInit+0x68>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11d      	bne.n	8002756 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_TIM_MspPostInit+0x6c>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	4a11      	ldr	r2, [pc, #68]	@ (8002764 <HAL_TIM_MspPostInit+0x6c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002726:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <HAL_TIM_MspPostInit+0x6c>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002736:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002740:	2302      	movs	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002744:	2301      	movs	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002752:	f001 fd63 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0a0      	sub	sp, #128	@ 0x80
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	225c      	movs	r2, #92	@ 0x5c
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f00d fc7f 	bl	801008c <memset>
  if(huart->Instance==USART3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a37      	ldr	r2, [pc, #220]	@ (8002870 <HAL_UART_MspInit+0x108>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d166      	bne.n	8002866 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002798:	2304      	movs	r3, #4
 800279a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800279c:	2300      	movs	r3, #0
 800279e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fd15 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027b0:	f7ff fbc0 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027be:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027cc:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d0:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d8:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <HAL_UART_MspInit+0x10c>)
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027e4:	2330      	movs	r3, #48	@ 0x30
 80027e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027f4:	2307      	movs	r3, #7
 80027f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027fc:	4619      	mov	r1, r3
 80027fe:	481e      	ldr	r0, [pc, #120]	@ (8002878 <HAL_UART_MspInit+0x110>)
 8002800:	f001 fd0c 	bl	800421c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002806:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <HAL_UART_MspInit+0x118>)
 8002808:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <HAL_UART_MspInit+0x114>)
 800280c:	2202      	movs	r2, #2
 800280e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <HAL_UART_MspInit+0x114>)
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002828:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_UART_MspInit+0x114>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800283a:	4810      	ldr	r0, [pc, #64]	@ (800287c <HAL_UART_MspInit+0x114>)
 800283c:	f001 fa6a 	bl	8003d14 <HAL_DMA_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002846:	f7ff fb75 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0b      	ldr	r2, [pc, #44]	@ (800287c <HAL_UART_MspInit+0x114>)
 800284e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002850:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <HAL_UART_MspInit+0x114>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2105      	movs	r1, #5
 800285a:	2027      	movs	r0, #39	@ 0x27
 800285c:	f001 f93e 	bl	8003adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002860:	2027      	movs	r0, #39	@ 0x27
 8002862:	f001 f957 	bl	8003b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3780      	adds	r7, #128	@ 0x80
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40004800 	.word	0x40004800
 8002874:	40021000 	.word	0x40021000
 8002878:	48000800 	.word	0x48000800
 800287c:	20000590 	.word	0x20000590
 8002880:	40020030 	.word	0x40020030

08002884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	@ 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002892:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_InitTick+0xe0>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	4a33      	ldr	r2, [pc, #204]	@ (8002964 <HAL_InitTick+0xe0>)
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	6593      	str	r3, [r2, #88]	@ 0x58
 800289e:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_InitTick+0xe0>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028aa:	f107 0210 	add.w	r2, r7, #16
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fbfb 	bl	80060b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028c4:	f003 fbc8 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 80028c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80028ca:	e004      	b.n	80028d6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028cc:	f003 fbc4 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 80028d0:	4603      	mov	r3, r0
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	4a23      	ldr	r2, [pc, #140]	@ (8002968 <HAL_InitTick+0xe4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0c9b      	lsrs	r3, r3, #18
 80028e0:	3b01      	subs	r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028e4:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_InitTick+0xe8>)
 80028e6:	4a22      	ldr	r2, [pc, #136]	@ (8002970 <HAL_InitTick+0xec>)
 80028e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028ea:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_InitTick+0xe8>)
 80028ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028f2:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <HAL_InitTick+0xe8>)
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <HAL_InitTick+0xe8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_InitTick+0xe8>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002904:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_InitTick+0xe8>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800290a:	4818      	ldr	r0, [pc, #96]	@ (800296c <HAL_InitTick+0xe8>)
 800290c:	f006 fc19 	bl	8009142 <HAL_TIM_Base_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002916:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11b      	bne.n	8002956 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800291e:	4813      	ldr	r0, [pc, #76]	@ (800296c <HAL_InitTick+0xe8>)
 8002920:	f006 fc66 	bl	80091f0 <HAL_TIM_Base_Start_IT>
 8002924:	4603      	mov	r3, r0
 8002926:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800292a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002932:	2036      	movs	r0, #54	@ 0x36
 8002934:	f001 f8ee 	bl	8003b14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d808      	bhi.n	8002950 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800293e:	2200      	movs	r2, #0
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	2036      	movs	r0, #54	@ 0x36
 8002944:	f001 f8ca 	bl	8003adc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002948:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_InitTick+0xf0>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e002      	b.n	8002956 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002956:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800295a:	4618      	mov	r0, r3
 800295c:	3738      	adds	r7, #56	@ 0x38
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	431bde83 	.word	0x431bde83
 800296c:	20000624 	.word	0x20000624
 8002970:	40001000 	.word	0x40001000
 8002974:	20000008 	.word	0x20000008

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <DMA1_Channel2_IRQHandler+0x10>)
 80029b6:	f001 fb44 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200004c0 	.word	0x200004c0

080029c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	usart_dma_irq_handler(&uart3_desc);
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <DMA1_Channel3_IRQHandler+0x14>)
 80029ca:	f000 ff1e 	bl	800380a <usart_dma_irq_handler>
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80029ce:	4803      	ldr	r0, [pc, #12]	@ (80029dc <DMA1_Channel3_IRQHandler+0x18>)
 80029d0:	f001 fb37 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	08010ce0 	.word	0x08010ce0
 80029dc:	20000590 	.word	0x20000590

080029e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a1c:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <I2C1_ER_IRQHandler+0x10>)
 8002a1e:	f001 fe42 	bl	80046a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200000b0 	.word	0x200000b0

08002a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <USART3_IRQHandler+0x14>)
 8002a4e:	f007 fccb 	bl	800a3e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  usart_irq_handler(&uart3_desc);
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <USART3_IRQHandler+0x18>)
 8002a54:	f000 ff29 	bl	80038aa <usart_irq_handler>
  /* USER CODE END USART3_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000508 	.word	0x20000508
 8002a60:	08010ce0 	.word	0x08010ce0

08002a64 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <SDMMC1_IRQHandler+0x10>)
 8002a6a:	f005 fa09 	bl	8007e80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000298 	.word	0x20000298

08002a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <TIM6_DAC_IRQHandler+0x10>)
 8002a7e:	f006 fc6c 	bl	800935a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000624 	.word	0x20000624

08002a8c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002a90:	4802      	ldr	r0, [pc, #8]	@ (8002a9c <DMA2_Channel4_IRQHandler+0x10>)
 8002a92:	f001 fad6 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000031c 	.word	0x2000031c

08002aa0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002aa4:	4802      	ldr	r0, [pc, #8]	@ (8002ab0 <DMA2_Channel5_IRQHandler+0x10>)
 8002aa6:	f001 facc 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000364 	.word	0x20000364

08002ab4 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <DMA2_Channel6_IRQHandler+0x10>)
 8002aba:	f001 fac2 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200001ac 	.word	0x200001ac

08002ac8 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <DMA2_Channel7_IRQHandler+0x10>)
 8002ace:	f001 fab8 	bl	8004042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200001f4 	.word	0x200001f4

08002adc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e00a      	b.n	8002b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aee:	f3af 8000 	nop.w
 8002af2:	4601      	mov	r1, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbf0      	blt.n	8002aee <_read+0x12>
  }

  return len;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_isatty>:

int _isatty(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f00d fb10 	bl	80101d4 <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20010000 	.word	0x20010000
 8002be0:	00000800 	.word	0x00000800
 8002be4:	20000670 	.word	0x20000670
 8002be8:	200021b8 	.word	0x200021b8

08002bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c14:	f7ff ffea 	bl	8002bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c18:	480c      	ldr	r0, [pc, #48]	@ (8002c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c1a:	490d      	ldr	r1, [pc, #52]	@ (8002c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <LoopForever+0xe>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c20:	e002      	b.n	8002c28 <LoopCopyDataInit>

08002c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c26:	3304      	adds	r3, #4

08002c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c2c:	d3f9      	bcc.n	8002c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c30:	4c0a      	ldr	r4, [pc, #40]	@ (8002c5c <LoopForever+0x16>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c34:	e001      	b.n	8002c3a <LoopFillZerobss>

08002c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c38:	3204      	adds	r2, #4

08002c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c3c:	d3fb      	bcc.n	8002c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f00d facf 	bl	80101e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c42:	f7fe fa77 	bl	8001134 <main>

08002c46 <LoopForever>:

LoopForever:
    b LoopForever
 8002c46:	e7fe      	b.n	8002c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c54:	08010dac 	.word	0x08010dac
  ldr r2, =_sbss
 8002c58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c5c:	200021b4 	.word	0x200021b4

08002c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC1_IRQHandler>
 8002c62:	0000      	movs	r0, r0
 8002c64:	0000      	movs	r0, r0
	...

08002c68 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f003 f9f3 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8002c72:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8002c74:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <ARGB_Init+0xd8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <ARGB_Init+0x1c>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <ARGB_Init+0x1e>
 8002c84:	2302      	movs	r3, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <ARGB_Init+0xdc>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <ARGB_Init+0xe0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <ARGB_Init+0xe0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <ARGB_Init+0xe0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd fd43 	bl	8000748 <__aeabi_ui2d>
 8002cc2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002d30 <ARGB_Init+0xc8>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fad2 	bl	8000270 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7fd fdb2 	bl	800083c <__aeabi_d2uiz>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <ARGB_Init+0xe4>)
 8002ce2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.24) - 1;     // Log.0 - 24% - 0.30us
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fd fd2f 	bl	8000748 <__aeabi_ui2d>
 8002cea:	a313      	add	r3, pc, #76	@ (adr r3, 8002d38 <ARGB_Init+0xd0>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f7fd fabe 	bl	8000270 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd fd9e 	bl	800083c <__aeabi_d2uiz>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <ARGB_Init+0xe8>)
 8002d0a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <ARGB_Init+0xec>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <ARGB_Init+0xe0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f007 f9f4 	bl	800a108 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7ff f8d9 	bl	8001ed8 <HAL_Delay>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	eb851eb8 	.word	0xeb851eb8
 8002d34:	3fdeb851 	.word	0x3fdeb851
 8002d38:	eb851eb8 	.word	0xeb851eb8
 8002d3c:	3fceb851 	.word	0x3fceb851
 8002d40:	40021000 	.word	0x40021000
 8002d44:	014f8b59 	.word	0x014f8b59
 8002d48:	20000474 	.word	0x20000474
 8002d4c:	20000674 	.word	0x20000674
 8002d50:	20000675 	.word	0x20000675
 8002d54:	200006c2 	.word	0x200006c2

08002d58 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	717b      	strb	r3, [r7, #5]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	713b      	strb	r3, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d908      	bls.n	8002d8e <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <ARGB_SetRGB+0xd0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d9e:	797a      	ldrb	r2, [r7, #5]
 8002da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002da4:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8002da6:	4b20      	ldr	r3, [pc, #128]	@ (8002e28 <ARGB_SetRGB+0xd0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002db6:	793a      	ldrb	r2, [r7, #4]
 8002db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dbc:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <ARGB_SetRGB+0xd0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dca:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dd4:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8002dd6:	793b      	ldrb	r3, [r7, #4]
 8002dd8:	21b0      	movs	r1, #176	@ 0xb0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f9e8 	bl	80031b0 <scale8>
 8002de0:	4603      	mov	r3, r0
 8002de2:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	21f0      	movs	r1, #240	@ 0xf0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f9e1 	bl	80031b0 <scale8>
 8002dee:	4603      	mov	r3, r0
 8002df0:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8002df6:	793b      	ldrb	r3, [r7, #4]
 8002df8:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	490a      	ldr	r1, [pc, #40]	@ (8002e2c <ARGB_SetRGB+0xd4>)
 8002e04:	7b7a      	ldrb	r2, [r7, #13]
 8002e06:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4907      	ldr	r1, [pc, #28]	@ (8002e2c <ARGB_SetRGB+0xd4>)
 8002e10:	7b3a      	ldrb	r2, [r7, #12]
 8002e12:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	4904      	ldr	r1, [pc, #16]	@ (8002e2c <ARGB_SetRGB+0xd4>)
 8002e1c:	7afa      	ldrb	r2, [r7, #11]
 8002e1e:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
#endif
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	20000004 	.word	0x20000004
 8002e2c:	20000678 	.word	0x20000678

08002e30 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	71bb      	strb	r3, [r7, #6]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	81fb      	strh	r3, [r7, #14]
 8002e46:	e00b      	b.n	8002e60 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	b298      	uxth	r0, r3
 8002e4c:	797b      	ldrb	r3, [r7, #5]
 8002e4e:	79ba      	ldrb	r2, [r7, #6]
 8002e50:	79f9      	ldrb	r1, [r7, #7]
 8002e52:	f7ff ff81 	bl	8002d58 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8002e56:	89fb      	ldrh	r3, [r7, #14]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	81fb      	strh	r3, [r7, #14]
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d9ef      	bls.n	8002e48 <ARGB_FillRGB+0x18>
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8002e7a:	4b96      	ldr	r3, [pc, #600]	@ (80030d4 <ARGB_Show+0x260>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8002e80:	4b95      	ldr	r3, [pc, #596]	@ (80030d8 <ARGB_Show+0x264>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <ARGB_Show+0x22>
 8002e8a:	4b94      	ldr	r3, [pc, #592]	@ (80030dc <ARGB_Show+0x268>)
 8002e8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <ARGB_Show+0x26>
        return ARGB_BUSY;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e17c      	b.n	8003194 <ARGB_Show+0x320>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	71fb      	strb	r3, [r7, #7]
 8002e9e:	e0c4      	b.n	800302a <ARGB_Show+0x1b6>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80030e0 <ARGB_Show+0x26c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dd03      	ble.n	8002ec0 <ARGB_Show+0x4c>
 8002eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80030e4 <ARGB_Show+0x270>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e002      	b.n	8002ec6 <ARGB_Show+0x52>
 8002ec0:	4b89      	ldr	r3, [pc, #548]	@ (80030e8 <ARGB_Show+0x274>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4a87      	ldr	r2, [pc, #540]	@ (80030ec <ARGB_Show+0x278>)
 8002ece:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002ed0:	4b83      	ldr	r3, [pc, #524]	@ (80030e0 <ARGB_Show+0x26c>)
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dd03      	ble.n	8002ef0 <ARGB_Show+0x7c>
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80030e4 <ARGB_Show+0x270>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e002      	b.n	8002ef6 <ARGB_Show+0x82>
 8002ef0:	4b7d      	ldr	r3, [pc, #500]	@ (80030e8 <ARGB_Show+0x274>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	3208      	adds	r2, #8
 8002efc:	497b      	ldr	r1, [pc, #492]	@ (80030ec <ARGB_Show+0x278>)
 8002efe:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002f00:	4b77      	ldr	r3, [pc, #476]	@ (80030e0 <ARGB_Show+0x26c>)
 8002f02:	789b      	ldrb	r3, [r3, #2]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dd03      	ble.n	8002f20 <ARGB_Show+0xac>
 8002f18:	4b72      	ldr	r3, [pc, #456]	@ (80030e4 <ARGB_Show+0x270>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e002      	b.n	8002f26 <ARGB_Show+0xb2>
 8002f20:	4b71      	ldr	r3, [pc, #452]	@ (80030e8 <ARGB_Show+0x274>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	3210      	adds	r2, #16
 8002f2c:	496f      	ldr	r1, [pc, #444]	@ (80030ec <ARGB_Show+0x278>)
 8002f2e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002f30:	4b6b      	ldr	r3, [pc, #428]	@ (80030e0 <ARGB_Show+0x26c>)
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd03      	ble.n	8002f50 <ARGB_Show+0xdc>
 8002f48:	4b66      	ldr	r3, [pc, #408]	@ (80030e4 <ARGB_Show+0x270>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e002      	b.n	8002f56 <ARGB_Show+0xe2>
 8002f50:	4b65      	ldr	r3, [pc, #404]	@ (80030e8 <ARGB_Show+0x274>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	3218      	adds	r2, #24
 8002f5c:	4963      	ldr	r1, [pc, #396]	@ (80030ec <ARGB_Show+0x278>)
 8002f5e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002f60:	4b5f      	ldr	r3, [pc, #380]	@ (80030e0 <ARGB_Show+0x26c>)
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	dd03      	ble.n	8002f80 <ARGB_Show+0x10c>
 8002f78:	4b5a      	ldr	r3, [pc, #360]	@ (80030e4 <ARGB_Show+0x270>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e002      	b.n	8002f86 <ARGB_Show+0x112>
 8002f80:	4b59      	ldr	r3, [pc, #356]	@ (80030e8 <ARGB_Show+0x274>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	3220      	adds	r2, #32
 8002f8c:	4957      	ldr	r1, [pc, #348]	@ (80030ec <ARGB_Show+0x278>)
 8002f8e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002f90:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <ARGB_Show+0x26c>)
 8002f92:	795b      	ldrb	r3, [r3, #5]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	dd03      	ble.n	8002fb0 <ARGB_Show+0x13c>
 8002fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80030e4 <ARGB_Show+0x270>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e002      	b.n	8002fb6 <ARGB_Show+0x142>
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80030e8 <ARGB_Show+0x274>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	3228      	adds	r2, #40	@ 0x28
 8002fbc:	494b      	ldr	r1, [pc, #300]	@ (80030ec <ARGB_Show+0x278>)
 8002fbe:	548b      	strb	r3, [r1, r2]
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002fc0:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <ARGB_Show+0x26c>)
 8002fc2:	799b      	ldrb	r3, [r3, #6]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dd03      	ble.n	8002fe0 <ARGB_Show+0x16c>
 8002fd8:	4b42      	ldr	r3, [pc, #264]	@ (80030e4 <ARGB_Show+0x270>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e002      	b.n	8002fe6 <ARGB_Show+0x172>
 8002fe0:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <ARGB_Show+0x274>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	3230      	adds	r2, #48	@ 0x30
 8002fec:	493f      	ldr	r1, [pc, #252]	@ (80030ec <ARGB_Show+0x278>)
 8002fee:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <ARGB_Show+0x26c>)
 8002ff2:	79db      	ldrb	r3, [r3, #7]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	dd03      	ble.n	8003010 <ARGB_Show+0x19c>
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <ARGB_Show+0x270>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e002      	b.n	8003016 <ARGB_Show+0x1a2>
 8003010:	4b35      	ldr	r3, [pc, #212]	@ (80030e8 <ARGB_Show+0x274>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	3238      	adds	r2, #56	@ 0x38
 800301c:	4933      	ldr	r1, [pc, #204]	@ (80030ec <ARGB_Show+0x278>)
 800301e:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	71fb      	strb	r3, [r7, #7]
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b07      	cmp	r3, #7
 8003030:	f67f af36 	bls.w	8002ea0 <ARGB_Show+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8003038:	e0a4      	b.n	8003184 <ARGB_Show+0x310>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 800303a:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <ARGB_Show+0x27c>)
 800303c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d102      	bne.n	800304c <ARGB_Show+0x1d8>
                DMA_Send_Stat = HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	73fb      	strb	r3, [r7, #15]
                continue;
 800304a:	e09b      	b.n	8003184 <ARGB_Show+0x310>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <ARGB_Show+0x27c>)
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11d      	bne.n	8003094 <ARGB_Show+0x220>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8003058:	4b25      	ldr	r3, [pc, #148]	@ (80030f0 <ARGB_Show+0x27c>)
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8003060:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <ARGB_Show+0x27c>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	4a23      	ldr	r2, [pc, #140]	@ (80030f4 <ARGB_Show+0x280>)
 8003066:	62da      	str	r2, [r3, #44]	@ 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <ARGB_Show+0x27c>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <ARGB_Show+0x284>)
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <ARGB_Show+0x27c>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <ARGB_Show+0x288>)
 8003076:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8003078:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <ARGB_Show+0x27c>)
 800307a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800307c:	491b      	ldr	r1, [pc, #108]	@ (80030ec <ARGB_Show+0x278>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <ARGB_Show+0x27c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3334      	adds	r3, #52	@ 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8003084:	461a      	mov	r2, r3
 8003086:	2340      	movs	r3, #64	@ 0x40
 8003088:	f000 fefc 	bl	8003e84 <HAL_DMA_Start_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d006      	beq.n	80030a0 <ARGB_Show+0x22c>
 8003092:	e002      	b.n	800309a <ARGB_Show+0x226>
                DMA_Send_Stat = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
                continue;
 8003098:	e074      	b.n	8003184 <ARGB_Show+0x310>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
                continue;
 800309e:	e071      	b.n	8003184 <ARGB_Show+0x310>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <ARGB_Show+0x27c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <ARGB_Show+0x27c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <ARGB_Show+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <ARGB_Show+0x28c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <ARGB_Show+0x25a>
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <ARGB_Show+0x27c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <ARGB_Show+0x290>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <ARGB_Show+0x25a>
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <ARGB_Show+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003108 <ARGB_Show+0x294>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11e      	bne.n	800310c <ARGB_Show+0x298>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e01d      	b.n	800310e <ARGB_Show+0x29a>
 80030d2:	bf00      	nop
 80030d4:	200006c2 	.word	0x200006c2
 80030d8:	200006c0 	.word	0x200006c0
 80030dc:	200004c0 	.word	0x200004c0
 80030e0:	20000678 	.word	0x20000678
 80030e4:	20000674 	.word	0x20000674
 80030e8:	20000675 	.word	0x20000675
 80030ec:	20000680 	.word	0x20000680
 80030f0:	20000474 	.word	0x20000474
 80030f4:	080031d9 	.word	0x080031d9
 80030f8:	080034c5 	.word	0x080034c5
 80030fc:	0800997f 	.word	0x0800997f
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <ARGB_Show+0x2ae>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8003112:	4b22      	ldr	r3, [pc, #136]	@ (800319c <ARGB_Show+0x328>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003118:	4b20      	ldr	r3, [pc, #128]	@ (800319c <ARGB_Show+0x328>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <ARGB_Show+0x328>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <ARGB_Show+0x32c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <ARGB_Show+0x2cc>
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <ARGB_Show+0x328>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003134:	d004      	beq.n	8003140 <ARGB_Show+0x2cc>
 8003136:	4b19      	ldr	r3, [pc, #100]	@ (800319c <ARGB_Show+0x328>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <ARGB_Show+0x330>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d115      	bne.n	800316c <ARGB_Show+0x2f8>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8003140:	4b16      	ldr	r3, [pc, #88]	@ (800319c <ARGB_Show+0x328>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <ARGB_Show+0x334>)
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b06      	cmp	r3, #6
 8003150:	d015      	beq.n	800317e <ARGB_Show+0x30a>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d011      	beq.n	800317e <ARGB_Show+0x30a>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <ARGB_Show+0x328>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <ARGB_Show+0x328>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800316a:	e008      	b.n	800317e <ARGB_Show+0x30a>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <ARGB_Show+0x328>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <ARGB_Show+0x328>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e000      	b.n	8003180 <ARGB_Show+0x30c>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800317e:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f af57 	bne.w	800303a <ARGB_Show+0x1c6>
        }
        BUF_COUNTER = 2;
 800318c:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <ARGB_Show+0x338>)
 800318e:	2202      	movs	r2, #2
 8003190:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8003192:	2302      	movs	r3, #2
    }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000474 	.word	0x20000474
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014000 	.word	0x40014000
 80031a8:	00010007 	.word	0x00010007
 80031ac:	200006c0 	.word	0x200006c0

080031b0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	4613      	mov	r3, r2
 80031be:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	79ba      	ldrb	r2, [r7, #6]
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	121b      	asrs	r3, r3, #8
 80031ca:	b2db      	uxtb	r3, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a88      	ldr	r2, [pc, #544]	@ (800340c <ARGB_TIM_DMADelayPulseCplt+0x234>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	f040 8162 	bne.w	80034b4 <ARGB_TIM_DMADelayPulseCplt+0x2dc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a87      	ldr	r2, [pc, #540]	@ (8003410 <ARGB_TIM_DMADelayPulseCplt+0x238>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f040 815d 	bne.w	80034b4 <ARGB_TIM_DMADelayPulseCplt+0x2dc>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80031fa:	4b86      	ldr	r3, [pc, #536]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8159 	beq.w	80034b8 <ARGB_TIM_DMADelayPulseCplt+0x2e0>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d10b      	bne.n	8003228 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d136      	bne.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003226:	e031      	b.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d10b      	bne.n	800324a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2202      	movs	r2, #2
 8003236:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d125      	bne.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	e020      	b.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d10b      	bne.n	800326c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2204      	movs	r2, #4
 8003258:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d114      	bne.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326a:	e00f      	b.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d10a      	bne.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2208      	movs	r2, #8
 800327a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800328c:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	f200 8087 	bhi.w	80033a6 <ARGB_TIM_DMADelayPulseCplt+0x1ce>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	72fb      	strb	r3, [r7, #11]
 800329c:	e077      	b.n	800338e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
#ifdef SK6812
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800329e:	4b5d      	ldr	r3, [pc, #372]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003418 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	dd03      	ble.n	80032c6 <ARGB_TIM_DMADelayPulseCplt+0xee>
 80032be:	4b57      	ldr	r3, [pc, #348]	@ (800341c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e002      	b.n	80032cc <ARGB_TIM_DMADelayPulseCplt+0xf4>
 80032c6:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	7afa      	ldrb	r2, [r7, #11]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	3220      	adds	r2, #32
 80032d2:	4954      	ldr	r1, [pc, #336]	@ (8003424 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 80032d4:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80032d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3301      	adds	r3, #1
 80032e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003418 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	7afb      	ldrb	r3, [r7, #11]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	dd03      	ble.n	8003300 <ARGB_TIM_DMADelayPulseCplt+0x128>
 80032f8:	4b48      	ldr	r3, [pc, #288]	@ (800341c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e002      	b.n	8003306 <ARGB_TIM_DMADelayPulseCplt+0x12e>
 8003300:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	7afa      	ldrb	r2, [r7, #11]
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	3228      	adds	r2, #40	@ 0x28
 800330c:	4945      	ldr	r1, [pc, #276]	@ (8003424 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 800330e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8003310:	4b40      	ldr	r3, [pc, #256]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	4a3f      	ldr	r2, [pc, #252]	@ (8003418 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	dd03      	ble.n	800333a <ARGB_TIM_DMADelayPulseCplt+0x162>
 8003332:	4b3a      	ldr	r3, [pc, #232]	@ (800341c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e002      	b.n	8003340 <ARGB_TIM_DMADelayPulseCplt+0x168>
 800333a:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	7afa      	ldrb	r2, [r7, #11]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	3230      	adds	r2, #48	@ 0x30
 8003346:	4937      	ldr	r1, [pc, #220]	@ (8003424 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 8003348:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800334a:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	3303      	adds	r3, #3
 8003354:	4a30      	ldr	r2, [pc, #192]	@ (8003418 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	dd03      	ble.n	8003374 <ARGB_TIM_DMADelayPulseCplt+0x19c>
 800336c:	4b2b      	ldr	r3, [pc, #172]	@ (800341c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e002      	b.n	800337a <ARGB_TIM_DMADelayPulseCplt+0x1a2>
 8003374:	4b2a      	ldr	r3, [pc, #168]	@ (8003420 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	7afa      	ldrb	r2, [r7, #11]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	3238      	adds	r2, #56	@ 0x38
 8003380:	4928      	ldr	r1, [pc, #160]	@ (8003424 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 8003382:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	72fb      	strb	r3, [r7, #11]
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b07      	cmp	r3, #7
 8003394:	d983      	bls.n	800329e <ARGB_TIM_DMADelayPulseCplt+0xc6>
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER++;
 8003396:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	e082      	b.n	80034ac <ARGB_TIM_DMADelayPulseCplt+0x2d4>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80033a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d80c      	bhi.n	80033ca <ARGB_TIM_DMADelayPulseCplt+0x1f2>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 80033b0:	2220      	movs	r2, #32
 80033b2:	2100      	movs	r1, #0
 80033b4:	481c      	ldr	r0, [pc, #112]	@ (8003428 <ARGB_TIM_DMADelayPulseCplt+0x250>)
 80033b6:	f00c fe69 	bl	801008c <memset>
        BUF_COUNTER++;
 80033ba:	4b16      	ldr	r3, [pc, #88]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	e070      	b.n	80034ac <ARGB_TIM_DMADelayPulseCplt+0x2d4>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	801a      	strh	r2, [r3, #0]
        // STOP DMA:
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033de:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fdeb 	bl	8003fc0 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a0f      	ldr	r2, [pc, #60]	@ (800342c <ARGB_TIM_DMADelayPulseCplt+0x254>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <ARGB_TIM_DMADelayPulseCplt+0x230>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <ARGB_TIM_DMADelayPulseCplt+0x258>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <ARGB_TIM_DMADelayPulseCplt+0x230>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <ARGB_TIM_DMADelayPulseCplt+0x25c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d117      	bne.n	8003438 <ARGB_TIM_DMADelayPulseCplt+0x260>
 8003408:	2301      	movs	r3, #1
 800340a:	e016      	b.n	800343a <ARGB_TIM_DMADelayPulseCplt+0x262>
 800340c:	200004c0 	.word	0x200004c0
 8003410:	20000474 	.word	0x20000474
 8003414:	200006c0 	.word	0x200006c0
 8003418:	20000678 	.word	0x20000678
 800341c:	20000674 	.word	0x20000674
 8003420:	20000675 	.word	0x20000675
 8003424:	20000680 	.word	0x20000680
 8003428:	200006a0 	.word	0x200006a0
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40014000 	.word	0x40014000
 8003434:	40014400 	.word	0x40014400
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <ARGB_TIM_DMADelayPulseCplt+0x296>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <ARGB_TIM_DMADelayPulseCplt+0x296>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	f240 4344 	movw	r3, #1092	@ 0x444
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <ARGB_TIM_DMADelayPulseCplt+0x296>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <ARGB_TIM_DMADelayPulseCplt+0x2c6>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	f240 4344 	movw	r3, #1092	@ 0x444
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <ARGB_TIM_DMADelayPulseCplt+0x2c6>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ARGB_LOC_ST = ARGB_READY;
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <ARGB_TIM_DMADelayPulseCplt+0x2e8>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
 80034b2:	e002      	b.n	80034ba <ARGB_TIM_DMADelayPulseCplt+0x2e2>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <ARGB_TIM_DMADelayPulseCplt+0x2e2>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80034b8:	bf00      	nop
}
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200006c2 	.word	0x200006c2

080034c4 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a59      	ldr	r2, [pc, #356]	@ (800363c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f040 80aa 	bne.w	8003630 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a58      	ldr	r2, [pc, #352]	@ (8003640 <ARGB_TIM_DMADelayPulseHalfCplt+0x17c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f040 80a5 	bne.w	8003630 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80034e6:	4b57      	ldr	r3, [pc, #348]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a1 	beq.w	8003634 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80034f2:	4b54      	ldr	r3, [pc, #336]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	f200 8087 	bhi.w	800360c <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80034fe:	2300      	movs	r3, #0
 8003500:	72fb      	strb	r3, [r7, #11]
 8003502:	e077      	b.n	80035f4 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
#ifdef SK6812
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8003504:	4b4f      	ldr	r3, [pc, #316]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a4e      	ldr	r2, [pc, #312]	@ (8003648 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	dd03      	ble.n	800352c <ARGB_TIM_DMADelayPulseHalfCplt+0x68>
 8003524:	4b49      	ldr	r3, [pc, #292]	@ (800364c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e002      	b.n	8003532 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 800352c:	4b48      	ldr	r3, [pc, #288]	@ (8003650 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	7afa      	ldrb	r2, [r7, #11]
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	4611      	mov	r1, r2
 8003538:	4a46      	ldr	r2, [pc, #280]	@ (8003654 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 800353a:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800353c:	4b41      	ldr	r3, [pc, #260]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	3301      	adds	r3, #1
 8003546:	4a40      	ldr	r2, [pc, #256]	@ (8003648 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	dd03      	ble.n	8003566 <ARGB_TIM_DMADelayPulseHalfCplt+0xa2>
 800355e:	4b3b      	ldr	r3, [pc, #236]	@ (800364c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e002      	b.n	800356c <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8003566:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	7afa      	ldrb	r2, [r7, #11]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	3208      	adds	r2, #8
 8003572:	4938      	ldr	r1, [pc, #224]	@ (8003654 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8003574:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8003576:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	4a31      	ldr	r2, [pc, #196]	@ (8003648 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	7afb      	ldrb	r3, [r7, #11]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	dd03      	ble.n	80035a0 <ARGB_TIM_DMADelayPulseHalfCplt+0xdc>
 8003598:	4b2c      	ldr	r3, [pc, #176]	@ (800364c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e002      	b.n	80035a6 <ARGB_TIM_DMADelayPulseHalfCplt+0xe2>
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	7afa      	ldrb	r2, [r7, #11]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	3210      	adds	r2, #16
 80035ac:	4929      	ldr	r1, [pc, #164]	@ (8003654 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 80035ae:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3303      	adds	r3, #3
 80035ba:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dd03      	ble.n	80035da <ARGB_TIM_DMADelayPulseHalfCplt+0x116>
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e002      	b.n	80035e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x11c>
 80035da:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	7afa      	ldrb	r2, [r7, #11]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	3218      	adds	r2, #24
 80035e6:	491b      	ldr	r1, [pc, #108]	@ (8003654 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 80035e8:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	72fb      	strb	r3, [r7, #11]
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	d983      	bls.n	8003504 <ARGB_TIM_DMADelayPulseHalfCplt+0x40>
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER++;
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	e014      	b.n	8003636 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b03      	cmp	r3, #3
 8003614:	d80f      	bhi.n	8003636 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8003616:	2220      	movs	r2, #32
 8003618:	2100      	movs	r1, #0
 800361a:	480e      	ldr	r0, [pc, #56]	@ (8003654 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 800361c:	f00c fd36 	bl	801008c <memset>
        BUF_COUNTER++;
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	e002      	b.n	8003636 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8003634:	bf00      	nop
    }
}
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200004c0 	.word	0x200004c0
 8003640:	20000474 	.word	0x20000474
 8003644:	200006c0 	.word	0x200006c0
 8003648:	20000678 	.word	0x20000678
 800364c:	20000674 	.word	0x20000674
 8003650:	20000675 	.word	0x20000675
 8003654:	20000680 	.word	0x20000680

08003658 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d101      	bne.n	8003670 <LL_USART_IsActiveFlag_IDLE+0x18>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2210      	movs	r2, #16
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d101      	bne.n	80036b0 <LL_USART_IsEnabledIT_IDLE+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_USART_IsEnabledIT_IDLE+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <LL_DMA_GetDataLength>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80036ce:	4a07      	ldr	r2, [pc, #28]	@ (80036ec <LL_DMA_GetDataLength+0x2c>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b29b      	uxth	r3, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	08010d4c 	.word	0x08010d4c

080036f0 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <LL_DMA_IsEnabledIT_TC+0x38>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8003712:	2b02      	cmp	r3, #2
 8003714:	d101      	bne.n	800371a <LL_DMA_IsEnabledIT_TC+0x2a>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <LL_DMA_IsEnabledIT_TC+0x2c>
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	08010d4c 	.word	0x08010d4c

0800372c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <LL_DMA_IsEnabledIT_HT+0x38>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
                    DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 800374e:	2b04      	cmp	r3, #4
 8003750:	d101      	bne.n	8003756 <LL_DMA_IsEnabledIT_HT+0x2a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_DMA_IsEnabledIT_HT+0x2c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	08010d4c 	.word	0x08010d4c

08003768 <usart_rx_dma_thread>:
/**
 * \brief           USART DMA check thread
 * \param[in]       arg: Thread argument
 */
void
usart_rx_dma_thread(void* arg) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    uart_desc_t* uart = arg;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	617b      	str	r3, [r7, #20]
    void* d;


    while (1) {
        /* Block thread and wait for event to process USART data */
        osMessageQueueGet(uart->data->queue, &d, NULL, osWaitForever);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	f107 010c 	add.w	r1, r7, #12
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	2200      	movs	r2, #0
 8003784:	f009 fe22 	bl	800d3cc <osMessageQueueGet>
        uint8_t a = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	74fb      	strb	r3, [r7, #19]
        /* Simply call processing function */
        a = usart_rx_check(uart);
 800378c:	6978      	ldr	r0, [r7, #20]
 800378e:	f000 f80b 	bl	80037a8 <usart_rx_check>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]
        printf("uart:%d\r\n", a);
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	4619      	mov	r1, r3
 800379a:	4802      	ldr	r0, [pc, #8]	@ (80037a4 <usart_rx_dma_thread+0x3c>)
 800379c:	f00c fb2e 	bl	800fdfc <iprintf>
    while (1) {
 80037a0:	bf00      	nop
 80037a2:	e7e7      	b.n	8003774 <usart_rx_dma_thread+0xc>
 80037a4:	08010c90 	.word	0x08010c90

080037a8 <usart_rx_check>:
 * Solutions to this are:
 * - Improve architecture design to achieve faster reads
 * - Increase raw buffer size and allow DMA to write more data before this function is called
 */
uint8_t
usart_rx_check(const uart_desc_t* uart) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
    size_t pos;

    /* Calculate current position in buffer and check for new data available */
    pos = ARRAY_LEN(uart->data->dma_rx_buffer) - LL_DMA_GetDataLength(uart->dma_rx, uart->dma_rx_ch);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7ff ff80 	bl	80036c0 <LL_DMA_GetDataLength>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80037c6:	60fb      	str	r3, [r7, #12]
    if (pos != uart->data->old_pos) {           /* Check change in received data */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d015      	beq.n	8003800 <usart_rx_check+0x58>
        if (pos > uart->data->old_pos) {        /* Current position is over previous one */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d907      	bls.n	80037f0 <usart_rx_check+0x48>
             * [   5   ]            |------------------------------------|
             * [   6   ] <- pos
             * [   7   ]
             * [ N - 1 ]
             */
            return uart->data->dma_rx_buffer[uart->data->old_pos];
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4413      	add	r3, r2
 80037ec:	791b      	ldrb	r3, [r3, #4]
 80037ee:	e008      	b.n	8003802 <usart_rx_check+0x5a>
             * [   5   ]            |                                 |
             * [   6   ]            | First block (len = N - old_pos) |
             * [   7   ]            |                                 |
             * [ N - 1 ]            |---------------------------------|
             */
            return uart->data->dma_rx_buffer[uart->data->old_pos];
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	4413      	add	r3, r2
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	e000      	b.n	8003802 <usart_rx_check+0x5a>
                return uart->data->dma_rx_buffer[0];
            }
        }
        uart->data->old_pos = pos;              /* Save current position as old for next transfers */
    }
    return 0;
 8003800:	2300      	movs	r3, #0

}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <usart_dma_irq_handler>:
 * It handles half-transfer and transfer-complete interrupts and does the job accordingly
 *
 * \param[in]       uart: Uart description to handle
 */
void
usart_dma_irq_handler(const uart_desc_t* uart) {
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    void* d = (void *)1;
 8003812:	2301      	movs	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]

    /* Check half-transfer complete interrupt */
    if (LL_DMA_IsEnabledIT_HT(uart->dma_rx, uart->dma_rx_ch) && uart->dma_rx_is_ht_fn(uart->dma_rx)) {
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7ff ff83 	bl	800372c <LL_DMA_IsEnabledIT_HT>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d017      	beq.n	800385c <usart_dma_irq_handler+0x52>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	4610      	mov	r0, r2
 8003836:	4798      	blx	r3
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <usart_dma_irq_handler+0x52>
        uart->dma_rx_clear_ht_fn(uart->dma_rx); /* Clear half-transfer complete flag */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6852      	ldr	r2, [r2, #4]
 8003846:	4610      	mov	r0, r2
 8003848:	4798      	blx	r3
        osMessageQueuePut(uart->data->queue, &d, 0, 0); /* Write data to queue. Do not use wait function! */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	f107 010c 	add.w	r1, r7, #12
 8003854:	2300      	movs	r3, #0
 8003856:	2200      	movs	r2, #0
 8003858:	f009 fd58 	bl	800d30c <osMessageQueuePut>
    }

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(uart->dma_rx, uart->dma_rx_ch) && uart->dma_rx_is_tc_fn(uart->dma_rx)) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7ff ff42 	bl	80036f0 <LL_DMA_IsEnabledIT_TC>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <usart_dma_irq_handler+0x98>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6852      	ldr	r2, [r2, #4]
 800387a:	4610      	mov	r0, r2
 800387c:	4798      	blx	r3
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <usart_dma_irq_handler+0x98>
        uart->dma_rx_clear_tc_fn(uart->dma_rx); /* Clear transfer complete flag */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6852      	ldr	r2, [r2, #4]
 800388c:	4610      	mov	r0, r2
 800388e:	4798      	blx	r3
        osMessageQueuePut(uart->data->queue, &d, 0, 0); /* Write data to queue. Do not use wait function! */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f107 010c 	add.w	r1, r7, #12
 800389a:	2300      	movs	r3, #0
 800389c:	2200      	movs	r2, #0
 800389e:	f009 fd35 	bl	800d30c <osMessageQueuePut>
    }
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <usart_irq_handler>:
 * It handles IDLE line detection interrupt and does the job accordingly
 *
 * \param[in]       uart: Uart description to handle
 */
void
usart_irq_handler(const uart_desc_t* uart) {
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
    void* d = (void *)1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]

    /* Check for IDLE line interrupt */
    if (LL_USART_IsEnabledIT_IDLE(uart->uart) && LL_USART_IsActiveFlag_IDLE(uart->uart)) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff feec 	bl	8003698 <LL_USART_IsEnabledIT_IDLE>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <usart_irq_handler+0x48>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fec4 	bl	8003658 <LL_USART_IsActiveFlag_IDLE>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <usart_irq_handler+0x48>
        LL_USART_ClearFlag_IDLE(uart->uart);    /* Clear IDLE line flag */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fecf 	bl	800367e <LL_USART_ClearFlag_IDLE>
        osMessageQueuePut(uart->data->queue, &d, 0, 0);  /* Write data to queue. Do not use wait function! */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f107 010c 	add.w	r1, r7, #12
 80038ea:	2300      	movs	r3, #0
 80038ec:	2200      	movs	r2, #0
 80038ee:	f009 fd0d 	bl	800d30c <osMessageQueuePut>
    }
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003904:	2003      	movs	r0, #3
 8003906:	f000 f8de 	bl	8003ac6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800390a:	200f      	movs	r0, #15
 800390c:	f7fe ffba 	bl	8002884 <HAL_InitTick>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	71fb      	strb	r3, [r7, #7]
 800391a:	e001      	b.n	8003920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800391c:	f7fe fb10 	bl	8001f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003920:	79fb      	ldrb	r3, [r7, #7]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	2000000c 	.word	0x2000000c
 8003950:	200006c4 	.word	0x200006c4

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	200006c4 	.word	0x200006c4

0800396c <__NVIC_SetPriorityGrouping>:
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800397c:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003988:	4013      	ands	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800399e:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	60d3      	str	r3, [r2, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_GetPriorityGrouping>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <__NVIC_GetPriorityGrouping+0x18>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 0307 	and.w	r3, r3, #7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_EnableIRQ>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	db0b      	blt.n	80039fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	4907      	ldr	r1, [pc, #28]	@ (8003a08 <__NVIC_EnableIRQ+0x38>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2001      	movs	r0, #1
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <__NVIC_SetPriority>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	@ (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	@ (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <NVIC_EncodePriority>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	@ 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f1c3 0307 	rsb	r3, r3, #7
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf28      	it	cs
 8003a7e:	2304      	movcs	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d902      	bls.n	8003a90 <NVIC_EncodePriority+0x30>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b03      	subs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <NVIC_EncodePriority+0x32>
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	4313      	orrs	r3, r2
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	@ 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff4c 	bl	800396c <__NVIC_SetPriorityGrouping>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aee:	f7ff ff61 	bl	80039b4 <__NVIC_GetPriorityGrouping>
 8003af2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	6978      	ldr	r0, [r7, #20]
 8003afa:	f7ff ffb1 	bl	8003a60 <NVIC_EncodePriority>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff80 	bl	8003a0c <__NVIC_SetPriority>
}
 8003b0c:	bf00      	nop
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff54 	bl	80039d0 <__NVIC_EnableIRQ>
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e054      	b.n	8003bec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7f5b      	ldrb	r3, [r3, #29]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe fa1c 	bl	8001f90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <HAL_CRC_Init+0xc4>)
 8003b6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0218 	bic.w	r2, r2, #24
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	e00c      	b.n	8003b9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f834 	bl	8003bf8 <HAL_CRCEx_Polynomial_Set>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e028      	b.n	8003bec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	795b      	ldrb	r3, [r3, #5]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	611a      	str	r2, [r3, #16]
 8003bac:	e004      	b.n	8003bb8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6912      	ldr	r2, [r2, #16]
 8003bb6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	04c11db7 	.word	0x04c11db7

08003bf8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c08:	231f      	movs	r3, #31
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
 8003c1a:	e063      	b.n	8003ce4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c1c:	bf00      	nop
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	613a      	str	r2, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_CRCEx_Polynomial_Set+0x44>
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b18      	cmp	r3, #24
 8003c40:	d846      	bhi.n	8003cd0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003c42:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003cd7 	.word	0x08003cd7
 8003c4c:	08003cd1 	.word	0x08003cd1
 8003c50:	08003cd1 	.word	0x08003cd1
 8003c54:	08003cd1 	.word	0x08003cd1
 8003c58:	08003cd1 	.word	0x08003cd1
 8003c5c:	08003cd1 	.word	0x08003cd1
 8003c60:	08003cd1 	.word	0x08003cd1
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003cc5 	.word	0x08003cc5
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003cd1 	.word	0x08003cd1
 8003c74:	08003cd1 	.word	0x08003cd1
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003cd1 	.word	0x08003cd1
 8003c88:	08003cb9 	.word	0x08003cb9
 8003c8c:	08003cd1 	.word	0x08003cd1
 8003c90:	08003cd1 	.word	0x08003cd1
 8003c94:	08003cd1 	.word	0x08003cd1
 8003c98:	08003cd1 	.word	0x08003cd1
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003cd1 	.word	0x08003cd1
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003cad 	.word	0x08003cad
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d913      	bls.n	8003cda <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003cb6:	e010      	b.n	8003cda <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b07      	cmp	r3, #7
 8003cbc:	d90f      	bls.n	8003cde <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003cc2:	e00c      	b.n	8003cde <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	d90b      	bls.n	8003ce2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003cce:	e008      	b.n	8003ce2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ce2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 0118 	bic.w	r1, r3, #24
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e098      	b.n	8003e58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e64 <HAL_DMA_Init+0x150>)
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d80f      	bhi.n	8003d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <HAL_DMA_Init+0x154>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e6c <HAL_DMA_Init+0x158>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a48      	ldr	r2, [pc, #288]	@ (8003e70 <HAL_DMA_Init+0x15c>)
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d50:	e00e      	b.n	8003d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b46      	ldr	r3, [pc, #280]	@ (8003e74 <HAL_DMA_Init+0x160>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a43      	ldr	r2, [pc, #268]	@ (8003e6c <HAL_DMA_Init+0x158>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	@ (8003e78 <HAL_DMA_Init+0x164>)
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dca:	d039      	beq.n	8003e40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <HAL_DMA_Init+0x15c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d11a      	bne.n	8003e0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dd6:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_DMA_Init+0x168>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f003 031c 	and.w	r3, r3, #28
 8003de2:	210f      	movs	r1, #15
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	4924      	ldr	r1, [pc, #144]	@ (8003e7c <HAL_DMA_Init+0x168>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003df0:	4b22      	ldr	r3, [pc, #136]	@ (8003e7c <HAL_DMA_Init+0x168>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	f003 031c 	and.w	r3, r3, #28
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	491d      	ldr	r1, [pc, #116]	@ (8003e7c <HAL_DMA_Init+0x168>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	e019      	b.n	8003e40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <HAL_DMA_Init+0x16c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f003 031c 	and.w	r3, r3, #28
 8003e18:	210f      	movs	r1, #15
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	4917      	ldr	r1, [pc, #92]	@ (8003e80 <HAL_DMA_Init+0x16c>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_DMA_Init+0x16c>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f003 031c 	and.w	r3, r3, #28
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	4911      	ldr	r1, [pc, #68]	@ (8003e80 <HAL_DMA_Init+0x16c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40020407 	.word	0x40020407
 8003e68:	bffdfff8 	.word	0xbffdfff8
 8003e6c:	cccccccd 	.word	0xcccccccd
 8003e70:	40020000 	.word	0x40020000
 8003e74:	bffdfbf8 	.word	0xbffdfbf8
 8003e78:	40020400 	.word	0x40020400
 8003e7c:	400200a8 	.word	0x400200a8
 8003e80:	400204a8 	.word	0x400204a8

08003e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_Start_IT+0x20>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e04b      	b.n	8003f3c <HAL_DMA_Start_IT+0xb8>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d13a      	bne.n	8003f2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f96d 	bl	80041bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 020e 	orr.w	r2, r2, #14
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e00f      	b.n	8003f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0204 	bic.w	r2, r2, #4
 8003f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 020a 	orr.w	r2, r2, #10
 8003f1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e005      	b.n	8003f3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
 8003f38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d008      	beq.n	8003f6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 020e 	bic.w	r2, r2, #14
 8003f7c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f003 021c 	and.w	r2, r3, #28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d005      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	e029      	b.n	8004038 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020e 	bic.w	r2, r2, #14
 8003ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	f003 021c 	and.w	r2, r3, #28
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
    }
  }
  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f003 031c 	and.w	r3, r3, #28
 8004062:	2204      	movs	r2, #4
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d026      	beq.n	80040bc <HAL_DMA_IRQHandler+0x7a>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d021      	beq.n	80040bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0204 	bic.w	r2, r2, #4
 8004094:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f003 021c 	and.w	r2, r3, #28
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2104      	movs	r1, #4
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d071      	beq.n	8004196 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040ba:	e06c      	b.n	8004196 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	f003 031c 	and.w	r3, r3, #28
 80040c4:	2202      	movs	r2, #2
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02e      	beq.n	800412e <HAL_DMA_IRQHandler+0xec>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d029      	beq.n	800412e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 020a 	bic.w	r2, r2, #10
 80040f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	f003 021c 	and.w	r2, r3, #28
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2102      	movs	r1, #2
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d038      	beq.n	8004196 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800412c:	e033      	b.n	8004196 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f003 031c 	and.w	r3, r3, #28
 8004136:	2208      	movs	r2, #8
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <HAL_DMA_IRQHandler+0x156>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d025      	beq.n	8004198 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 020e 	bic.w	r2, r2, #14
 800415a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	f003 021c 	and.w	r2, r3, #28
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f202 	lsl.w	r2, r1, r2
 800416e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004196:	bf00      	nop
 8004198:	bf00      	nop
}
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ae:	b2db      	uxtb	r3, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f003 021c 	and.w	r2, r3, #28
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d108      	bne.n	8004200 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041fe:	e007      	b.n	8004210 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	60da      	str	r2, [r3, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422a:	e154      	b.n	80044d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8146 	beq.w	80044d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d005      	beq.n	800425c <HAL_GPIO_Init+0x40>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d130      	bne.n	80042be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004292:	2201      	movs	r2, #1
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 0201 	and.w	r2, r3, #1
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d017      	beq.n	80042fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d123      	bne.n	800434e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	08da      	lsrs	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80a0 	beq.w	80044d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004390:	4b58      	ldr	r3, [pc, #352]	@ (80044f4 <HAL_GPIO_Init+0x2d8>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	4a57      	ldr	r2, [pc, #348]	@ (80044f4 <HAL_GPIO_Init+0x2d8>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6613      	str	r3, [r2, #96]	@ 0x60
 800439c:	4b55      	ldr	r3, [pc, #340]	@ (80044f4 <HAL_GPIO_Init+0x2d8>)
 800439e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043a8:	4a53      	ldr	r2, [pc, #332]	@ (80044f8 <HAL_GPIO_Init+0x2dc>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043d2:	d019      	beq.n	8004408 <HAL_GPIO_Init+0x1ec>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a49      	ldr	r2, [pc, #292]	@ (80044fc <HAL_GPIO_Init+0x2e0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_GPIO_Init+0x1e8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a48      	ldr	r2, [pc, #288]	@ (8004500 <HAL_GPIO_Init+0x2e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00d      	beq.n	8004400 <HAL_GPIO_Init+0x1e4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a47      	ldr	r2, [pc, #284]	@ (8004504 <HAL_GPIO_Init+0x2e8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <HAL_GPIO_Init+0x1e0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a46      	ldr	r2, [pc, #280]	@ (8004508 <HAL_GPIO_Init+0x2ec>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_GPIO_Init+0x1dc>
 80043f4:	2304      	movs	r3, #4
 80043f6:	e008      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 80043f8:	2307      	movs	r3, #7
 80043fa:	e006      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 80043fc:	2303      	movs	r3, #3
 80043fe:	e004      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004400:	2302      	movs	r3, #2
 8004402:	e002      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004408:	2300      	movs	r3, #0
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	f002 0203 	and.w	r2, r2, #3
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	4093      	lsls	r3, r2
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800441a:	4937      	ldr	r1, [pc, #220]	@ (80044f8 <HAL_GPIO_Init+0x2dc>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004428:	4b38      	ldr	r3, [pc, #224]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800444c:	4a2f      	ldr	r2, [pc, #188]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004452:	4b2e      	ldr	r3, [pc, #184]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004476:	4a25      	ldr	r2, [pc, #148]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800447c:	4b23      	ldr	r3, [pc, #140]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a0:	4a1a      	ldr	r2, [pc, #104]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044a6:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ca:	4a10      	ldr	r2, [pc, #64]	@ (800450c <HAL_GPIO_Init+0x2f0>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f aea3 	bne.w	800422c <HAL_GPIO_Init+0x10>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40010000 	.word	0x40010000
 80044fc:	48000400 	.word	0x48000400
 8004500:	48000800 	.word	0x48000800
 8004504:	48000c00 	.word	0x48000c00
 8004508:	48001000 	.word	0x48001000
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
 800454c:	4613      	mov	r3, r2
 800454e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800455c:	e002      	b.n	8004564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e08d      	b.n	800469e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fd1a 	bl	8001fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	@ 0x24
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	e006      	b.n	80045f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d108      	bne.n	8004612 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	e007      	b.n	8004622 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69d9      	ldr	r1, [r3, #28]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00f      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	f043 0208 	orr.w	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004710:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00f      	beq.n	800473c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f043 0202 	orr.w	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 030b 	and.w	r3, r3, #11
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fb82 	bl	8004e58 <I2C_ITError>
  }
}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
 8004790:	4613      	mov	r3, r2
 8004792:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <I2C_Slave_ISR_IT+0x24>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0e1      	b.n	80049c4 <I2C_Slave_ISR_IT+0x1e8>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800481c:	6939      	ldr	r1, [r7, #16]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f9b4 	bl	8004b8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	d04b      	beq.n	80048c6 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004834:	2b00      	cmp	r3, #0
 8004836:	d046      	beq.n	80048c6 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d128      	bne.n	8004894 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b28      	cmp	r3, #40	@ 0x28
 800484c:	d108      	bne.n	8004860 <I2C_Slave_ISR_IT+0x84>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004854:	d104      	bne.n	8004860 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004856:	6939      	ldr	r1, [r7, #16]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 faa9 	bl	8004db0 <I2C_ITListenCplt>
 800485e:	e031      	b.n	80048c4 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b29      	cmp	r3, #41	@ 0x29
 800486a:	d10e      	bne.n	800488a <I2C_Slave_ISR_IT+0xae>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004872:	d00a      	beq.n	800488a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2210      	movs	r2, #16
 800487a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fc02 	bl	8005086 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f926 	bl	8004ad4 <I2C_ITSlaveSeqCplt>
 8004888:	e01c      	b.n	80048c4 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2210      	movs	r2, #16
 8004890:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004892:	e08f      	b.n	80049b4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2210      	movs	r2, #16
 800489a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a0:	f043 0204 	orr.w	r2, r3, #4
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <I2C_Slave_ISR_IT+0xda>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b4:	d17e      	bne.n	80049b4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 facb 	bl	8004e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048c2:	e077      	b.n	80049b4 <I2C_Slave_ISR_IT+0x1d8>
 80048c4:	e076      	b.n	80049b4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02f      	beq.n	8004930 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02a      	beq.n	8004930 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d018      	beq.n	8004916 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d14b      	bne.n	80049b8 <I2C_Slave_ISR_IT+0x1dc>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004926:	d047      	beq.n	80049b8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f8d3 	bl	8004ad4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800492e:	e043      	b.n	80049b8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004944:	6939      	ldr	r1, [r7, #16]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f840 	bl	80049cc <I2C_ITAddrCplt>
 800494c:	e035      	b.n	80049ba <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d030      	beq.n	80049ba <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02b      	beq.n	80049ba <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800499c:	e00d      	b.n	80049ba <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a4:	d002      	beq.n	80049ac <I2C_Slave_ISR_IT+0x1d0>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f891 	bl	8004ad4 <I2C_ITSlaveSeqCplt>
 80049b2:	e002      	b.n	80049ba <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80049b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e2:	2b28      	cmp	r3, #40	@ 0x28
 80049e4:	d16a      	bne.n	8004abc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004a04:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a12:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004a20:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d138      	bne.n	8004a9c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	09db      	lsrs	r3, r3, #7
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	89bb      	ldrh	r3, [r7, #12]
 8004a32:	4053      	eors	r3, r2
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f003 0306 	and.w	r3, r3, #6
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11c      	bne.n	8004a78 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d13b      	bne.n	8004acc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2208      	movs	r2, #8
 8004a60:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a6a:	89ba      	ldrh	r2, [r7, #12]
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fe87 	bl	8004784 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a76:	e029      	b.n	8004acc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a78:	893b      	ldrh	r3, [r7, #8]
 8004a7a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fb42 	bl	800510a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a8e:	89ba      	ldrh	r2, [r7, #12]
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fe75 	bl	8004784 <HAL_I2C_AddrCallback>
}
 8004a9a:	e017      	b.n	8004acc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb32 	bl	800510a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004aae:	89ba      	ldrh	r2, [r7, #12]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fe65 	bl	8004784 <HAL_I2C_AddrCallback>
}
 8004aba:	e007      	b.n	8004acc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e00c      	b.n	8004b22 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b29      	cmp	r3, #41	@ 0x29
 8004b2c:	d112      	bne.n	8004b54 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2228      	movs	r2, #40	@ 0x28
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2221      	movs	r2, #33	@ 0x21
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fae3 	bl	800510a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fe05 	bl	800475c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b52:	e017      	b.n	8004b84 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5e:	d111      	bne.n	8004b84 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2228      	movs	r2, #40	@ 0x28
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2222      	movs	r2, #34	@ 0x22
 8004b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b6e:	2102      	movs	r1, #2
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 faca 	bl	800510a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fdf6 	bl	8004770 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b21      	cmp	r3, #33	@ 0x21
 8004bb6:	d002      	beq.n	8004bbe <I2C_ITSlaveCplt+0x32>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b29      	cmp	r3, #41	@ 0x29
 8004bbc:	d108      	bne.n	8004bd0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bbe:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 faa1 	bl	800510a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2221      	movs	r2, #33	@ 0x21
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bce:	e019      	b.n	8004c04 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b22      	cmp	r3, #34	@ 0x22
 8004bd4:	d002      	beq.n	8004bdc <I2C_ITSlaveCplt+0x50>
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bda:	d108      	bne.n	8004bee <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bdc:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fa92 	bl	800510a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2222      	movs	r2, #34	@ 0x22
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bec:	e00a      	b.n	8004c04 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b28      	cmp	r3, #40	@ 0x28
 8004bf2:	d107      	bne.n	8004c04 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004bf4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa86 	bl	800510a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b62      	ldr	r3, [pc, #392]	@ (8004da8 <I2C_ITSlaveCplt+0x21c>)
 8004c20:	400b      	ands	r3, r1
 8004c22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa2e 	bl	8005086 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01f      	beq.n	8004c8c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c5a:	e017      	b.n	8004c8c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d010      	beq.n	8004d26 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8a4 	bl	8004e58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b28      	cmp	r3, #40	@ 0x28
 8004d1a:	d141      	bne.n	8004da0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f846 	bl	8004db0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d24:	e03c      	b.n	8004da0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d2e:	d014      	beq.n	8004d5a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fecf 	bl	8004ad4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	@ (8004dac <I2C_ITSlaveCplt+0x220>)
 8004d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fd24 	bl	80047a0 <HAL_I2C_ListenCpltCallback>
}
 8004d58:	e022      	b.n	8004da0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b22      	cmp	r3, #34	@ 0x22
 8004d64:	d10e      	bne.n	8004d84 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fcf7 	bl	8004770 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d82:	e00d      	b.n	8004da0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fcde 	bl	800475c <HAL_I2C_SlaveTxCpltCallback>
}
 8004da0:	bf00      	nop
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	fe00e800 	.word	0xfe00e800
 8004dac:	ffff0000 	.word	0xffff0000

08004db0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a25      	ldr	r2, [pc, #148]	@ (8004e54 <I2C_ITListenCplt+0xa4>)
 8004dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d022      	beq.n	8004e2c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e2c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f96a 	bl	800510a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2210      	movs	r2, #16
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fcaa 	bl	80047a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a6d      	ldr	r2, [pc, #436]	@ (800502c <I2C_ITError+0x1d4>)
 8004e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b28      	cmp	r3, #40	@ 0x28
 8004e8e:	d005      	beq.n	8004e9c <I2C_ITError+0x44>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b29      	cmp	r3, #41	@ 0x29
 8004e94:	d002      	beq.n	8004e9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e9a:	d10b      	bne.n	8004eb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f933 	bl	800510a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2228      	movs	r2, #40	@ 0x28
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a60      	ldr	r2, [pc, #384]	@ (8005030 <I2C_ITError+0x1d8>)
 8004eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eb2:	e030      	b.n	8004f16 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eb4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f926 	bl	800510a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8e1 	bl	8005086 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b60      	cmp	r3, #96	@ 0x60
 8004ece:	d01f      	beq.n	8004f10 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d114      	bne.n	8004f10 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d109      	bne.n	8004f08 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f00:	f043 0204 	orr.w	r2, r3, #4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d039      	beq.n	8004f98 <I2C_ITError+0x140>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b11      	cmp	r3, #17
 8004f28:	d002      	beq.n	8004f30 <I2C_ITError+0xd8>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b21      	cmp	r3, #33	@ 0x21
 8004f2e:	d133      	bne.n	8004f98 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f3e:	d107      	bne.n	8004f50 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff f923 	bl	80041a0 <HAL_DMA_GetState>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d017      	beq.n	8004f90 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	4a33      	ldr	r2, [pc, #204]	@ (8005034 <I2C_ITError+0x1dc>)
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff f823 	bl	8003fc0 <HAL_DMA_Abort_IT>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d04d      	beq.n	800501c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f8e:	e045      	b.n	800501c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f851 	bl	8005038 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f96:	e041      	b.n	800501c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d039      	beq.n	8005014 <I2C_ITError+0x1bc>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b12      	cmp	r3, #18
 8004fa4:	d002      	beq.n	8004fac <I2C_ITError+0x154>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b22      	cmp	r3, #34	@ 0x22
 8004faa:	d133      	bne.n	8005014 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fba:	d107      	bne.n	8004fcc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff f8e5 	bl	80041a0 <HAL_DMA_GetState>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d017      	beq.n	800500c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <I2C_ITError+0x1dc>)
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe ffe5 	bl	8003fc0 <HAL_DMA_Abort_IT>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005006:	4610      	mov	r0, r2
 8005008:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800500a:	e009      	b.n	8005020 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f813 	bl	8005038 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005012:	e005      	b.n	8005020 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f80f 	bl	8005038 <I2C_TreatErrorCallback>
  }
}
 800501a:	e002      	b.n	8005022 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005020:	bf00      	nop
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	ffff0000 	.word	0xffff0000
 8005030:	080047dd 	.word	0x080047dd
 8005034:	080050cf 	.word	0x080050cf

08005038 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b60      	cmp	r3, #96	@ 0x60
 800504a:	d10e      	bne.n	800506a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fbb0 	bl	80047c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005068:	e009      	b.n	800507e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fb9b 	bl	80047b4 <HAL_I2C_ErrorCallback>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d103      	bne.n	80050a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2200      	movs	r2, #0
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d007      	beq.n	80050c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699a      	ldr	r2, [r3, #24]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	619a      	str	r2, [r3, #24]
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	2200      	movs	r2, #0
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	2200      	movs	r2, #0
 80050fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff9b 	bl	8005038 <I2C_TreatErrorCallback>
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00f      	beq.n	8005144 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800512a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005138:	2b28      	cmp	r3, #40	@ 0x28
 800513a:	d003      	beq.n	8005144 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005142:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00f      	beq.n	800516e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005154:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005162:	2b28      	cmp	r3, #40	@ 0x28
 8005164:	d003      	beq.n	800516e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800516c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800516e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005172:	2b00      	cmp	r3, #0
 8005174:	da03      	bge.n	800517e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d103      	bne.n	800518c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800518a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	2b20      	cmp	r3, #32
 8005190:	d103      	bne.n	800519a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d103      	bne.n	80051a8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	400a      	ands	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d138      	bne.n	800524e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e032      	b.n	8005250 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	@ 0x24
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005218:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b20      	cmp	r3, #32
 8005270:	d139      	bne.n	80052e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800527c:	2302      	movs	r3, #2
 800527e:	e033      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	@ 0x24
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e08f      	b.n	8005426 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fc ff9d 	bl	8002260 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d004      	beq.n	8005348 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005346:	d103      	bne.n	8005350 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 031e 	bic.w	r3, r3, #30
 800534e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005358:	4293      	cmp	r3, r2
 800535a:	d005      	beq.n	8005368 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005362:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4b31      	ldr	r3, [pc, #196]	@ (8005430 <HAL_LPTIM_Init+0x13c>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005378:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800537e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005384:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800538a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80053a2:	4313      	orrs	r3, r2
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d004      	beq.n	80053bc <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ba:	d107      	bne.n	80053cc <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053c4:	4313      	orrs	r3, r2
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00a      	beq.n	80053ee <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053e0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80053e6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <HAL_LPTIM_Init+0x140>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	621a      	str	r2, [r3, #32]
 8005410:	e004      	b.n	800541c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800541a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	ff19f1fe 	.word	0xff19f1fe
 8005434:	40007c00 	.word	0x40007c00

08005438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800543c:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <HAL_PWREx_GetVoltageRange+0x18>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40007000 	.word	0x40007000

08005454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005462:	d130      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005464:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800546c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005470:	d038      	beq.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005472:	4b20      	ldr	r3, [pc, #128]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800547a:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005482:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2232      	movs	r2, #50	@ 0x32
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	0c9b      	lsrs	r3, r3, #18
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005498:	e002      	b.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3b01      	subs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a0:	4b14      	ldr	r3, [pc, #80]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ac:	d102      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f2      	bne.n	800549a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054b4:	4b0f      	ldr	r3, [pc, #60]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c0:	d110      	bne.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e00f      	b.n	80054e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054c6:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d2:	d007      	beq.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054d4:	4b07      	ldr	r3, [pc, #28]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054dc:	4a05      	ldr	r2, [pc, #20]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40007000 	.word	0x40007000
 80054f8:	20000000 	.word	0x20000000
 80054fc:	431bde83 	.word	0x431bde83

08005500 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f000 bc02 	b.w	8005d18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005514:	4b96      	ldr	r3, [pc, #600]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800551e:	4b94      	ldr	r3, [pc, #592]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80e4 	beq.w	80056fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <HAL_RCC_OscConfig+0x4c>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	f040 808b 	bne.w	800565a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b01      	cmp	r3, #1
 8005548:	f040 8087 	bne.w	800565a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800554c:	4b88      	ldr	r3, [pc, #544]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_OscConfig+0x64>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e3d9      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	4b81      	ldr	r3, [pc, #516]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <HAL_RCC_OscConfig+0x7e>
 8005574:	4b7e      	ldr	r3, [pc, #504]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800557c:	e005      	b.n	800558a <HAL_RCC_OscConfig+0x8a>
 800557e:	4b7c      	ldr	r3, [pc, #496]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558a:	4293      	cmp	r3, r2
 800558c:	d223      	bcs.n	80055d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fdbe 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e3ba      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055a2:	4b73      	ldr	r3, [pc, #460]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a72      	ldr	r2, [pc, #456]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055a8:	f043 0308 	orr.w	r3, r3, #8
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b70      	ldr	r3, [pc, #448]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	496d      	ldr	r1, [pc, #436]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	4968      	ldr	r1, [pc, #416]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	e025      	b.n	8005622 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055d6:	4b66      	ldr	r3, [pc, #408]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a65      	ldr	r2, [pc, #404]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055dc:	f043 0308 	orr.w	r3, r3, #8
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b63      	ldr	r3, [pc, #396]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4960      	ldr	r1, [pc, #384]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	495b      	ldr	r1, [pc, #364]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd7e 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e37a      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005622:	f000 fc81 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b51      	ldr	r3, [pc, #324]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	4950      	ldr	r1, [pc, #320]	@ (8005774 <HAL_RCC_OscConfig+0x274>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	4a4e      	ldr	r2, [pc, #312]	@ (8005778 <HAL_RCC_OscConfig+0x278>)
 8005640:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005642:	4b4e      	ldr	r3, [pc, #312]	@ (800577c <HAL_RCC_OscConfig+0x27c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd f91c 	bl	8002884 <HAL_InitTick>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d052      	beq.n	80056fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	e35e      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d032      	beq.n	80056c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005662:	4b43      	ldr	r3, [pc, #268]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a42      	ldr	r2, [pc, #264]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800566e:	f7fe f971 	bl	8003954 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005676:	f7fe f96d 	bl	8003954 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e347      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005688:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a35      	ldr	r2, [pc, #212]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800569a:	f043 0308 	orr.w	r3, r3, #8
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4930      	ldr	r1, [pc, #192]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	492b      	ldr	r1, [pc, #172]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]
 80056c6:	e01a      	b.n	80056fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056c8:	4b29      	ldr	r3, [pc, #164]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a28      	ldr	r2, [pc, #160]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056d4:	f7fe f93e 	bl	8003954 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056dc:	f7fe f93a 	bl	8003954 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e314      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056ee:	4b20      	ldr	r3, [pc, #128]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x1dc>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d073      	beq.n	80057f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d005      	beq.n	800571c <HAL_RCC_OscConfig+0x21c>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d10e      	bne.n	8005734 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d10b      	bne.n	8005734 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	4b14      	ldr	r3, [pc, #80]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d063      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2f0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d15f      	bne.n	80057f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e2f1      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573c:	d106      	bne.n	800574c <HAL_RCC_OscConfig+0x24c>
 800573e:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a0b      	ldr	r2, [pc, #44]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e025      	b.n	8005798 <HAL_RCC_OscConfig+0x298>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005754:	d114      	bne.n	8005780 <HAL_RCC_OscConfig+0x280>
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a05      	ldr	r2, [pc, #20]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 800575c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b03      	ldr	r3, [pc, #12]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a02      	ldr	r2, [pc, #8]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e013      	b.n	8005798 <HAL_RCC_OscConfig+0x298>
 8005770:	40021000 	.word	0x40021000
 8005774:	08010d04 	.word	0x08010d04
 8005778:	20000000 	.word	0x20000000
 800577c:	20000008 	.word	0x20000008
 8005780:	4ba0      	ldr	r3, [pc, #640]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a9f      	ldr	r2, [pc, #636]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b9d      	ldr	r3, [pc, #628]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a9c      	ldr	r2, [pc, #624]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fe f8d8 	bl	8003954 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fe f8d4 	bl	8003954 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	@ 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e2ae      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ba:	4b92      	ldr	r3, [pc, #584]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2a8>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fe f8c4 	bl	8003954 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fe f8c0 	bl	8003954 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	@ 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e29a      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057e2:	4b88      	ldr	r3, [pc, #544]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x2d0>
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d060      	beq.n	80058c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b04      	cmp	r3, #4
 8005802:	d005      	beq.n	8005810 <HAL_RCC_OscConfig+0x310>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d119      	bne.n	800583e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d116      	bne.n	800583e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005810:	4b7c      	ldr	r3, [pc, #496]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_OscConfig+0x328>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e277      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005828:	4b76      	ldr	r3, [pc, #472]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	4973      	ldr	r1, [pc, #460]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800583c:	e040      	b.n	80058c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d023      	beq.n	800588e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005846:	4b6f      	ldr	r3, [pc, #444]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800584c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fe f87f 	bl	8003954 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fe f87b 	bl	8003954 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e255      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800586c:	4b65      	ldr	r3, [pc, #404]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	4b62      	ldr	r3, [pc, #392]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	495f      	ldr	r1, [pc, #380]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005888:	4313      	orrs	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
 800588c:	e018      	b.n	80058c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588e:	4b5d      	ldr	r3, [pc, #372]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a5c      	ldr	r2, [pc, #368]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fe f85b 	bl	8003954 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fe f857 	bl	8003954 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e231      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058b4:	4b53      	ldr	r3, [pc, #332]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d03c      	beq.n	8005946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01c      	beq.n	800590e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80058d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058da:	4a4a      	ldr	r2, [pc, #296]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe f836 	bl	8003954 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fe f832 	bl	8003954 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e20c      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058fe:	4b41      	ldr	r3, [pc, #260]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ef      	beq.n	80058ec <HAL_RCC_OscConfig+0x3ec>
 800590c:	e01b      	b.n	8005946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005914:	4a3b      	ldr	r2, [pc, #236]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591e:	f7fe f819 	bl	8003954 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005926:	f7fe f815 	bl	8003954 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e1ef      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005938:	4b32      	ldr	r3, [pc, #200]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1ef      	bne.n	8005926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80a6 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005958:	4b2a      	ldr	r3, [pc, #168]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005964:	4b27      	ldr	r3, [pc, #156]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005968:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800596e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005970:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 8005972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597c:	2301      	movs	r3, #1
 800597e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005980:	4b21      	ldr	r3, [pc, #132]	@ (8005a08 <HAL_RCC_OscConfig+0x508>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d118      	bne.n	80059be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800598c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <HAL_RCC_OscConfig+0x508>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <HAL_RCC_OscConfig+0x508>)
 8005992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005998:	f7fd ffdc 	bl	8003954 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a0:	f7fd ffd8 	bl	8003954 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e1b2      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b2:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <HAL_RCC_OscConfig+0x508>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d108      	bne.n	80059d8 <HAL_RCC_OscConfig+0x4d8>
 80059c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059d6:	e029      	b.n	8005a2c <HAL_RCC_OscConfig+0x52c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d115      	bne.n	8005a0c <HAL_RCC_OscConfig+0x50c>
 80059e0:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	4a07      	ldr	r2, [pc, #28]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059f0:	4b04      	ldr	r3, [pc, #16]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f6:	4a03      	ldr	r2, [pc, #12]	@ (8005a04 <HAL_RCC_OscConfig+0x504>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a00:	e014      	b.n	8005a2c <HAL_RCC_OscConfig+0x52c>
 8005a02:	bf00      	nop
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	4a99      	ldr	r2, [pc, #612]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a1c:	4b96      	ldr	r3, [pc, #600]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a22:	4a95      	ldr	r2, [pc, #596]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fd ff8e 	bl	8003954 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3c:	f7fd ff8a 	bl	8003954 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e162      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a52:	4b89      	ldr	r3, [pc, #548]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ed      	beq.n	8005a3c <HAL_RCC_OscConfig+0x53c>
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a62:	f7fd ff77 	bl	8003954 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6a:	f7fd ff73 	bl	8003954 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e14b      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a80:	4b7d      	ldr	r3, [pc, #500]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ed      	bne.n	8005a6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a8e:	7ffb      	ldrb	r3, [r7, #31]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a94:	4b78      	ldr	r3, [pc, #480]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	4a77      	ldr	r2, [pc, #476]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d03c      	beq.n	8005b26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01c      	beq.n	8005aee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ab4:	4b70      	ldr	r3, [pc, #448]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aba:	4a6f      	ldr	r2, [pc, #444]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac4:	f7fd ff46 	bl	8003954 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005acc:	f7fd ff42 	bl	8003954 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e11c      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ade:	4b66      	ldr	r3, [pc, #408]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0ef      	beq.n	8005acc <HAL_RCC_OscConfig+0x5cc>
 8005aec:	e01b      	b.n	8005b26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aee:	4b62      	ldr	r3, [pc, #392]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af4:	4a60      	ldr	r2, [pc, #384]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fd ff29 	bl	8003954 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b06:	f7fd ff25 	bl	8003954 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0ff      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b18:	4b57      	ldr	r3, [pc, #348]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ef      	bne.n	8005b06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80f3 	beq.w	8005d16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	f040 80c9 	bne.w	8005ccc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f003 0203 	and.w	r2, r3, #3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d12c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d123      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d113      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d109      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d06b      	beq.n	8005c80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b0c      	cmp	r3, #12
 8005bac:	d062      	beq.n	8005c74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bae:	4b32      	ldr	r3, [pc, #200]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0ac      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bca:	f7fd fec3 	bl	8003954 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fd febf 	bl	8003954 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e099      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be4:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f0      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bf0:	4b21      	ldr	r3, [pc, #132]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <HAL_RCC_OscConfig+0x77c>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c00:	3a01      	subs	r2, #1
 8005c02:	0112      	lsls	r2, r2, #4
 8005c04:	4311      	orrs	r1, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c0a:	0212      	lsls	r2, r2, #8
 8005c0c:	4311      	orrs	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c12:	0852      	lsrs	r2, r2, #1
 8005c14:	3a01      	subs	r2, #1
 8005c16:	0552      	lsls	r2, r2, #21
 8005c18:	4311      	orrs	r1, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c1e:	0852      	lsrs	r2, r2, #1
 8005c20:	3a01      	subs	r2, #1
 8005c22:	0652      	lsls	r2, r2, #25
 8005c24:	4311      	orrs	r1, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c2a:	06d2      	lsls	r2, r2, #27
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	4912      	ldr	r1, [pc, #72]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c34:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0f      	ldr	r2, [pc, #60]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c40:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a0c      	ldr	r2, [pc, #48]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c4c:	f7fd fe82 	bl	8003954 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fd fe7e 	bl	8003954 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e058      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c66:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <HAL_RCC_OscConfig+0x778>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c72:	e050      	b.n	8005d16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04f      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c80:	4b27      	ldr	r3, [pc, #156]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d144      	bne.n	8005d16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c8c:	4b24      	ldr	r3, [pc, #144]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a23      	ldr	r2, [pc, #140]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c98:	4b21      	ldr	r3, [pc, #132]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a20      	ldr	r2, [pc, #128]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ca4:	f7fd fe56 	bl	8003954 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cac:	f7fd fe52 	bl	8003954 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e02c      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cbe:	4b18      	ldr	r3, [pc, #96]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x7ac>
 8005cca:	e024      	b.n	8005d16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	d01f      	beq.n	8005d12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b13      	ldr	r3, [pc, #76]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a12      	ldr	r2, [pc, #72]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005cd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fd fe39 	bl	8003954 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fd fe35 	bl	8003954 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e00f      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf8:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	4905      	ldr	r1, [pc, #20]	@ (8005d20 <HAL_RCC_OscConfig+0x820>)
 8005d0a:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <HAL_RCC_OscConfig+0x824>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60cb      	str	r3, [r1, #12]
 8005d10:	e001      	b.n	8005d16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40021000 	.word	0x40021000
 8005d24:	feeefffc 	.word	0xfeeefffc

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0e7      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b75      	ldr	r3, [pc, #468]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d910      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b72      	ldr	r3, [pc, #456]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4970      	ldr	r1, [pc, #448]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0cf      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	4b66      	ldr	r3, [pc, #408]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d908      	bls.n	8005d9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d88:	4b63      	ldr	r3, [pc, #396]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4960      	ldr	r1, [pc, #384]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04c      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dae:	4b5a      	ldr	r3, [pc, #360]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d121      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0a6      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc6:	4b54      	ldr	r3, [pc, #336]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d115      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e09a      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d107      	bne.n	8005dee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dde:	4b4e      	ldr	r3, [pc, #312]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e08e      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dee:	4b4a      	ldr	r3, [pc, #296]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e086      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dfe:	4b46      	ldr	r3, [pc, #280]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4943      	ldr	r1, [pc, #268]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e10:	f7fd fda0 	bl	8003954 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	e00a      	b.n	8005e2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e18:	f7fd fd9c 	bl	8003954 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e06e      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 020c 	and.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1eb      	bne.n	8005e18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d208      	bcs.n	8005e6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	492b      	ldr	r1, [pc, #172]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e6e:	4b29      	ldr	r3, [pc, #164]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d210      	bcs.n	8005e9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 0207 	bic.w	r2, r3, #7
 8005e84:	4923      	ldr	r1, [pc, #140]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8c:	4b21      	ldr	r3, [pc, #132]	@ (8005f14 <HAL_RCC_ClockConfig+0x1ec>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d001      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e036      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	4918      	ldr	r1, [pc, #96]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ec8:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	4910      	ldr	r1, [pc, #64]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005edc:	f000 f824 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	490b      	ldr	r1, [pc, #44]	@ (8005f1c <HAL_RCC_ClockConfig+0x1f4>)
 8005eee:	5ccb      	ldrb	r3, [r1, r3]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <HAL_RCC_ClockConfig+0x1f8>)
 8005efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005efc:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <HAL_RCC_ClockConfig+0x1fc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fc fcbf 	bl	8002884 <HAL_InitTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40022000 	.word	0x40022000
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	08010d04 	.word	0x08010d04
 8005f20:	20000000 	.word	0x20000000
 8005f24:	20000008 	.word	0x20000008

08005f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	@ 0x24
 8005f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f36:	4b3e      	ldr	r3, [pc, #248]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f40:	4b3b      	ldr	r3, [pc, #236]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x34>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d121      	bne.n	8005f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11e      	bne.n	8005f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f5c:	4b34      	ldr	r3, [pc, #208]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d107      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f68:	4b31      	ldr	r3, [pc, #196]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e005      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f78:	4b2d      	ldr	r3, [pc, #180]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f84:	4a2b      	ldr	r2, [pc, #172]	@ (8006034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10d      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d102      	bne.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fa0:	4b25      	ldr	r3, [pc, #148]	@ (8006038 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fac:	4b23      	ldr	r3, [pc, #140]	@ (800603c <HAL_RCC_GetSysClockFreq+0x114>)
 8005fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d134      	bne.n	8006020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d003      	beq.n	8005fce <HAL_RCC_GetSysClockFreq+0xa6>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d003      	beq.n	8005fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8005fcc:	e005      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fce:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fd0:	617b      	str	r3, [r7, #20]
      break;
 8005fd2:	e005      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fd4:	4b19      	ldr	r3, [pc, #100]	@ (800603c <HAL_RCC_GetSysClockFreq+0x114>)
 8005fd6:	617b      	str	r3, [r7, #20]
      break;
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	617b      	str	r3, [r7, #20]
      break;
 8005fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fe0:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	3301      	adds	r3, #1
 8005fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fee:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	fb03 f202 	mul.w	r2, r3, r2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006006:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x108>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	0e5b      	lsrs	r3, r3, #25
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	3301      	adds	r3, #1
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006020:	69bb      	ldr	r3, [r7, #24]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3724      	adds	r7, #36	@ 0x24
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	08010d1c 	.word	0x08010d1c
 8006038:	00f42400 	.word	0x00f42400
 800603c:	007a1200 	.word	0x007a1200

08006040 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006044:	4b03      	ldr	r3, [pc, #12]	@ (8006054 <HAL_RCC_GetHCLKFreq+0x14>)
 8006046:	681b      	ldr	r3, [r3, #0]
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000000 	.word	0x20000000

08006058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800605c:	f7ff fff0 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4904      	ldr	r1, [pc, #16]	@ (8006080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000
 8006080:	08010d14 	.word	0x08010d14

08006084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006088:	f7ff ffda 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	0adb      	lsrs	r3, r3, #11
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4904      	ldr	r1, [pc, #16]	@ (80060ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40021000 	.word	0x40021000
 80060ac:	08010d14 	.word	0x08010d14

080060b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	220f      	movs	r2, #15
 80060be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80060c0:	4b12      	ldr	r3, [pc, #72]	@ (800610c <HAL_RCC_GetClockConfig+0x5c>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0203 	and.w	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80060cc:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <HAL_RCC_GetClockConfig+0x5c>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80060d8:	4b0c      	ldr	r3, [pc, #48]	@ (800610c <HAL_RCC_GetClockConfig+0x5c>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80060e4:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCC_GetClockConfig+0x5c>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80060f2:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <HAL_RCC_GetClockConfig+0x60>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0207 	and.w	r2, r3, #7
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	601a      	str	r2, [r3, #0]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40021000 	.word	0x40021000
 8006110:	40022000 	.word	0x40022000

08006114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006120:	4b2a      	ldr	r3, [pc, #168]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800612c:	f7ff f984 	bl	8005438 <HAL_PWREx_GetVoltageRange>
 8006130:	6178      	str	r0, [r7, #20]
 8006132:	e014      	b.n	800615e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006134:	4b25      	ldr	r3, [pc, #148]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006138:	4a24      	ldr	r2, [pc, #144]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006140:	4b22      	ldr	r3, [pc, #136]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800614c:	f7ff f974 	bl	8005438 <HAL_PWREx_GetVoltageRange>
 8006150:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006152:	4b1e      	ldr	r3, [pc, #120]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006156:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800615c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006164:	d10b      	bne.n	800617e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b80      	cmp	r3, #128	@ 0x80
 800616a:	d919      	bls.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006170:	d902      	bls.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006172:	2302      	movs	r3, #2
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	e013      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006178:	2301      	movs	r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e010      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b80      	cmp	r3, #128	@ 0x80
 8006182:	d902      	bls.n	800618a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006184:	2303      	movs	r3, #3
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e00a      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d102      	bne.n	8006196 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006190:	2302      	movs	r3, #2
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e004      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b70      	cmp	r3, #112	@ 0x70
 800619a:	d101      	bne.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800619c:	2301      	movs	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f023 0207 	bic.w	r2, r3, #7
 80061a8:	4909      	ldr	r1, [pc, #36]	@ (80061d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d001      	beq.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	40022000 	.word	0x40022000

080061d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061dc:	2300      	movs	r3, #0
 80061de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e0:	2300      	movs	r3, #0
 80061e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d031      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061f8:	d01a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061fe:	d814      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006208:	d10f      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800620a:	4b5d      	ldr	r3, [pc, #372]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	4a5c      	ldr	r2, [pc, #368]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006214:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006216:	e00c      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fe86 	bl	8006f30 <RCCEx_PLLSAI1_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	74fb      	strb	r3, [r7, #19]
      break;
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006232:	7cfb      	ldrb	r3, [r7, #19]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006238:	4b51      	ldr	r3, [pc, #324]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	494e      	ldr	r1, [pc, #312]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800624e:	e001      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	7cfb      	ldrb	r3, [r7, #19]
 8006252:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 809e 	beq.w	800639e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006262:	2300      	movs	r3, #0
 8006264:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006266:	4b46      	ldr	r3, [pc, #280]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800627c:	4b40      	ldr	r3, [pc, #256]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006280:	4a3f      	ldr	r2, [pc, #252]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006286:	6593      	str	r3, [r2, #88]	@ 0x58
 8006288:	4b3d      	ldr	r3, [pc, #244]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800628a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006294:	2301      	movs	r3, #1
 8006296:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006298:	4b3a      	ldr	r3, [pc, #232]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a39      	ldr	r2, [pc, #228]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800629e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a4:	f7fd fb56 	bl	8003954 <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062aa:	e009      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ac:	f7fd fb52 	bl	8003954 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d902      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	74fb      	strb	r3, [r7, #19]
        break;
 80062be:	e005      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062c0:	4b30      	ldr	r3, [pc, #192]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ef      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d15a      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d019      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ee:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062fa:	4b21      	ldr	r3, [pc, #132]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006300:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006310:	4a1b      	ldr	r2, [pc, #108]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006316:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800631a:	4a19      	ldr	r2, [pc, #100]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d016      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fd fb12 	bl	8003954 <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	e00b      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fd fb0e 	bl	8003954 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d902      	bls.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	74fb      	strb	r3, [r7, #19]
            break;
 800634a:	e006      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634c:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0ec      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800635a:	7cfb      	ldrb	r3, [r7, #19]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	4904      	ldr	r1, [pc, #16]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006376:	e009      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006378:	7cfb      	ldrb	r3, [r7, #19]
 800637a:	74bb      	strb	r3, [r7, #18]
 800637c:	e006      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800637e:	bf00      	nop
 8006380:	40021000 	.word	0x40021000
 8006384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800638c:	7c7b      	ldrb	r3, [r7, #17]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006392:	4b9b      	ldr	r3, [pc, #620]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	4a9a      	ldr	r2, [pc, #616]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800639c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063aa:	4b95      	ldr	r3, [pc, #596]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f023 0203 	bic.w	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4991      	ldr	r1, [pc, #580]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f023 020c 	bic.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	4989      	ldr	r1, [pc, #548]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ee:	4b84      	ldr	r3, [pc, #528]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	4980      	ldr	r1, [pc, #512]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006410:	4b7b      	ldr	r3, [pc, #492]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4978      	ldr	r1, [pc, #480]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006432:	4b73      	ldr	r3, [pc, #460]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006438:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	496f      	ldr	r1, [pc, #444]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006454:	4b6a      	ldr	r3, [pc, #424]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	4967      	ldr	r1, [pc, #412]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006476:	4b62      	ldr	r3, [pc, #392]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	495e      	ldr	r1, [pc, #376]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006498:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a6:	4956      	ldr	r1, [pc, #344]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ba:	4b51      	ldr	r3, [pc, #324]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	494d      	ldr	r1, [pc, #308]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d028      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064dc:	4b48      	ldr	r3, [pc, #288]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ea:	4945      	ldr	r1, [pc, #276]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064fa:	d106      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064fc:	4b40      	ldr	r3, [pc, #256]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a3f      	ldr	r2, [pc, #252]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006506:	60d3      	str	r3, [r2, #12]
 8006508:	e011      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006512:	d10c      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fd08 	bl	8006f30 <RCCEx_PLLSAI1_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006524:	7cfb      	ldrb	r3, [r7, #19]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d028      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800653a:	4b31      	ldr	r3, [pc, #196]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006540:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006548:	492d      	ldr	r1, [pc, #180]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006558:	d106      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800655a:	4b29      	ldr	r3, [pc, #164]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	4a28      	ldr	r2, [pc, #160]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006564:	60d3      	str	r3, [r2, #12]
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006570:	d10c      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	2101      	movs	r1, #1
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fcd9 	bl	8006f30 <RCCEx_PLLSAI1_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006588:	7cfb      	ldrb	r3, [r7, #19]
 800658a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01c      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006598:	4b19      	ldr	r3, [pc, #100]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a6:	4916      	ldr	r1, [pc, #88]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b6:	d10c      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	2102      	movs	r1, #2
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fcb6 	bl	8006f30 <RCCEx_PLLSAI1_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80065ce:	7cfb      	ldrb	r3, [r7, #19]
 80065d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065de:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ec:	4904      	ldr	r1, [pc, #16]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000

08006604 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006616:	d13e      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006618:	4bb0      	ldr	r3, [pc, #704]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006622:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800662a:	d028      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006632:	f200 846b 	bhi.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663c:	d005      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006644:	d00e      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006646:	f000 bc61 	b.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800664a:	4ba4      	ldr	r3, [pc, #656]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	f040 845b 	bne.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        frequency = LSE_VALUE;
 800665a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665e:	61fb      	str	r3, [r7, #28]
      break;
 8006660:	f000 bc56 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006664:	4b9d      	ldr	r3, [pc, #628]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b02      	cmp	r3, #2
 8006670:	f040 8450 	bne.w	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          frequency = LSI_VALUE;
 8006674:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006678:	61fb      	str	r3, [r7, #28]
      break;
 800667a:	f000 bc4b 	b.w	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800667e:	4b97      	ldr	r3, [pc, #604]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800668a:	f040 8445 	bne.w	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        frequency = HSE_VALUE / 32U;
 800668e:	4b94      	ldr	r3, [pc, #592]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006690:	61fb      	str	r3, [r7, #28]
      break;
 8006692:	f000 bc41 	b.w	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006696:	4b91      	ldr	r3, [pc, #580]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d036      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d840      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d020      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80066b8:	e039      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066ba:	4b88      	ldr	r3, [pc, #544]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d116      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066c6:	4b85      	ldr	r3, [pc, #532]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80066d2:	4b82      	ldr	r3, [pc, #520]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	e005      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80066de:	4b7f      	ldr	r3, [pc, #508]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	4a7e      	ldr	r2, [pc, #504]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80066f2:	e01f      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
      break;
 80066f8:	e01c      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fa:	4b78      	ldr	r3, [pc, #480]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006706:	d102      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006708:	4b77      	ldr	r3, [pc, #476]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800670a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800670c:	e012      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
      break;
 8006712:	e00f      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006714:	4b71      	ldr	r3, [pc, #452]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006720:	d102      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006722:	4b72      	ldr	r3, [pc, #456]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006724:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006726:	e005      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
      break;
 800672c:	e002      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
      break;
 8006732:	bf00      	nop
    }

    switch(PeriphClk)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800673a:	f000 80ad 	beq.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006744:	f200 83ea 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800674e:	f000 80a3 	beq.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006758:	f200 83e0 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006762:	f000 83b6 	beq.w	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800676c:	f200 83d6 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006776:	f000 824e 	beq.w	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006780:	f200 83cc 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800678a:	d07e      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006792:	f200 83c3 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800679c:	f000 834f 	beq.w	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a6:	f200 83b9 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067b0:	f000 82f7 	beq.w	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ba:	f200 83af 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c4:	f000 82c1 	beq.w	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ce:	f200 83a5 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b80      	cmp	r3, #128	@ 0x80
 80067d6:	f000 828c 	beq.w	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b80      	cmp	r3, #128	@ 0x80
 80067de:	f200 839d 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d84b      	bhi.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8396 	beq.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	2b1f      	cmp	r3, #31
 80067f6:	f200 8391 	bhi.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80067fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006a07 	.word	0x08006a07
 8006804:	08006a77 	.word	0x08006a77
 8006808:	08006f1d 	.word	0x08006f1d
 800680c:	08006b0b 	.word	0x08006b0b
 8006810:	08006f1d 	.word	0x08006f1d
 8006814:	08006f1d 	.word	0x08006f1d
 8006818:	08006f1d 	.word	0x08006f1d
 800681c:	08006f1d 	.word	0x08006f1d
 8006820:	08006f1d 	.word	0x08006f1d
 8006824:	08006f1d 	.word	0x08006f1d
 8006828:	08006f1d 	.word	0x08006f1d
 800682c:	08006f1d 	.word	0x08006f1d
 8006830:	08006f1d 	.word	0x08006f1d
 8006834:	08006f1d 	.word	0x08006f1d
 8006838:	08006f1d 	.word	0x08006f1d
 800683c:	08006f1d 	.word	0x08006f1d
 8006840:	08006f1d 	.word	0x08006f1d
 8006844:	08006f1d 	.word	0x08006f1d
 8006848:	08006f1d 	.word	0x08006f1d
 800684c:	08006f1d 	.word	0x08006f1d
 8006850:	08006f1d 	.word	0x08006f1d
 8006854:	08006f1d 	.word	0x08006f1d
 8006858:	08006f1d 	.word	0x08006f1d
 800685c:	08006f1d 	.word	0x08006f1d
 8006860:	08006f1d 	.word	0x08006f1d
 8006864:	08006f1d 	.word	0x08006f1d
 8006868:	08006f1d 	.word	0x08006f1d
 800686c:	08006f1d 	.word	0x08006f1d
 8006870:	08006f1d 	.word	0x08006f1d
 8006874:	08006f1d 	.word	0x08006f1d
 8006878:	08006f1d 	.word	0x08006f1d
 800687c:	08006b95 	.word	0x08006b95
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	f000 8209 	beq.w	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006888:	e348      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800688a:	69b9      	ldr	r1, [r7, #24]
 800688c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006890:	f000 fc40 	bl	8007114 <RCCEx_GetSAIxPeriphCLKFreq>
 8006894:	61f8      	str	r0, [r7, #28]
      break;
 8006896:	e342      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006898:	4b10      	ldr	r3, [pc, #64]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068aa:	d021      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068b2:	f200 809e 	bhi.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068bc:	d035      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c4:	f200 8095 	bhi.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8087 	beq.w	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068d6:	d055      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          break;
 80068d8:	e08b      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000
 80068e0:	0003d090 	.word	0x0003d090
 80068e4:	08010d1c 	.word	0x08010d1c
 80068e8:	00f42400 	.word	0x00f42400
 80068ec:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068f0:	4ba4      	ldr	r3, [pc, #656]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d17c      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006908:	4b9e      	ldr	r3, [pc, #632]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	e005      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8006914:	4b9b      	ldr	r3, [pc, #620]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	4a99      	ldr	r2, [pc, #612]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006926:	61fb      	str	r3, [r7, #28]
          break;
 8006928:	e065      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800692a:	4b96      	ldr	r3, [pc, #600]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006936:	d160      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006938:	4b92      	ldr	r3, [pc, #584]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006940:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006944:	d159      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006946:	4b8f      	ldr	r3, [pc, #572]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006950:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	fb03 f202 	mul.w	r2, r3, r2
 800695a:	4b8a      	ldr	r3, [pc, #552]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	3301      	adds	r3, #1
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800696c:	4b85      	ldr	r3, [pc, #532]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	0d5b      	lsrs	r3, r3, #21
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	3301      	adds	r3, #1
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	61fb      	str	r3, [r7, #28]
          break;
 8006982:	e03a      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006984:	4b7f      	ldr	r3, [pc, #508]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800698c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006990:	d135      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006992:	4b7c      	ldr	r3, [pc, #496]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699e:	d12e      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069a0:	4b78      	ldr	r3, [pc, #480]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069aa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	fb03 f202 	mul.w	r2, r3, r2
 80069b4:	4b73      	ldr	r3, [pc, #460]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	3301      	adds	r3, #1
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80069c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	0d5b      	lsrs	r3, r3, #21
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	3301      	adds	r3, #1
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	61fb      	str	r3, [r7, #28]
          break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80069de:	4b69      	ldr	r3, [pc, #420]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80069e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d10a      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            frequency = HSI48_VALUE;
 80069ec:	4b67      	ldr	r3, [pc, #412]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069ee:	61fb      	str	r3, [r7, #28]
          break;
 80069f0:	e007      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
          break;
 80069f2:	bf00      	nop
 80069f4:	e293      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80069f6:	bf00      	nop
 80069f8:	e291      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80069fa:	bf00      	nop
 80069fc:	e28f      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80069fe:	bf00      	nop
 8006a00:	e28d      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006a02:	bf00      	nop
        break;
 8006a04:	e28b      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a06:	4b5f      	ldr	r3, [pc, #380]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d828      	bhi.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006a18:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a39 	.word	0x08006a39
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a55 	.word	0x08006a55
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7ff fb28 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 8006a34:	61f8      	str	r0, [r7, #28]
          break;
 8006a36:	e01d      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a38:	f7ff fa76 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006a3c:	61f8      	str	r0, [r7, #28]
          break;
 8006a3e:	e019      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a40:	4b50      	ldr	r3, [pc, #320]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a4c:	d10f      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 8006a4e:	4b50      	ldr	r3, [pc, #320]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a50:	61fb      	str	r3, [r7, #28]
          break;
 8006a52:	e00c      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a54:	4b4b      	ldr	r3, [pc, #300]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d107      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a66:	61fb      	str	r3, [r7, #28]
          break;
 8006a68:	e003      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 8006a6a:	bf00      	nop
 8006a6c:	e257      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006a6e:	bf00      	nop
 8006a70:	e255      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006a72:	bf00      	nop
        break;
 8006a74:	e253      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a76:	4b43      	ldr	r3, [pc, #268]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d83a      	bhi.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006a88:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006aff 	.word	0x08006aff
 8006a98:	08006aff 	.word	0x08006aff
 8006a9c:	08006aff 	.word	0x08006aff
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006aff 	.word	0x08006aff
 8006aa8:	08006aff 	.word	0x08006aff
 8006aac:	08006aff 	.word	0x08006aff
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006aff 	.word	0x08006aff
 8006ab8:	08006aff 	.word	0x08006aff
 8006abc:	08006aff 	.word	0x08006aff
 8006ac0:	08006ae9 	.word	0x08006ae9
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ac4:	f7ff fac8 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006ac8:	61f8      	str	r0, [r7, #28]
          break;
 8006aca:	e01d      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = HAL_RCC_GetSysClockFreq();
 8006acc:	f7ff fa2c 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006ad0:	61f8      	str	r0, [r7, #28]
          break;
 8006ad2:	e019      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae0:	d10f      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = HSI_VALUE;
 8006ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ae4:	61fb      	str	r3, [r7, #28]
          break;
 8006ae6:	e00c      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ae8:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d107      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afa:	61fb      	str	r3, [r7, #28]
          break;
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          break;
 8006afe:	bf00      	nop
 8006b00:	e20d      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006b02:	bf00      	nop
 8006b04:	e20b      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006b06:	bf00      	nop
        break;
 8006b08:	e209      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b30      	cmp	r3, #48	@ 0x30
 8006b1a:	d021      	beq.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b30      	cmp	r3, #48	@ 0x30
 8006b20:	d829      	bhi.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d011      	beq.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d823      	bhi.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d004      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 8006b3a:	e01c      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b3c:	f7ff fa8c 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006b40:	61f8      	str	r0, [r7, #28]
          break;
 8006b42:	e01d      	b.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b44:	f7ff f9f0 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006b48:	61f8      	str	r0, [r7, #28]
          break;
 8006b4a:	e019      	b.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b58:	d10f      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = HSI_VALUE;
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b5c:	61fb      	str	r3, [r7, #28]
          break;
 8006b5e:	e00c      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b60:	4b08      	ldr	r3, [pc, #32]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
            frequency = LSE_VALUE;
 8006b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b72:	61fb      	str	r3, [r7, #28]
          break;
 8006b74:	e003      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
          break;
 8006b76:	bf00      	nop
 8006b78:	e1d1      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006b7a:	bf00      	nop
 8006b7c:	e1cf      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006b7e:	bf00      	nop
        break;
 8006b80:	e1cd      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8006b82:	bf00      	nop
 8006b84:	40021000 	.word	0x40021000
 8006b88:	08010d1c 	.word	0x08010d1c
 8006b8c:	02dc6c00 	.word	0x02dc6c00
 8006b90:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b94:	4b99      	ldr	r3, [pc, #612]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ba6:	d025      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bae:	d82c      	bhi.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bbe:	d824      	bhi.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bcc:	d004      	beq.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          break;
 8006bce:	e01c      	b.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7ff fa42 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
          break;
 8006bd6:	e01d      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bd8:	f7ff f9a6 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006bdc:	61f8      	str	r0, [r7, #28]
          break;
 8006bde:	e019      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006be0:	4b86      	ldr	r3, [pc, #536]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bec:	d10f      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8006bee:	4b84      	ldr	r3, [pc, #528]	@ (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006bf0:	61fb      	str	r3, [r7, #28]
          break;
 8006bf2:	e00c      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bf4:	4b81      	ldr	r3, [pc, #516]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d107      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 8006c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c06:	61fb      	str	r3, [r7, #28]
          break;
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 8006c0a:	bf00      	nop
 8006c0c:	e187      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006c0e:	bf00      	nop
 8006c10:	e185      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006c12:	bf00      	nop
        break;
 8006c14:	e183      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c16:	4b79      	ldr	r3, [pc, #484]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c28:	d007      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c30:	d12f      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c32:	f7ff f979 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006c36:	61f8      	str	r0, [r7, #28]
          break;
 8006c38:	e02e      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006c3a:	4b70      	ldr	r3, [pc, #448]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c46:	d126      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006c48:	4b6c      	ldr	r3, [pc, #432]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006c54:	4b69      	ldr	r3, [pc, #420]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	fb03 f202 	mul.w	r2, r3, r2
 8006c68:	4b64      	ldr	r3, [pc, #400]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	3301      	adds	r3, #1
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006c7a:	4b60      	ldr	r3, [pc, #384]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	0e5b      	lsrs	r3, r3, #25
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	3301      	adds	r3, #1
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	61fb      	str	r3, [r7, #28]
          break;
 8006c90:	e001      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          break;
 8006c92:	bf00      	nop
 8006c94:	e143      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006c96:	bf00      	nop
        break;
 8006c98:	e141      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c9a:	4b58      	ldr	r3, [pc, #352]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cac:	d013      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb4:	d819      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d004      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          break;
 8006cc4:	e011      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7ff f9c7 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006cca:	61f8      	str	r0, [r7, #28]
          break;
 8006ccc:	e010      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cce:	f7ff f92b 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006cd2:	61f8      	str	r0, [r7, #28]
          break;
 8006cd4:	e00c      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cd6:	4b49      	ldr	r3, [pc, #292]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce2:	d104      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            frequency = HSI_VALUE;
 8006ce4:	4b46      	ldr	r3, [pc, #280]	@ (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006ce6:	61fb      	str	r3, [r7, #28]
          break;
 8006ce8:	e001      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          break;
 8006cea:	bf00      	nop
 8006cec:	e117      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006cee:	bf00      	nop
        break;
 8006cf0:	e115      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006cf2:	4b42      	ldr	r3, [pc, #264]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d04:	d013      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d0c:	d819      	bhi.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d1a:	d004      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8006d1c:	e011      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d1e:	f7ff f99b 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006d22:	61f8      	str	r0, [r7, #28]
          break;
 8006d24:	e010      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d26:	f7ff f8ff 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006d2a:	61f8      	str	r0, [r7, #28]
          break;
 8006d2c:	e00c      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d2e:	4b33      	ldr	r3, [pc, #204]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3a:	d104      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            frequency = HSI_VALUE;
 8006d3c:	4b30      	ldr	r3, [pc, #192]	@ (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006d3e:	61fb      	str	r3, [r7, #28]
          break;
 8006d40:	e001      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          break;
 8006d42:	bf00      	nop
 8006d44:	e0eb      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006d46:	bf00      	nop
        break;
 8006d48:	e0e9      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d5c:	d013      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d64:	d819      	bhi.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d72:	d004      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8006d74:	e011      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d76:	f7ff f96f 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006d7a:	61f8      	str	r0, [r7, #28]
          break;
 8006d7c:	e010      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7ff f8d3 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8006d82:	61f8      	str	r0, [r7, #28]
          break;
 8006d84:	e00c      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d86:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d92:	d104      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8006d94:	4b1a      	ldr	r3, [pc, #104]	@ (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006d96:	61fb      	str	r3, [r7, #28]
          break;
 8006d98:	e001      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          break;
 8006d9a:	bf00      	nop
 8006d9c:	e0bf      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006d9e:	bf00      	nop
        break;
 8006da0:	e0bd      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006da2:	4b16      	ldr	r3, [pc, #88]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006db4:	d030      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dbc:	d837      	bhi.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006dc4:	d01e      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006dcc:	d82f      	bhi.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          break;
 8006ddc:	e027      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dde:	f7ff f93b 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006de2:	61f8      	str	r0, [r7, #28]
          break;
 8006de4:	e02a      	b.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006de6:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d11e      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
              frequency = LSI_VALUE;
 8006df4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006df8:	61fb      	str	r3, [r7, #28]
          break;
 8006dfa:	e01a      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e04:	4b48      	ldr	r3, [pc, #288]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e10:	d111      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = HSI_VALUE;
 8006e12:	4b46      	ldr	r3, [pc, #280]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006e14:	61fb      	str	r3, [r7, #28]
          break;
 8006e16:	e00e      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e18:	4b43      	ldr	r3, [pc, #268]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d109      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
            frequency = LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e2a:	61fb      	str	r3, [r7, #28]
          break;
 8006e2c:	e005      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 8006e2e:	bf00      	nop
 8006e30:	e075      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006e32:	bf00      	nop
 8006e34:	e073      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006e36:	bf00      	nop
 8006e38:	e071      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006e3a:	bf00      	nop
        break;
 8006e3c:	e06f      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e50:	d02c      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e58:	d833      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e60:	d01a      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e68:	d82b      	bhi.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          break;
 8006e78:	e023      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e7a:	f7ff f8ed 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006e7e:	61f8      	str	r0, [r7, #28]
          break;
 8006e80:	e026      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006e82:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d11a      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
              frequency = LSI_VALUE;
 8006e90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e94:	61fb      	str	r3, [r7, #28]
          break;
 8006e96:	e016      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e98:	4b23      	ldr	r3, [pc, #140]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea4:	d111      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = HSI_VALUE;
 8006ea6:	4b21      	ldr	r3, [pc, #132]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006ea8:	61fb      	str	r3, [r7, #28]
          break;
 8006eaa:	e00e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006eac:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d109      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
            frequency = LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ebe:	61fb      	str	r3, [r7, #28]
          break;
 8006ec0:	e005      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8006ec2:	bf00      	nop
 8006ec4:	e02b      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006ec6:	bf00      	nop
 8006ec8:	e029      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006eca:	bf00      	nop
 8006ecc:	e027      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8006ece:	bf00      	nop
        break;
 8006ed0:	e025      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006ed2:	4b15      	ldr	r3, [pc, #84]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d004      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 8006eec:	e00d      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eee:	f7ff f8b3 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006ef2:	61f8      	str	r0, [r7, #28]
          break;
 8006ef4:	e009      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f02:	d101      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
            frequency = HSI_VALUE;
 8006f04:	4b09      	ldr	r3, [pc, #36]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006f06:	61fb      	str	r3, [r7, #28]
          break;
 8006f08:	bf00      	nop
        break;
 8006f0a:	e008      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 8006f1c:	bf00      	nop
    }
  }

  return(frequency);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	00f42400 	.word	0x00f42400

08006f30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f3e:	4b74      	ldr	r3, [pc, #464]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f4a:	4b71      	ldr	r3, [pc, #452]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 0203 	and.w	r2, r3, #3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d10d      	bne.n	8006f76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f62:	4b6b      	ldr	r3, [pc, #428]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
       ||
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d047      	beq.n	8007006 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
 8006f7a:	e044      	b.n	8007006 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d018      	beq.n	8006fb6 <RCCEx_PLLSAI1_Config+0x86>
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d825      	bhi.n	8006fd4 <RCCEx_PLLSAI1_Config+0xa4>
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d002      	beq.n	8006f92 <RCCEx_PLLSAI1_Config+0x62>
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d009      	beq.n	8006fa4 <RCCEx_PLLSAI1_Config+0x74>
 8006f90:	e020      	b.n	8006fd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f92:	4b5f      	ldr	r3, [pc, #380]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11d      	bne.n	8006fda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fa2:	e01a      	b.n	8006fda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d116      	bne.n	8006fde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fb4:	e013      	b.n	8006fde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fb6:	4b56      	ldr	r3, [pc, #344]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fc2:	4b53      	ldr	r3, [pc, #332]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fd2:	e006      	b.n	8006fe2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd8:	e004      	b.n	8006fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fea:	4b49      	ldr	r3, [pc, #292]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	430b      	orrs	r3, r1
 8007000:	4943      	ldr	r1, [pc, #268]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007002:	4313      	orrs	r3, r2
 8007004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d17c      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800700c:	4b40      	ldr	r3, [pc, #256]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a3f      	ldr	r2, [pc, #252]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007012:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007018:	f7fc fc9c 	bl	8003954 <HAL_GetTick>
 800701c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800701e:	e009      	b.n	8007034 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007020:	f7fc fc98 	bl	8003954 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d902      	bls.n	8007034 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	73fb      	strb	r3, [r7, #15]
        break;
 8007032:	e005      	b.n	8007040 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007034:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ef      	bne.n	8007020 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d15f      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d110      	bne.n	800706e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800704c:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007054:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6892      	ldr	r2, [r2, #8]
 800705c:	0211      	lsls	r1, r2, #8
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68d2      	ldr	r2, [r2, #12]
 8007062:	06d2      	lsls	r2, r2, #27
 8007064:	430a      	orrs	r2, r1
 8007066:	492a      	ldr	r1, [pc, #168]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007068:	4313      	orrs	r3, r2
 800706a:	610b      	str	r3, [r1, #16]
 800706c:	e027      	b.n	80070be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d112      	bne.n	800709a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007074:	4b26      	ldr	r3, [pc, #152]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800707c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6892      	ldr	r2, [r2, #8]
 8007084:	0211      	lsls	r1, r2, #8
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6912      	ldr	r2, [r2, #16]
 800708a:	0852      	lsrs	r2, r2, #1
 800708c:	3a01      	subs	r2, #1
 800708e:	0552      	lsls	r2, r2, #21
 8007090:	430a      	orrs	r2, r1
 8007092:	491f      	ldr	r1, [pc, #124]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007094:	4313      	orrs	r3, r2
 8007096:	610b      	str	r3, [r1, #16]
 8007098:	e011      	b.n	80070be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800709a:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80070a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6892      	ldr	r2, [r2, #8]
 80070aa:	0211      	lsls	r1, r2, #8
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6952      	ldr	r2, [r2, #20]
 80070b0:	0852      	lsrs	r2, r2, #1
 80070b2:	3a01      	subs	r2, #1
 80070b4:	0652      	lsls	r2, r2, #25
 80070b6:	430a      	orrs	r2, r1
 80070b8:	4915      	ldr	r1, [pc, #84]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070be:	4b14      	ldr	r3, [pc, #80]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a13      	ldr	r2, [pc, #76]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fc fc43 	bl	8003954 <HAL_GetTick>
 80070ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070d0:	e009      	b.n	80070e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070d2:	f7fc fc3f 	bl	8003954 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d902      	bls.n	80070e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	73fb      	strb	r3, [r7, #15]
          break;
 80070e4:	e005      	b.n	80070f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0ef      	beq.n	80070d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	4903      	ldr	r1, [pc, #12]	@ (8007110 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40021000 	.word	0x40021000

08007114 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	@ 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007130:	d10b      	bne.n	800714a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007132:	4b53      	ldr	r3, [pc, #332]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800713c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007144:	d101      	bne.n	800714a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007146:	4b4f      	ldr	r3, [pc, #316]	@ (8007284 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8007148:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 8090 	bne.w	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800715c:	d143      	bne.n	80071e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 800715e:	4b48      	ldr	r3, [pc, #288]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800716a:	d132      	bne.n	80071d2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 800716c:	4b44      	ldr	r3, [pc, #272]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02c      	beq.n	80071d2 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007178:	4b41      	ldr	r3, [pc, #260]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	3301      	adds	r3, #1
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	fbb2 f3f3 	udiv	r3, r2, r3
 800718a:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800718c:	4b3c      	ldr	r3, [pc, #240]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007196:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007198:	4b39      	ldr	r3, [pc, #228]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	0edb      	lsrs	r3, r3, #27
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80071aa:	4b35      	ldr	r3, [pc, #212]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 80071b6:	2311      	movs	r3, #17
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e001      	b.n	80071c0 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 80071bc:	2307      	movs	r3, #7
 80071be:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	fb03 f202 	mul.w	r2, r3, r2
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	e04f      	b.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071de:	d148      	bne.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 80071e0:	4b29      	ldr	r3, [pc, #164]	@ (8007288 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80071e2:	61fb      	str	r3, [r7, #28]
 80071e4:	e045      	b.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d142      	bne.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80071ec:	4b24      	ldr	r3, [pc, #144]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071f8:	d132      	bne.n	8007260 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d02c      	beq.n	8007260 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007206:	4b1e      	ldr	r3, [pc, #120]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	3301      	adds	r3, #1
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800721a:	4b19      	ldr	r3, [pc, #100]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007224:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007226:	4b16      	ldr	r3, [pc, #88]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	0edb      	lsrs	r3, r3, #27
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007238:	4b11      	ldr	r3, [pc, #68]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8007244:	2311      	movs	r3, #17
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e001      	b.n	800724e <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 800724a:	2307      	movs	r3, #7
 800724c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	fb03 f202 	mul.w	r2, r3, r2
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e008      	b.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007260:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800726c:	d101      	bne.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 800726e:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8007270:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007272:	69fb      	ldr	r3, [r7, #28]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3724      	adds	r7, #36	@ 0x24
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	40021000 	.word	0x40021000
 8007284:	001fff68 	.word	0x001fff68
 8007288:	00f42400 	.word	0x00f42400

0800728c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d079      	beq.n	8007392 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fb f82e 	bl	8002314 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b10      	cmp	r3, #16
 80072cc:	d058      	beq.n	8007380 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	22ca      	movs	r2, #202	@ 0xca
 80072d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2253      	movs	r2, #83	@ 0x53
 80072dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fad2 	bl	8007888 <RTC_EnterInitMode>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d127      	bne.n	800733e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80072fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007300:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6899      	ldr	r1, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68d2      	ldr	r2, [r2, #12]
 8007328:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6919      	ldr	r1, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	041a      	lsls	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fad6 	bl	80078f0 <RTC_ExitInitMode>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d113      	bne.n	8007376 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0203 	bic.w	r2, r2, #3
 800735c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	22ff      	movs	r2, #255	@ 0xff
 800737c:	625a      	str	r2, [r3, #36]	@ 0x24
 800737e:	e001      	b.n	8007384 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_RTC_SetTime+0x1a>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e08b      	b.n	80074ce <HAL_RTC_SetTime+0x132>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	22ca      	movs	r2, #202	@ 0xca
 80073cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2253      	movs	r2, #83	@ 0x53
 80073d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fa56 	bl	8007888 <RTC_EnterInitMode>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d163      	bne.n	80074ae <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d126      	bne.n	800743a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2200      	movs	r2, #0
 80073fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fab1 	bl	800796c <RTC_ByteToBcd2>
 800740a:	4603      	mov	r3, r0
 800740c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 faaa 	bl	800796c <RTC_ByteToBcd2>
 8007418:	4603      	mov	r3, r0
 800741a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800741c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 faa2 	bl	800796c <RTC_ByteToBcd2>
 8007428:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800742a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e018      	b.n	800746c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800745a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007460:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	78db      	ldrb	r3, [r3, #3]
 8007466:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007476:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800747a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800748a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6899      	ldr	r1, [r3, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fa23 	bl	80078f0 <RTC_ExitInitMode>
 80074aa:	4603      	mov	r3, r0
 80074ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	22ff      	movs	r2, #255	@ 0xff
 80074b4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80074b6:	7cfb      	ldrb	r3, [r7, #19]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd90      	pop	{r4, r7, pc}

080074d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074d6:	b590      	push	{r4, r7, lr}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_RTC_SetDate+0x1a>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e075      	b.n	80075dc <HAL_RTC_SetDate+0x106>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10e      	bne.n	8007524 <HAL_RTC_SetDate+0x4e>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b00      	cmp	r3, #0
 8007510:	d008      	beq.n	8007524 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	b2db      	uxtb	r3, r3
 800751c:	330a      	adds	r3, #10
 800751e:	b2da      	uxtb	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d11c      	bne.n	8007564 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fa1c 	bl	800796c <RTC_ByteToBcd2>
 8007534:	4603      	mov	r3, r0
 8007536:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fa15 	bl	800796c <RTC_ByteToBcd2>
 8007542:	4603      	mov	r3, r0
 8007544:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007546:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	789b      	ldrb	r3, [r3, #2]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fa0d 	bl	800796c <RTC_ByteToBcd2>
 8007552:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007554:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e00e      	b.n	8007582 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	78db      	ldrb	r3, [r3, #3]
 8007568:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007570:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007576:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	22ca      	movs	r2, #202	@ 0xca
 8007588:	625a      	str	r2, [r3, #36]	@ 0x24
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2253      	movs	r2, #83	@ 0x53
 8007590:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f978 	bl	8007888 <RTC_EnterInitMode>
 8007598:	4603      	mov	r3, r0
 800759a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800759c:	7cfb      	ldrb	r3, [r7, #19]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80075ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80075b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f99c 	bl	80078f0 <RTC_ExitInitMode>
 80075b8:	4603      	mov	r3, r0
 80075ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	22ff      	movs	r2, #255	@ 0xff
 80075c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80075c4:	7cfb      	ldrb	r3, [r7, #19]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80075da:	7cfb      	ldrb	r3, [r7, #19]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}

080075e4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b089      	sub	sp, #36	@ 0x24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_RTC_SetAlarm+0x1a>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e11b      	b.n	8007836 <HAL_RTC_SetAlarm+0x252>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d137      	bne.n	8007684 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f99d 	bl	800796c <RTC_ByteToBcd2>
 8007632:	4603      	mov	r3, r0
 8007634:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f996 	bl	800796c <RTC_ByteToBcd2>
 8007640:	4603      	mov	r3, r0
 8007642:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007644:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	789b      	ldrb	r3, [r3, #2]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f98e 	bl	800796c <RTC_ByteToBcd2>
 8007650:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007652:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800765c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f980 	bl	800796c <RTC_ByteToBcd2>
 800766c:	4603      	mov	r3, r0
 800766e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007670:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007678:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800767e:	4313      	orrs	r3, r2
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	e023      	b.n	80076cc <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076a4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80076aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80076b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80076bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80076c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80076c8:	4313      	orrs	r3, r2
 80076ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	22ca      	movs	r2, #202	@ 0xca
 80076de:	625a      	str	r2, [r3, #36]	@ 0x24
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2253      	movs	r2, #83	@ 0x53
 80076e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f0:	d14a      	bne.n	8007788 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007700:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007712:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007722:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007724:	f7fc f916 	bl	8003954 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800772a:	e015      	b.n	8007758 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800772c:	f7fc f912 	bl	8003954 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800773a:	d90d      	bls.n	8007758 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	22ff      	movs	r2, #255	@ 0xff
 8007742:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2203      	movs	r2, #3
 8007748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e06e      	b.n	8007836 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0e2      	beq.n	800772c <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007784:	609a      	str	r2, [r3, #8]
 8007786:	e049      	b.n	800781c <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007796:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80077a8:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077b8:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80077ba:	f7fc f8cb 	bl	8003954 <HAL_GetTick>
 80077be:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077c0:	e015      	b.n	80077ee <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077c2:	f7fc f8c7 	bl	8003954 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077d0:	d90d      	bls.n	80077ee <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	22ff      	movs	r2, #255	@ 0xff
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2203      	movs	r2, #3
 80077de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e023      	b.n	8007836 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0e2      	beq.n	80077c2 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	22ff      	movs	r2, #255	@ 0xff
 8007822:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3724      	adds	r7, #36	@ 0x24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}
	...

08007840 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <HAL_RTC_WaitForSynchro+0x44>)
 800784e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007850:	f7fc f880 	bl	8003954 <HAL_GetTick>
 8007854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007856:	e009      	b.n	800786c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007858:	f7fc f87c 	bl	8003954 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007866:	d901      	bls.n	800786c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e007      	b.n	800787c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0ee      	beq.n	8007858 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	0003ff5f 	.word	0x0003ff5f

08007888 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d120      	bne.n	80078e4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80078ac:	f7fc f852 	bl	8003954 <HAL_GetTick>
 80078b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80078b2:	e00d      	b.n	80078d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80078b4:	f7fc f84e 	bl	8003954 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078c2:	d905      	bls.n	80078d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2203      	movs	r2, #3
 80078cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <RTC_EnterInitMode+0x5c>
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d1e7      	bne.n	80078b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80078fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <RTC_ExitInitMode+0x78>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	4a19      	ldr	r2, [pc, #100]	@ (8007968 <RTC_ExitInitMode+0x78>)
 8007902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007906:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007908:	4b17      	ldr	r3, [pc, #92]	@ (8007968 <RTC_ExitInitMode+0x78>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10c      	bne.n	800792e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ff93 	bl	8007840 <HAL_RTC_WaitForSynchro>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01e      	beq.n	800795e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2203      	movs	r2, #3
 8007924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	73fb      	strb	r3, [r7, #15]
 800792c:	e017      	b.n	800795e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800792e:	4b0e      	ldr	r3, [pc, #56]	@ (8007968 <RTC_ExitInitMode+0x78>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <RTC_ExitInitMode+0x78>)
 8007934:	f023 0320 	bic.w	r3, r3, #32
 8007938:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ff80 	bl	8007840 <HAL_RTC_WaitForSynchro>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2203      	movs	r2, #3
 800794a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007952:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <RTC_ExitInitMode+0x78>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	4a04      	ldr	r2, [pc, #16]	@ (8007968 <RTC_ExitInitMode+0x78>)
 8007958:	f043 0320 	orr.w	r3, r3, #32
 800795c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40002800 	.word	0x40002800

0800796c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800797e:	e005      	b.n	800798c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007986:	7afb      	ldrb	r3, [r7, #11]
 8007988:	3b0a      	subs	r3, #10
 800798a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	2b09      	cmp	r3, #9
 8007990:	d8f6      	bhi.n	8007980 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	b2da      	uxtb	r2, r3
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	4313      	orrs	r3, r2
 800799e:	b2db      	uxtb	r3, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e022      	b.n	8007a04 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d105      	bne.n	80079d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fa fccf 	bl	8002374 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2203      	movs	r2, #3
 80079da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f814 	bl	8007a0c <HAL_SD_InitCard>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e00a      	b.n	8007a04 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a0c:	b5b0      	push	{r4, r5, r7, lr}
 8007a0e:	b08e      	sub	sp, #56	@ 0x38
 8007a10:	af04      	add	r7, sp, #16
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007a28:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007a2c:	f7fe fdea 	bl	8006604 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a30:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d109      	bne.n	8007a4c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007a46:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e07b      	b.n	8007b44 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	09db      	lsrs	r3, r3, #7
 8007a50:	4a3e      	ldr	r2, [pc, #248]	@ (8007b4c <HAL_SD_InitCard+0x140>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	3b02      	subs	r3, #2
 8007a5a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681d      	ldr	r5, [r3, #0]
 8007a60:	466c      	mov	r4, sp
 8007a62:	f107 0314 	add.w	r3, r7, #20
 8007a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a6e:	f107 0308 	add.w	r3, r7, #8
 8007a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a74:	4628      	mov	r0, r5
 8007a76:	f004 f949 	bl	800bd0c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a88:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f004 f987 	bl	800bda2 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aa2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	3302      	adds	r3, #2
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007ab0:	4a27      	ldr	r2, [pc, #156]	@ (8007b50 <HAL_SD_InitCard+0x144>)
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fa fa0c 	bl	8001ed8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 ffdf 	bl	8008a84 <SD_PowerON>
 8007ac6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e02e      	b.n	8007b44 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fefe 	bl	80088e8 <SD_InitCard>
 8007aec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e01b      	b.n	8007b44 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b14:	4618      	mov	r0, r3
 8007b16:	f004 f9d7 	bl	800bec8 <SDMMC_CmdBlockLength>
 8007b1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a0b      	ldr	r2, [pc, #44]	@ (8007b54 <HAL_SD_InitCard+0x148>)
 8007b28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b4c:	014f8b59 	.word	0x014f8b59
 8007b50:	00012110 	.word	0x00012110
 8007b54:	004005ff 	.word	0x004005ff

08007b58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08c      	sub	sp, #48	@ 0x30
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d107      	bne.n	8007b80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0a9      	b.n	8007cd4 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	f040 80a2 	bne.w	8007cd2 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	441a      	add	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d907      	bls.n	8007bb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e090      	b.n	8007cd4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	4a45      	ldr	r2, [pc, #276]	@ (8007cdc <HAL_SD_ReadBlocks_DMA+0x184>)
 8007bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	4a44      	ldr	r2, [pc, #272]	@ (8007ce0 <HAL_SD_ReadBlocks_DMA+0x188>)
 8007bd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3380      	adds	r3, #128	@ 0x80
 8007be4:	4619      	mov	r1, r3
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	025b      	lsls	r3, r3, #9
 8007bec:	089b      	lsrs	r3, r3, #2
 8007bee:	f7fc f949 	bl	8003e84 <HAL_DMA_Start_IT>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00f      	beq.n	8007c18 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a39      	ldr	r2, [pc, #228]	@ (8007ce4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e05d      	b.n	8007cd4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0208 	orr.w	r2, r2, #8
 8007c26:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	025b      	lsls	r3, r3, #9
 8007c34:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	025b      	lsls	r3, r3, #9
 8007c40:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c42:	2390      	movs	r3, #144	@ 0x90
 8007c44:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c46:	2302      	movs	r3, #2
 8007c48:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f107 0210 	add.w	r2, r7, #16
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f004 f907 	bl	800be70 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d90a      	bls.n	8007c7e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2282      	movs	r2, #130	@ 0x82
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c74:	4618      	mov	r0, r3
 8007c76:	f004 f96b 	bl	800bf50 <SDMMC_CmdReadMultiBlock>
 8007c7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c7c:	e009      	b.n	8007c92 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2281      	movs	r2, #129	@ 0x81
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f004 f93e 	bl	800bf0c <SDMMC_CmdReadSingleBlock>
 8007c90:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d012      	beq.n	8007cbe <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a11      	ldr	r2, [pc, #68]	@ (8007ce4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e00a      	b.n	8007cd4 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e000      	b.n	8007cd4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007cd2:	2302      	movs	r3, #2
  }
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3730      	adds	r7, #48	@ 0x30
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	08008703 	.word	0x08008703
 8007ce0:	08008775 	.word	0x08008775
 8007ce4:	004005ff 	.word	0x004005ff

08007ce8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	@ 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e0ac      	b.n	8007e6a <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f040 80a5 	bne.w	8007e68 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d907      	bls.n	8007d42 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e093      	b.n	8007e6a <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2203      	movs	r2, #3
 8007d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	4a47      	ldr	r2, [pc, #284]	@ (8007e74 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8007d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	4a46      	ldr	r2, [pc, #280]	@ (8007e78 <HAL_SD_WriteBlocks_DMA+0x190>)
 8007d60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d66:	2200      	movs	r2, #0
 8007d68:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d002      	beq.n	8007d78 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	025b      	lsls	r3, r3, #9
 8007d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d90a      	bls.n	8007d94 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	22a0      	movs	r2, #160	@ 0xa0
 8007d82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f004 f924 	bl	800bfd8 <SDMMC_CmdWriteMultiBlock>
 8007d90:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007d92:	e009      	b.n	8007da8 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2290      	movs	r2, #144	@ 0x90
 8007d98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007da0:	4618      	mov	r0, r3
 8007da2:	f004 f8f7 	bl	800bf94 <SDMMC_CmdWriteSingleBlock>
 8007da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d012      	beq.n	8007dd4 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a32      	ldr	r2, [pc, #200]	@ (8007e7c <HAL_SD_WriteBlocks_DMA+0x194>)
 8007db4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e04a      	b.n	8007e6a <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0208 	orr.w	r2, r2, #8
 8007de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3380      	adds	r3, #128	@ 0x80
 8007df0:	461a      	mov	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	025b      	lsls	r3, r3, #9
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	f7fc f844 	bl	8003e84 <HAL_DMA_Start_IT>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d012      	beq.n	8007e28 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <HAL_SD_WriteBlocks_DMA+0x194>)
 8007e08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e020      	b.n	8007e6a <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	025b      	lsls	r3, r3, #9
 8007e32:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e34:	2390      	movs	r3, #144	@ 0x90
 8007e36:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f107 0210 	add.w	r2, r7, #16
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f004 f80e 	bl	800be70 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 021a 	orr.w	r2, r2, #26
 8007e62:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e000      	b.n	8007e6a <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007e68:	2302      	movs	r3, #2
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3730      	adds	r7, #48	@ 0x30
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	080086d9 	.word	0x080086d9
 8007e78:	08008775 	.word	0x08008775
 8007e7c:	004005ff 	.word	0x004005ff

08007e80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_SD_IRQHandler+0x2e>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 f802 	bl	8008eb0 <SD_Read_IT>
 8007eac:	e155      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 808f 	beq.w	8007fdc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ec6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007ed6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007eda:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d039      	beq.n	8007f6a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <HAL_SD_IRQHandler+0x8a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f004 f884 	bl	800c01c <SDMMC_CmdStopTransfer>
 8007f14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f91f 	bl	800816c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <HAL_SD_IRQHandler+0xda>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f004 fdc0 	bl	800cae0 <HAL_SD_RxCpltCallback>
 8007f60:	e0fb      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f004 fdb2 	bl	800cacc <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007f68:	e0f7      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 80f2 	beq.w	800815a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f004 f849 	bl	800c01c <SDMMC_CmdStopTransfer>
 8007f8a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8e4 	bl	800816c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80d5 	bne.w	800815a <HAL_SD_IRQHandler+0x2da>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80cf 	bne.w	800815a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0208 	bic.w	r2, r2, #8
 8007fca:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f004 fd79 	bl	800cacc <HAL_SD_TxCpltCallback>
}
 8007fda:	e0be      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <HAL_SD_IRQHandler+0x17c>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 ffac 	bl	8008f52 <SD_Write_IT>
 8007ffa:	e0ae      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008002:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80a7 	beq.w	800815a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	f043 0208 	orr.w	r2, r3, #8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806c:	f043 0210 	orr.w	r2, r3, #16
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f240 523a 	movw	r2, #1338	@ 0x53a
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800808c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f003 ffc2 	bl	800c01c <SDMMC_CmdStopTransfer>
 8008098:	4602      	mov	r2, r0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0308 	and.w	r3, r3, #8
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f855 	bl	800816c <HAL_SD_ErrorCallback>
}
 80080c2:	e04a      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d045      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_SD_IRQHandler+0x262>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008164 <HAL_SD_IRQHandler+0x2e4>)
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fb ff66 	bl	8003fc0 <HAL_DMA_Abort_IT>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d02f      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fb84 	bl	800880c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008104:	e029      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <HAL_SD_IRQHandler+0x29a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d011      	beq.n	800813e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <HAL_SD_IRQHandler+0x2e8>)
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	4618      	mov	r0, r3
 8008128:	f7fb ff4a 	bl	8003fc0 <HAL_DMA_Abort_IT>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fb9f 	bl	800887a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800813c:	e00d      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f004 fcb0 	bl	800cab8 <HAL_SD_AbortCallback>
}
 8008158:	e7ff      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	0800880d 	.word	0x0800880d
 8008168:	0800887b 	.word	0x0800887b

0800816c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800818e:	0f9b      	lsrs	r3, r3, #30
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819a:	0e9b      	lsrs	r3, r3, #26
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081e0:	0d1b      	lsrs	r3, r3, #20
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081fe:	0bdb      	lsrs	r3, r3, #15
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008210:	0b9b      	lsrs	r3, r3, #14
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008222:	0b5b      	lsrs	r3, r3, #13
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008234:	0b1b      	lsrs	r3, r3, #12
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	2b00      	cmp	r3, #0
 800824e:	d163      	bne.n	8008318 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008254:	009a      	lsls	r2, r3, #2
 8008256:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800825a:	4013      	ands	r3, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008260:	0f92      	lsrs	r2, r2, #30
 8008262:	431a      	orrs	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800826c:	0edb      	lsrs	r3, r3, #27
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	b2da      	uxtb	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800827e:	0e1b      	lsrs	r3, r3, #24
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008290:	0d5b      	lsrs	r3, r3, #21
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a2:	0c9b      	lsrs	r3, r3, #18
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b4:	0bdb      	lsrs	r3, r3, #15
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	7e1b      	ldrb	r3, [r3, #24]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	3302      	adds	r3, #2
 80082d8:	2201      	movs	r2, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80082e2:	fb03 f202 	mul.w	r2, r3, r2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	7a1b      	ldrb	r3, [r3, #8]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	2201      	movs	r2, #1
 80082f6:	409a      	lsls	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008304:	0a52      	lsrs	r2, r2, #9
 8008306:	fb03 f202 	mul.w	r2, r3, r2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60
 8008316:	e031      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831c:	2b01      	cmp	r3, #1
 800831e:	d11d      	bne.n	800835c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	431a      	orrs	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	3301      	adds	r3, #1
 800833c:	029a      	lsls	r2, r3, #10
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008350:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	661a      	str	r2, [r3, #96]	@ 0x60
 800835a:	e00f      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a58      	ldr	r2, [pc, #352]	@ (80084c4 <HAL_SD_GetCardCSD+0x344>)
 8008362:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e09d      	b.n	80084b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008380:	0b9b      	lsrs	r3, r3, #14
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008392:	09db      	lsrs	r3, r3, #7
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839a:	b2da      	uxtb	r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b4:	0fdb      	lsrs	r3, r3, #31
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c0:	0f5b      	lsrs	r3, r3, #29
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	0e9b      	lsrs	r3, r3, #26
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e4:	0d9b      	lsrs	r3, r3, #22
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	0d5b      	lsrs	r3, r3, #21
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008426:	0bdb      	lsrs	r3, r3, #15
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	0b9b      	lsrs	r3, r3, #14
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844e:	0b5b      	lsrs	r3, r3, #13
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008462:	0b1b      	lsrs	r3, r3, #12
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	0a9b      	lsrs	r3, r3, #10
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	004005ff 	.word	0x004005ff

080084c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008520:	b5b0      	push	{r4, r5, r7, lr}
 8008522:	b090      	sub	sp, #64	@ 0x40
 8008524:	af04      	add	r7, sp, #16
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2203      	movs	r2, #3
 8008534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853c:	2b03      	cmp	r3, #3
 800853e:	d02e      	beq.n	800859e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	d106      	bne.n	8008556 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	639a      	str	r2, [r3, #56]	@ 0x38
 8008554:	e029      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800855c:	d10a      	bne.n	8008574 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb46 	bl	8008bf0 <SD_WideBus_Enable>
 8008564:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	639a      	str	r2, [r3, #56]	@ 0x38
 8008572:	e01a      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fb83 	bl	8008c86 <SD_WideBus_Disable>
 8008580:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	639a      	str	r2, [r3, #56]	@ 0x38
 800858e:	e00c      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008594:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	639a      	str	r2, [r3, #56]	@ 0x38
 800859c:	e005      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a35      	ldr	r2, [pc, #212]	@ (800868c <HAL_SD_ConfigWideBusOperation+0x16c>)
 80085b8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80085c0:	e042      	b.n	8008648 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80085c2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80085c6:	f7fe f81d 	bl	8006604 <HAL_RCCEx_GetPeriphCLKFreq>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d031      	beq.n	8008636 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	3302      	adds	r3, #2
 80085f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fa:	4a25      	ldr	r2, [pc, #148]	@ (8008690 <HAL_SD_ConfigWideBusOperation+0x170>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d907      	bls.n	8008610 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	4a24      	ldr	r2, [pc, #144]	@ (8008694 <HAL_SD_ConfigWideBusOperation+0x174>)
 8008604:	fba2 2303 	umull	r2, r3, r2, r3
 8008608:	0ddb      	lsrs	r3, r3, #23
 800860a:	3b02      	subs	r3, #2
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	e002      	b.n	8008616 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681d      	ldr	r5, [r3, #0]
 800861a:	466c      	mov	r4, sp
 800861c:	f107 0318 	add.w	r3, r7, #24
 8008620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008628:	f107 030c 	add.w	r3, r7, #12
 800862c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800862e:	4628      	mov	r0, r5
 8008630:	f003 fb6c 	bl	800bd0c <SDMMC_Init>
 8008634:	e008      	b.n	8008648 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008650:	4618      	mov	r0, r3
 8008652:	f003 fc39 	bl	800bec8 <SDMMC_CmdBlockLength>
 8008656:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a0a      	ldr	r2, [pc, #40]	@ (800868c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008680:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008684:	4618      	mov	r0, r3
 8008686:	3730      	adds	r7, #48	@ 0x30
 8008688:	46bd      	mov	sp, r7
 800868a:	bdb0      	pop	{r4, r5, r7, pc}
 800868c:	004005ff 	.word	0x004005ff
 8008690:	017d7840 	.word	0x017d7840
 8008694:	55e63b89 	.word	0x55e63b89

08008698 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa78 	bl	8008ba0 <SD_SendStatus>
 80086b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	0a5b      	lsrs	r3, r3, #9
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80086ce:	693b      	ldr	r3, [r7, #16]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80086f6:	bf00      	nop
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008714:	2b82      	cmp	r3, #130	@ 0x82
 8008716:	d111      	bne.n	800873c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f003 fc7d 	bl	800c01c <SDMMC_CmdStopTransfer>
 8008722:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fd18 	bl	800816c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0208 	bic.w	r2, r2, #8
 800874a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008754:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f004 f9bb 	bl	800cae0 <HAL_SD_RxCpltCallback>
#endif
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008788:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008790:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d002      	beq.n	800879e <SD_DMAError+0x2a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d12d      	bne.n	80087fa <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a19      	ldr	r2, [pc, #100]	@ (8008808 <SD_DMAError+0x94>)
 80087a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80087b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f7ff ff68 	bl	8008698 <HAL_SD_GetCardState>
 80087c8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	d002      	beq.n	80087d6 <SD_DMAError+0x62>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d10a      	bne.n	80087ec <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f003 fc1e 	bl	800c01c <SDMMC_CmdStopTransfer>
 80087e0:	4602      	mov	r2, r0
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e6:	431a      	orrs	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2200      	movs	r2, #0
 80087f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f7ff fcb6 	bl	800816c <HAL_SD_ErrorCallback>
#endif
}
 8008800:	bf00      	nop
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	004005ff 	.word	0x004005ff

0800880c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008818:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008822:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff ff37 	bl	8008698 <HAL_SD_GetCardState>
 800882a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b06      	cmp	r3, #6
 800883e:	d002      	beq.n	8008846 <SD_DMATxAbort+0x3a>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b05      	cmp	r3, #5
 8008844:	d10a      	bne.n	800885c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f003 fbe6 	bl	800c01c <SDMMC_CmdStopTransfer>
 8008850:	4602      	mov	r2, r0
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008856:	431a      	orrs	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f004 f927 	bl	800cab8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800886a:	e002      	b.n	8008872 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fc7d 	bl	800816c <HAL_SD_ErrorCallback>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008886:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008890:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff ff00 	bl	8008698 <HAL_SD_GetCardState>
 8008898:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b06      	cmp	r3, #6
 80088ac:	d002      	beq.n	80088b4 <SD_DMARxAbort+0x3a>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d10a      	bne.n	80088ca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f003 fbaf 	bl	800c01c <SDMMC_CmdStopTransfer>
 80088be:	4602      	mov	r2, r0
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f004 f8f0 	bl	800cab8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80088d8:	e002      	b.n	80088e0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff fc46 	bl	800816c <HAL_SD_ErrorCallback>
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088e8:	b5b0      	push	{r4, r5, r7, lr}
 80088ea:	b094      	sub	sp, #80	@ 0x50
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80088f0:	2301      	movs	r3, #1
 80088f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f003 fa61 	bl	800bdc0 <SDMMC_GetPowerState>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008904:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008908:	e0b8      	b.n	8008a7c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890e:	2b03      	cmp	r3, #3
 8008910:	d02f      	beq.n	8008972 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f003 fc8a 	bl	800c230 <SDMMC_CmdSendCID>
 800891c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800891e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <SD_InitCard+0x40>
    {
      return errorstate;
 8008924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008926:	e0a9      	b.n	8008a7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f003 fa8b 	bl	800be4a <SDMMC_GetResponse>
 8008934:	4602      	mov	r2, r0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2104      	movs	r1, #4
 8008940:	4618      	mov	r0, r3
 8008942:	f003 fa82 	bl	800be4a <SDMMC_GetResponse>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2108      	movs	r1, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f003 fa79 	bl	800be4a <SDMMC_GetResponse>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	210c      	movs	r1, #12
 8008964:	4618      	mov	r0, r3
 8008966:	f003 fa70 	bl	800be4a <SDMMC_GetResponse>
 800896a:	4602      	mov	r2, r0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008976:	2b03      	cmp	r3, #3
 8008978:	d00d      	beq.n	8008996 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f107 020e 	add.w	r2, r7, #14
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f003 fc90 	bl	800c2aa <SDMMC_CmdSetRelAdd>
 800898a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800898c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <SD_InitCard+0xae>
    {
      return errorstate;
 8008992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008994:	e072      	b.n	8008a7c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899a:	2b03      	cmp	r3, #3
 800899c:	d036      	beq.n	8008a0c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	461a      	mov	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	4619      	mov	r1, r3
 80089b2:	4610      	mov	r0, r2
 80089b4:	f003 fc5a 	bl	800c26c <SDMMC_CmdSendCSD>
 80089b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80089c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c2:	e05b      	b.n	8008a7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f003 fa3d 	bl	800be4a <SDMMC_GetResponse>
 80089d0:	4602      	mov	r2, r0
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2104      	movs	r1, #4
 80089dc:	4618      	mov	r0, r3
 80089de:	f003 fa34 	bl	800be4a <SDMMC_GetResponse>
 80089e2:	4602      	mov	r2, r0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2108      	movs	r1, #8
 80089ee:	4618      	mov	r0, r3
 80089f0:	f003 fa2b 	bl	800be4a <SDMMC_GetResponse>
 80089f4:	4602      	mov	r2, r0
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	210c      	movs	r1, #12
 8008a00:	4618      	mov	r0, r3
 8008a02:	f003 fa22 	bl	800be4a <SDMMC_GetResponse>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2104      	movs	r1, #4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 fa19 	bl	800be4a <SDMMC_GetResponse>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	0d1a      	lsrs	r2, r3, #20
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a20:	f107 0310 	add.w	r3, r7, #16
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff fbaa 	bl	8008180 <HAL_SD_GetCardCSD>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a36:	e021      	b.n	8008a7c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6819      	ldr	r1, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	2200      	movs	r2, #0
 8008a44:	461c      	mov	r4, r3
 8008a46:	4615      	mov	r5, r2
 8008a48:	4622      	mov	r2, r4
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	f003 fb07 	bl	800c060 <SDMMC_CmdSelDesel>
 8008a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <SD_InitCard+0x176>
  {
    return errorstate;
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5c:	e00e      	b.n	8008a7c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681d      	ldr	r5, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	466c      	mov	r4, sp
 8008a66:	f103 0210 	add.w	r2, r3, #16
 8008a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a70:	3304      	adds	r3, #4
 8008a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a74:	4628      	mov	r0, r5
 8008a76:	f003 f949 	bl	800bd0c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3740      	adds	r7, #64	@ 0x40
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bdb0      	pop	{r4, r5, r7, pc}

08008a84 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	2300      	movs	r3, #0
 8008a96:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f003 fb02 	bl	800c0a6 <SDMMC_CmdGoIdleState>
 8008aa2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <SD_PowerON+0x2a>
  {
    return errorstate;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	e072      	b.n	8008b94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f003 fb15 	bl	800c0e2 <SDMMC_CmdOperCond>
 8008ab8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f003 faeb 	bl	800c0a6 <SDMMC_CmdGoIdleState>
 8008ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	e05b      	b.n	8008b94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d137      	bne.n	8008b5a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2100      	movs	r1, #0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f003 fb15 	bl	800c120 <SDMMC_CmdAppCommand>
 8008af6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d02d      	beq.n	8008b5a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008afe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b02:	e047      	b.n	8008b94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f003 fb08 	bl	800c120 <SDMMC_CmdAppCommand>
 8008b10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <SD_PowerON+0x98>
    {
      return errorstate;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	e03b      	b.n	8008b94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	491e      	ldr	r1, [pc, #120]	@ (8008b9c <SD_PowerON+0x118>)
 8008b22:	4618      	mov	r0, r3
 8008b24:	f003 fb1e 	bl	800c164 <SDMMC_CmdAppOperCommand>
 8008b28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b34:	e02e      	b.n	8008b94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f003 f984 	bl	800be4a <SDMMC_GetResponse>
 8008b42:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	0fdb      	lsrs	r3, r3, #31
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <SD_PowerON+0xcc>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <SD_PowerON+0xce>
 8008b50:	2300      	movs	r3, #0
 8008b52:	613b      	str	r3, [r7, #16]

    count++;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d802      	bhi.n	8008b6a <SD_PowerON+0xe6>
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0cc      	beq.n	8008b04 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d902      	bls.n	8008b7a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b78:	e00c      	b.n	8008b94 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	645a      	str	r2, [r3, #68]	@ 0x44
 8008b8a:	e002      	b.n	8008b92 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	c1100000 	.word	0xc1100000

08008ba0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d102      	bne.n	8008bb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008bb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008bb4:	e018      	b.n	8008be8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f003 fb92 	bl	800c2ec <SDMMC_CmdSendStatus>
 8008bc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	e009      	b.n	8008be8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f003 f935 	bl	800be4a <SDMMC_GetResponse>
 8008be0:	4602      	mov	r2, r0
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f003 f91f 	bl	800be4a <SDMMC_GetResponse>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c16:	d102      	bne.n	8008c1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c1c:	e02f      	b.n	8008c7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f879 	bl	8008d1c <SD_FindSCR>
 8008c2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	e023      	b.n	8008c7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01c      	beq.n	8008c7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f003 fa67 	bl	800c120 <SDMMC_CmdAppCommand>
 8008c52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	e00f      	b.n	8008c7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2102      	movs	r1, #2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f003 faa0 	bl	800c1aa <SDMMC_CmdBusWidth>
 8008c6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	e003      	b.n	8008c7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e001      	b.n	8008c7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	2300      	movs	r3, #0
 8008c94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f003 f8d4 	bl	800be4a <SDMMC_GetResponse>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cac:	d102      	bne.n	8008cb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008cb2:	e02f      	b.n	8008d14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008cb4:	f107 030c 	add.w	r3, r7, #12
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f82e 	bl	8008d1c <SD_FindSCR>
 8008cc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	e023      	b.n	8008d14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01c      	beq.n	8008d10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cde:	041b      	lsls	r3, r3, #16
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f003 fa1c 	bl	800c120 <SDMMC_CmdAppCommand>
 8008ce8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	e00f      	b.n	8008d14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f003 fa55 	bl	800c1aa <SDMMC_CmdBusWidth>
 8008d00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	e003      	b.n	8008d14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e001      	b.n	8008d14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d10:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d1c:	b590      	push	{r4, r7, lr}
 8008d1e:	b08f      	sub	sp, #60	@ 0x3c
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d26:	f7fa fe15 	bl	8003954 <HAL_GetTick>
 8008d2a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008d30:	2300      	movs	r3, #0
 8008d32:	60bb      	str	r3, [r7, #8]
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2108      	movs	r1, #8
 8008d42:	4618      	mov	r0, r3
 8008d44:	f003 f8c0 	bl	800bec8 <SDMMC_CmdBlockLength>
 8008d48:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	e0a9      	b.n	8008ea8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d5c:	041b      	lsls	r3, r3, #16
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f003 f9dd 	bl	800c120 <SDMMC_CmdAppCommand>
 8008d66:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	e09a      	b.n	8008ea8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d72:	f04f 33ff 	mov.w	r3, #4294967295
 8008d76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d78:	2308      	movs	r3, #8
 8008d7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d7c:	2330      	movs	r3, #48	@ 0x30
 8008d7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d80:	2302      	movs	r3, #2
 8008d82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f107 0210 	add.w	r2, r7, #16
 8008d94:	4611      	mov	r1, r2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f003 f86a 	bl	800be70 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f003 fa24 	bl	800c1ee <SDMMC_CmdSendSCR>
 8008da6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d022      	beq.n	8008df4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	e07a      	b.n	8008ea8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00e      	beq.n	8008dde <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6819      	ldr	r1, [r3, #0]
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	f107 0208 	add.w	r2, r7, #8
 8008dcc:	18d4      	adds	r4, r2, r3
 8008dce:	4608      	mov	r0, r1
 8008dd0:	f002 ffc9 	bl	800bd66 <SDMMC_ReadFIFO>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	6023      	str	r3, [r4, #0]
      index++;
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dda:	3301      	adds	r3, #1
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008dde:	f7fa fdb9 	bl	8003954 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d102      	bne.n	8008df4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008dee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008df2:	e059      	b.n	8008ea8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dfa:	f240 432a 	movw	r3, #1066	@ 0x42a
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0d6      	beq.n	8008db2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2208      	movs	r2, #8
 8008e18:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	e044      	b.n	8008ea8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2202      	movs	r2, #2
 8008e32:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e34:	2302      	movs	r3, #2
 8008e36:	e037      	b.n	8008ea8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e4e:	2320      	movs	r3, #32
 8008e50:	e02a      	b.n	8008ea8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008e5a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	061a      	lsls	r2, r3, #24
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	0a1b      	lsrs	r3, r3, #8
 8008e6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0e1b      	lsrs	r3, r3, #24
 8008e78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	601a      	str	r2, [r3, #0]
    scr++;
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	3304      	adds	r3, #4
 8008e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	061a      	lsls	r2, r3, #24
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	0a1b      	lsrs	r3, r3, #8
 8008e96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	373c      	adds	r7, #60	@ 0x3c
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd90      	pop	{r4, r7, pc}

08008eb0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d03f      	beq.n	8008f4a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e033      	b.n	8008f38 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 ff46 	bl	800bd66 <SDMMC_ReadFIFO>
 8008eda:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	0a1b      	lsrs	r3, r3, #8
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	0e1b      	lsrs	r3, r3, #24
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	3301      	adds	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b07      	cmp	r3, #7
 8008f3c:	d9c8      	bls.n	8008ed0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b086      	sub	sp, #24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f64:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d043      	beq.n	8008ff4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	e037      	b.n	8008fe2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	021a      	lsls	r2, r3, #8
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	041a      	lsls	r2, r3, #16
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	061a      	lsls	r2, r3, #24
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f107 0208 	add.w	r2, r7, #8
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 fed2 	bl	800bd80 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b07      	cmp	r3, #7
 8008fe6:	d9c4      	bls.n	8008f72 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e095      	b.n	800913a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d108      	bne.n	8009028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800901e:	d009      	beq.n	8009034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	61da      	str	r2, [r3, #28]
 8009026:	e005      	b.n	8009034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f9 fa74 	bl	800253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800906a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009074:	d902      	bls.n	800907c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	e002      	b.n	8009082 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800907c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009080:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800908a:	d007      	beq.n	800909c <HAL_SPI_Init+0xa0>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009094:	d002      	beq.n	800909c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090de:	ea42 0103 	orr.w	r1, r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	f003 0204 	and.w	r2, r3, #4
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	431a      	orrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009118:	ea42 0103 	orr.w	r1, r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e049      	b.n	80091e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7f9 fa79 	bl	8002660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3304      	adds	r3, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f000 fc45 	bl	8009a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b01      	cmp	r3, #1
 8009202:	d001      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e03b      	b.n	8009280 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a19      	ldr	r2, [pc, #100]	@ (800928c <HAL_TIM_Base_Start_IT+0x9c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d009      	beq.n	800923e <HAL_TIM_Base_Start_IT+0x4e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009232:	d004      	beq.n	800923e <HAL_TIM_Base_Start_IT+0x4e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a15      	ldr	r2, [pc, #84]	@ (8009290 <HAL_TIM_Base_Start_IT+0xa0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d115      	bne.n	800926a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <HAL_TIM_Base_Start_IT+0xa4>)
 8009246:	4013      	ands	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b06      	cmp	r3, #6
 800924e:	d015      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x8c>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009256:	d011      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009268:	e008      	b.n	800927c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e000      	b.n	800927e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	40012c00 	.word	0x40012c00
 8009290:	40014000 	.word	0x40014000
 8009294:	00010007 	.word	0x00010007

08009298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e049      	b.n	800933e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d106      	bne.n	80092c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f841 	bl	8009346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f000 fb9a 	bl	8009a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d020      	beq.n	80093be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01b      	beq.n	80093be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f06f 0202 	mvn.w	r2, #2
 800938e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fac2 	bl	800992e <HAL_TIM_IC_CaptureCallback>
 80093aa:	e005      	b.n	80093b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fab4 	bl	800991a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fac5 	bl	8009942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d020      	beq.n	800940a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01b      	beq.n	800940a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f06f 0204 	mvn.w	r2, #4
 80093da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa9c 	bl	800992e <HAL_TIM_IC_CaptureCallback>
 80093f6:	e005      	b.n	8009404 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fa8e 	bl	800991a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa9f 	bl	8009942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d020      	beq.n	8009456 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f003 0308 	and.w	r3, r3, #8
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01b      	beq.n	8009456 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f06f 0208 	mvn.w	r2, #8
 8009426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2204      	movs	r2, #4
 800942c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	f003 0303 	and.w	r3, r3, #3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa76 	bl	800992e <HAL_TIM_IC_CaptureCallback>
 8009442:	e005      	b.n	8009450 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa68 	bl	800991a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa79 	bl	8009942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f003 0310 	and.w	r3, r3, #16
 800945c:	2b00      	cmp	r3, #0
 800945e:	d020      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	2b00      	cmp	r3, #0
 8009468:	d01b      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f06f 0210 	mvn.w	r2, #16
 8009472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2208      	movs	r2, #8
 8009478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa50 	bl	800992e <HAL_TIM_IC_CaptureCallback>
 800948e:	e005      	b.n	800949c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fa42 	bl	800991a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa53 	bl	8009942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00c      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f06f 0201 	mvn.w	r2, #1
 80094be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7f8 fd25 	bl	8001f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 ff1d 	bl	800a324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 ff15 	bl	800a338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00c      	beq.n	8009532 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800952a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa12 	bl	8009956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00c      	beq.n	8009556 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d007      	beq.n	8009556 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0220 	mvn.w	r2, #32
 800954e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fedd 	bl	800a310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009576:	2b01      	cmp	r3, #1
 8009578:	d101      	bne.n	800957e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800957a:	2302      	movs	r3, #2
 800957c:	e0ff      	b.n	800977e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b14      	cmp	r3, #20
 800958a:	f200 80f0 	bhi.w	800976e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800958e:	a201      	add	r2, pc, #4	@ (adr r2, 8009594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095e9 	.word	0x080095e9
 8009598:	0800976f 	.word	0x0800976f
 800959c:	0800976f 	.word	0x0800976f
 80095a0:	0800976f 	.word	0x0800976f
 80095a4:	08009629 	.word	0x08009629
 80095a8:	0800976f 	.word	0x0800976f
 80095ac:	0800976f 	.word	0x0800976f
 80095b0:	0800976f 	.word	0x0800976f
 80095b4:	0800966b 	.word	0x0800966b
 80095b8:	0800976f 	.word	0x0800976f
 80095bc:	0800976f 	.word	0x0800976f
 80095c0:	0800976f 	.word	0x0800976f
 80095c4:	080096ab 	.word	0x080096ab
 80095c8:	0800976f 	.word	0x0800976f
 80095cc:	0800976f 	.word	0x0800976f
 80095d0:	0800976f 	.word	0x0800976f
 80095d4:	080096ed 	.word	0x080096ed
 80095d8:	0800976f 	.word	0x0800976f
 80095dc:	0800976f 	.word	0x0800976f
 80095e0:	0800976f 	.word	0x0800976f
 80095e4:	0800972d 	.word	0x0800972d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fa72 	bl	8009ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699a      	ldr	r2, [r3, #24]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0208 	orr.w	r2, r2, #8
 8009602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699a      	ldr	r2, [r3, #24]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 0204 	bic.w	r2, r2, #4
 8009612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6999      	ldr	r1, [r3, #24]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	619a      	str	r2, [r3, #24]
      break;
 8009626:	e0a5      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 face 	bl	8009bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699a      	ldr	r2, [r3, #24]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6999      	ldr	r1, [r3, #24]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	021a      	lsls	r2, r3, #8
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	619a      	str	r2, [r3, #24]
      break;
 8009668:	e084      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fb27 	bl	8009cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	69da      	ldr	r2, [r3, #28]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0208 	orr.w	r2, r2, #8
 8009684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69da      	ldr	r2, [r3, #28]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0204 	bic.w	r2, r2, #4
 8009694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69d9      	ldr	r1, [r3, #28]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	61da      	str	r2, [r3, #28]
      break;
 80096a8:	e064      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fb7f 	bl	8009db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69d9      	ldr	r1, [r3, #28]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	021a      	lsls	r2, r3, #8
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	61da      	str	r2, [r3, #28]
      break;
 80096ea:	e043      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fbbc 	bl	8009e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0208 	orr.w	r2, r2, #8
 8009706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0204 	bic.w	r2, r2, #4
 8009716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	691a      	ldr	r2, [r3, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800972a:	e023      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fbf4 	bl	8009f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009746:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009756:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	021a      	lsls	r2, r3, #8
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800976c:	e002      	b.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	75fb      	strb	r3, [r7, #23]
      break;
 8009772:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_TIM_ConfigClockSource+0x1c>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e0b6      	b.n	8009912 <HAL_TIM_ConfigClockSource+0x18a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80097c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097e0:	d03e      	beq.n	8009860 <HAL_TIM_ConfigClockSource+0xd8>
 80097e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097e6:	f200 8087 	bhi.w	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 80097ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ee:	f000 8086 	beq.w	80098fe <HAL_TIM_ConfigClockSource+0x176>
 80097f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097f6:	d87f      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 80097f8:	2b70      	cmp	r3, #112	@ 0x70
 80097fa:	d01a      	beq.n	8009832 <HAL_TIM_ConfigClockSource+0xaa>
 80097fc:	2b70      	cmp	r3, #112	@ 0x70
 80097fe:	d87b      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009800:	2b60      	cmp	r3, #96	@ 0x60
 8009802:	d050      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x11e>
 8009804:	2b60      	cmp	r3, #96	@ 0x60
 8009806:	d877      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009808:	2b50      	cmp	r3, #80	@ 0x50
 800980a:	d03c      	beq.n	8009886 <HAL_TIM_ConfigClockSource+0xfe>
 800980c:	2b50      	cmp	r3, #80	@ 0x50
 800980e:	d873      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009810:	2b40      	cmp	r3, #64	@ 0x40
 8009812:	d058      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x13e>
 8009814:	2b40      	cmp	r3, #64	@ 0x40
 8009816:	d86f      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009818:	2b30      	cmp	r3, #48	@ 0x30
 800981a:	d064      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x15e>
 800981c:	2b30      	cmp	r3, #48	@ 0x30
 800981e:	d86b      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009820:	2b20      	cmp	r3, #32
 8009822:	d060      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x15e>
 8009824:	2b20      	cmp	r3, #32
 8009826:	d867      	bhi.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d05c      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x15e>
 800982c:	2b10      	cmp	r3, #16
 800982e:	d05a      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x15e>
 8009830:	e062      	b.n	80098f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009842:	f000 fc41 	bl	800a0c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	609a      	str	r2, [r3, #8]
      break;
 800985e:	e04f      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009870:	f000 fc2a 	bl	800a0c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009882:	609a      	str	r2, [r3, #8]
      break;
 8009884:	e03c      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009892:	461a      	mov	r2, r3
 8009894:	f000 fb9e 	bl	8009fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2150      	movs	r1, #80	@ 0x50
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fbf7 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80098a4:	e02c      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098b2:	461a      	mov	r2, r3
 80098b4:	f000 fbbd 	bl	800a032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2160      	movs	r1, #96	@ 0x60
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fbe7 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80098c4:	e01c      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d2:	461a      	mov	r2, r3
 80098d4:	f000 fb7e 	bl	8009fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2140      	movs	r1, #64	@ 0x40
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fbd7 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80098e4:	e00c      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f000 fbce 	bl	800a092 <TIM_ITRx_SetConfig>
      break;
 80098f6:	e003      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
      break;
 80098fc:	e000      	b.n	8009900 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80098fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	d107      	bne.n	80099a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2201      	movs	r2, #1
 800999a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099a4:	e02a      	b.n	80099fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d107      	bne.n	80099c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2202      	movs	r2, #2
 80099b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099be:	e01d      	b.n	80099fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d107      	bne.n	80099da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2204      	movs	r2, #4
 80099ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d8:	e010      	b.n	80099fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d107      	bne.n	80099f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2208      	movs	r2, #8
 80099e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099f2:	e003      	b.n	80099fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff ffb4 	bl	800996a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	771a      	strb	r2, [r3, #28]
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a2a      	ldr	r2, [pc, #168]	@ (8009acc <TIM_Base_SetConfig+0xbc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d003      	beq.n	8009a30 <TIM_Base_SetConfig+0x20>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2e:	d108      	bne.n	8009a42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a21      	ldr	r2, [pc, #132]	@ (8009acc <TIM_Base_SetConfig+0xbc>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00b      	beq.n	8009a62 <TIM_Base_SetConfig+0x52>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a50:	d007      	beq.n	8009a62 <TIM_Base_SetConfig+0x52>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad0 <TIM_Base_SetConfig+0xc0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d003      	beq.n	8009a62 <TIM_Base_SetConfig+0x52>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad4 <TIM_Base_SetConfig+0xc4>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d108      	bne.n	8009a74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009acc <TIM_Base_SetConfig+0xbc>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d007      	beq.n	8009ab0 <TIM_Base_SetConfig+0xa0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8009ad0 <TIM_Base_SetConfig+0xc0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d003      	beq.n	8009ab0 <TIM_Base_SetConfig+0xa0>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad4 <TIM_Base_SetConfig+0xc4>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d103      	bne.n	8009ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	615a      	str	r2, [r3, #20]
}
 8009abe:	bf00      	nop
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40012c00 	.word	0x40012c00
 8009ad0:	40014000 	.word	0x40014000
 8009ad4:	40014400 	.word	0x40014400

08009ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	f023 0201 	bic.w	r2, r3, #1
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0303 	bic.w	r3, r3, #3
 8009b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 0302 	bic.w	r3, r3, #2
 8009b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a24      	ldr	r2, [pc, #144]	@ (8009bc4 <TIM_OC1_SetConfig+0xec>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d007      	beq.n	8009b48 <TIM_OC1_SetConfig+0x70>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a23      	ldr	r2, [pc, #140]	@ (8009bc8 <TIM_OC1_SetConfig+0xf0>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d003      	beq.n	8009b48 <TIM_OC1_SetConfig+0x70>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a22      	ldr	r2, [pc, #136]	@ (8009bcc <TIM_OC1_SetConfig+0xf4>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d10c      	bne.n	8009b62 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f023 0308 	bic.w	r3, r3, #8
 8009b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f023 0304 	bic.w	r3, r3, #4
 8009b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a17      	ldr	r2, [pc, #92]	@ (8009bc4 <TIM_OC1_SetConfig+0xec>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d007      	beq.n	8009b7a <TIM_OC1_SetConfig+0xa2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a16      	ldr	r2, [pc, #88]	@ (8009bc8 <TIM_OC1_SetConfig+0xf0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d003      	beq.n	8009b7a <TIM_OC1_SetConfig+0xa2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a15      	ldr	r2, [pc, #84]	@ (8009bcc <TIM_OC1_SetConfig+0xf4>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d111      	bne.n	8009b9e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	40012c00 	.word	0x40012c00
 8009bc8:	40014000 	.word	0x40014000
 8009bcc:	40014400 	.word	0x40014400

08009bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	f023 0210 	bic.w	r2, r3, #16
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f023 0320 	bic.w	r3, r3, #32
 8009c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a22      	ldr	r2, [pc, #136]	@ (8009cb8 <TIM_OC2_SetConfig+0xe8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d10d      	bne.n	8009c50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a19      	ldr	r2, [pc, #100]	@ (8009cb8 <TIM_OC2_SetConfig+0xe8>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <TIM_OC2_SetConfig+0x98>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a18      	ldr	r2, [pc, #96]	@ (8009cbc <TIM_OC2_SetConfig+0xec>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <TIM_OC2_SetConfig+0x98>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a17      	ldr	r2, [pc, #92]	@ (8009cc0 <TIM_OC2_SetConfig+0xf0>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d113      	bne.n	8009c90 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	40012c00 	.word	0x40012c00
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400

08009cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a21      	ldr	r2, [pc, #132]	@ (8009da8 <TIM_OC3_SetConfig+0xe4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d10d      	bne.n	8009d42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a18      	ldr	r2, [pc, #96]	@ (8009da8 <TIM_OC3_SetConfig+0xe4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d007      	beq.n	8009d5a <TIM_OC3_SetConfig+0x96>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a17      	ldr	r2, [pc, #92]	@ (8009dac <TIM_OC3_SetConfig+0xe8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d003      	beq.n	8009d5a <TIM_OC3_SetConfig+0x96>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a16      	ldr	r2, [pc, #88]	@ (8009db0 <TIM_OC3_SetConfig+0xec>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d113      	bne.n	8009d82 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	621a      	str	r2, [r3, #32]
}
 8009d9c:	bf00      	nop
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400

08009db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	031b      	lsls	r3, r3, #12
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a14      	ldr	r2, [pc, #80]	@ (8009e64 <TIM_OC4_SetConfig+0xb0>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d007      	beq.n	8009e28 <TIM_OC4_SetConfig+0x74>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a13      	ldr	r2, [pc, #76]	@ (8009e68 <TIM_OC4_SetConfig+0xb4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d003      	beq.n	8009e28 <TIM_OC4_SetConfig+0x74>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a12      	ldr	r2, [pc, #72]	@ (8009e6c <TIM_OC4_SetConfig+0xb8>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d109      	bne.n	8009e3c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	019b      	lsls	r3, r3, #6
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	621a      	str	r2, [r3, #32]
}
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	40012c00 	.word	0x40012c00
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40014400 	.word	0x40014400

08009e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009eb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	041b      	lsls	r3, r3, #16
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a13      	ldr	r2, [pc, #76]	@ (8009f14 <TIM_OC5_SetConfig+0xa4>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d007      	beq.n	8009eda <TIM_OC5_SetConfig+0x6a>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a12      	ldr	r2, [pc, #72]	@ (8009f18 <TIM_OC5_SetConfig+0xa8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d003      	beq.n	8009eda <TIM_OC5_SetConfig+0x6a>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a11      	ldr	r2, [pc, #68]	@ (8009f1c <TIM_OC5_SetConfig+0xac>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d109      	bne.n	8009eee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	021b      	lsls	r3, r3, #8
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	621a      	str	r2, [r3, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	40014000 	.word	0x40014000
 8009f1c:	40014400 	.word	0x40014400

08009f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a14      	ldr	r2, [pc, #80]	@ (8009fc8 <TIM_OC6_SetConfig+0xa8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d007      	beq.n	8009f8c <TIM_OC6_SetConfig+0x6c>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a13      	ldr	r2, [pc, #76]	@ (8009fcc <TIM_OC6_SetConfig+0xac>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <TIM_OC6_SetConfig+0x6c>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a12      	ldr	r2, [pc, #72]	@ (8009fd0 <TIM_OC6_SetConfig+0xb0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d109      	bne.n	8009fa0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	029b      	lsls	r3, r3, #10
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40014000 	.word	0x40014000
 8009fd0:	40014400 	.word	0x40014400

08009fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f023 0201 	bic.w	r2, r3, #1
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f023 030a 	bic.w	r3, r3, #10
 800a010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a032:	b480      	push	{r7}
 800a034:	b087      	sub	sp, #28
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	f023 0210 	bic.w	r2, r3, #16
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a05c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	031b      	lsls	r3, r3, #12
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	4313      	orrs	r3, r2
 800a066:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a06e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4313      	orrs	r3, r2
 800a078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f043 0307 	orr.w	r3, r3, #7
 800a0b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	609a      	str	r2, [r3, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	021a      	lsls	r2, r3, #8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	609a      	str	r2, [r3, #8]
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	2201      	movs	r2, #1
 800a11c:	fa02 f303 	lsl.w	r3, r2, r3
 800a120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	43db      	mvns	r3, r3
 800a12a:	401a      	ands	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1a      	ldr	r2, [r3, #32]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	621a      	str	r2, [r3, #32]
}
 800a146:	bf00      	nop
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
	...

0800a154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a168:	2302      	movs	r3, #2
 800a16a:	e04f      	b.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a21      	ldr	r2, [pc, #132]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d108      	bne.n	800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a19c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a14      	ldr	r2, [pc, #80]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d009      	beq.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d4:	d004      	beq.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a10      	ldr	r2, [pc, #64]	@ (800a21c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10c      	bne.n	800a1fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40012c00 	.word	0x40012c00
 800a21c:	40014000 	.word	0x40014000

0800a220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a238:	2302      	movs	r3, #2
 800a23a:	e060      	b.n	800a2fe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	041b      	lsls	r3, r3, #16
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a14      	ldr	r2, [pc, #80]	@ (800a30c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d115      	bne.n	800a2ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ca:	051b      	lsls	r3, r3, #20
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40012c00 	.word	0x40012c00

0800a310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e040      	b.n	800a3e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7f8 f9fa 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2224      	movs	r2, #36	@ 0x24
 800a378:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0201 	bic.w	r2, r2, #1
 800a388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fd8c 	bl	800aeb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb2f 	bl	800a9fc <UART_SetConfig>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e01b      	b.n	800a3e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0201 	orr.w	r2, r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fe0b 	bl	800aff4 <UART_CheckIdleState>
 800a3de:	4603      	mov	r3, r0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b0ba      	sub	sp, #232	@ 0xe8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a40e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a412:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a416:	4013      	ands	r3, r2
 800a418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a41c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a420:	2b00      	cmp	r3, #0
 800a422:	d115      	bne.n	800a450 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00f      	beq.n	800a450 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a434:	f003 0320 	and.w	r3, r3, #32
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d009      	beq.n	800a450 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 82ae 	beq.w	800a9a2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
      }
      return;
 800a44e:	e2a8      	b.n	800a9a2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8117 	beq.w	800a688 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a466:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a46a:	4b85      	ldr	r3, [pc, #532]	@ (800a680 <HAL_UART_IRQHandler+0x298>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 810a 	beq.w	800a688 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d011      	beq.n	800a4a4 <HAL_UART_IRQHandler+0xbc>
 800a480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00b      	beq.n	800a4a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2201      	movs	r2, #1
 800a492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a49a:	f043 0201 	orr.w	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d011      	beq.n	800a4d4 <HAL_UART_IRQHandler+0xec>
 800a4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ca:	f043 0204 	orr.w	r2, r3, #4
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <HAL_UART_IRQHandler+0x11c>
 800a4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2204      	movs	r2, #4
 800a4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4fa:	f043 0202 	orr.w	r2, r3, #2
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d017      	beq.n	800a540 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d105      	bne.n	800a528 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a51c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a520:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2208      	movs	r2, #8
 800a52e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a536:	f043 0208 	orr.w	r2, r3, #8
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d012      	beq.n	800a572 <HAL_UART_IRQHandler+0x18a>
 800a54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00c      	beq.n	800a572 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a568:	f043 0220 	orr.w	r2, r3, #32
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 8214 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a58e:	f003 0320 	and.w	r3, r3, #32
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ba:	2b40      	cmp	r3, #64	@ 0x40
 800a5bc:	d005      	beq.n	800a5ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a5c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d04f      	beq.n	800a66a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fe21 	bl	800b212 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5da:	2b40      	cmp	r3, #64	@ 0x40
 800a5dc:	d141      	bne.n	800a662 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a60a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a60e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1d9      	bne.n	800a5de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d013      	beq.n	800a65a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a636:	4a13      	ldr	r2, [pc, #76]	@ (800a684 <HAL_UART_IRQHandler+0x29c>)
 800a638:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a63e:	4618      	mov	r0, r3
 800a640:	f7f9 fcbe 	bl	8003fc0 <HAL_DMA_Abort_IT>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d017      	beq.n	800a67a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a654:	4610      	mov	r0, r2
 800a656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a658:	e00f      	b.n	800a67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9b8 	bl	800a9d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a660:	e00b      	b.n	800a67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f9b4 	bl	800a9d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a668:	e007      	b.n	800a67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f9b0 	bl	800a9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a678:	e195      	b.n	800a9a6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67a:	bf00      	nop
    return;
 800a67c:	e193      	b.n	800a9a6 <HAL_UART_IRQHandler+0x5be>
 800a67e:	bf00      	nop
 800a680:	04000120 	.word	0x04000120
 800a684:	0800b2db 	.word	0x0800b2db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	f040 814e 	bne.w	800a92e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a696:	f003 0310 	and.w	r3, r3, #16
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 8147 	beq.w	800a92e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 8140 	beq.w	800a92e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2210      	movs	r2, #16
 800a6b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c0:	2b40      	cmp	r3, #64	@ 0x40
 800a6c2:	f040 80b8 	bne.w	800a836 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 8167 	beq.w	800a9aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a6e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	f080 815f 	bcs.w	800a9aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	f040 8086 	bne.w	800a814 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a71c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a73e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1da      	bne.n	800a708 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a764:	f023 0301 	bic.w	r3, r3, #1
 800a768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3308      	adds	r3, #8
 800a772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a77a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a77e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e1      	bne.n	800a752 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3308      	adds	r3, #8
 800a794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a798:	e853 3f00 	ldrex	r3, [r3]
 800a79c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a79e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a7b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e3      	bne.n	800a78e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e4:	f023 0310 	bic.w	r3, r3, #16
 800a7e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e4      	bne.n	800a7d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f9 fb98 	bl	8003f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a826:	b29b      	uxth	r3, r3
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f8d8 	bl	800a9e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a834:	e0b9      	b.n	800a9aa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a842:	b29b      	uxth	r3, r3
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 80ab 	beq.w	800a9ae <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800a858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 80a6 	beq.w	800a9ae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a876:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a884:	647b      	str	r3, [r7, #68]	@ 0x44
 800a886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e4      	bne.n	800a862 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3308      	adds	r3, #8
 800a89e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	f023 0301 	bic.w	r3, r3, #1
 800a8ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a8bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e3      	bne.n	800a898 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f023 0310 	bic.w	r3, r3, #16
 800a8f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	69b9      	ldr	r1, [r7, #24]
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	617b      	str	r3, [r7, #20]
   return(result);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e4      	bne.n	800a8e4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2202      	movs	r2, #2
 800a91e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f85c 	bl	800a9e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a92c:	e03f      	b.n	800a9ae <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <HAL_UART_IRQHandler+0x570>
 800a93a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a93e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d008      	beq.n	800a958 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a94e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fd02 	bl	800b35a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a956:	e02d      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a95c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00e      	beq.n	800a982 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d008      	beq.n	800a982 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01c      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	4798      	blx	r3
    }
    return;
 800a980:	e017      	b.n	800a9b2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d012      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
 800a98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00c      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fcb3 	bl	800b306 <UART_EndTransmit_IT>
    return;
 800a9a0:	e008      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a9a2:	bf00      	nop
 800a9a4:	e006      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800a9b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a9b4:	37e8      	adds	r7, #232	@ 0xe8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop

0800a9bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa00:	b08a      	sub	sp, #40	@ 0x28
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	689a      	ldr	r2, [r3, #8]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	431a      	orrs	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b9e      	ldr	r3, [pc, #632]	@ (800aca4 <UART_SetConfig+0x2a8>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	68da      	ldr	r2, [r3, #12]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a93      	ldr	r2, [pc, #588]	@ (800aca8 <UART_SetConfig+0x2ac>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d004      	beq.n	800aa68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa64:	4313      	orrs	r3, r2
 800aa66:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a8a      	ldr	r2, [pc, #552]	@ (800acac <UART_SetConfig+0x2b0>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d126      	bne.n	800aad4 <UART_SetConfig+0xd8>
 800aa86:	4b8a      	ldr	r3, [pc, #552]	@ (800acb0 <UART_SetConfig+0x2b4>)
 800aa88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d81b      	bhi.n	800aacc <UART_SetConfig+0xd0>
 800aa94:	a201      	add	r2, pc, #4	@ (adr r2, 800aa9c <UART_SetConfig+0xa0>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aab5 	.word	0x0800aab5
 800aaa8:	0800aac5 	.word	0x0800aac5
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aab2:	e0ab      	b.n	800ac0c <UART_SetConfig+0x210>
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aaba:	e0a7      	b.n	800ac0c <UART_SetConfig+0x210>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aac2:	e0a3      	b.n	800ac0c <UART_SetConfig+0x210>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aaca:	e09f      	b.n	800ac0c <UART_SetConfig+0x210>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aad2:	e09b      	b.n	800ac0c <UART_SetConfig+0x210>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a76      	ldr	r2, [pc, #472]	@ (800acb4 <UART_SetConfig+0x2b8>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d138      	bne.n	800ab50 <UART_SetConfig+0x154>
 800aade:	4b74      	ldr	r3, [pc, #464]	@ (800acb0 <UART_SetConfig+0x2b4>)
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae4:	f003 030c 	and.w	r3, r3, #12
 800aae8:	2b0c      	cmp	r3, #12
 800aaea:	d82d      	bhi.n	800ab48 <UART_SetConfig+0x14c>
 800aaec:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf4 <UART_SetConfig+0xf8>)
 800aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf2:	bf00      	nop
 800aaf4:	0800ab29 	.word	0x0800ab29
 800aaf8:	0800ab49 	.word	0x0800ab49
 800aafc:	0800ab49 	.word	0x0800ab49
 800ab00:	0800ab49 	.word	0x0800ab49
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800ab49 	.word	0x0800ab49
 800ab0c:	0800ab49 	.word	0x0800ab49
 800ab10:	0800ab49 	.word	0x0800ab49
 800ab14:	0800ab31 	.word	0x0800ab31
 800ab18:	0800ab49 	.word	0x0800ab49
 800ab1c:	0800ab49 	.word	0x0800ab49
 800ab20:	0800ab49 	.word	0x0800ab49
 800ab24:	0800ab41 	.word	0x0800ab41
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab2e:	e06d      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab30:	2302      	movs	r3, #2
 800ab32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab36:	e069      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab3e:	e065      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab40:	2308      	movs	r3, #8
 800ab42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab46:	e061      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab4e:	e05d      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a58      	ldr	r2, [pc, #352]	@ (800acb8 <UART_SetConfig+0x2bc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d125      	bne.n	800aba6 <UART_SetConfig+0x1aa>
 800ab5a:	4b55      	ldr	r3, [pc, #340]	@ (800acb0 <UART_SetConfig+0x2b4>)
 800ab5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab64:	2b30      	cmp	r3, #48	@ 0x30
 800ab66:	d016      	beq.n	800ab96 <UART_SetConfig+0x19a>
 800ab68:	2b30      	cmp	r3, #48	@ 0x30
 800ab6a:	d818      	bhi.n	800ab9e <UART_SetConfig+0x1a2>
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d00a      	beq.n	800ab86 <UART_SetConfig+0x18a>
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d814      	bhi.n	800ab9e <UART_SetConfig+0x1a2>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <UART_SetConfig+0x182>
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	d008      	beq.n	800ab8e <UART_SetConfig+0x192>
 800ab7c:	e00f      	b.n	800ab9e <UART_SetConfig+0x1a2>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab84:	e042      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab86:	2302      	movs	r3, #2
 800ab88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab8c:	e03e      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab8e:	2304      	movs	r3, #4
 800ab90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab94:	e03a      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab96:	2308      	movs	r3, #8
 800ab98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab9c:	e036      	b.n	800ac0c <UART_SetConfig+0x210>
 800ab9e:	2310      	movs	r3, #16
 800aba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aba4:	e032      	b.n	800ac0c <UART_SetConfig+0x210>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a3f      	ldr	r2, [pc, #252]	@ (800aca8 <UART_SetConfig+0x2ac>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d12a      	bne.n	800ac06 <UART_SetConfig+0x20a>
 800abb0:	4b3f      	ldr	r3, [pc, #252]	@ (800acb0 <UART_SetConfig+0x2b4>)
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800abba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abbe:	d01a      	beq.n	800abf6 <UART_SetConfig+0x1fa>
 800abc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abc4:	d81b      	bhi.n	800abfe <UART_SetConfig+0x202>
 800abc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abca:	d00c      	beq.n	800abe6 <UART_SetConfig+0x1ea>
 800abcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abd0:	d815      	bhi.n	800abfe <UART_SetConfig+0x202>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <UART_SetConfig+0x1e2>
 800abd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abda:	d008      	beq.n	800abee <UART_SetConfig+0x1f2>
 800abdc:	e00f      	b.n	800abfe <UART_SetConfig+0x202>
 800abde:	2300      	movs	r3, #0
 800abe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abe4:	e012      	b.n	800ac0c <UART_SetConfig+0x210>
 800abe6:	2302      	movs	r3, #2
 800abe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abec:	e00e      	b.n	800ac0c <UART_SetConfig+0x210>
 800abee:	2304      	movs	r3, #4
 800abf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abf4:	e00a      	b.n	800ac0c <UART_SetConfig+0x210>
 800abf6:	2308      	movs	r3, #8
 800abf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abfc:	e006      	b.n	800ac0c <UART_SetConfig+0x210>
 800abfe:	2310      	movs	r3, #16
 800ac00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac04:	e002      	b.n	800ac0c <UART_SetConfig+0x210>
 800ac06:	2310      	movs	r3, #16
 800ac08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a25      	ldr	r2, [pc, #148]	@ (800aca8 <UART_SetConfig+0x2ac>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	f040 808a 	bne.w	800ad2c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d824      	bhi.n	800ac6a <UART_SetConfig+0x26e>
 800ac20:	a201      	add	r2, pc, #4	@ (adr r2, 800ac28 <UART_SetConfig+0x22c>)
 800ac22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac26:	bf00      	nop
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac6b 	.word	0x0800ac6b
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac6b 	.word	0x0800ac6b
 800ac38:	0800ac5b 	.word	0x0800ac5b
 800ac3c:	0800ac6b 	.word	0x0800ac6b
 800ac40:	0800ac6b 	.word	0x0800ac6b
 800ac44:	0800ac6b 	.word	0x0800ac6b
 800ac48:	0800ac63 	.word	0x0800ac63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac4c:	f7fb fa04 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800ac50:	61f8      	str	r0, [r7, #28]
        break;
 800ac52:	e010      	b.n	800ac76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac54:	4b19      	ldr	r3, [pc, #100]	@ (800acbc <UART_SetConfig+0x2c0>)
 800ac56:	61fb      	str	r3, [r7, #28]
        break;
 800ac58:	e00d      	b.n	800ac76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac5a:	f7fb f965 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 800ac5e:	61f8      	str	r0, [r7, #28]
        break;
 800ac60:	e009      	b.n	800ac76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac66:	61fb      	str	r3, [r7, #28]
        break;
 800ac68:	e005      	b.n	800ac76 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ac74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8109 	beq.w	800ae90 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	69fa      	ldr	r2, [r7, #28]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d305      	bcc.n	800ac9a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d912      	bls.n	800acc0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aca0:	e0f6      	b.n	800ae90 <UART_SetConfig+0x494>
 800aca2:	bf00      	nop
 800aca4:	efff69f3 	.word	0xefff69f3
 800aca8:	40008000 	.word	0x40008000
 800acac:	40013800 	.word	0x40013800
 800acb0:	40021000 	.word	0x40021000
 800acb4:	40004400 	.word	0x40004400
 800acb8:	40004800 	.word	0x40004800
 800acbc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	2200      	movs	r2, #0
 800acc4:	461c      	mov	r4, r3
 800acc6:	4615      	mov	r5, r2
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f04f 0300 	mov.w	r3, #0
 800acd0:	022b      	lsls	r3, r5, #8
 800acd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800acd6:	0222      	lsls	r2, r4, #8
 800acd8:	68f9      	ldr	r1, [r7, #12]
 800acda:	6849      	ldr	r1, [r1, #4]
 800acdc:	0849      	lsrs	r1, r1, #1
 800acde:	2000      	movs	r0, #0
 800ace0:	4688      	mov	r8, r1
 800ace2:	4681      	mov	r9, r0
 800ace4:	eb12 0a08 	adds.w	sl, r2, r8
 800ace8:	eb43 0b09 	adc.w	fp, r3, r9
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	603b      	str	r3, [r7, #0]
 800acf4:	607a      	str	r2, [r7, #4]
 800acf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfa:	4650      	mov	r0, sl
 800acfc:	4659      	mov	r1, fp
 800acfe:	f7f5 fdbd 	bl	800087c <__aeabi_uldivmod>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4613      	mov	r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad10:	d308      	bcc.n	800ad24 <UART_SetConfig+0x328>
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad18:	d204      	bcs.n	800ad24 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	60da      	str	r2, [r3, #12]
 800ad22:	e0b5      	b.n	800ae90 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ad2a:	e0b1      	b.n	800ae90 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad34:	d15d      	bne.n	800adf2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800ad36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad3a:	2b08      	cmp	r3, #8
 800ad3c:	d827      	bhi.n	800ad8e <UART_SetConfig+0x392>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <UART_SetConfig+0x348>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad69 	.word	0x0800ad69
 800ad48:	0800ad71 	.word	0x0800ad71
 800ad4c:	0800ad79 	.word	0x0800ad79
 800ad50:	0800ad8f 	.word	0x0800ad8f
 800ad54:	0800ad7f 	.word	0x0800ad7f
 800ad58:	0800ad8f 	.word	0x0800ad8f
 800ad5c:	0800ad8f 	.word	0x0800ad8f
 800ad60:	0800ad8f 	.word	0x0800ad8f
 800ad64:	0800ad87 	.word	0x0800ad87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad68:	f7fb f976 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800ad6c:	61f8      	str	r0, [r7, #28]
        break;
 800ad6e:	e014      	b.n	800ad9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad70:	f7fb f988 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 800ad74:	61f8      	str	r0, [r7, #28]
        break;
 800ad76:	e010      	b.n	800ad9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad78:	4b4c      	ldr	r3, [pc, #304]	@ (800aeac <UART_SetConfig+0x4b0>)
 800ad7a:	61fb      	str	r3, [r7, #28]
        break;
 800ad7c:	e00d      	b.n	800ad9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad7e:	f7fb f8d3 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 800ad82:	61f8      	str	r0, [r7, #28]
        break;
 800ad84:	e009      	b.n	800ad9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad8a:	61fb      	str	r3, [r7, #28]
        break;
 800ad8c:	e005      	b.n	800ad9a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ad98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d077      	beq.n	800ae90 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	005a      	lsls	r2, r3, #1
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	085b      	lsrs	r3, r3, #1
 800adaa:	441a      	add	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	2b0f      	cmp	r3, #15
 800adba:	d916      	bls.n	800adea <UART_SetConfig+0x3ee>
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc2:	d212      	bcs.n	800adea <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f023 030f 	bic.w	r3, r3, #15
 800adcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	085b      	lsrs	r3, r3, #1
 800add2:	b29b      	uxth	r3, r3
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	b29a      	uxth	r2, r3
 800adda:	8afb      	ldrh	r3, [r7, #22]
 800addc:	4313      	orrs	r3, r2
 800adde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	8afa      	ldrh	r2, [r7, #22]
 800ade6:	60da      	str	r2, [r3, #12]
 800ade8:	e052      	b.n	800ae90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800adf0:	e04e      	b.n	800ae90 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800adf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adf6:	2b08      	cmp	r3, #8
 800adf8:	d827      	bhi.n	800ae4a <UART_SetConfig+0x44e>
 800adfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <UART_SetConfig+0x404>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae25 	.word	0x0800ae25
 800ae04:	0800ae2d 	.word	0x0800ae2d
 800ae08:	0800ae35 	.word	0x0800ae35
 800ae0c:	0800ae4b 	.word	0x0800ae4b
 800ae10:	0800ae3b 	.word	0x0800ae3b
 800ae14:	0800ae4b 	.word	0x0800ae4b
 800ae18:	0800ae4b 	.word	0x0800ae4b
 800ae1c:	0800ae4b 	.word	0x0800ae4b
 800ae20:	0800ae43 	.word	0x0800ae43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae24:	f7fb f918 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800ae28:	61f8      	str	r0, [r7, #28]
        break;
 800ae2a:	e014      	b.n	800ae56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae2c:	f7fb f92a 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 800ae30:	61f8      	str	r0, [r7, #28]
        break;
 800ae32:	e010      	b.n	800ae56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae34:	4b1d      	ldr	r3, [pc, #116]	@ (800aeac <UART_SetConfig+0x4b0>)
 800ae36:	61fb      	str	r3, [r7, #28]
        break;
 800ae38:	e00d      	b.n	800ae56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3a:	f7fb f875 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 800ae3e:	61f8      	str	r0, [r7, #28]
        break;
 800ae40:	e009      	b.n	800ae56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae46:	61fb      	str	r3, [r7, #28]
        break;
 800ae48:	e005      	b.n	800ae56 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ae54:	bf00      	nop
    }

    if (pclk != 0U)
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d019      	beq.n	800ae90 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	085a      	lsrs	r2, r3, #1
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	441a      	add	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d909      	bls.n	800ae8a <UART_SetConfig+0x48e>
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae7c:	d205      	bcs.n	800ae8a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60da      	str	r2, [r3, #12]
 800ae88:	e002      	b.n	800ae90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ae9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3728      	adds	r7, #40	@ 0x28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeaa:	bf00      	nop
 800aeac:	00f42400 	.word	0x00f42400

0800aeb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebc:	f003 0308 	and.w	r3, r3, #8
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	f003 0302 	and.w	r3, r3, #2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af22:	f003 0304 	and.w	r3, r3, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af44:	f003 0310 	and.w	r3, r3, #16
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01a      	beq.n	800afc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afae:	d10a      	bne.n	800afc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	430a      	orrs	r2, r1
 800afc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	605a      	str	r2, [r3, #4]
  }
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b098      	sub	sp, #96	@ 0x60
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b004:	f7f8 fca6 	bl	8003954 <HAL_GetTick>
 800b008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0308 	and.w	r3, r3, #8
 800b014:	2b08      	cmp	r3, #8
 800b016:	d12e      	bne.n	800b076 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b020:	2200      	movs	r2, #0
 800b022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f88c 	bl	800b144 <UART_WaitOnFlagUntilTimeout>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d021      	beq.n	800b076 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b046:	653b      	str	r3, [r7, #80]	@ 0x50
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b050:	647b      	str	r3, [r7, #68]	@ 0x44
 800b052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e6      	bne.n	800b032 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2220      	movs	r2, #32
 800b068:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e062      	b.n	800b13c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b04      	cmp	r3, #4
 800b082:	d149      	bne.n	800b118 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b084:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b08c:	2200      	movs	r2, #0
 800b08e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f856 	bl	800b144 <UART_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d03c      	beq.n	800b118 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a6:	e853 3f00 	ldrex	r3, [r3]
 800b0aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e6      	bne.n	800b09e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0f0:	61fa      	str	r2, [r7, #28]
 800b0f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	69b9      	ldr	r1, [r7, #24]
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e5      	bne.n	800b0d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e011      	b.n	800b13c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2220      	movs	r2, #32
 800b11c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2220      	movs	r2, #32
 800b122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3758      	adds	r7, #88	@ 0x58
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b154:	e049      	b.n	800b1ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d045      	beq.n	800b1ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b15e:	f7f8 fbf9 	bl	8003954 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d302      	bcc.n	800b174 <UART_WaitOnFlagUntilTimeout+0x30>
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e048      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d031      	beq.n	800b1ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	f003 0308 	and.w	r3, r3, #8
 800b190:	2b08      	cmp	r3, #8
 800b192:	d110      	bne.n	800b1b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2208      	movs	r2, #8
 800b19a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 f838 	bl	800b212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e029      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1c4:	d111      	bne.n	800b1ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 f81e 	bl	800b212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e00f      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69da      	ldr	r2, [r3, #28]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	bf0c      	ite	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	2300      	movne	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	461a      	mov	r2, r3
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	429a      	cmp	r2, r3
 800b206:	d0a6      	beq.n	800b156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b212:	b480      	push	{r7}
 800b214:	b095      	sub	sp, #84	@ 0x54
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b238:	643b      	str	r3, [r7, #64]	@ 0x40
 800b23a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b23e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e6      	bne.n	800b21a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3308      	adds	r3, #8
 800b252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	f023 0301 	bic.w	r3, r3, #1
 800b262:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3308      	adds	r3, #8
 800b26a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b26c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e5      	bne.n	800b24c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b284:	2b01      	cmp	r3, #1
 800b286:	d118      	bne.n	800b2ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	60bb      	str	r3, [r7, #8]
   return(result);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f023 0310 	bic.w	r3, r3, #16
 800b29c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	6979      	ldr	r1, [r7, #20]
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e6      	bne.n	800b288 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b2ce:	bf00      	nop
 800b2d0:	3754      	adds	r7, #84	@ 0x54
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff fb69 	bl	800a9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2fe:	bf00      	nop
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b088      	sub	sp, #32
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	6979      	ldr	r1, [r7, #20]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	e841 2300 	strex	r3, r2, [r1]
 800b338:	613b      	str	r3, [r7, #16]
   return(result);
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e6      	bne.n	800b30e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2220      	movs	r2, #32
 800b344:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff fb35 	bl	800a9bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b352:	bf00      	nop
 800b354:	3720      	adds	r7, #32
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b36e:	b480      	push	{r7}
 800b370:	b08b      	sub	sp, #44	@ 0x2c
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	fa93 f3a3 	rbit	r3, r3
 800b388:	613b      	str	r3, [r7, #16]
  return result;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b394:	2320      	movs	r3, #32
 800b396:	e003      	b.n	800b3a0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	fab3 f383 	clz	r3, r3
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	2103      	movs	r1, #3
 800b3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a8:	43db      	mvns	r3, r3
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	fa93 f3a3 	rbit	r3, r3
 800b3b6:	61fb      	str	r3, [r7, #28]
  return result;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b3c2:	2320      	movs	r3, #32
 800b3c4:	e003      	b.n	800b3ce <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	fab3 f383 	clz	r3, r3
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	6879      	ldr	r1, [r7, #4]
 800b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	601a      	str	r2, [r3, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	372c      	adds	r7, #44	@ 0x2c
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	43db      	mvns	r3, r3
 800b3fc:	401a      	ands	r2, r3
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6879      	ldr	r1, [r7, #4]
 800b402:	fb01 f303 	mul.w	r3, r1, r3
 800b406:	431a      	orrs	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	605a      	str	r2, [r3, #4]
}
 800b40c:	bf00      	nop
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b418:	b480      	push	{r7}
 800b41a:	b08b      	sub	sp, #44	@ 0x2c
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	fa93 f3a3 	rbit	r3, r3
 800b432:	613b      	str	r3, [r7, #16]
  return result;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b43e:	2320      	movs	r3, #32
 800b440:	e003      	b.n	800b44a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	fab3 f383 	clz	r3, r3
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	2103      	movs	r1, #3
 800b44e:	fa01 f303 	lsl.w	r3, r1, r3
 800b452:	43db      	mvns	r3, r3
 800b454:	401a      	ands	r2, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	fa93 f3a3 	rbit	r3, r3
 800b460:	61fb      	str	r3, [r7, #28]
  return result;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b46c:	2320      	movs	r3, #32
 800b46e:	e003      	b.n	800b478 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	fab3 f383 	clz	r3, r3
 800b476:	b2db      	uxtb	r3, r3
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	fa01 f303 	lsl.w	r3, r1, r3
 800b480:	431a      	orrs	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b486:	bf00      	nop
 800b488:	372c      	adds	r7, #44	@ 0x2c
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b492:	b480      	push	{r7}
 800b494:	b08b      	sub	sp, #44	@ 0x2c
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	60b9      	str	r1, [r7, #8]
 800b49c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	fa93 f3a3 	rbit	r3, r3
 800b4ac:	613b      	str	r3, [r7, #16]
  return result;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	e003      	b.n	800b4c4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	fab3 f383 	clz	r3, r3
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	2103      	movs	r1, #3
 800b4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4cc:	43db      	mvns	r3, r3
 800b4ce:	401a      	ands	r2, r3
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	fa93 f3a3 	rbit	r3, r3
 800b4da:	61fb      	str	r3, [r7, #28]
  return result;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b4e6:	2320      	movs	r3, #32
 800b4e8:	e003      	b.n	800b4f2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	fab3 f383 	clz	r3, r3
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	60da      	str	r2, [r3, #12]
}
 800b500:	bf00      	nop
 800b502:	372c      	adds	r7, #44	@ 0x2c
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b08b      	sub	sp, #44	@ 0x2c
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a1a      	ldr	r2, [r3, #32]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	fa93 f3a3 	rbit	r3, r3
 800b526:	613b      	str	r3, [r7, #16]
  return result;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b532:	2320      	movs	r3, #32
 800b534:	e003      	b.n	800b53e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	fab3 f383 	clz	r3, r3
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	210f      	movs	r1, #15
 800b542:	fa01 f303 	lsl.w	r3, r1, r3
 800b546:	43db      	mvns	r3, r3
 800b548:	401a      	ands	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	fa93 f3a3 	rbit	r3, r3
 800b554:	61fb      	str	r3, [r7, #28]
  return result;
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b560:	2320      	movs	r3, #32
 800b562:	e003      	b.n	800b56c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	fab3 f383 	clz	r3, r3
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	fa01 f303 	lsl.w	r3, r1, r3
 800b574:	431a      	orrs	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b57a:	bf00      	nop
 800b57c:	372c      	adds	r7, #44	@ 0x2c
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b586:	b480      	push	{r7}
 800b588:	b08b      	sub	sp, #44	@ 0x2c
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	fa93 f3a3 	rbit	r3, r3
 800b5a2:	613b      	str	r3, [r7, #16]
  return result;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	e003      	b.n	800b5ba <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	fab3 f383 	clz	r3, r3
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	210f      	movs	r1, #15
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	401a      	ands	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	0a1b      	lsrs	r3, r3, #8
 800b5ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	fa93 f3a3 	rbit	r3, r3
 800b5d2:	61fb      	str	r3, [r7, #28]
  return result;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b5de:	2320      	movs	r3, #32
 800b5e0:	e003      	b.n	800b5ea <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e4:	fab3 f383 	clz	r3, r3
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b5f8:	bf00      	nop
 800b5fa:	372c      	adds	r7, #44	@ 0x2c
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	fa93 f3a3 	rbit	r3, r3
 800b61a:	60fb      	str	r3, [r7, #12]
  return result;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <LL_GPIO_Init+0x26>
    return 32U;
 800b626:	2320      	movs	r3, #32
 800b628:	e003      	b.n	800b632 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	fab3 f383 	clz	r3, r3
 800b630:	b2db      	uxtb	r3, r3
 800b632:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800b634:	e048      	b.n	800b6c8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	2101      	movs	r1, #1
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	fa01 f303 	lsl.w	r3, r1, r3
 800b642:	4013      	ands	r3, r2
 800b644:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d03a      	beq.n	800b6c2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d003      	beq.n	800b65c <LL_GPIO_Init+0x58>
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d10e      	bne.n	800b67a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	461a      	mov	r2, r3
 800b662:	69b9      	ldr	r1, [r7, #24]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff fed7 	bl	800b418 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6819      	ldr	r1, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	461a      	mov	r2, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff feb7 	bl	800b3e8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	461a      	mov	r2, r3
 800b680:	69b9      	ldr	r1, [r7, #24]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ff05 	bl	800b492 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d111      	bne.n	800b6b4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2bff      	cmp	r3, #255	@ 0xff
 800b694:	d807      	bhi.n	800b6a6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	461a      	mov	r2, r3
 800b69c:	69b9      	ldr	r1, [r7, #24]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff ff34 	bl	800b50c <LL_GPIO_SetAFPin_0_7>
 800b6a4:	e006      	b.n	800b6b4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	69b9      	ldr	r1, [r7, #24]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff ff69 	bl	800b586 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	69b9      	ldr	r1, [r7, #24]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7ff fe56 	bl	800b36e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1af      	bne.n	800b636 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b6e4:	4b07      	ldr	r3, [pc, #28]	@ (800b704 <LL_RCC_HSI_IsReady+0x24>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6f0:	d101      	bne.n	800b6f6 <LL_RCC_HSI_IsReady+0x16>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <LL_RCC_HSI_IsReady+0x18>
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40021000 	.word	0x40021000

0800b708 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800b708:	b480      	push	{r7}
 800b70a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800b70c:	4b07      	ldr	r3, [pc, #28]	@ (800b72c <LL_RCC_LSE_IsReady+0x24>)
 800b70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b02      	cmp	r3, #2
 800b718:	d101      	bne.n	800b71e <LL_RCC_LSE_IsReady+0x16>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e000      	b.n	800b720 <LL_RCC_LSE_IsReady+0x18>
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	40021000 	.word	0x40021000

0800b730 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800b734:	4b06      	ldr	r3, [pc, #24]	@ (800b750 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0308 	and.w	r3, r3, #8
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d101      	bne.n	800b744 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800b740:	2301      	movs	r3, #1
 800b742:	e000      	b.n	800b746 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	40021000 	.word	0x40021000

0800b754 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800b754:	b480      	push	{r7}
 800b756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800b758:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <LL_RCC_MSI_GetRange+0x18>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b760:	4618      	mov	r0, r3
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	40021000 	.word	0x40021000

0800b770 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800b770:	b480      	push	{r7}
 800b772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800b776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b77a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800b77e:	4618      	mov	r0, r3
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	40021000 	.word	0x40021000

0800b78c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b790:	4b04      	ldr	r3, [pc, #16]	@ (800b7a4 <LL_RCC_GetSysClkSource+0x18>)
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f003 030c 	and.w	r3, r3, #12
}
 800b798:	4618      	mov	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40021000 	.word	0x40021000

0800b7a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b7ac:	4b04      	ldr	r3, [pc, #16]	@ (800b7c0 <LL_RCC_GetAHBPrescaler+0x18>)
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	40021000 	.word	0x40021000

0800b7c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b7c8:	4b04      	ldr	r3, [pc, #16]	@ (800b7dc <LL_RCC_GetAPB1Prescaler+0x18>)
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	40021000 	.word	0x40021000

0800b7e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b7e4:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000

0800b7fc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800b804:	4b06      	ldr	r3, [pc, #24]	@ (800b820 <LL_RCC_GetUSARTClockSource+0x24>)
 800b806:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	401a      	ands	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	041b      	lsls	r3, r3, #16
 800b812:	4313      	orrs	r3, r2
}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	40021000 	.word	0x40021000

0800b824 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b828:	4b04      	ldr	r3, [pc, #16]	@ (800b83c <LL_RCC_PLL_GetMainSource+0x18>)
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f003 0303 	and.w	r3, r3, #3
}
 800b830:	4618      	mov	r0, r3
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	40021000 	.word	0x40021000

0800b840 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <LL_RCC_PLL_GetN+0x18>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b84e:	4618      	mov	r0, r3
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	40021000 	.word	0x40021000

0800b85c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b85c:	b480      	push	{r7}
 800b85e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b860:	4b04      	ldr	r3, [pc, #16]	@ (800b874 <LL_RCC_PLL_GetR+0x18>)
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 800b868:	4618      	mov	r0, r3
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40021000 	.word	0x40021000

0800b878 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b87c:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <LL_RCC_PLL_GetDivider+0x18>)
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b884:	4618      	mov	r0, r3
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40021000 	.word	0x40021000

0800b894 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d137      	bne.n	800b916 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff ffa8 	bl	800b7fc <LL_RCC_GetUSARTClockSource>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	f200 80b3 	bhi.w	800ba1e <LL_RCC_GetUSARTClockFreq+0x18a>
 800b8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800b8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8be:	bf00      	nop
 800b8c0:	0800b8ff 	.word	0x0800b8ff
 800b8c4:	0800b8d1 	.word	0x0800b8d1
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8eb 	.word	0x0800b8eb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800b8d0:	f000 f8c2 	bl	800ba58 <RCC_GetSystemClockFreq>
 800b8d4:	60f8      	str	r0, [r7, #12]
        break;
 800b8d6:	e0b3      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b8d8:	f7ff ff02 	bl	800b6e0 <LL_RCC_HSI_IsReady>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f000 809f 	beq.w	800ba22 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800b8e4:	4b59      	ldr	r3, [pc, #356]	@ (800ba4c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800b8e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b8e8:	e09b      	b.n	800ba22 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b8ea:	f7ff ff0d 	bl	800b708 <LL_RCC_LSE_IsReady>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8098 	beq.w	800ba26 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800b8f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b8fc:	e093      	b.n	800ba26 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b8fe:	f000 f8ab 	bl	800ba58 <RCC_GetSystemClockFreq>
 800b902:	4603      	mov	r3, r0
 800b904:	4618      	mov	r0, r3
 800b906:	f000 f937 	bl	800bb78 <RCC_GetHCLKClockFreq>
 800b90a:	4603      	mov	r3, r0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 f95d 	bl	800bbcc <RCC_GetPCLK2ClockFreq>
 800b912:	60f8      	str	r0, [r7, #12]
        break;
 800b914:	e094      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b0c      	cmp	r3, #12
 800b91a:	d146      	bne.n	800b9aa <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff ff6d 	bl	800b7fc <LL_RCC_GetUSARTClockSource>
 800b922:	4603      	mov	r3, r0
 800b924:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800b928:	2b0c      	cmp	r3, #12
 800b92a:	d87e      	bhi.n	800ba2a <LL_RCC_GetUSARTClockFreq+0x196>
 800b92c:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b932:	bf00      	nop
 800b934:	0800b993 	.word	0x0800b993
 800b938:	0800ba2b 	.word	0x0800ba2b
 800b93c:	0800ba2b 	.word	0x0800ba2b
 800b940:	0800ba2b 	.word	0x0800ba2b
 800b944:	0800b969 	.word	0x0800b969
 800b948:	0800ba2b 	.word	0x0800ba2b
 800b94c:	0800ba2b 	.word	0x0800ba2b
 800b950:	0800ba2b 	.word	0x0800ba2b
 800b954:	0800b971 	.word	0x0800b971
 800b958:	0800ba2b 	.word	0x0800ba2b
 800b95c:	0800ba2b 	.word	0x0800ba2b
 800b960:	0800ba2b 	.word	0x0800ba2b
 800b964:	0800b981 	.word	0x0800b981
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800b968:	f000 f876 	bl	800ba58 <RCC_GetSystemClockFreq>
 800b96c:	60f8      	str	r0, [r7, #12]
        break;
 800b96e:	e067      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800b970:	f7ff feb6 	bl	800b6e0 <LL_RCC_HSI_IsReady>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d059      	beq.n	800ba2e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800b97a:	4b34      	ldr	r3, [pc, #208]	@ (800ba4c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800b97c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b97e:	e056      	b.n	800ba2e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800b980:	f7ff fec2 	bl	800b708 <LL_RCC_LSE_IsReady>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d053      	beq.n	800ba32 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800b98a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b98e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b990:	e04f      	b.n	800ba32 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b992:	f000 f861 	bl	800ba58 <RCC_GetSystemClockFreq>
 800b996:	4603      	mov	r3, r0
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 f8ed 	bl	800bb78 <RCC_GetHCLKClockFreq>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f8ff 	bl	800bba4 <RCC_GetPCLK1ClockFreq>
 800b9a6:	60f8      	str	r0, [r7, #12]
        break;
 800b9a8:	e04a      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b30      	cmp	r3, #48	@ 0x30
 800b9ae:	d147      	bne.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff ff23 	bl	800b7fc <LL_RCC_GetUSARTClockSource>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b9bc:	d01a      	beq.n	800b9f4 <LL_RCC_GetUSARTClockFreq+0x160>
 800b9be:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b9c2:	d838      	bhi.n	800ba36 <LL_RCC_GetUSARTClockFreq+0x1a2>
 800b9c4:	4a22      	ldr	r2, [pc, #136]	@ (800ba50 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00c      	beq.n	800b9e4 <LL_RCC_GetUSARTClockFreq+0x150>
 800b9ca:	4a21      	ldr	r2, [pc, #132]	@ (800ba50 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d832      	bhi.n	800ba36 <LL_RCC_GetUSARTClockFreq+0x1a2>
 800b9d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9d4:	d017      	beq.n	800ba06 <LL_RCC_GetUSARTClockFreq+0x172>
 800b9d6:	4a1f      	ldr	r2, [pc, #124]	@ (800ba54 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d12c      	bne.n	800ba36 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800b9dc:	f000 f83c 	bl	800ba58 <RCC_GetSystemClockFreq>
 800b9e0:	60f8      	str	r0, [r7, #12]
          break;
 800b9e2:	e02d      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800b9e4:	f7ff fe7c 	bl	800b6e0 <LL_RCC_HSI_IsReady>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d025      	beq.n	800ba3a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800b9ee:	4b17      	ldr	r3, [pc, #92]	@ (800ba4c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800b9f0:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b9f2:	e022      	b.n	800ba3a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800b9f4:	f7ff fe88 	bl	800b708 <LL_RCC_LSE_IsReady>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d01f      	beq.n	800ba3e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800b9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba02:	60fb      	str	r3, [r7, #12]
          }
          break;
 800ba04:	e01b      	b.n	800ba3e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ba06:	f000 f827 	bl	800ba58 <RCC_GetSystemClockFreq>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 f8b3 	bl	800bb78 <RCC_GetHCLKClockFreq>
 800ba12:	4603      	mov	r3, r0
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 f8c5 	bl	800bba4 <RCC_GetPCLK1ClockFreq>
 800ba1a:	60f8      	str	r0, [r7, #12]
          break;
 800ba1c:	e010      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba1e:	bf00      	nop
 800ba20:	e00e      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba22:	bf00      	nop
 800ba24:	e00c      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba26:	bf00      	nop
 800ba28:	e00a      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba2a:	bf00      	nop
 800ba2c:	e008      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba2e:	bf00      	nop
 800ba30:	e006      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800ba32:	bf00      	nop
 800ba34:	e004      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 800ba36:	bf00      	nop
 800ba38:	e002      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800ba3a:	bf00      	nop
 800ba3c:	e000      	b.n	800ba40 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800ba3e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800ba40:	68fb      	ldr	r3, [r7, #12]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	00f42400 	.word	0x00f42400
 800ba50:	00300020 	.word	0x00300020
 800ba54:	00300010 	.word	0x00300010

0800ba58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800ba5e:	f7ff fe95 	bl	800b78c <LL_RCC_GetSysClkSource>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b0c      	cmp	r3, #12
 800ba66:	d851      	bhi.n	800bb0c <RCC_GetSystemClockFreq+0xb4>
 800ba68:	a201      	add	r2, pc, #4	@ (adr r2, 800ba70 <RCC_GetSystemClockFreq+0x18>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800baa5 	.word	0x0800baa5
 800ba74:	0800bb0d 	.word	0x0800bb0d
 800ba78:	0800bb0d 	.word	0x0800bb0d
 800ba7c:	0800bb0d 	.word	0x0800bb0d
 800ba80:	0800baf9 	.word	0x0800baf9
 800ba84:	0800bb0d 	.word	0x0800bb0d
 800ba88:	0800bb0d 	.word	0x0800bb0d
 800ba8c:	0800bb0d 	.word	0x0800bb0d
 800ba90:	0800baff 	.word	0x0800baff
 800ba94:	0800bb0d 	.word	0x0800bb0d
 800ba98:	0800bb0d 	.word	0x0800bb0d
 800ba9c:	0800bb0d 	.word	0x0800bb0d
 800baa0:	0800bb05 	.word	0x0800bb05
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800baa4:	f7ff fe44 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d111      	bne.n	800bad2 <RCC_GetSystemClockFreq+0x7a>
 800baae:	f7ff fe3f 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <RCC_GetSystemClockFreq+0x6a>
 800bab8:	f7ff fe4c 	bl	800b754 <LL_RCC_MSI_GetRange>
 800babc:	4603      	mov	r3, r0
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	e003      	b.n	800baca <RCC_GetSystemClockFreq+0x72>
 800bac2:	f7ff fe55 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bac6:	4603      	mov	r3, r0
 800bac8:	0a1b      	lsrs	r3, r3, #8
 800baca:	4a28      	ldr	r2, [pc, #160]	@ (800bb6c <RCC_GetSystemClockFreq+0x114>)
 800bacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bad0:	e010      	b.n	800baf4 <RCC_GetSystemClockFreq+0x9c>
 800bad2:	f7ff fe2d 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d004      	beq.n	800bae6 <RCC_GetSystemClockFreq+0x8e>
 800badc:	f7ff fe3a 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bae0:	4603      	mov	r3, r0
 800bae2:	091b      	lsrs	r3, r3, #4
 800bae4:	e003      	b.n	800baee <RCC_GetSystemClockFreq+0x96>
 800bae6:	f7ff fe43 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800baea:	4603      	mov	r3, r0
 800baec:	091b      	lsrs	r3, r3, #4
 800baee:	4a1f      	ldr	r2, [pc, #124]	@ (800bb6c <RCC_GetSystemClockFreq+0x114>)
 800baf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800baf6:	e033      	b.n	800bb60 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800baf8:	4b1d      	ldr	r3, [pc, #116]	@ (800bb70 <RCC_GetSystemClockFreq+0x118>)
 800bafa:	607b      	str	r3, [r7, #4]
      break;
 800bafc:	e030      	b.n	800bb60 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	@ (800bb74 <RCC_GetSystemClockFreq+0x11c>)
 800bb00:	607b      	str	r3, [r7, #4]
      break;
 800bb02:	e02d      	b.n	800bb60 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800bb04:	f000 f876 	bl	800bbf4 <RCC_PLL_GetFreqDomain_SYS>
 800bb08:	6078      	str	r0, [r7, #4]
      break;
 800bb0a:	e029      	b.n	800bb60 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800bb0c:	f7ff fe10 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d111      	bne.n	800bb3a <RCC_GetSystemClockFreq+0xe2>
 800bb16:	f7ff fe0b 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <RCC_GetSystemClockFreq+0xd2>
 800bb20:	f7ff fe18 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bb24:	4603      	mov	r3, r0
 800bb26:	0a1b      	lsrs	r3, r3, #8
 800bb28:	e003      	b.n	800bb32 <RCC_GetSystemClockFreq+0xda>
 800bb2a:	f7ff fe21 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	4a0e      	ldr	r2, [pc, #56]	@ (800bb6c <RCC_GetSystemClockFreq+0x114>)
 800bb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb38:	e010      	b.n	800bb5c <RCC_GetSystemClockFreq+0x104>
 800bb3a:	f7ff fdf9 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d004      	beq.n	800bb4e <RCC_GetSystemClockFreq+0xf6>
 800bb44:	f7ff fe06 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	091b      	lsrs	r3, r3, #4
 800bb4c:	e003      	b.n	800bb56 <RCC_GetSystemClockFreq+0xfe>
 800bb4e:	f7ff fe0f 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bb52:	4603      	mov	r3, r0
 800bb54:	091b      	lsrs	r3, r3, #4
 800bb56:	4a05      	ldr	r2, [pc, #20]	@ (800bb6c <RCC_GetSystemClockFreq+0x114>)
 800bb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800bb5e:	bf00      	nop
  }

  return frequency;
 800bb60:	687b      	ldr	r3, [r7, #4]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	08010d1c 	.word	0x08010d1c
 800bb70:	00f42400 	.word	0x00f42400
 800bb74:	007a1200 	.word	0x007a1200

0800bb78 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800bb80:	f7ff fe12 	bl	800b7a8 <LL_RCC_GetAHBPrescaler>
 800bb84:	4603      	mov	r3, r0
 800bb86:	091b      	lsrs	r3, r3, #4
 800bb88:	f003 030f 	and.w	r3, r3, #15
 800bb8c:	4a04      	ldr	r2, [pc, #16]	@ (800bba0 <RCC_GetHCLKClockFreq+0x28>)
 800bb8e:	5cd3      	ldrb	r3, [r2, r3]
 800bb90:	461a      	mov	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	40d3      	lsrs	r3, r2
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	08010d04 	.word	0x08010d04

0800bba4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800bbac:	f7ff fe0a 	bl	800b7c4 <LL_RCC_GetAPB1Prescaler>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	0a1b      	lsrs	r3, r3, #8
 800bbb4:	4a04      	ldr	r2, [pc, #16]	@ (800bbc8 <RCC_GetPCLK1ClockFreq+0x24>)
 800bbb6:	5cd3      	ldrb	r3, [r2, r3]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	40d3      	lsrs	r3, r2
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	08010d14 	.word	0x08010d14

0800bbcc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800bbd4:	f7ff fe04 	bl	800b7e0 <LL_RCC_GetAPB2Prescaler>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	0adb      	lsrs	r3, r3, #11
 800bbdc:	4a04      	ldr	r2, [pc, #16]	@ (800bbf0 <RCC_GetPCLK2ClockFreq+0x24>)
 800bbde:	5cd3      	ldrb	r3, [r2, r3]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	40d3      	lsrs	r3, r2
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	08010d14 	.word	0x08010d14

0800bbf4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800bbfa:	f7ff fe13 	bl	800b824 <LL_RCC_PLL_GetMainSource>
 800bbfe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d036      	beq.n	800bc74 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d836      	bhi.n	800bc7a <RCC_PLL_GetFreqDomain_SYS+0x86>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d003      	beq.n	800bc1a <RCC_PLL_GetFreqDomain_SYS+0x26>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d02a      	beq.n	800bc6e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800bc18:	e02f      	b.n	800bc7a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800bc1a:	f7ff fd89 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d111      	bne.n	800bc48 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800bc24:	f7ff fd84 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800bc2e:	f7ff fd91 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bc32:	4603      	mov	r3, r0
 800bc34:	0a1b      	lsrs	r3, r3, #8
 800bc36:	e003      	b.n	800bc40 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800bc38:	f7ff fd9a 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	0a1b      	lsrs	r3, r3, #8
 800bc40:	4a2f      	ldr	r2, [pc, #188]	@ (800bd00 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800bc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc46:	e010      	b.n	800bc6a <RCC_PLL_GetFreqDomain_SYS+0x76>
 800bc48:	f7ff fd72 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d004      	beq.n	800bc5c <RCC_PLL_GetFreqDomain_SYS+0x68>
 800bc52:	f7ff fd7f 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bc56:	4603      	mov	r3, r0
 800bc58:	091b      	lsrs	r3, r3, #4
 800bc5a:	e003      	b.n	800bc64 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800bc5c:	f7ff fd88 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bc60:	4603      	mov	r3, r0
 800bc62:	091b      	lsrs	r3, r3, #4
 800bc64:	4a26      	ldr	r2, [pc, #152]	@ (800bd00 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800bc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc6a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800bc6c:	e02f      	b.n	800bcce <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800bc6e:	4b25      	ldr	r3, [pc, #148]	@ (800bd04 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800bc70:	607b      	str	r3, [r7, #4]
      break;
 800bc72:	e02c      	b.n	800bcce <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800bc74:	4b24      	ldr	r3, [pc, #144]	@ (800bd08 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800bc76:	607b      	str	r3, [r7, #4]
      break;
 800bc78:	e029      	b.n	800bcce <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800bc7a:	f7ff fd59 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d111      	bne.n	800bca8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800bc84:	f7ff fd54 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800bc8e:	f7ff fd61 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bc92:	4603      	mov	r3, r0
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	e003      	b.n	800bca0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800bc98:	f7ff fd6a 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	4a17      	ldr	r2, [pc, #92]	@ (800bd00 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800bca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca6:	e010      	b.n	800bcca <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800bca8:	f7ff fd42 	bl	800b730 <LL_RCC_MSI_IsEnabledRangeSelect>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d004      	beq.n	800bcbc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800bcb2:	f7ff fd4f 	bl	800b754 <LL_RCC_MSI_GetRange>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	091b      	lsrs	r3, r3, #4
 800bcba:	e003      	b.n	800bcc4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800bcbc:	f7ff fd58 	bl	800b770 <LL_RCC_MSI_GetRangeAfterStandby>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	091b      	lsrs	r3, r3, #4
 800bcc4:	4a0e      	ldr	r2, [pc, #56]	@ (800bd00 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800bcc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcca:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800bccc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800bcce:	f7ff fdd3 	bl	800b878 <LL_RCC_PLL_GetDivider>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	091b      	lsrs	r3, r3, #4
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	fbb2 f4f3 	udiv	r4, r2, r3
 800bcde:	f7ff fdaf 	bl	800b840 <LL_RCC_PLL_GetN>
 800bce2:	4603      	mov	r3, r0
 800bce4:	fb03 f404 	mul.w	r4, r3, r4
 800bce8:	f7ff fdb8 	bl	800b85c <LL_RCC_PLL_GetR>
 800bcec:	4603      	mov	r3, r0
 800bcee:	0e5b      	lsrs	r3, r3, #25
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd90      	pop	{r4, r7, pc}
 800bd00:	08010d1c 	.word	0x08010d1c
 800bd04:	00f42400 	.word	0x00f42400
 800bd08:	007a1200 	.word	0x007a1200

0800bd0c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	f107 001c 	add.w	r0, r7, #28
 800bd1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800bd2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800bd2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800bd32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800bd36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800bd3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800bd4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	b004      	add	sp, #16
 800bd64:	4770      	bx	lr

0800bd66 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2203      	movs	r2, #3
 800bdae:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bdb0:	2002      	movs	r0, #2
 800bdb2:	f7f6 f891 	bl	8001ed8 <HAL_Delay>

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0303 	and.w	r3, r3, #3
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdfa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800be00:	431a      	orrs	r2, r3
                       Command->CPSM);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800be06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800be16:	f023 030f 	bic.w	r3, r3, #15
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	431a      	orrs	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	b2db      	uxtb	r3, r3
}
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3314      	adds	r3, #20
 800be58:	461a      	mov	r2, r3
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	4413      	add	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be96:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be9c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bea2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beae:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	431a      	orrs	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800beba:	2300      	movs	r3, #0

}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bed6:	2310      	movs	r3, #16
 800bed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beda:	2340      	movs	r3, #64	@ 0x40
 800bedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff ff74 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bef8:	2110      	movs	r1, #16
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fa18 	bl	800c330 <SDMMC_GetCmdResp1>
 800bf00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf02:	69fb      	ldr	r3, [r7, #28]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bf1a:	2311      	movs	r3, #17
 800bf1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf1e:	2340      	movs	r3, #64	@ 0x40
 800bf20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf2c:	f107 0308 	add.w	r3, r7, #8
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff ff52 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf3c:	2111      	movs	r1, #17
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f9f6 	bl	800c330 <SDMMC_GetCmdResp1>
 800bf44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf46:	69fb      	ldr	r3, [r7, #28]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf5e:	2312      	movs	r3, #18
 800bf60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf62:	2340      	movs	r3, #64	@ 0x40
 800bf64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf66:	2300      	movs	r3, #0
 800bf68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf70:	f107 0308 	add.w	r3, r7, #8
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff ff30 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf80:	2112      	movs	r1, #18
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f9d4 	bl	800c330 <SDMMC_GetCmdResp1>
 800bf88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3720      	adds	r7, #32
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bfa2:	2318      	movs	r3, #24
 800bfa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa6:	2340      	movs	r3, #64	@ 0x40
 800bfa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb4:	f107 0308 	add.w	r3, r7, #8
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff ff0e 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfc4:	2118      	movs	r1, #24
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f9b2 	bl	800c330 <SDMMC_GetCmdResp1>
 800bfcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfce:	69fb      	ldr	r3, [r7, #28]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bfe6:	2319      	movs	r3, #25
 800bfe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfea:	2340      	movs	r3, #64	@ 0x40
 800bfec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bff8:	f107 0308 	add.w	r3, r7, #8
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7ff feec 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c004:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c008:	2119      	movs	r1, #25
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f990 	bl	800c330 <SDMMC_GetCmdResp1>
 800c010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c028:	230c      	movs	r3, #12
 800c02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02c:	2340      	movs	r3, #64	@ 0x40
 800c02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c030:	2300      	movs	r3, #0
 800c032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c038:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03a:	f107 0308 	add.w	r3, r7, #8
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff fecb 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c046:	4a05      	ldr	r2, [pc, #20]	@ (800c05c <SDMMC_CmdStopTransfer+0x40>)
 800c048:	210c      	movs	r1, #12
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f970 	bl	800c330 <SDMMC_GetCmdResp1>
 800c050:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800c052:	69fb      	ldr	r3, [r7, #28]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	05f5e100 	.word	0x05f5e100

0800c060 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	@ 0x28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c070:	2307      	movs	r3, #7
 800c072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c074:	2340      	movs	r3, #64	@ 0x40
 800c076:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c080:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c082:	f107 0310 	add.w	r3, r7, #16
 800c086:	4619      	mov	r1, r3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fea7 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c08e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c092:	2107      	movs	r1, #7
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 f94b 	bl	800c330 <SDMMC_GetCmdResp1>
 800c09a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3728      	adds	r7, #40	@ 0x28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b088      	sub	sp, #32
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fe86 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fb65 	bl	800c7a0 <SDMMC_GetCmdError>
 800c0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3720      	adds	r7, #32
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b088      	sub	sp, #32
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0ea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f4:	2340      	movs	r3, #64	@ 0x40
 800c0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff fe67 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 faf8 	bl	800c704 <SDMMC_GetCmdResp7>
 800c114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c116:	69fb      	ldr	r3, [r7, #28]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3720      	adds	r7, #32
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c12e:	2337      	movs	r3, #55	@ 0x37
 800c130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c132:	2340      	movs	r3, #64	@ 0x40
 800c134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c13e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c140:	f107 0308 	add.w	r3, r7, #8
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff fe48 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c14c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c150:	2137      	movs	r1, #55	@ 0x37
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f8ec 	bl	800c330 <SDMMC_GetCmdResp1>
 800c158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c15a:	69fb      	ldr	r3, [r7, #28]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c174:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c178:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c17a:	2329      	movs	r3, #41	@ 0x29
 800c17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c17e:	2340      	movs	r3, #64	@ 0x40
 800c180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c18a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c18c:	f107 0308 	add.w	r3, r7, #8
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fe22 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f9ff 	bl	800c59c <SDMMC_GetCmdResp3>
 800c19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a0:	69fb      	ldr	r3, [r7, #28]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b088      	sub	sp, #32
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c1b8:	2306      	movs	r3, #6
 800c1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1bc:	2340      	movs	r3, #64	@ 0x40
 800c1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ca:	f107 0308 	add.w	r3, r7, #8
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff fe03 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1da:	2106      	movs	r1, #6
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f8a7 	bl	800c330 <SDMMC_GetCmdResp1>
 800c1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b088      	sub	sp, #32
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c1fa:	2333      	movs	r3, #51	@ 0x33
 800c1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1fe:	2340      	movs	r3, #64	@ 0x40
 800c200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c202:	2300      	movs	r3, #0
 800c204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c20a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c20c:	f107 0308 	add.w	r3, r7, #8
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fde2 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c21c:	2133      	movs	r1, #51	@ 0x33
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f886 	bl	800c330 <SDMMC_GetCmdResp1>
 800c224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c226:	69fb      	ldr	r3, [r7, #28]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3720      	adds	r7, #32
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c23c:	2302      	movs	r3, #2
 800c23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c240:	23c0      	movs	r3, #192	@ 0xc0
 800c242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c24c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c24e:	f107 0308 	add.w	r3, r7, #8
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff fdc1 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f956 	bl	800c50c <SDMMC_GetCmdResp2>
 800c260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c262:	69fb      	ldr	r3, [r7, #28]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3720      	adds	r7, #32
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c27a:	2309      	movs	r3, #9
 800c27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c27e:	23c0      	movs	r3, #192	@ 0xc0
 800c280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c282:	2300      	movs	r3, #0
 800c284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c28c:	f107 0308 	add.w	r3, r7, #8
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fda2 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f937 	bl	800c50c <SDMMC_GetCmdResp2>
 800c29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b088      	sub	sp, #32
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2bc:	2340      	movs	r3, #64	@ 0x40
 800c2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff fd83 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	2103      	movs	r1, #3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f99c 	bl	800c618 <SDMMC_GetCmdResp6>
 800c2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3720      	adds	r7, #32
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2fa:	230d      	movs	r3, #13
 800c2fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2fe:	2340      	movs	r3, #64	@ 0x40
 800c300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c30a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff fd62 	bl	800bddc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c31c:	210d      	movs	r1, #13
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f806 	bl	800c330 <SDMMC_GetCmdResp1>
 800c324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c326:	69fb      	ldr	r3, [r7, #28]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3720      	adds	r7, #32
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	460b      	mov	r3, r1
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c33e:	4b70      	ldr	r3, [pc, #448]	@ (800c500 <SDMMC_GetCmdResp1+0x1d0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a70      	ldr	r2, [pc, #448]	@ (800c504 <SDMMC_GetCmdResp1+0x1d4>)
 800c344:	fba2 2303 	umull	r2, r3, r2, r3
 800c348:	0a5a      	lsrs	r2, r3, #9
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	fb02 f303 	mul.w	r3, r2, r3
 800c350:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	1e5a      	subs	r2, r3, #1
 800c356:	61fa      	str	r2, [r7, #28]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d102      	bne.n	800c362 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c35c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c360:	e0c9      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c366:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0ef      	beq.n	800c352 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1ea      	bne.n	800c352 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2204      	movs	r2, #4
 800c38c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c38e:	2304      	movs	r3, #4
 800c390:	e0b1      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d004      	beq.n	800c3a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e0a6      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	22c5      	movs	r2, #197	@ 0xc5
 800c3ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff fd3e 	bl	800be30 <SDMMC_GetCommandResponse>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d001      	beq.n	800c3c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e099      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fd40 	bl	800be4a <SDMMC_GetResponse>
 800c3ca:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	4b4e      	ldr	r3, [pc, #312]	@ (800c508 <SDMMC_GetCmdResp1+0x1d8>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e08d      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	da02      	bge.n	800c3e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c3e4:	e087      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3f0:	2340      	movs	r3, #64	@ 0x40
 800c3f2:	e080      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3fe:	2380      	movs	r3, #128	@ 0x80
 800c400:	e079      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c40c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c410:	e071      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c41c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c420:	e069      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c42c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c430:	e061      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c43c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c440:	e059      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c44c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c450:	e051      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c45c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c460:	e049      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c46c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c470:	e041      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c47c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c480:	e039      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c48c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c490:	e031      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c49c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c4a0:	e029      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c4b0:	e021      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c4c0:	e019      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c4d0:	e011      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c4e0:	e009      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c4f0:	e001      	b.n	800c4f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3720      	adds	r7, #32
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20000000 	.word	0x20000000
 800c504:	10624dd3 	.word	0x10624dd3
 800c508:	fdffe008 	.word	0xfdffe008

0800c50c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c514:	4b1f      	ldr	r3, [pc, #124]	@ (800c594 <SDMMC_GetCmdResp2+0x88>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1f      	ldr	r2, [pc, #124]	@ (800c598 <SDMMC_GetCmdResp2+0x8c>)
 800c51a:	fba2 2303 	umull	r2, r3, r2, r3
 800c51e:	0a5b      	lsrs	r3, r3, #9
 800c520:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c524:	fb02 f303 	mul.w	r3, r2, r3
 800c528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1e5a      	subs	r2, r3, #1
 800c52e:	60fa      	str	r2, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c534:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c538:	e026      	b.n	800c588 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c53e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0ef      	beq.n	800c52a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1ea      	bne.n	800c52a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2204      	movs	r2, #4
 800c564:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c566:	2304      	movs	r3, #4
 800c568:	e00e      	b.n	800c588 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d004      	beq.n	800c580 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e003      	b.n	800c588 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	22c5      	movs	r2, #197	@ 0xc5
 800c584:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	20000000 	.word	0x20000000
 800c598:	10624dd3 	.word	0x10624dd3

0800c59c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c610 <SDMMC_GetCmdResp3+0x74>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c614 <SDMMC_GetCmdResp3+0x78>)
 800c5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ae:	0a5b      	lsrs	r3, r3, #9
 800c5b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5b4:	fb02 f303 	mul.w	r3, r2, r3
 800c5b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1e5a      	subs	r2, r3, #1
 800c5be:	60fa      	str	r2, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c5c8:	e01b      	b.n	800c602 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0ef      	beq.n	800c5ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1ea      	bne.n	800c5ba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5e8:	f003 0304 	and.w	r3, r3, #4
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2204      	movs	r2, #4
 800c5f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5f6:	2304      	movs	r3, #4
 800c5f8:	e003      	b.n	800c602 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	22c5      	movs	r2, #197	@ 0xc5
 800c5fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20000000 	.word	0x20000000
 800c614:	10624dd3 	.word	0x10624dd3

0800c618 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	460b      	mov	r3, r1
 800c622:	607a      	str	r2, [r7, #4]
 800c624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c626:	4b35      	ldr	r3, [pc, #212]	@ (800c6fc <SDMMC_GetCmdResp6+0xe4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a35      	ldr	r2, [pc, #212]	@ (800c700 <SDMMC_GetCmdResp6+0xe8>)
 800c62c:	fba2 2303 	umull	r2, r3, r2, r3
 800c630:	0a5b      	lsrs	r3, r3, #9
 800c632:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c636:	fb02 f303 	mul.w	r3, r2, r3
 800c63a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	1e5a      	subs	r2, r3, #1
 800c640:	61fa      	str	r2, [r7, #28]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c646:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c64a:	e052      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c650:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d0ef      	beq.n	800c63c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1ea      	bne.n	800c63c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d004      	beq.n	800c67c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2204      	movs	r2, #4
 800c676:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c678:	2304      	movs	r3, #4
 800c67a:	e03a      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2201      	movs	r2, #1
 800c68c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c68e:	2301      	movs	r3, #1
 800c690:	e02f      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7ff fbcc 	bl	800be30 <SDMMC_GetCommandResponse>
 800c698:	4603      	mov	r3, r0
 800c69a:	461a      	mov	r2, r3
 800c69c:	7afb      	ldrb	r3, [r7, #11]
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d001      	beq.n	800c6a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e025      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	22c5      	movs	r2, #197	@ 0xc5
 800c6aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff fbcb 	bl	800be4a <SDMMC_GetResponse>
 800c6b4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	0c1b      	lsrs	r3, r3, #16
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e011      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6dc:	e009      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6ec:	e001      	b.n	800c6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3720      	adds	r7, #32
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20000000 	.word	0x20000000
 800c700:	10624dd3 	.word	0x10624dd3

0800c704 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c70c:	4b22      	ldr	r3, [pc, #136]	@ (800c798 <SDMMC_GetCmdResp7+0x94>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a22      	ldr	r2, [pc, #136]	@ (800c79c <SDMMC_GetCmdResp7+0x98>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	0a5b      	lsrs	r3, r3, #9
 800c718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c71c:	fb02 f303 	mul.w	r3, r2, r3
 800c720:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1e5a      	subs	r2, r3, #1
 800c726:	60fa      	str	r2, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c72c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c730:	e02c      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c736:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d0ef      	beq.n	800c722 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1ea      	bne.n	800c722 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2204      	movs	r2, #4
 800c75c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c75e:	2304      	movs	r3, #4
 800c760:	e014      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c774:	2301      	movs	r3, #1
 800c776:	e009      	b.n	800c78c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2240      	movs	r2, #64	@ 0x40
 800c788:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c78a:	2300      	movs	r3, #0

}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr
 800c798:	20000000 	.word	0x20000000
 800c79c:	10624dd3 	.word	0x10624dd3

0800c7a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7a8:	4b11      	ldr	r3, [pc, #68]	@ (800c7f0 <SDMMC_GetCmdError+0x50>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a11      	ldr	r2, [pc, #68]	@ (800c7f4 <SDMMC_GetCmdError+0x54>)
 800c7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b2:	0a5b      	lsrs	r3, r3, #9
 800c7b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
 800c7bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	60fa      	str	r2, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7cc:	e009      	b.n	800c7e2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0f1      	beq.n	800c7be <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	22c5      	movs	r2, #197	@ 0xc5
 800c7de:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	20000000 	.word	0x20000000
 800c7f4:	10624dd3 	.word	0x10624dd3

0800c7f8 <LL_USART_IsEnabled>:
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d101      	bne.n	800c810 <LL_USART_IsEnabled+0x18>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e000      	b.n	800c812 <LL_USART_IsEnabled+0x1a>
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <LL_USART_SetStopBitsLength>:
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	431a      	orrs	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	605a      	str	r2, [r3, #4]
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <LL_USART_SetHWFlowCtrl>:
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	431a      	orrs	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	609a      	str	r2, [r3, #8]
}
 800c85e:	bf00      	nop
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <LL_USART_SetBaudRate>:
{
 800c86a:	b480      	push	{r7}
 800c86c:	b087      	sub	sp, #28
 800c86e:	af00      	add	r7, sp, #0
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	60b9      	str	r1, [r7, #8]
 800c874:	607a      	str	r2, [r7, #4]
 800c876:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c87e:	d11a      	bne.n	800c8b6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	005a      	lsls	r2, r3, #1
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	085b      	lsrs	r3, r3, #1
 800c888:	441a      	add	r2, r3
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c890:	b29b      	uxth	r3, r3
 800c892:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800c89a:	4013      	ands	r3, r2
 800c89c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	085b      	lsrs	r3, r3, #1
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	60da      	str	r2, [r3, #12]
}
 800c8b4:	e00a      	b.n	800c8cc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	085a      	lsrs	r2, r3, #1
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	441a      	add	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	60da      	str	r2, [r3, #12]
}
 800c8cc:	bf00      	nop
 800c8ce:	371c      	adds	r7, #28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff ff84 	bl	800c7f8 <LL_USART_IsEnabled>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d148      	bne.n	800c988 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	4b26      	ldr	r3, [pc, #152]	@ (800c994 <LL_USART_Init+0xbc>)
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	6851      	ldr	r1, [r2, #4]
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	68d2      	ldr	r2, [r2, #12]
 800c906:	4311      	orrs	r1, r2
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	6912      	ldr	r2, [r2, #16]
 800c90c:	4311      	orrs	r1, r2
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	6992      	ldr	r2, [r2, #24]
 800c912:	430a      	orrs	r2, r1
 800c914:	431a      	orrs	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff ff7c 	bl	800c81e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	695b      	ldr	r3, [r3, #20]
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ff89 	bl	800c844 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a18      	ldr	r2, [pc, #96]	@ (800c998 <LL_USART_Init+0xc0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d104      	bne.n	800c944 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c93a:	2003      	movs	r0, #3
 800c93c:	f7fe ffaa 	bl	800b894 <LL_RCC_GetUSARTClockFreq>
 800c940:	60b8      	str	r0, [r7, #8]
 800c942:	e010      	b.n	800c966 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a15      	ldr	r2, [pc, #84]	@ (800c99c <LL_USART_Init+0xc4>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d104      	bne.n	800c956 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c94c:	200c      	movs	r0, #12
 800c94e:	f7fe ffa1 	bl	800b894 <LL_RCC_GetUSARTClockFreq>
 800c952:	60b8      	str	r0, [r7, #8]
 800c954:	e007      	b.n	800c966 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a11      	ldr	r2, [pc, #68]	@ (800c9a0 <LL_USART_Init+0xc8>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d103      	bne.n	800c966 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800c95e:	2030      	movs	r0, #48	@ 0x30
 800c960:	f7fe ff98 	bl	800b894 <LL_RCC_GetUSARTClockFreq>
 800c964:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00d      	beq.n	800c988 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 800c974:	2300      	movs	r3, #0
 800c976:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ff71 	bl	800c86a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c988:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	efff69f3 	.word	0xefff69f3
 800c998:	40013800 	.word	0x40013800
 800c99c:	40004400 	.word	0x40004400
 800c9a0:	40004800 	.word	0x40004800

0800c9a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c9a8:	4904      	ldr	r1, [pc, #16]	@ (800c9bc <MX_FATFS_Init+0x18>)
 800c9aa:	4805      	ldr	r0, [pc, #20]	@ (800c9c0 <MX_FATFS_Init+0x1c>)
 800c9ac:	f000 fab8 	bl	800cf20 <FATFS_LinkDriver>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	4b03      	ldr	r3, [pc, #12]	@ (800c9c4 <MX_FATFS_Init+0x20>)
 800c9b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c9b8:	bf00      	nop
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	200006cc 	.word	0x200006cc
 800c9c0:	08010d54 	.word	0x08010d54
 800c9c4:	200006c8 	.word	0x200006c8

0800c9c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c9d2:	f000 f896 	bl	800cb02 <BSP_SD_IsDetected>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d001      	beq.n	800c9e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c9dc:	2302      	movs	r3, #2
 800c9de:	e012      	b.n	800ca06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c9e0:	480b      	ldr	r0, [pc, #44]	@ (800ca10 <BSP_SD_Init+0x48>)
 800c9e2:	f7fa ffe3 	bl	80079ac <HAL_SD_Init>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d109      	bne.n	800ca04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c9f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c9f4:	4806      	ldr	r0, [pc, #24]	@ (800ca10 <BSP_SD_Init+0x48>)
 800c9f6:	f7fb fd93 	bl	8008520 <HAL_SD_ConfigWideBusOperation>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca04:	79fb      	ldrb	r3, [r7, #7]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000298 	.word	0x20000298

0800ca14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	68f9      	ldr	r1, [r7, #12]
 800ca2a:	4806      	ldr	r0, [pc, #24]	@ (800ca44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ca2c:	f7fb f894 	bl	8007b58 <HAL_SD_ReadBlocks_DMA>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20000298 	.word	0x20000298

0800ca48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	68f9      	ldr	r1, [r7, #12]
 800ca5e:	4806      	ldr	r0, [pc, #24]	@ (800ca78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ca60:	f7fb f942 	bl	8007ce8 <HAL_SD_WriteBlocks_DMA>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000298 	.word	0x20000298

0800ca7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca80:	4805      	ldr	r0, [pc, #20]	@ (800ca98 <BSP_SD_GetCardState+0x1c>)
 800ca82:	f7fb fe09 	bl	8008698 <HAL_SD_GetCardState>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	bf14      	ite	ne
 800ca8c:	2301      	movne	r3, #1
 800ca8e:	2300      	moveq	r3, #0
 800ca90:	b2db      	uxtb	r3, r3
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	20000298 	.word	0x20000298

0800ca9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	4803      	ldr	r0, [pc, #12]	@ (800cab4 <BSP_SD_GetCardInfo+0x18>)
 800caa8:	f7fb fd0e 	bl	80084c8 <HAL_SD_GetCardInfo>
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	20000298 	.word	0x20000298

0800cab8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cac0:	f000 f818 	bl	800caf4 <BSP_SD_AbortCallback>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cad4:	f000 f9b4 	bl	800ce40 <BSP_SD_WriteCpltCallback>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cae8:	f000 f9bc 	bl	800ce64 <BSP_SD_ReadCpltCallback>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	af00      	add	r7, sp, #0

}
 800caf8:	bf00      	nop
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cb0c:	f000 f80c 	bl	800cb28 <BSP_PlatformIsDetected>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cb16:	2300      	movs	r3, #0
 800cb18:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	b2db      	uxtb	r3, r3
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cb32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cb36:	4806      	ldr	r0, [pc, #24]	@ (800cb50 <BSP_PlatformIsDetected+0x28>)
 800cb38:	f7f7 fcea 	bl	8004510 <HAL_GPIO_ReadPin>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cb42:	2300      	movs	r3, #0
 800cb44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cb46:	79fb      	ldrb	r3, [r7, #7]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	48000800 	.word	0x48000800

0800cb54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800cb5c:	f000 faa0 	bl	800d0a0 <osKernelGetTickCount>
 800cb60:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800cb62:	e006      	b.n	800cb72 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb64:	f7ff ff8a 	bl	800ca7c <BSP_SD_GetCardState>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e009      	b.n	800cb86 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800cb72:	f000 fa95 	bl	800d0a0 <osKernelGetTickCount>
 800cb76:	4602      	mov	r2, r0
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d8f0      	bhi.n	800cb64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cb82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
	...

0800cb90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc8 <SD_CheckStatus+0x38>)
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cba0:	f7ff ff6c 	bl	800ca7c <BSP_SD_GetCardState>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d107      	bne.n	800cbba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbaa:	4b07      	ldr	r3, [pc, #28]	@ (800cbc8 <SD_CheckStatus+0x38>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	f023 0301 	bic.w	r3, r3, #1
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	4b04      	ldr	r3, [pc, #16]	@ (800cbc8 <SD_CheckStatus+0x38>)
 800cbb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbba:	4b03      	ldr	r3, [pc, #12]	@ (800cbc8 <SD_CheckStatus+0x38>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	2000000d 	.word	0x2000000d

0800cbcc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cbd6:	4b1c      	ldr	r3, [pc, #112]	@ (800cc48 <SD_initialize+0x7c>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cbdc:	f000 fa18 	bl	800d010 <osKernelGetState>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d129      	bne.n	800cc3a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cbe6:	f7ff feef 	bl	800c9c8 <BSP_SD_Init>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d107      	bne.n	800cc00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff ffcc 	bl	800cb90 <SD_CheckStatus>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	4b12      	ldr	r3, [pc, #72]	@ (800cc48 <SD_initialize+0x7c>)
 800cbfe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cc00:	4b11      	ldr	r3, [pc, #68]	@ (800cc48 <SD_initialize+0x7c>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d017      	beq.n	800cc3a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800cc0a:	4b10      	ldr	r3, [pc, #64]	@ (800cc4c <SD_initialize+0x80>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d107      	bne.n	800cc22 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800cc12:	2200      	movs	r2, #0
 800cc14:	2102      	movs	r1, #2
 800cc16:	200a      	movs	r0, #10
 800cc18:	f000 fb04 	bl	800d224 <osMessageQueueNew>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4a0b      	ldr	r2, [pc, #44]	@ (800cc4c <SD_initialize+0x80>)
 800cc20:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800cc22:	4b0a      	ldr	r3, [pc, #40]	@ (800cc4c <SD_initialize+0x80>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d107      	bne.n	800cc3a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800cc2a:	4b07      	ldr	r3, [pc, #28]	@ (800cc48 <SD_initialize+0x7c>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f043 0301 	orr.w	r3, r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b04      	ldr	r3, [pc, #16]	@ (800cc48 <SD_initialize+0x7c>)
 800cc38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cc3a:	4b03      	ldr	r3, [pc, #12]	@ (800cc48 <SD_initialize+0x7c>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	b2db      	uxtb	r3, r3
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	2000000d 	.word	0x2000000d
 800cc4c:	200006d0 	.word	0x200006d0

0800cc50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff ff97 	bl	800cb90 <SD_CheckStatus>
 800cc62:	4603      	mov	r3, r0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	4603      	mov	r3, r0
 800cc7a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc80:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cc84:	f7ff ff66 	bl	800cb54 <SD_CheckStatusWithTimeout>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	da01      	bge.n	800cc92 <SD_read+0x26>
  {
    return res;
 800cc8e:	7ffb      	ldrb	r3, [r7, #31]
 800cc90:	e02f      	b.n	800ccf2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	68b8      	ldr	r0, [r7, #8]
 800cc98:	f7ff febc 	bl	800ca14 <BSP_SD_ReadBlocks_DMA>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800cca0:	7fbb      	ldrb	r3, [r7, #30]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d124      	bne.n	800ccf0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cca6:	4b15      	ldr	r3, [pc, #84]	@ (800ccfc <SD_read+0x90>)
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	f107 0112 	add.w	r1, r7, #18
 800ccae:	f247 5330 	movw	r3, #30000	@ 0x7530
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f000 fb8a 	bl	800d3cc <osMessageQueueGet>
 800ccb8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d117      	bne.n	800ccf0 <SD_read+0x84>
 800ccc0:	8a7b      	ldrh	r3, [r7, #18]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d114      	bne.n	800ccf0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800ccc6:	f000 f9eb 	bl	800d0a0 <osKernelGetTickCount>
 800ccca:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cccc:	e007      	b.n	800ccde <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ccce:	f7ff fed5 	bl	800ca7c <BSP_SD_GetCardState>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <SD_read+0x72>
              {
                res = RES_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ccdc:	e008      	b.n	800ccf0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ccde:	f000 f9df 	bl	800d0a0 <osKernelGetTickCount>
 800cce2:	4602      	mov	r2, r0
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d9ee      	bls.n	800ccce <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ccf0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3720      	adds	r7, #32
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	200006d0 	.word	0x200006d0

0800cd00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b088      	sub	sp, #32
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60b9      	str	r1, [r7, #8]
 800cd08:	607a      	str	r2, [r7, #4]
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd14:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cd18:	f7ff ff1c 	bl	800cb54 <SD_CheckStatusWithTimeout>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	da01      	bge.n	800cd26 <SD_write+0x26>
  {
    return res;
 800cd22:	7ffb      	ldrb	r3, [r7, #31]
 800cd24:	e02d      	b.n	800cd82 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	68b8      	ldr	r0, [r7, #8]
 800cd2c:	f7ff fe8c 	bl	800ca48 <BSP_SD_WriteBlocks_DMA>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d124      	bne.n	800cd80 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cd36:	4b15      	ldr	r3, [pc, #84]	@ (800cd8c <SD_write+0x8c>)
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f107 0112 	add.w	r1, r7, #18
 800cd3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 800cd42:	2200      	movs	r2, #0
 800cd44:	f000 fb42 	bl	800d3cc <osMessageQueueGet>
 800cd48:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d117      	bne.n	800cd80 <SD_write+0x80>
 800cd50:	8a7b      	ldrh	r3, [r7, #18]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d114      	bne.n	800cd80 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800cd56:	f000 f9a3 	bl	800d0a0 <osKernelGetTickCount>
 800cd5a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cd5c:	e007      	b.n	800cd6e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd5e:	f7ff fe8d 	bl	800ca7c <BSP_SD_GetCardState>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <SD_write+0x6e>
          {
            res = RES_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	77fb      	strb	r3, [r7, #31]
            break;
 800cd6c:	e008      	b.n	800cd80 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cd6e:	f000 f997 	bl	800d0a0 <osKernelGetTickCount>
 800cd72:	4602      	mov	r2, r0
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d9ee      	bls.n	800cd5e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800cd80:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3720      	adds	r7, #32
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	200006d0 	.word	0x200006d0

0800cd90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08c      	sub	sp, #48	@ 0x30
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	603a      	str	r2, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cda6:	4b25      	ldr	r3, [pc, #148]	@ (800ce3c <SD_ioctl+0xac>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <SD_ioctl+0x28>
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e03c      	b.n	800ce32 <SD_ioctl+0xa2>

  switch (cmd)
 800cdb8:	79bb      	ldrb	r3, [r7, #6]
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d834      	bhi.n	800ce28 <SD_ioctl+0x98>
 800cdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc4 <SD_ioctl+0x34>)
 800cdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc4:	0800cdd5 	.word	0x0800cdd5
 800cdc8:	0800cddd 	.word	0x0800cddd
 800cdcc:	0800cdf5 	.word	0x0800cdf5
 800cdd0:	0800ce0f 	.word	0x0800ce0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cdda:	e028      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fe5b 	bl	800ca9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cde6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cdf2:	e01c      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cdf4:	f107 030c 	add.w	r3, r7, #12
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff fe4f 	bl	800ca9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ce0c:	e00f      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce0e:	f107 030c 	add.w	r3, r7, #12
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff fe42 	bl	800ca9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ce18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1a:	0a5a      	lsrs	r2, r3, #9
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ce26:	e002      	b.n	800ce2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ce28:	2304      	movs	r3, #4
 800ce2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ce2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3730      	adds	r7, #48	@ 0x30
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	2000000d 	.word	0x2000000d

0800ce40 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800ce46:	2302      	movs	r3, #2
 800ce48:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800ce4a:	4b05      	ldr	r3, [pc, #20]	@ (800ce60 <BSP_SD_WriteCpltCallback+0x20>)
 800ce4c:	6818      	ldr	r0, [r3, #0]
 800ce4e:	1db9      	adds	r1, r7, #6
 800ce50:	2300      	movs	r3, #0
 800ce52:	2200      	movs	r2, #0
 800ce54:	f000 fa5a 	bl	800d30c <osMessageQueuePut>
#endif
}
 800ce58:	bf00      	nop
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	200006d0 	.word	0x200006d0

0800ce64 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800ce6e:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <BSP_SD_ReadCpltCallback+0x20>)
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	1db9      	adds	r1, r7, #6
 800ce74:	2300      	movs	r3, #0
 800ce76:	2200      	movs	r2, #0
 800ce78:	f000 fa48 	bl	800d30c <osMessageQueuePut>
#endif
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	200006d0 	.word	0x200006d0

0800ce88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce96:	2301      	movs	r3, #1
 800ce98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce9e:	4b1f      	ldr	r3, [pc, #124]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cea0:	7a5b      	ldrb	r3, [r3, #9]
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d131      	bne.n	800cf0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cea8:	4b1c      	ldr	r3, [pc, #112]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceaa:	7a5b      	ldrb	r3, [r3, #9]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ceb6:	4b19      	ldr	r3, [pc, #100]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceb8:	7a5b      	ldrb	r3, [r3, #9]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	4a17      	ldr	r2, [pc, #92]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cec6:	4b15      	ldr	r3, [pc, #84]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cec8:	7a5b      	ldrb	r3, [r3, #9]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	461a      	mov	r2, r3
 800cece:	4b13      	ldr	r3, [pc, #76]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ced0:	4413      	add	r3, r2
 800ced2:	79fa      	ldrb	r2, [r7, #7]
 800ced4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ced6:	4b11      	ldr	r3, [pc, #68]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ced8:	7a5b      	ldrb	r3, [r3, #9]
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	b2d1      	uxtb	r1, r2
 800cee0:	4a0e      	ldr	r2, [pc, #56]	@ (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cee2:	7251      	strb	r1, [r2, #9]
 800cee4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cee6:	7dbb      	ldrb	r3, [r7, #22]
 800cee8:	3330      	adds	r3, #48	@ 0x30
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	3301      	adds	r3, #1
 800cef4:	223a      	movs	r2, #58	@ 0x3a
 800cef6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	3302      	adds	r3, #2
 800cefc:	222f      	movs	r2, #47	@ 0x2f
 800cefe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	3303      	adds	r3, #3
 800cf04:	2200      	movs	r2, #0
 800cf06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	371c      	adds	r7, #28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	200006d4 	.word	0x200006d4

0800cf20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff ffaa 	bl	800ce88 <FATFS_LinkDriverEx>
 800cf34:	4603      	mov	r3, r0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <__NVIC_SetPriority>:
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cf4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	db0a      	blt.n	800cf6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	490c      	ldr	r1, [pc, #48]	@ (800cf8c <__NVIC_SetPriority+0x4c>)
 800cf5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf5e:	0112      	lsls	r2, r2, #4
 800cf60:	b2d2      	uxtb	r2, r2
 800cf62:	440b      	add	r3, r1
 800cf64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cf68:	e00a      	b.n	800cf80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	4908      	ldr	r1, [pc, #32]	@ (800cf90 <__NVIC_SetPriority+0x50>)
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	f003 030f 	and.w	r3, r3, #15
 800cf76:	3b04      	subs	r3, #4
 800cf78:	0112      	lsls	r2, r2, #4
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	440b      	add	r3, r1
 800cf7e:	761a      	strb	r2, [r3, #24]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	e000e100 	.word	0xe000e100
 800cf90:	e000ed00 	.word	0xe000ed00

0800cf94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cf98:	4b05      	ldr	r3, [pc, #20]	@ (800cfb0 <SysTick_Handler+0x1c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cf9c:	f001 ff7e 	bl	800ee9c <xTaskGetSchedulerState>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d001      	beq.n	800cfaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cfa6:	f002 fd77 	bl	800fa98 <xPortSysTickHandler>
  }
}
 800cfaa:	bf00      	nop
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	e000e010 	.word	0xe000e010

0800cfb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f06f 0004 	mvn.w	r0, #4
 800cfbe:	f7ff ffbf 	bl	800cf40 <__NVIC_SetPriority>
#endif
}
 800cfc2:	bf00      	nop
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfce:	f3ef 8305 	mrs	r3, IPSR
 800cfd2:	603b      	str	r3, [r7, #0]
  return(result);
 800cfd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cfda:	f06f 0305 	mvn.w	r3, #5
 800cfde:	607b      	str	r3, [r7, #4]
 800cfe0:	e00c      	b.n	800cffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800d00c <osKernelInitialize+0x44>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d105      	bne.n	800cff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cfea:	4b08      	ldr	r3, [pc, #32]	@ (800d00c <osKernelInitialize+0x44>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	607b      	str	r3, [r7, #4]
 800cff4:	e002      	b.n	800cffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cffc:	687b      	ldr	r3, [r7, #4]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	370c      	adds	r7, #12
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	200006e0 	.word	0x200006e0

0800d010 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d016:	f001 ff41 	bl	800ee9c <xTaskGetSchedulerState>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <osKernelGetState+0x1a>
 800d020:	2b02      	cmp	r3, #2
 800d022:	d105      	bne.n	800d030 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800d024:	2302      	movs	r3, #2
 800d026:	607b      	str	r3, [r7, #4]
      break;
 800d028:	e00c      	b.n	800d044 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800d02a:	2303      	movs	r3, #3
 800d02c:	607b      	str	r3, [r7, #4]
      break;
 800d02e:	e009      	b.n	800d044 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800d030:	4b07      	ldr	r3, [pc, #28]	@ (800d050 <osKernelGetState+0x40>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d102      	bne.n	800d03e <osKernelGetState+0x2e>
        state = osKernelReady;
 800d038:	2301      	movs	r3, #1
 800d03a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800d03c:	e001      	b.n	800d042 <osKernelGetState+0x32>
        state = osKernelInactive;
 800d03e:	2300      	movs	r3, #0
 800d040:	607b      	str	r3, [r7, #4]
      break;
 800d042:	bf00      	nop
  }

  return (state);
 800d044:	687b      	ldr	r3, [r7, #4]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	200006e0 	.word	0x200006e0

0800d054 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d05a:	f3ef 8305 	mrs	r3, IPSR
 800d05e:	603b      	str	r3, [r7, #0]
  return(result);
 800d060:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d066:	f06f 0305 	mvn.w	r3, #5
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	e010      	b.n	800d090 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d06e:	4b0b      	ldr	r3, [pc, #44]	@ (800d09c <osKernelStart+0x48>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d109      	bne.n	800d08a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d076:	f7ff ff9d 	bl	800cfb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d07a:	4b08      	ldr	r3, [pc, #32]	@ (800d09c <osKernelStart+0x48>)
 800d07c:	2202      	movs	r2, #2
 800d07e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d080:	f001 fa96 	bl	800e5b0 <vTaskStartScheduler>
      stat = osOK;
 800d084:	2300      	movs	r3, #0
 800d086:	607b      	str	r3, [r7, #4]
 800d088:	e002      	b.n	800d090 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d090:	687b      	ldr	r3, [r7, #4]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	200006e0 	.word	0x200006e0

0800d0a0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a6:	f3ef 8305 	mrs	r3, IPSR
 800d0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800d0ac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d0b2:	f001 fba9 	bl	800e808 <xTaskGetTickCountFromISR>
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	e002      	b.n	800d0c0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d0ba:	f001 fb95 	bl	800e7e8 <xTaskGetTickCount>
 800d0be:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d0c0:	687b      	ldr	r3, [r7, #4]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b08e      	sub	sp, #56	@ 0x38
 800d0ce:	af04      	add	r7, sp, #16
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0da:	f3ef 8305 	mrs	r3, IPSR
 800d0de:	617b      	str	r3, [r7, #20]
  return(result);
 800d0e0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d17e      	bne.n	800d1e4 <osThreadNew+0x11a>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d07b      	beq.n	800d1e4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d0ec:	2380      	movs	r3, #128	@ 0x80
 800d0ee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d0f0:	2318      	movs	r3, #24
 800d0f2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d045      	beq.n	800d190 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <osThreadNew+0x48>
        name = attr->name;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d008      	beq.n	800d138 <osThreadNew+0x6e>
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	2b38      	cmp	r3, #56	@ 0x38
 800d12a:	d805      	bhi.n	800d138 <osThreadNew+0x6e>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <osThreadNew+0x72>
        return (NULL);
 800d138:	2300      	movs	r3, #0
 800d13a:	e054      	b.n	800d1e6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d003      	beq.n	800d14c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	089b      	lsrs	r3, r3, #2
 800d14a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00e      	beq.n	800d172 <osThreadNew+0xa8>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	2ba7      	cmp	r3, #167	@ 0xa7
 800d15a:	d90a      	bls.n	800d172 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <osThreadNew+0xa8>
        mem = 1;
 800d16c:	2301      	movs	r3, #1
 800d16e:	61bb      	str	r3, [r7, #24]
 800d170:	e010      	b.n	800d194 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10c      	bne.n	800d194 <osThreadNew+0xca>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d108      	bne.n	800d194 <osThreadNew+0xca>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d104      	bne.n	800d194 <osThreadNew+0xca>
          mem = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	61bb      	str	r3, [r7, #24]
 800d18e:	e001      	b.n	800d194 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d110      	bne.n	800d1bc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1a2:	9202      	str	r2, [sp, #8]
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6a3a      	ldr	r2, [r7, #32]
 800d1ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f001 f809 	bl	800e1c8 <xTaskCreateStatic>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	e013      	b.n	800d1e4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d110      	bne.n	800d1e4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	f107 0310 	add.w	r3, r7, #16
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f001 f857 	bl	800e288 <xTaskCreate>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d001      	beq.n	800d1e4 <osThreadNew+0x11a>
            hTask = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d1e4:	693b      	ldr	r3, [r7, #16]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3728      	adds	r7, #40	@ 0x28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1f6:	f3ef 8305 	mrs	r3, IPSR
 800d1fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d003      	beq.n	800d20a <osDelay+0x1c>
    stat = osErrorISR;
 800d202:	f06f 0305 	mvn.w	r3, #5
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	e007      	b.n	800d21a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d002      	beq.n	800d21a <osDelay+0x2c>
      vTaskDelay(ticks);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 f995 	bl	800e544 <vTaskDelay>
    }
  }

  return (stat);
 800d21a:	68fb      	ldr	r3, [r7, #12]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	@ 0x28
 800d228:	af02      	add	r7, sp, #8
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d230:	2300      	movs	r3, #0
 800d232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d234:	f3ef 8305 	mrs	r3, IPSR
 800d238:	613b      	str	r3, [r7, #16]
  return(result);
 800d23a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d15f      	bne.n	800d300 <osMessageQueueNew+0xdc>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d05c      	beq.n	800d300 <osMessageQueueNew+0xdc>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d059      	beq.n	800d300 <osMessageQueueNew+0xdc>
    mem = -1;
 800d24c:	f04f 33ff 	mov.w	r3, #4294967295
 800d250:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d029      	beq.n	800d2ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d012      	beq.n	800d286 <osMessageQueueNew+0x62>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	2b4f      	cmp	r3, #79	@ 0x4f
 800d266:	d90e      	bls.n	800d286 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00a      	beq.n	800d286 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	695a      	ldr	r2, [r3, #20]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68b9      	ldr	r1, [r7, #8]
 800d278:	fb01 f303 	mul.w	r3, r1, r3
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d302      	bcc.n	800d286 <osMessageQueueNew+0x62>
        mem = 1;
 800d280:	2301      	movs	r3, #1
 800d282:	61bb      	str	r3, [r7, #24]
 800d284:	e014      	b.n	800d2b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d110      	bne.n	800d2b0 <osMessageQueueNew+0x8c>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10c      	bne.n	800d2b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d108      	bne.n	800d2b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d104      	bne.n	800d2b0 <osMessageQueueNew+0x8c>
          mem = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61bb      	str	r3, [r7, #24]
 800d2aa:	e001      	b.n	800d2b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d10b      	bne.n	800d2ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	2100      	movs	r1, #0
 800d2c0:	9100      	str	r1, [sp, #0]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 fa31 	bl	800d72c <xQueueGenericCreateStatic>
 800d2ca:	61f8      	str	r0, [r7, #28]
 800d2cc:	e008      	b.n	800d2e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d105      	bne.n	800d2e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 faa4 	bl	800d826 <xQueueGenericCreate>
 800d2de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00c      	beq.n	800d300 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	617b      	str	r3, [r7, #20]
 800d2f2:	e001      	b.n	800d2f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d2f8:	6979      	ldr	r1, [r7, #20]
 800d2fa:	69f8      	ldr	r0, [r7, #28]
 800d2fc:	f000 ff06 	bl	800e10c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d300:	69fb      	ldr	r3, [r7, #28]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	4613      	mov	r3, r2
 800d31a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d320:	2300      	movs	r3, #0
 800d322:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d324:	f3ef 8305 	mrs	r3, IPSR
 800d328:	617b      	str	r3, [r7, #20]
  return(result);
 800d32a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d028      	beq.n	800d382 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d005      	beq.n	800d342 <osMessageQueuePut+0x36>
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <osMessageQueuePut+0x36>
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d342:	f06f 0303 	mvn.w	r3, #3
 800d346:	61fb      	str	r3, [r7, #28]
 800d348:	e038      	b.n	800d3bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d34e:	f107 0210 	add.w	r2, r7, #16
 800d352:	2300      	movs	r3, #0
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	69b8      	ldr	r0, [r7, #24]
 800d358:	f000 fbc6 	bl	800dae8 <xQueueGenericSendFromISR>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d003      	beq.n	800d36a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d362:	f06f 0302 	mvn.w	r3, #2
 800d366:	61fb      	str	r3, [r7, #28]
 800d368:	e028      	b.n	800d3bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d025      	beq.n	800d3bc <osMessageQueuePut+0xb0>
 800d370:	4b15      	ldr	r3, [pc, #84]	@ (800d3c8 <osMessageQueuePut+0xbc>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	e01c      	b.n	800d3bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <osMessageQueuePut+0x82>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d103      	bne.n	800d396 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d38e:	f06f 0303 	mvn.w	r3, #3
 800d392:	61fb      	str	r3, [r7, #28]
 800d394:	e012      	b.n	800d3bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d396:	2300      	movs	r3, #0
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	69b8      	ldr	r0, [r7, #24]
 800d39e:	f000 faa1 	bl	800d8e4 <xQueueGenericSend>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d009      	beq.n	800d3bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d3ae:	f06f 0301 	mvn.w	r3, #1
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	e002      	b.n	800d3bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d3b6:	f06f 0302 	mvn.w	r3, #2
 800d3ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3e2:	f3ef 8305 	mrs	r3, IPSR
 800d3e6:	617b      	str	r3, [r7, #20]
  return(result);
 800d3e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d028      	beq.n	800d440 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <osMessageQueueGet+0x34>
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <osMessageQueueGet+0x34>
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d400:	f06f 0303 	mvn.w	r3, #3
 800d404:	61fb      	str	r3, [r7, #28]
 800d406:	e037      	b.n	800d478 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d408:	2300      	movs	r3, #0
 800d40a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d40c:	f107 0310 	add.w	r3, r7, #16
 800d410:	461a      	mov	r2, r3
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	69b8      	ldr	r0, [r7, #24]
 800d416:	f000 fce7 	bl	800dde8 <xQueueReceiveFromISR>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d003      	beq.n	800d428 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d420:	f06f 0302 	mvn.w	r3, #2
 800d424:	61fb      	str	r3, [r7, #28]
 800d426:	e027      	b.n	800d478 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d024      	beq.n	800d478 <osMessageQueueGet+0xac>
 800d42e:	4b15      	ldr	r3, [pc, #84]	@ (800d484 <osMessageQueueGet+0xb8>)
 800d430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	e01b      	b.n	800d478 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d002      	beq.n	800d44c <osMessageQueueGet+0x80>
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d44c:	f06f 0303 	mvn.w	r3, #3
 800d450:	61fb      	str	r3, [r7, #28]
 800d452:	e011      	b.n	800d478 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d454:	683a      	ldr	r2, [r7, #0]
 800d456:	68b9      	ldr	r1, [r7, #8]
 800d458:	69b8      	ldr	r0, [r7, #24]
 800d45a:	f000 fbe3 	bl	800dc24 <xQueueReceive>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b01      	cmp	r3, #1
 800d462:	d009      	beq.n	800d478 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d46a:	f06f 0301 	mvn.w	r3, #1
 800d46e:	61fb      	str	r3, [r7, #28]
 800d470:	e002      	b.n	800d478 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d472:	f06f 0302 	mvn.w	r3, #2
 800d476:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d478:	69fb      	ldr	r3, [r7, #28]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3720      	adds	r7, #32
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4a07      	ldr	r2, [pc, #28]	@ (800d4b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4a06      	ldr	r2, [pc, #24]	@ (800d4b8 <vApplicationGetIdleTaskMemory+0x30>)
 800d49e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2280      	movs	r2, #128	@ 0x80
 800d4a4:	601a      	str	r2, [r3, #0]
}
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	200006e4 	.word	0x200006e4
 800d4b8:	2000078c 	.word	0x2000078c

0800d4bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4a07      	ldr	r2, [pc, #28]	@ (800d4e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d4cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	4a06      	ldr	r2, [pc, #24]	@ (800d4ec <vApplicationGetTimerTaskMemory+0x30>)
 800d4d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4da:	601a      	str	r2, [r3, #0]
}
 800d4dc:	bf00      	nop
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	2000098c 	.word	0x2000098c
 800d4ec:	20000a34 	.word	0x20000a34

0800d4f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 0208 	add.w	r2, r3, #8
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f103 0208 	add.w	r2, r3, #8
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f103 0208 	add.w	r2, r3, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d54a:	b480      	push	{r7}
 800d54c:	b085      	sub	sp, #20
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	689a      	ldr	r2, [r3, #8]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	601a      	str	r2, [r3, #0]
}
 800d586:	bf00      	nop
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d592:	b480      	push	{r7}
 800d594:	b085      	sub	sp, #20
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d103      	bne.n	800d5b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	e00c      	b.n	800d5cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	60fb      	str	r3, [r7, #12]
 800d5b8:	e002      	b.n	800d5c0 <vListInsert+0x2e>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d2f6      	bcs.n	800d5ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	601a      	str	r2, [r3, #0]
}
 800d5f8:	bf00      	nop
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	6892      	ldr	r2, [r2, #8]
 800d61a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	6852      	ldr	r2, [r2, #4]
 800d624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d103      	bne.n	800d638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689a      	ldr	r2, [r3, #8]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	1e5a      	subs	r2, r3, #1
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d684:	f002 f978 	bl	800f978 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d690:	68f9      	ldr	r1, [r7, #12]
 800d692:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d694:	fb01 f303 	mul.w	r3, r1, r3
 800d698:	441a      	add	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	68f9      	ldr	r1, [r7, #12]
 800d6b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6ba:	fb01 f303 	mul.w	r3, r1, r3
 800d6be:	441a      	add	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	22ff      	movs	r2, #255	@ 0xff
 800d6c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	22ff      	movs	r2, #255	@ 0xff
 800d6d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d114      	bne.n	800d704 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d01a      	beq.n	800d718 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3310      	adds	r3, #16
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f001 fa12 	bl	800eb10 <xTaskRemoveFromEventList>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d012      	beq.n	800d718 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d728 <xQueueGenericReset+0xd0>)
 800d6f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	e009      	b.n	800d718 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	3310      	adds	r3, #16
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fef1 	bl	800d4f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3324      	adds	r3, #36	@ 0x24
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff feec 	bl	800d4f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d718:	f002 f960 	bl	800f9dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d71c:	2301      	movs	r3, #1
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	e000ed04 	.word	0xe000ed04

0800d72c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08e      	sub	sp, #56	@ 0x38
 800d730:	af02      	add	r7, sp, #8
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10b      	bne.n	800d758 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d752:	bf00      	nop
 800d754:	bf00      	nop
 800d756:	e7fd      	b.n	800d754 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10b      	bne.n	800d776 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d770:	bf00      	nop
 800d772:	bf00      	nop
 800d774:	e7fd      	b.n	800d772 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <xQueueGenericCreateStatic+0x56>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <xQueueGenericCreateStatic+0x5a>
 800d782:	2301      	movs	r3, #1
 800d784:	e000      	b.n	800d788 <xQueueGenericCreateStatic+0x5c>
 800d786:	2300      	movs	r3, #0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10b      	bne.n	800d7a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	623b      	str	r3, [r7, #32]
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <xQueueGenericCreateStatic+0x84>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <xQueueGenericCreateStatic+0x88>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <xQueueGenericCreateStatic+0x8a>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d10b      	bne.n	800d7d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	61fb      	str	r3, [r7, #28]
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	e7fd      	b.n	800d7ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d7d2:	2350      	movs	r3, #80	@ 0x50
 800d7d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b50      	cmp	r3, #80	@ 0x50
 800d7da:	d00b      	beq.n	800d7f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	61bb      	str	r3, [r7, #24]
}
 800d7ee:	bf00      	nop
 800d7f0:	bf00      	nop
 800d7f2:	e7fd      	b.n	800d7f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00d      	beq.n	800d81c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d802:	2201      	movs	r2, #1
 800d804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d808:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 f840 	bl	800d89c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d81e:	4618      	mov	r0, r3
 800d820:	3730      	adds	r7, #48	@ 0x30
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d826:	b580      	push	{r7, lr}
 800d828:	b08a      	sub	sp, #40	@ 0x28
 800d82a:	af02      	add	r7, sp, #8
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	4613      	mov	r3, r2
 800d832:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10b      	bne.n	800d852 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	613b      	str	r3, [r7, #16]
}
 800d84c:	bf00      	nop
 800d84e:	bf00      	nop
 800d850:	e7fd      	b.n	800d84e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	fb02 f303 	mul.w	r3, r2, r3
 800d85a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	3350      	adds	r3, #80	@ 0x50
 800d860:	4618      	mov	r0, r3
 800d862:	f002 f9ab 	bl	800fbbc <pvPortMalloc>
 800d866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d011      	beq.n	800d892 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	3350      	adds	r3, #80	@ 0x50
 800d876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d880:	79fa      	ldrb	r2, [r7, #7]
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	4613      	mov	r3, r2
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	68b9      	ldr	r1, [r7, #8]
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f000 f805 	bl	800d89c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d892:	69bb      	ldr	r3, [r7, #24]
	}
 800d894:	4618      	mov	r0, r3
 800d896:	3720      	adds	r7, #32
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
 800d8a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d103      	bne.n	800d8b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	69ba      	ldr	r2, [r7, #24]
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	e002      	b.n	800d8be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	69b8      	ldr	r0, [r7, #24]
 800d8ce:	f7ff fec3 	bl	800d658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d8da:	bf00      	nop
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08e      	sub	sp, #56	@ 0x38
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <xQueueGenericSend+0x34>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d103      	bne.n	800d926 <xQueueGenericSend+0x42>
 800d91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d922:	2b00      	cmp	r3, #0
 800d924:	d101      	bne.n	800d92a <xQueueGenericSend+0x46>
 800d926:	2301      	movs	r3, #1
 800d928:	e000      	b.n	800d92c <xQueueGenericSend+0x48>
 800d92a:	2300      	movs	r3, #0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10b      	bne.n	800d948 <xQueueGenericSend+0x64>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	e7fd      	b.n	800d944 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d103      	bne.n	800d956 <xQueueGenericSend+0x72>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d952:	2b01      	cmp	r3, #1
 800d954:	d101      	bne.n	800d95a <xQueueGenericSend+0x76>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <xQueueGenericSend+0x78>
 800d95a:	2300      	movs	r3, #0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10b      	bne.n	800d978 <xQueueGenericSend+0x94>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	623b      	str	r3, [r7, #32]
}
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	e7fd      	b.n	800d974 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d978:	f001 fa90 	bl	800ee9c <xTaskGetSchedulerState>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <xQueueGenericSend+0xa4>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <xQueueGenericSend+0xa8>
 800d988:	2301      	movs	r3, #1
 800d98a:	e000      	b.n	800d98e <xQueueGenericSend+0xaa>
 800d98c:	2300      	movs	r3, #0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10b      	bne.n	800d9aa <xQueueGenericSend+0xc6>
	__asm volatile
 800d992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	61fb      	str	r3, [r7, #28]
}
 800d9a4:	bf00      	nop
 800d9a6:	bf00      	nop
 800d9a8:	e7fd      	b.n	800d9a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9aa:	f001 ffe5 	bl	800f978 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d302      	bcc.n	800d9c0 <xQueueGenericSend+0xdc>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d129      	bne.n	800da14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9c6:	f000 fa91 	bl	800deec <prvCopyDataToQueue>
 800d9ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d010      	beq.n	800d9f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d6:	3324      	adds	r3, #36	@ 0x24
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f001 f899 	bl	800eb10 <xTaskRemoveFromEventList>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d013      	beq.n	800da0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9e4:	4b3f      	ldr	r3, [pc, #252]	@ (800dae4 <xQueueGenericSend+0x200>)
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	e00a      	b.n	800da0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d007      	beq.n	800da0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9fc:	4b39      	ldr	r3, [pc, #228]	@ (800dae4 <xQueueGenericSend+0x200>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da0c:	f001 ffe6 	bl	800f9dc <vPortExitCritical>
				return pdPASS;
 800da10:	2301      	movs	r3, #1
 800da12:	e063      	b.n	800dadc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d103      	bne.n	800da22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da1a:	f001 ffdf 	bl	800f9dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da1e:	2300      	movs	r3, #0
 800da20:	e05c      	b.n	800dadc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da24:	2b00      	cmp	r3, #0
 800da26:	d106      	bne.n	800da36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da28:	f107 0314 	add.w	r3, r7, #20
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 f8d3 	bl	800ebd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da32:	2301      	movs	r3, #1
 800da34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da36:	f001 ffd1 	bl	800f9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da3a:	f000 fe29 	bl	800e690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da3e:	f001 ff9b 	bl	800f978 <vPortEnterCritical>
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da48:	b25b      	sxtb	r3, r3
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d103      	bne.n	800da58 <xQueueGenericSend+0x174>
 800da50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da5e:	b25b      	sxtb	r3, r3
 800da60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da64:	d103      	bne.n	800da6e <xQueueGenericSend+0x18a>
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da6e:	f001 ffb5 	bl	800f9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da72:	1d3a      	adds	r2, r7, #4
 800da74:	f107 0314 	add.w	r3, r7, #20
 800da78:	4611      	mov	r1, r2
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 f8c2 	bl	800ec04 <xTaskCheckForTimeOut>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d124      	bne.n	800dad0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da88:	f000 fb28 	bl	800e0dc <prvIsQueueFull>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d018      	beq.n	800dac4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da94:	3310      	adds	r3, #16
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 ffe6 	bl	800ea6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800daa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daa2:	f000 fab3 	bl	800e00c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daa6:	f000 fe01 	bl	800e6ac <xTaskResumeAll>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	f47f af7c 	bne.w	800d9aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dab2:	4b0c      	ldr	r3, [pc, #48]	@ (800dae4 <xQueueGenericSend+0x200>)
 800dab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	e772      	b.n	800d9aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dac6:	f000 faa1 	bl	800e00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800daca:	f000 fdef 	bl	800e6ac <xTaskResumeAll>
 800dace:	e76c      	b.n	800d9aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dad2:	f000 fa9b 	bl	800e00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dad6:	f000 fde9 	bl	800e6ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dada:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3738      	adds	r7, #56	@ 0x38
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	e000ed04 	.word	0xe000ed04

0800dae8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b090      	sub	sp, #64	@ 0x40
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800dafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10b      	bne.n	800db18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	e7fd      	b.n	800db14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d103      	bne.n	800db26 <xQueueGenericSendFromISR+0x3e>
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db22:	2b00      	cmp	r3, #0
 800db24:	d101      	bne.n	800db2a <xQueueGenericSendFromISR+0x42>
 800db26:	2301      	movs	r3, #1
 800db28:	e000      	b.n	800db2c <xQueueGenericSendFromISR+0x44>
 800db2a:	2300      	movs	r3, #0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10b      	bne.n	800db48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db42:	bf00      	nop
 800db44:	bf00      	nop
 800db46:	e7fd      	b.n	800db44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d103      	bne.n	800db56 <xQueueGenericSendFromISR+0x6e>
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db52:	2b01      	cmp	r3, #1
 800db54:	d101      	bne.n	800db5a <xQueueGenericSendFromISR+0x72>
 800db56:	2301      	movs	r3, #1
 800db58:	e000      	b.n	800db5c <xQueueGenericSendFromISR+0x74>
 800db5a:	2300      	movs	r3, #0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10b      	bne.n	800db78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	623b      	str	r3, [r7, #32]
}
 800db72:	bf00      	nop
 800db74:	bf00      	nop
 800db76:	e7fd      	b.n	800db74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db78:	f001 ffde 	bl	800fb38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db7c:	f3ef 8211 	mrs	r2, BASEPRI
 800db80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	61fa      	str	r2, [r7, #28]
 800db92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d302      	bcc.n	800dbaa <xQueueGenericSendFromISR+0xc2>
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d12f      	bne.n	800dc0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	68b9      	ldr	r1, [r7, #8]
 800dbbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbc0:	f000 f994 	bl	800deec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbcc:	d112      	bne.n	800dbf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d016      	beq.n	800dc04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd8:	3324      	adds	r3, #36	@ 0x24
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 ff98 	bl	800eb10 <xTaskRemoveFromEventList>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00e      	beq.n	800dc04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	e007      	b.n	800dc04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	b25a      	sxtb	r2, r3
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dc04:	2301      	movs	r3, #1
 800dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dc08:	e001      	b.n	800dc0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3740      	adds	r7, #64	@ 0x40
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08c      	sub	sp, #48	@ 0x30
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc30:	2300      	movs	r3, #0
 800dc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10b      	bne.n	800dc56 <xQueueReceive+0x32>
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	623b      	str	r3, [r7, #32]
}
 800dc50:	bf00      	nop
 800dc52:	bf00      	nop
 800dc54:	e7fd      	b.n	800dc52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d103      	bne.n	800dc64 <xQueueReceive+0x40>
 800dc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <xQueueReceive+0x44>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e000      	b.n	800dc6a <xQueueReceive+0x46>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10b      	bne.n	800dc86 <xQueueReceive+0x62>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	61fb      	str	r3, [r7, #28]
}
 800dc80:	bf00      	nop
 800dc82:	bf00      	nop
 800dc84:	e7fd      	b.n	800dc82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc86:	f001 f909 	bl	800ee9c <xTaskGetSchedulerState>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d102      	bne.n	800dc96 <xQueueReceive+0x72>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <xQueueReceive+0x76>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <xQueueReceive+0x78>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <xQueueReceive+0x94>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	61bb      	str	r3, [r7, #24]
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	e7fd      	b.n	800dcb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcb8:	f001 fe5e 	bl	800f978 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01f      	beq.n	800dd08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcc8:	68b9      	ldr	r1, [r7, #8]
 800dcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dccc:	f000 f978 	bl	800dfc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd2:	1e5a      	subs	r2, r3, #1
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00f      	beq.n	800dd00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	3310      	adds	r3, #16
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 ff13 	bl	800eb10 <xTaskRemoveFromEventList>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d007      	beq.n	800dd00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcf0:	4b3c      	ldr	r3, [pc, #240]	@ (800dde4 <xQueueReceive+0x1c0>)
 800dcf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd00:	f001 fe6c 	bl	800f9dc <vPortExitCritical>
				return pdPASS;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e069      	b.n	800dddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d103      	bne.n	800dd16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd0e:	f001 fe65 	bl	800f9dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e062      	b.n	800dddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd1c:	f107 0310 	add.w	r3, r7, #16
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 ff59 	bl	800ebd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd26:	2301      	movs	r3, #1
 800dd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd2a:	f001 fe57 	bl	800f9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd2e:	f000 fcaf 	bl	800e690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd32:	f001 fe21 	bl	800f978 <vPortEnterCritical>
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd3c:	b25b      	sxtb	r3, r3
 800dd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd42:	d103      	bne.n	800dd4c <xQueueReceive+0x128>
 800dd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd52:	b25b      	sxtb	r3, r3
 800dd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd58:	d103      	bne.n	800dd62 <xQueueReceive+0x13e>
 800dd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd62:	f001 fe3b 	bl	800f9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd66:	1d3a      	adds	r2, r7, #4
 800dd68:	f107 0310 	add.w	r3, r7, #16
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 ff48 	bl	800ec04 <xTaskCheckForTimeOut>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d123      	bne.n	800ddc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd7c:	f000 f998 	bl	800e0b0 <prvIsQueueEmpty>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d017      	beq.n	800ddb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd88:	3324      	adds	r3, #36	@ 0x24
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fe6c 	bl	800ea6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd96:	f000 f939 	bl	800e00c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd9a:	f000 fc87 	bl	800e6ac <xTaskResumeAll>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d189      	bne.n	800dcb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dda4:	4b0f      	ldr	r3, [pc, #60]	@ (800dde4 <xQueueReceive+0x1c0>)
 800dda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	e780      	b.n	800dcb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ddb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddb8:	f000 f928 	bl	800e00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddbc:	f000 fc76 	bl	800e6ac <xTaskResumeAll>
 800ddc0:	e77a      	b.n	800dcb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ddc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddc4:	f000 f922 	bl	800e00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddc8:	f000 fc70 	bl	800e6ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddce:	f000 f96f 	bl	800e0b0 <prvIsQueueEmpty>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f43f af6f 	beq.w	800dcb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ddda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3730      	adds	r7, #48	@ 0x30
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	e000ed04 	.word	0xe000ed04

0800dde8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08e      	sub	sp, #56	@ 0x38
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10b      	bne.n	800de16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	623b      	str	r3, [r7, #32]
}
 800de10:	bf00      	nop
 800de12:	bf00      	nop
 800de14:	e7fd      	b.n	800de12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d103      	bne.n	800de24 <xQueueReceiveFromISR+0x3c>
 800de1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <xQueueReceiveFromISR+0x40>
 800de24:	2301      	movs	r3, #1
 800de26:	e000      	b.n	800de2a <xQueueReceiveFromISR+0x42>
 800de28:	2300      	movs	r3, #0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10b      	bne.n	800de46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	61fb      	str	r3, [r7, #28]
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	e7fd      	b.n	800de42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de46:	f001 fe77 	bl	800fb38 <vPortValidateInterruptPriority>
	__asm volatile
 800de4a:	f3ef 8211 	mrs	r2, BASEPRI
 800de4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	61ba      	str	r2, [r7, #24]
 800de60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800de62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d02f      	beq.n	800ded2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800de72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de80:	f000 f89e 	bl	800dfc0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de86:	1e5a      	subs	r2, r3, #1
 800de88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800de8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800de90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de94:	d112      	bne.n	800debc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d016      	beq.n	800decc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	3310      	adds	r3, #16
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 fe34 	bl	800eb10 <xTaskRemoveFromEventList>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00e      	beq.n	800decc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	e007      	b.n	800decc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800debc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec0:	3301      	adds	r3, #1
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	b25a      	sxtb	r2, r3
 800dec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800decc:	2301      	movs	r3, #1
 800dece:	637b      	str	r3, [r7, #52]	@ 0x34
 800ded0:	e001      	b.n	800ded6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	f383 8811 	msr	BASEPRI, r3
}
 800dee0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3738      	adds	r7, #56	@ 0x38
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800def8:	2300      	movs	r3, #0
 800defa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10d      	bne.n	800df26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d14d      	bne.n	800dfae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	4618      	mov	r0, r3
 800df18:	f000 ffde 	bl	800eed8 <xTaskPriorityDisinherit>
 800df1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	609a      	str	r2, [r3, #8]
 800df24:	e043      	b.n	800dfae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d119      	bne.n	800df60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6858      	ldr	r0, [r3, #4]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df34:	461a      	mov	r2, r3
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	f002 f979 	bl	801022e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df44:	441a      	add	r2, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	429a      	cmp	r2, r3
 800df54:	d32b      	bcc.n	800dfae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	605a      	str	r2, [r3, #4]
 800df5e:	e026      	b.n	800dfae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	68d8      	ldr	r0, [r3, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df68:	461a      	mov	r2, r3
 800df6a:	68b9      	ldr	r1, [r7, #8]
 800df6c:	f002 f95f 	bl	801022e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68da      	ldr	r2, [r3, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df78:	425b      	negs	r3, r3
 800df7a:	441a      	add	r2, r3
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68da      	ldr	r2, [r3, #12]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d207      	bcs.n	800df9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df94:	425b      	negs	r3, r3
 800df96:	441a      	add	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d105      	bne.n	800dfae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dfb6:	697b      	ldr	r3, [r7, #20]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d018      	beq.n	800e004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfda:	441a      	add	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68da      	ldr	r2, [r3, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d303      	bcc.n	800dff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68d9      	ldr	r1, [r3, #12]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dffc:	461a      	mov	r2, r3
 800dffe:	6838      	ldr	r0, [r7, #0]
 800e000:	f002 f915 	bl	801022e <memcpy>
	}
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e014:	f001 fcb0 	bl	800f978 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e01e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e020:	e011      	b.n	800e046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e026:	2b00      	cmp	r3, #0
 800e028:	d012      	beq.n	800e050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3324      	adds	r3, #36	@ 0x24
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fd6e 	bl	800eb10 <xTaskRemoveFromEventList>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e03a:	f000 fe47 	bl	800eccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	3b01      	subs	r3, #1
 800e042:	b2db      	uxtb	r3, r3
 800e044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	dce9      	bgt.n	800e022 <prvUnlockQueue+0x16>
 800e04e:	e000      	b.n	800e052 <prvUnlockQueue+0x46>
					break;
 800e050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	22ff      	movs	r2, #255	@ 0xff
 800e056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e05a:	f001 fcbf 	bl	800f9dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e05e:	f001 fc8b 	bl	800f978 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e06a:	e011      	b.n	800e090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	691b      	ldr	r3, [r3, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d012      	beq.n	800e09a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3310      	adds	r3, #16
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 fd49 	bl	800eb10 <xTaskRemoveFromEventList>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e084:	f000 fe22 	bl	800eccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e088:	7bbb      	ldrb	r3, [r7, #14]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e094:	2b00      	cmp	r3, #0
 800e096:	dce9      	bgt.n	800e06c <prvUnlockQueue+0x60>
 800e098:	e000      	b.n	800e09c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e09a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	22ff      	movs	r2, #255	@ 0xff
 800e0a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e0a4:	f001 fc9a 	bl	800f9dc <vPortExitCritical>
}
 800e0a8:	bf00      	nop
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e0b8:	f001 fc5e 	bl	800f978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	e001      	b.n	800e0ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e0ce:	f001 fc85 	bl	800f9dc <vPortExitCritical>

	return xReturn;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e0e4:	f001 fc48 	bl	800f978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d102      	bne.n	800e0fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	e001      	b.n	800e0fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e0fe:	f001 fc6d 	bl	800f9dc <vPortExitCritical>

	return xReturn;
 800e102:	68fb      	ldr	r3, [r7, #12]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	e014      	b.n	800e146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e11c:	4a0f      	ldr	r2, [pc, #60]	@ (800e15c <vQueueAddToRegistry+0x50>)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10b      	bne.n	800e140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e128:	490c      	ldr	r1, [pc, #48]	@ (800e15c <vQueueAddToRegistry+0x50>)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e132:	4a0a      	ldr	r2, [pc, #40]	@ (800e15c <vQueueAddToRegistry+0x50>)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	4413      	add	r3, r2
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e13e:	e006      	b.n	800e14e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3301      	adds	r3, #1
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b07      	cmp	r3, #7
 800e14a:	d9e7      	bls.n	800e11c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	20000e34 	.word	0x20000e34

0800e160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e170:	f001 fc02 	bl	800f978 <vPortEnterCritical>
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e17a:	b25b      	sxtb	r3, r3
 800e17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e180:	d103      	bne.n	800e18a <vQueueWaitForMessageRestricted+0x2a>
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2200      	movs	r2, #0
 800e186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e190:	b25b      	sxtb	r3, r3
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e196:	d103      	bne.n	800e1a0 <vQueueWaitForMessageRestricted+0x40>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1a0:	f001 fc1c 	bl	800f9dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d106      	bne.n	800e1ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	3324      	adds	r3, #36	@ 0x24
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fc7f 	bl	800eab8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f7ff ff26 	bl	800e00c <prvUnlockQueue>
	}
 800e1c0:	bf00      	nop
 800e1c2:	3718      	adds	r7, #24
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08e      	sub	sp, #56	@ 0x38
 800e1cc:	af04      	add	r7, sp, #16
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10b      	bne.n	800e1f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	623b      	str	r3, [r7, #32]
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	e7fd      	b.n	800e1f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d10b      	bne.n	800e212 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	61fb      	str	r3, [r7, #28]
}
 800e20c:	bf00      	nop
 800e20e:	bf00      	nop
 800e210:	e7fd      	b.n	800e20e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e212:	23a8      	movs	r3, #168	@ 0xa8
 800e214:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2ba8      	cmp	r3, #168	@ 0xa8
 800e21a:	d00b      	beq.n	800e234 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	61bb      	str	r3, [r7, #24]
}
 800e22e:	bf00      	nop
 800e230:	bf00      	nop
 800e232:	e7fd      	b.n	800e230 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01e      	beq.n	800e27a <xTaskCreateStatic+0xb2>
 800e23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01b      	beq.n	800e27a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e24a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24e:	2202      	movs	r2, #2
 800e250:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e254:	2300      	movs	r3, #0
 800e256:	9303      	str	r3, [sp, #12]
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	9302      	str	r3, [sp, #8]
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	68b9      	ldr	r1, [r7, #8]
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f000 f851 	bl	800e314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e274:	f000 f8f6 	bl	800e464 <prvAddNewTaskToReadyList>
 800e278:	e001      	b.n	800e27e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e27e:	697b      	ldr	r3, [r7, #20]
	}
 800e280:	4618      	mov	r0, r3
 800e282:	3728      	adds	r7, #40	@ 0x28
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08c      	sub	sp, #48	@ 0x30
 800e28c:	af04      	add	r7, sp, #16
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	603b      	str	r3, [r7, #0]
 800e294:	4613      	mov	r3, r2
 800e296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f001 fc8d 	bl	800fbbc <pvPortMalloc>
 800e2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00e      	beq.n	800e2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2aa:	20a8      	movs	r0, #168	@ 0xa8
 800e2ac:	f001 fc86 	bl	800fbbc <pvPortMalloc>
 800e2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e2be:	e005      	b.n	800e2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e2c0:	6978      	ldr	r0, [r7, #20]
 800e2c2:	f001 fcbf 	bl	800fc44 <vPortFree>
 800e2c6:	e001      	b.n	800e2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d017      	beq.n	800e302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2da:	88fa      	ldrh	r2, [r7, #6]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9303      	str	r3, [sp, #12]
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 f80f 	bl	800e314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2f6:	69f8      	ldr	r0, [r7, #28]
 800e2f8:	f000 f8b4 	bl	800e464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	61bb      	str	r3, [r7, #24]
 800e300:	e002      	b.n	800e308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e302:	f04f 33ff 	mov.w	r3, #4294967295
 800e306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e308:	69bb      	ldr	r3, [r7, #24]
	}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3720      	adds	r7, #32
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
	...

0800e314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b088      	sub	sp, #32
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
 800e320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	461a      	mov	r2, r3
 800e32c:	21a5      	movs	r1, #165	@ 0xa5
 800e32e:	f001 fead 	bl	801008c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e33c:	3b01      	subs	r3, #1
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	f023 0307 	bic.w	r3, r3, #7
 800e34a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	f003 0307 	and.w	r3, r3, #7
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	617b      	str	r3, [r7, #20]
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	e7fd      	b.n	800e36a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01f      	beq.n	800e3b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e374:	2300      	movs	r3, #0
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	e012      	b.n	800e3a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	7819      	ldrb	r1, [r3, #0]
 800e382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	4413      	add	r3, r2
 800e388:	3334      	adds	r3, #52	@ 0x34
 800e38a:	460a      	mov	r2, r1
 800e38c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	4413      	add	r3, r2
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d006      	beq.n	800e3a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	3301      	adds	r3, #1
 800e39e:	61fb      	str	r3, [r7, #28]
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2b0f      	cmp	r3, #15
 800e3a4:	d9e9      	bls.n	800e37a <prvInitialiseNewTask+0x66>
 800e3a6:	e000      	b.n	800e3aa <prvInitialiseNewTask+0x96>
			{
				break;
 800e3a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e3b2:	e003      	b.n	800e3bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3be:	2b37      	cmp	r3, #55	@ 0x37
 800e3c0:	d901      	bls.n	800e3c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e3c2:	2337      	movs	r3, #55	@ 0x37
 800e3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7ff f8a7 	bl	800d530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e4:	3318      	adds	r3, #24
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff f8a2 	bl	800d530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e400:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e404:	2200      	movs	r2, #0
 800e406:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e414:	3354      	adds	r3, #84	@ 0x54
 800e416:	224c      	movs	r2, #76	@ 0x4c
 800e418:	2100      	movs	r1, #0
 800e41a:	4618      	mov	r0, r3
 800e41c:	f001 fe36 	bl	801008c <memset>
 800e420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e422:	4a0d      	ldr	r2, [pc, #52]	@ (800e458 <prvInitialiseNewTask+0x144>)
 800e424:	659a      	str	r2, [r3, #88]	@ 0x58
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	4a0c      	ldr	r2, [pc, #48]	@ (800e45c <prvInitialiseNewTask+0x148>)
 800e42a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42e:	4a0c      	ldr	r2, [pc, #48]	@ (800e460 <prvInitialiseNewTask+0x14c>)
 800e430:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	68f9      	ldr	r1, [r7, #12]
 800e436:	69b8      	ldr	r0, [r7, #24]
 800e438:	f001 f96c 	bl	800f714 <pxPortInitialiseStack>
 800e43c:	4602      	mov	r2, r0
 800e43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e44c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e44e:	bf00      	nop
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20002068 	.word	0x20002068
 800e45c:	200020d0 	.word	0x200020d0
 800e460:	20002138 	.word	0x20002138

0800e464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e46c:	f001 fa84 	bl	800f978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e470:	4b2d      	ldr	r3, [pc, #180]	@ (800e528 <prvAddNewTaskToReadyList+0xc4>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	3301      	adds	r3, #1
 800e476:	4a2c      	ldr	r2, [pc, #176]	@ (800e528 <prvAddNewTaskToReadyList+0xc4>)
 800e478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e47a:	4b2c      	ldr	r3, [pc, #176]	@ (800e52c <prvAddNewTaskToReadyList+0xc8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d109      	bne.n	800e496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e482:	4a2a      	ldr	r2, [pc, #168]	@ (800e52c <prvAddNewTaskToReadyList+0xc8>)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e488:	4b27      	ldr	r3, [pc, #156]	@ (800e528 <prvAddNewTaskToReadyList+0xc4>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d110      	bne.n	800e4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e490:	f000 fc40 	bl	800ed14 <prvInitialiseTaskLists>
 800e494:	e00d      	b.n	800e4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e496:	4b26      	ldr	r3, [pc, #152]	@ (800e530 <prvAddNewTaskToReadyList+0xcc>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d109      	bne.n	800e4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e49e:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <prvAddNewTaskToReadyList+0xc8>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d802      	bhi.n	800e4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e4ac:	4a1f      	ldr	r2, [pc, #124]	@ (800e52c <prvAddNewTaskToReadyList+0xc8>)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e4b2:	4b20      	ldr	r3, [pc, #128]	@ (800e534 <prvAddNewTaskToReadyList+0xd0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	4a1e      	ldr	r2, [pc, #120]	@ (800e534 <prvAddNewTaskToReadyList+0xd0>)
 800e4ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e4bc:	4b1d      	ldr	r3, [pc, #116]	@ (800e534 <prvAddNewTaskToReadyList+0xd0>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e538 <prvAddNewTaskToReadyList+0xd4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d903      	bls.n	800e4d8 <prvAddNewTaskToReadyList+0x74>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d4:	4a18      	ldr	r2, [pc, #96]	@ (800e538 <prvAddNewTaskToReadyList+0xd4>)
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4a15      	ldr	r2, [pc, #84]	@ (800e53c <prvAddNewTaskToReadyList+0xd8>)
 800e4e6:	441a      	add	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7ff f82b 	bl	800d54a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4f4:	f001 fa72 	bl	800f9dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e530 <prvAddNewTaskToReadyList+0xcc>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00e      	beq.n	800e51e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e500:	4b0a      	ldr	r3, [pc, #40]	@ (800e52c <prvAddNewTaskToReadyList+0xc8>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d207      	bcs.n	800e51e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e50e:	4b0c      	ldr	r3, [pc, #48]	@ (800e540 <prvAddNewTaskToReadyList+0xdc>)
 800e510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20001348 	.word	0x20001348
 800e52c:	20000e74 	.word	0x20000e74
 800e530:	20001354 	.word	0x20001354
 800e534:	20001364 	.word	0x20001364
 800e538:	20001350 	.word	0x20001350
 800e53c:	20000e78 	.word	0x20000e78
 800e540:	e000ed04 	.word	0xe000ed04

0800e544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e54c:	2300      	movs	r3, #0
 800e54e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d018      	beq.n	800e588 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e556:	4b14      	ldr	r3, [pc, #80]	@ (800e5a8 <vTaskDelay+0x64>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <vTaskDelay+0x32>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	60bb      	str	r3, [r7, #8]
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	e7fd      	b.n	800e572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e576:	f000 f88b 	bl	800e690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e57a:	2100      	movs	r1, #0
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fd1b 	bl	800efb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e582:	f000 f893 	bl	800e6ac <xTaskResumeAll>
 800e586:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d107      	bne.n	800e59e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e58e:	4b07      	ldr	r3, [pc, #28]	@ (800e5ac <vTaskDelay+0x68>)
 800e590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e59e:	bf00      	nop
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20001370 	.word	0x20001370
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08a      	sub	sp, #40	@ 0x28
 800e5b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5be:	463a      	mov	r2, r7
 800e5c0:	1d39      	adds	r1, r7, #4
 800e5c2:	f107 0308 	add.w	r3, r7, #8
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fe ff5e 	bl	800d488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	9202      	str	r2, [sp, #8]
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	460a      	mov	r2, r1
 800e5de:	4924      	ldr	r1, [pc, #144]	@ (800e670 <vTaskStartScheduler+0xc0>)
 800e5e0:	4824      	ldr	r0, [pc, #144]	@ (800e674 <vTaskStartScheduler+0xc4>)
 800e5e2:	f7ff fdf1 	bl	800e1c8 <xTaskCreateStatic>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	4a23      	ldr	r2, [pc, #140]	@ (800e678 <vTaskStartScheduler+0xc8>)
 800e5ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5ec:	4b22      	ldr	r3, [pc, #136]	@ (800e678 <vTaskStartScheduler+0xc8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	e001      	b.n	800e5fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d102      	bne.n	800e60a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e604:	f000 fd2c 	bl	800f060 <xTimerCreateTimerTask>
 800e608:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d11b      	bne.n	800e648 <vTaskStartScheduler+0x98>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	613b      	str	r3, [r7, #16]
}
 800e622:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e624:	4b15      	ldr	r3, [pc, #84]	@ (800e67c <vTaskStartScheduler+0xcc>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3354      	adds	r3, #84	@ 0x54
 800e62a:	4a15      	ldr	r2, [pc, #84]	@ (800e680 <vTaskStartScheduler+0xd0>)
 800e62c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e62e:	4b15      	ldr	r3, [pc, #84]	@ (800e684 <vTaskStartScheduler+0xd4>)
 800e630:	f04f 32ff 	mov.w	r2, #4294967295
 800e634:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e636:	4b14      	ldr	r3, [pc, #80]	@ (800e688 <vTaskStartScheduler+0xd8>)
 800e638:	2201      	movs	r2, #1
 800e63a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e63c:	4b13      	ldr	r3, [pc, #76]	@ (800e68c <vTaskStartScheduler+0xdc>)
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e642:	f001 f8f5 	bl	800f830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e646:	e00f      	b.n	800e668 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64e:	d10b      	bne.n	800e668 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	60fb      	str	r3, [r7, #12]
}
 800e662:	bf00      	nop
 800e664:	bf00      	nop
 800e666:	e7fd      	b.n	800e664 <vTaskStartScheduler+0xb4>
}
 800e668:	bf00      	nop
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	08010c9c 	.word	0x08010c9c
 800e674:	0800ece5 	.word	0x0800ece5
 800e678:	2000136c 	.word	0x2000136c
 800e67c:	20000e74 	.word	0x20000e74
 800e680:	20000020 	.word	0x20000020
 800e684:	20001368 	.word	0x20001368
 800e688:	20001354 	.word	0x20001354
 800e68c:	2000134c 	.word	0x2000134c

0800e690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e694:	4b04      	ldr	r3, [pc, #16]	@ (800e6a8 <vTaskSuspendAll+0x18>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3301      	adds	r3, #1
 800e69a:	4a03      	ldr	r2, [pc, #12]	@ (800e6a8 <vTaskSuspendAll+0x18>)
 800e69c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e69e:	bf00      	nop
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	20001370 	.word	0x20001370

0800e6ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e6ba:	4b42      	ldr	r3, [pc, #264]	@ (800e7c4 <xTaskResumeAll+0x118>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <xTaskResumeAll+0x2e>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	603b      	str	r3, [r7, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6da:	f001 f94d 	bl	800f978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6de:	4b39      	ldr	r3, [pc, #228]	@ (800e7c4 <xTaskResumeAll+0x118>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	4a37      	ldr	r2, [pc, #220]	@ (800e7c4 <xTaskResumeAll+0x118>)
 800e6e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6e8:	4b36      	ldr	r3, [pc, #216]	@ (800e7c4 <xTaskResumeAll+0x118>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d162      	bne.n	800e7b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6f0:	4b35      	ldr	r3, [pc, #212]	@ (800e7c8 <xTaskResumeAll+0x11c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d05e      	beq.n	800e7b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6f8:	e02f      	b.n	800e75a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6fa:	4b34      	ldr	r3, [pc, #208]	@ (800e7cc <xTaskResumeAll+0x120>)
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3318      	adds	r3, #24
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe ff7c 	bl	800d604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3304      	adds	r3, #4
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe ff77 	bl	800d604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e71a:	4b2d      	ldr	r3, [pc, #180]	@ (800e7d0 <xTaskResumeAll+0x124>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d903      	bls.n	800e72a <xTaskResumeAll+0x7e>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e726:	4a2a      	ldr	r2, [pc, #168]	@ (800e7d0 <xTaskResumeAll+0x124>)
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e72e:	4613      	mov	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4a27      	ldr	r2, [pc, #156]	@ (800e7d4 <xTaskResumeAll+0x128>)
 800e738:	441a      	add	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4619      	mov	r1, r3
 800e740:	4610      	mov	r0, r2
 800e742:	f7fe ff02 	bl	800d54a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e74a:	4b23      	ldr	r3, [pc, #140]	@ (800e7d8 <xTaskResumeAll+0x12c>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e750:	429a      	cmp	r2, r3
 800e752:	d302      	bcc.n	800e75a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e754:	4b21      	ldr	r3, [pc, #132]	@ (800e7dc <xTaskResumeAll+0x130>)
 800e756:	2201      	movs	r2, #1
 800e758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e75a:	4b1c      	ldr	r3, [pc, #112]	@ (800e7cc <xTaskResumeAll+0x120>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1cb      	bne.n	800e6fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e768:	f000 fb78 	bl	800ee5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e76c:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e0 <xTaskResumeAll+0x134>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d010      	beq.n	800e79a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e778:	f000 f858 	bl	800e82c <xTaskIncrementTick>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e782:	4b16      	ldr	r3, [pc, #88]	@ (800e7dc <xTaskResumeAll+0x130>)
 800e784:	2201      	movs	r2, #1
 800e786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1f1      	bne.n	800e778 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e794:	4b12      	ldr	r3, [pc, #72]	@ (800e7e0 <xTaskResumeAll+0x134>)
 800e796:	2200      	movs	r2, #0
 800e798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e79a:	4b10      	ldr	r3, [pc, #64]	@ (800e7dc <xTaskResumeAll+0x130>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e4 <xTaskResumeAll+0x138>)
 800e7a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7b6:	f001 f911 	bl	800f9dc <vPortExitCritical>

	return xAlreadyYielded;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20001370 	.word	0x20001370
 800e7c8:	20001348 	.word	0x20001348
 800e7cc:	20001308 	.word	0x20001308
 800e7d0:	20001350 	.word	0x20001350
 800e7d4:	20000e78 	.word	0x20000e78
 800e7d8:	20000e74 	.word	0x20000e74
 800e7dc:	2000135c 	.word	0x2000135c
 800e7e0:	20001358 	.word	0x20001358
 800e7e4:	e000ed04 	.word	0xe000ed04

0800e7e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7ee:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <xTaskGetTickCount+0x1c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7f4:	687b      	ldr	r3, [r7, #4]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	2000134c 	.word	0x2000134c

0800e808 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e80e:	f001 f993 	bl	800fb38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e812:	2300      	movs	r3, #0
 800e814:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e816:	4b04      	ldr	r3, [pc, #16]	@ (800e828 <xTaskGetTickCountFromISR+0x20>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e81c:	683b      	ldr	r3, [r7, #0]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	2000134c 	.word	0x2000134c

0800e82c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e832:	2300      	movs	r3, #0
 800e834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e836:	4b4f      	ldr	r3, [pc, #316]	@ (800e974 <xTaskIncrementTick+0x148>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f040 8090 	bne.w	800e960 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e840:	4b4d      	ldr	r3, [pc, #308]	@ (800e978 <xTaskIncrementTick+0x14c>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e848:	4a4b      	ldr	r2, [pc, #300]	@ (800e978 <xTaskIncrementTick+0x14c>)
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d121      	bne.n	800e898 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e854:	4b49      	ldr	r3, [pc, #292]	@ (800e97c <xTaskIncrementTick+0x150>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00b      	beq.n	800e876 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	603b      	str	r3, [r7, #0]
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	e7fd      	b.n	800e872 <xTaskIncrementTick+0x46>
 800e876:	4b41      	ldr	r3, [pc, #260]	@ (800e97c <xTaskIncrementTick+0x150>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
 800e87c:	4b40      	ldr	r3, [pc, #256]	@ (800e980 <xTaskIncrementTick+0x154>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a3e      	ldr	r2, [pc, #248]	@ (800e97c <xTaskIncrementTick+0x150>)
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	4a3e      	ldr	r2, [pc, #248]	@ (800e980 <xTaskIncrementTick+0x154>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	4b3e      	ldr	r3, [pc, #248]	@ (800e984 <xTaskIncrementTick+0x158>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3301      	adds	r3, #1
 800e890:	4a3c      	ldr	r2, [pc, #240]	@ (800e984 <xTaskIncrementTick+0x158>)
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	f000 fae2 	bl	800ee5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e898:	4b3b      	ldr	r3, [pc, #236]	@ (800e988 <xTaskIncrementTick+0x15c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d349      	bcc.n	800e936 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8a2:	4b36      	ldr	r3, [pc, #216]	@ (800e97c <xTaskIncrementTick+0x150>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d104      	bne.n	800e8b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ac:	4b36      	ldr	r3, [pc, #216]	@ (800e988 <xTaskIncrementTick+0x15c>)
 800e8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b2:	601a      	str	r2, [r3, #0]
					break;
 800e8b4:	e03f      	b.n	800e936 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8b6:	4b31      	ldr	r3, [pc, #196]	@ (800e97c <xTaskIncrementTick+0x150>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e8c6:	693a      	ldr	r2, [r7, #16]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d203      	bcs.n	800e8d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e8ce:	4a2e      	ldr	r2, [pc, #184]	@ (800e988 <xTaskIncrementTick+0x15c>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8d4:	e02f      	b.n	800e936 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe fe92 	bl	800d604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	3318      	adds	r3, #24
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe fe89 	bl	800d604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f6:	4b25      	ldr	r3, [pc, #148]	@ (800e98c <xTaskIncrementTick+0x160>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d903      	bls.n	800e906 <xTaskIncrementTick+0xda>
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e902:	4a22      	ldr	r2, [pc, #136]	@ (800e98c <xTaskIncrementTick+0x160>)
 800e904:	6013      	str	r3, [r2, #0]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90a:	4613      	mov	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4a1f      	ldr	r2, [pc, #124]	@ (800e990 <xTaskIncrementTick+0x164>)
 800e914:	441a      	add	r2, r3
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	3304      	adds	r3, #4
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7fe fe14 	bl	800d54a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e926:	4b1b      	ldr	r3, [pc, #108]	@ (800e994 <xTaskIncrementTick+0x168>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d3b8      	bcc.n	800e8a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e930:	2301      	movs	r3, #1
 800e932:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e934:	e7b5      	b.n	800e8a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e936:	4b17      	ldr	r3, [pc, #92]	@ (800e994 <xTaskIncrementTick+0x168>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93c:	4914      	ldr	r1, [pc, #80]	@ (800e990 <xTaskIncrementTick+0x164>)
 800e93e:	4613      	mov	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	440b      	add	r3, r1
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d901      	bls.n	800e952 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e94e:	2301      	movs	r3, #1
 800e950:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e952:	4b11      	ldr	r3, [pc, #68]	@ (800e998 <xTaskIncrementTick+0x16c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d007      	beq.n	800e96a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e95a:	2301      	movs	r3, #1
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	e004      	b.n	800e96a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e960:	4b0e      	ldr	r3, [pc, #56]	@ (800e99c <xTaskIncrementTick+0x170>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	3301      	adds	r3, #1
 800e966:	4a0d      	ldr	r2, [pc, #52]	@ (800e99c <xTaskIncrementTick+0x170>)
 800e968:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e96a:	697b      	ldr	r3, [r7, #20]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20001370 	.word	0x20001370
 800e978:	2000134c 	.word	0x2000134c
 800e97c:	20001300 	.word	0x20001300
 800e980:	20001304 	.word	0x20001304
 800e984:	20001360 	.word	0x20001360
 800e988:	20001368 	.word	0x20001368
 800e98c:	20001350 	.word	0x20001350
 800e990:	20000e78 	.word	0x20000e78
 800e994:	20000e74 	.word	0x20000e74
 800e998:	2000135c 	.word	0x2000135c
 800e99c:	20001358 	.word	0x20001358

0800e9a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9a6:	4b2b      	ldr	r3, [pc, #172]	@ (800ea54 <vTaskSwitchContext+0xb4>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e9ae:	4b2a      	ldr	r3, [pc, #168]	@ (800ea58 <vTaskSwitchContext+0xb8>)
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e9b4:	e047      	b.n	800ea46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e9b6:	4b28      	ldr	r3, [pc, #160]	@ (800ea58 <vTaskSwitchContext+0xb8>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9bc:	4b27      	ldr	r3, [pc, #156]	@ (800ea5c <vTaskSwitchContext+0xbc>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e011      	b.n	800e9e8 <vTaskSwitchContext+0x48>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10b      	bne.n	800e9e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	607b      	str	r3, [r7, #4]
}
 800e9dc:	bf00      	nop
 800e9de:	bf00      	nop
 800e9e0:	e7fd      	b.n	800e9de <vTaskSwitchContext+0x3e>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	491d      	ldr	r1, [pc, #116]	@ (800ea60 <vTaskSwitchContext+0xc0>)
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	440b      	add	r3, r1
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0e3      	beq.n	800e9c4 <vTaskSwitchContext+0x24>
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4a16      	ldr	r2, [pc, #88]	@ (800ea60 <vTaskSwitchContext+0xc0>)
 800ea08:	4413      	add	r3, r2
 800ea0a:	60bb      	str	r3, [r7, #8]
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	685a      	ldr	r2, [r3, #4]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	605a      	str	r2, [r3, #4]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d104      	bne.n	800ea2c <vTaskSwitchContext+0x8c>
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	685a      	ldr	r2, [r3, #4]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	605a      	str	r2, [r3, #4]
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	4a0c      	ldr	r2, [pc, #48]	@ (800ea64 <vTaskSwitchContext+0xc4>)
 800ea34:	6013      	str	r3, [r2, #0]
 800ea36:	4a09      	ldr	r2, [pc, #36]	@ (800ea5c <vTaskSwitchContext+0xbc>)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea3c:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <vTaskSwitchContext+0xc4>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3354      	adds	r3, #84	@ 0x54
 800ea42:	4a09      	ldr	r2, [pc, #36]	@ (800ea68 <vTaskSwitchContext+0xc8>)
 800ea44:	6013      	str	r3, [r2, #0]
}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20001370 	.word	0x20001370
 800ea58:	2000135c 	.word	0x2000135c
 800ea5c:	20001350 	.word	0x20001350
 800ea60:	20000e78 	.word	0x20000e78
 800ea64:	20000e74 	.word	0x20000e74
 800ea68:	20000020 	.word	0x20000020

0800ea6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10b      	bne.n	800ea94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	60fb      	str	r3, [r7, #12]
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	e7fd      	b.n	800ea90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea94:	4b07      	ldr	r3, [pc, #28]	@ (800eab4 <vTaskPlaceOnEventList+0x48>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3318      	adds	r3, #24
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7fe fd78 	bl	800d592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	6838      	ldr	r0, [r7, #0]
 800eaa6:	f000 fa87 	bl	800efb8 <prvAddCurrentTaskToDelayedList>
}
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20000e74 	.word	0x20000e74

0800eab8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10b      	bne.n	800eae2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	617b      	str	r3, [r7, #20]
}
 800eadc:	bf00      	nop
 800eade:	bf00      	nop
 800eae0:	e7fd      	b.n	800eade <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eae2:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <vTaskPlaceOnEventListRestricted+0x54>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3318      	adds	r3, #24
 800eae8:	4619      	mov	r1, r3
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7fe fd2d 	bl	800d54a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800eaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800eafa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eafc:	6879      	ldr	r1, [r7, #4]
 800eafe:	68b8      	ldr	r0, [r7, #8]
 800eb00:	f000 fa5a 	bl	800efb8 <prvAddCurrentTaskToDelayedList>
	}
 800eb04:	bf00      	nop
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20000e74 	.word	0x20000e74

0800eb10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d10b      	bne.n	800eb3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	60fb      	str	r3, [r7, #12]
}
 800eb38:	bf00      	nop
 800eb3a:	bf00      	nop
 800eb3c:	e7fd      	b.n	800eb3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	3318      	adds	r3, #24
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe fd5e 	bl	800d604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb48:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc0 <xTaskRemoveFromEventList+0xb0>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d11d      	bne.n	800eb8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	3304      	adds	r3, #4
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7fe fd55 	bl	800d604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb5e:	4b19      	ldr	r3, [pc, #100]	@ (800ebc4 <xTaskRemoveFromEventList+0xb4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d903      	bls.n	800eb6e <xTaskRemoveFromEventList+0x5e>
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6a:	4a16      	ldr	r2, [pc, #88]	@ (800ebc4 <xTaskRemoveFromEventList+0xb4>)
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb72:	4613      	mov	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4413      	add	r3, r2
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	4a13      	ldr	r2, [pc, #76]	@ (800ebc8 <xTaskRemoveFromEventList+0xb8>)
 800eb7c:	441a      	add	r2, r3
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	3304      	adds	r3, #4
 800eb82:	4619      	mov	r1, r3
 800eb84:	4610      	mov	r0, r2
 800eb86:	f7fe fce0 	bl	800d54a <vListInsertEnd>
 800eb8a:	e005      	b.n	800eb98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	3318      	adds	r3, #24
 800eb90:	4619      	mov	r1, r3
 800eb92:	480e      	ldr	r0, [pc, #56]	@ (800ebcc <xTaskRemoveFromEventList+0xbc>)
 800eb94:	f7fe fcd9 	bl	800d54a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd0 <xTaskRemoveFromEventList+0xc0>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d905      	bls.n	800ebb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eba6:	2301      	movs	r3, #1
 800eba8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ebaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd4 <xTaskRemoveFromEventList+0xc4>)
 800ebac:	2201      	movs	r2, #1
 800ebae:	601a      	str	r2, [r3, #0]
 800ebb0:	e001      	b.n	800ebb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ebb6:	697b      	ldr	r3, [r7, #20]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	20001370 	.word	0x20001370
 800ebc4:	20001350 	.word	0x20001350
 800ebc8:	20000e78 	.word	0x20000e78
 800ebcc:	20001308 	.word	0x20001308
 800ebd0:	20000e74 	.word	0x20000e74
 800ebd4:	2000135c 	.word	0x2000135c

0800ebd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebe0:	4b06      	ldr	r3, [pc, #24]	@ (800ebfc <vTaskInternalSetTimeOutState+0x24>)
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebe8:	4b05      	ldr	r3, [pc, #20]	@ (800ec00 <vTaskInternalSetTimeOutState+0x28>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	605a      	str	r2, [r3, #4]
}
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	20001360 	.word	0x20001360
 800ec00:	2000134c 	.word	0x2000134c

0800ec04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10b      	bne.n	800ec2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	613b      	str	r3, [r7, #16]
}
 800ec26:	bf00      	nop
 800ec28:	bf00      	nop
 800ec2a:	e7fd      	b.n	800ec28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10b      	bne.n	800ec4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60fb      	str	r3, [r7, #12]
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	e7fd      	b.n	800ec46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ec4a:	f000 fe95 	bl	800f978 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc4 <xTaskCheckForTimeOut+0xc0>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	69ba      	ldr	r2, [r7, #24]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec66:	d102      	bne.n	800ec6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	61fb      	str	r3, [r7, #28]
 800ec6c:	e023      	b.n	800ecb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	4b15      	ldr	r3, [pc, #84]	@ (800ecc8 <xTaskCheckForTimeOut+0xc4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d007      	beq.n	800ec8a <xTaskCheckForTimeOut+0x86>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec84:	2301      	movs	r3, #1
 800ec86:	61fb      	str	r3, [r7, #28]
 800ec88:	e015      	b.n	800ecb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	697a      	ldr	r2, [r7, #20]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d20b      	bcs.n	800ecac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	1ad2      	subs	r2, r2, r3
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7ff ff99 	bl	800ebd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eca6:	2300      	movs	r3, #0
 800eca8:	61fb      	str	r3, [r7, #28]
 800ecaa:	e004      	b.n	800ecb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ecb6:	f000 fe91 	bl	800f9dc <vPortExitCritical>

	return xReturn;
 800ecba:	69fb      	ldr	r3, [r7, #28]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3720      	adds	r7, #32
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	2000134c 	.word	0x2000134c
 800ecc8:	20001360 	.word	0x20001360

0800eccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ecd0:	4b03      	ldr	r3, [pc, #12]	@ (800ece0 <vTaskMissedYield+0x14>)
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
}
 800ecd6:	bf00      	nop
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	2000135c 	.word	0x2000135c

0800ece4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecec:	f000 f852 	bl	800ed94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ecf0:	4b06      	ldr	r3, [pc, #24]	@ (800ed0c <prvIdleTask+0x28>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d9f9      	bls.n	800ecec <prvIdleTask+0x8>
			{
				taskYIELD();
 800ecf8:	4b05      	ldr	r3, [pc, #20]	@ (800ed10 <prvIdleTask+0x2c>)
 800ecfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecfe:	601a      	str	r2, [r3, #0]
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed08:	e7f0      	b.n	800ecec <prvIdleTask+0x8>
 800ed0a:	bf00      	nop
 800ed0c:	20000e78 	.word	0x20000e78
 800ed10:	e000ed04 	.word	0xe000ed04

0800ed14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	607b      	str	r3, [r7, #4]
 800ed1e:	e00c      	b.n	800ed3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4a12      	ldr	r2, [pc, #72]	@ (800ed74 <prvInitialiseTaskLists+0x60>)
 800ed2c:	4413      	add	r3, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fbde 	bl	800d4f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3301      	adds	r3, #1
 800ed38:	607b      	str	r3, [r7, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b37      	cmp	r3, #55	@ 0x37
 800ed3e:	d9ef      	bls.n	800ed20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed40:	480d      	ldr	r0, [pc, #52]	@ (800ed78 <prvInitialiseTaskLists+0x64>)
 800ed42:	f7fe fbd5 	bl	800d4f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed46:	480d      	ldr	r0, [pc, #52]	@ (800ed7c <prvInitialiseTaskLists+0x68>)
 800ed48:	f7fe fbd2 	bl	800d4f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed4c:	480c      	ldr	r0, [pc, #48]	@ (800ed80 <prvInitialiseTaskLists+0x6c>)
 800ed4e:	f7fe fbcf 	bl	800d4f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed52:	480c      	ldr	r0, [pc, #48]	@ (800ed84 <prvInitialiseTaskLists+0x70>)
 800ed54:	f7fe fbcc 	bl	800d4f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed58:	480b      	ldr	r0, [pc, #44]	@ (800ed88 <prvInitialiseTaskLists+0x74>)
 800ed5a:	f7fe fbc9 	bl	800d4f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed8c <prvInitialiseTaskLists+0x78>)
 800ed60:	4a05      	ldr	r2, [pc, #20]	@ (800ed78 <prvInitialiseTaskLists+0x64>)
 800ed62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed64:	4b0a      	ldr	r3, [pc, #40]	@ (800ed90 <prvInitialiseTaskLists+0x7c>)
 800ed66:	4a05      	ldr	r2, [pc, #20]	@ (800ed7c <prvInitialiseTaskLists+0x68>)
 800ed68:	601a      	str	r2, [r3, #0]
}
 800ed6a:	bf00      	nop
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20000e78 	.word	0x20000e78
 800ed78:	200012d8 	.word	0x200012d8
 800ed7c:	200012ec 	.word	0x200012ec
 800ed80:	20001308 	.word	0x20001308
 800ed84:	2000131c 	.word	0x2000131c
 800ed88:	20001334 	.word	0x20001334
 800ed8c:	20001300 	.word	0x20001300
 800ed90:	20001304 	.word	0x20001304

0800ed94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed9a:	e019      	b.n	800edd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed9c:	f000 fdec 	bl	800f978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eda0:	4b10      	ldr	r3, [pc, #64]	@ (800ede4 <prvCheckTasksWaitingTermination+0x50>)
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	3304      	adds	r3, #4
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe fc29 	bl	800d604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800edb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ede8 <prvCheckTasksWaitingTermination+0x54>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	4a0b      	ldr	r2, [pc, #44]	@ (800ede8 <prvCheckTasksWaitingTermination+0x54>)
 800edba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800edbc:	4b0b      	ldr	r3, [pc, #44]	@ (800edec <prvCheckTasksWaitingTermination+0x58>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	3b01      	subs	r3, #1
 800edc2:	4a0a      	ldr	r2, [pc, #40]	@ (800edec <prvCheckTasksWaitingTermination+0x58>)
 800edc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800edc6:	f000 fe09 	bl	800f9dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f810 	bl	800edf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edd0:	4b06      	ldr	r3, [pc, #24]	@ (800edec <prvCheckTasksWaitingTermination+0x58>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1e1      	bne.n	800ed9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800edd8:	bf00      	nop
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	2000131c 	.word	0x2000131c
 800ede8:	20001348 	.word	0x20001348
 800edec:	20001330 	.word	0x20001330

0800edf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3354      	adds	r3, #84	@ 0x54
 800edfc:	4618      	mov	r0, r3
 800edfe:	f001 f95d 	bl	80100bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d108      	bne.n	800ee1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee10:	4618      	mov	r0, r3
 800ee12:	f000 ff17 	bl	800fc44 <vPortFree>
				vPortFree( pxTCB );
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 ff14 	bl	800fc44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee1c:	e019      	b.n	800ee52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d103      	bne.n	800ee30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 ff0b 	bl	800fc44 <vPortFree>
	}
 800ee2e:	e010      	b.n	800ee52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d00b      	beq.n	800ee52 <prvDeleteTCB+0x62>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	60fb      	str	r3, [r7, #12]
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	e7fd      	b.n	800ee4e <prvDeleteTCB+0x5e>
	}
 800ee52:	bf00      	nop
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee62:	4b0c      	ldr	r3, [pc, #48]	@ (800ee94 <prvResetNextTaskUnblockTime+0x38>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d104      	bne.n	800ee76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ee98 <prvResetNextTaskUnblockTime+0x3c>)
 800ee6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee74:	e008      	b.n	800ee88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee76:	4b07      	ldr	r3, [pc, #28]	@ (800ee94 <prvResetNextTaskUnblockTime+0x38>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	4a04      	ldr	r2, [pc, #16]	@ (800ee98 <prvResetNextTaskUnblockTime+0x3c>)
 800ee86:	6013      	str	r3, [r2, #0]
}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	20001300 	.word	0x20001300
 800ee98:	20001368 	.word	0x20001368

0800ee9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eea2:	4b0b      	ldr	r3, [pc, #44]	@ (800eed0 <xTaskGetSchedulerState+0x34>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d102      	bne.n	800eeb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	e008      	b.n	800eec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeb0:	4b08      	ldr	r3, [pc, #32]	@ (800eed4 <xTaskGetSchedulerState+0x38>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d102      	bne.n	800eebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eeb8:	2302      	movs	r3, #2
 800eeba:	607b      	str	r3, [r7, #4]
 800eebc:	e001      	b.n	800eec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eebe:	2300      	movs	r3, #0
 800eec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eec2:	687b      	ldr	r3, [r7, #4]
	}
 800eec4:	4618      	mov	r0, r3
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	20001354 	.word	0x20001354
 800eed4:	20001370 	.word	0x20001370

0800eed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b086      	sub	sp, #24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eee4:	2300      	movs	r3, #0
 800eee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d058      	beq.n	800efa0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eeee:	4b2f      	ldr	r3, [pc, #188]	@ (800efac <xTaskPriorityDisinherit+0xd4>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	693a      	ldr	r2, [r7, #16]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d00b      	beq.n	800ef10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefc:	f383 8811 	msr	BASEPRI, r3
 800ef00:	f3bf 8f6f 	isb	sy
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	60fb      	str	r3, [r7, #12]
}
 800ef0a:	bf00      	nop
 800ef0c:	bf00      	nop
 800ef0e:	e7fd      	b.n	800ef0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10b      	bne.n	800ef30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	60bb      	str	r3, [r7, #8]
}
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	e7fd      	b.n	800ef2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef34:	1e5a      	subs	r2, r3, #1
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d02c      	beq.n	800efa0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d128      	bne.n	800efa0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	3304      	adds	r3, #4
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe fb56 	bl	800d604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef70:	4b0f      	ldr	r3, [pc, #60]	@ (800efb0 <xTaskPriorityDisinherit+0xd8>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d903      	bls.n	800ef80 <xTaskPriorityDisinherit+0xa8>
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef7c:	4a0c      	ldr	r2, [pc, #48]	@ (800efb0 <xTaskPriorityDisinherit+0xd8>)
 800ef7e:	6013      	str	r3, [r2, #0]
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef84:	4613      	mov	r3, r2
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4413      	add	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4a09      	ldr	r2, [pc, #36]	@ (800efb4 <xTaskPriorityDisinherit+0xdc>)
 800ef8e:	441a      	add	r2, r3
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	3304      	adds	r3, #4
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f7fe fad7 	bl	800d54a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800efa0:	697b      	ldr	r3, [r7, #20]
	}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	20000e74 	.word	0x20000e74
 800efb0:	20001350 	.word	0x20001350
 800efb4:	20000e78 	.word	0x20000e78

0800efb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efc2:	4b21      	ldr	r3, [pc, #132]	@ (800f048 <prvAddCurrentTaskToDelayedList+0x90>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efc8:	4b20      	ldr	r3, [pc, #128]	@ (800f04c <prvAddCurrentTaskToDelayedList+0x94>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	3304      	adds	r3, #4
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe fb18 	bl	800d604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efda:	d10a      	bne.n	800eff2 <prvAddCurrentTaskToDelayedList+0x3a>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d007      	beq.n	800eff2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efe2:	4b1a      	ldr	r3, [pc, #104]	@ (800f04c <prvAddCurrentTaskToDelayedList+0x94>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	3304      	adds	r3, #4
 800efe8:	4619      	mov	r1, r3
 800efea:	4819      	ldr	r0, [pc, #100]	@ (800f050 <prvAddCurrentTaskToDelayedList+0x98>)
 800efec:	f7fe faad 	bl	800d54a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eff0:	e026      	b.n	800f040 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4413      	add	r3, r2
 800eff8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800effa:	4b14      	ldr	r3, [pc, #80]	@ (800f04c <prvAddCurrentTaskToDelayedList+0x94>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	429a      	cmp	r2, r3
 800f008:	d209      	bcs.n	800f01e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f00a:	4b12      	ldr	r3, [pc, #72]	@ (800f054 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	4b0f      	ldr	r3, [pc, #60]	@ (800f04c <prvAddCurrentTaskToDelayedList+0x94>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3304      	adds	r3, #4
 800f014:	4619      	mov	r1, r3
 800f016:	4610      	mov	r0, r2
 800f018:	f7fe fabb 	bl	800d592 <vListInsert>
}
 800f01c:	e010      	b.n	800f040 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f01e:	4b0e      	ldr	r3, [pc, #56]	@ (800f058 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	4b0a      	ldr	r3, [pc, #40]	@ (800f04c <prvAddCurrentTaskToDelayedList+0x94>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3304      	adds	r3, #4
 800f028:	4619      	mov	r1, r3
 800f02a:	4610      	mov	r0, r2
 800f02c:	f7fe fab1 	bl	800d592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f030:	4b0a      	ldr	r3, [pc, #40]	@ (800f05c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	429a      	cmp	r2, r3
 800f038:	d202      	bcs.n	800f040 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f03a:	4a08      	ldr	r2, [pc, #32]	@ (800f05c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	6013      	str	r3, [r2, #0]
}
 800f040:	bf00      	nop
 800f042:	3710      	adds	r7, #16
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	2000134c 	.word	0x2000134c
 800f04c:	20000e74 	.word	0x20000e74
 800f050:	20001334 	.word	0x20001334
 800f054:	20001304 	.word	0x20001304
 800f058:	20001300 	.word	0x20001300
 800f05c:	20001368 	.word	0x20001368

0800f060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08a      	sub	sp, #40	@ 0x28
 800f064:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f066:	2300      	movs	r3, #0
 800f068:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f06a:	f000 fb13 	bl	800f694 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f06e:	4b1d      	ldr	r3, [pc, #116]	@ (800f0e4 <xTimerCreateTimerTask+0x84>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d021      	beq.n	800f0ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f076:	2300      	movs	r3, #0
 800f078:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f07e:	1d3a      	adds	r2, r7, #4
 800f080:	f107 0108 	add.w	r1, r7, #8
 800f084:	f107 030c 	add.w	r3, r7, #12
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fe fa17 	bl	800d4bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	9202      	str	r2, [sp, #8]
 800f096:	9301      	str	r3, [sp, #4]
 800f098:	2302      	movs	r3, #2
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	2300      	movs	r3, #0
 800f09e:	460a      	mov	r2, r1
 800f0a0:	4911      	ldr	r1, [pc, #68]	@ (800f0e8 <xTimerCreateTimerTask+0x88>)
 800f0a2:	4812      	ldr	r0, [pc, #72]	@ (800f0ec <xTimerCreateTimerTask+0x8c>)
 800f0a4:	f7ff f890 	bl	800e1c8 <xTaskCreateStatic>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	4a11      	ldr	r2, [pc, #68]	@ (800f0f0 <xTimerCreateTimerTask+0x90>)
 800f0ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0ae:	4b10      	ldr	r3, [pc, #64]	@ (800f0f0 <xTimerCreateTimerTask+0x90>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10b      	bne.n	800f0d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	613b      	str	r3, [r7, #16]
}
 800f0d2:	bf00      	nop
 800f0d4:	bf00      	nop
 800f0d6:	e7fd      	b.n	800f0d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0d8:	697b      	ldr	r3, [r7, #20]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	200013a4 	.word	0x200013a4
 800f0e8:	08010ca4 	.word	0x08010ca4
 800f0ec:	0800f22d 	.word	0x0800f22d
 800f0f0:	200013a8 	.word	0x200013a8

0800f0f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	@ 0x28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f102:	2300      	movs	r3, #0
 800f104:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10b      	bne.n	800f124 <xTimerGenericCommand+0x30>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	623b      	str	r3, [r7, #32]
}
 800f11e:	bf00      	nop
 800f120:	bf00      	nop
 800f122:	e7fd      	b.n	800f120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f124:	4b19      	ldr	r3, [pc, #100]	@ (800f18c <xTimerGenericCommand+0x98>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d02a      	beq.n	800f182 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b05      	cmp	r3, #5
 800f13c:	dc18      	bgt.n	800f170 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f13e:	f7ff fead 	bl	800ee9c <xTaskGetSchedulerState>
 800f142:	4603      	mov	r3, r0
 800f144:	2b02      	cmp	r3, #2
 800f146:	d109      	bne.n	800f15c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f148:	4b10      	ldr	r3, [pc, #64]	@ (800f18c <xTimerGenericCommand+0x98>)
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	f107 0110 	add.w	r1, r7, #16
 800f150:	2300      	movs	r3, #0
 800f152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f154:	f7fe fbc6 	bl	800d8e4 <xQueueGenericSend>
 800f158:	6278      	str	r0, [r7, #36]	@ 0x24
 800f15a:	e012      	b.n	800f182 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f15c:	4b0b      	ldr	r3, [pc, #44]	@ (800f18c <xTimerGenericCommand+0x98>)
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	f107 0110 	add.w	r1, r7, #16
 800f164:	2300      	movs	r3, #0
 800f166:	2200      	movs	r2, #0
 800f168:	f7fe fbbc 	bl	800d8e4 <xQueueGenericSend>
 800f16c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f16e:	e008      	b.n	800f182 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f170:	4b06      	ldr	r3, [pc, #24]	@ (800f18c <xTimerGenericCommand+0x98>)
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	f107 0110 	add.w	r1, r7, #16
 800f178:	2300      	movs	r3, #0
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	f7fe fcb4 	bl	800dae8 <xQueueGenericSendFromISR>
 800f180:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f184:	4618      	mov	r0, r3
 800f186:	3728      	adds	r7, #40	@ 0x28
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	200013a4 	.word	0x200013a4

0800f190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af02      	add	r7, sp, #8
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f19a:	4b23      	ldr	r3, [pc, #140]	@ (800f228 <prvProcessExpiredTimer+0x98>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fe fa2b 	bl	800d604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1b4:	f003 0304 	and.w	r3, r3, #4
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d023      	beq.n	800f204 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	699a      	ldr	r2, [r3, #24]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	18d1      	adds	r1, r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	6978      	ldr	r0, [r7, #20]
 800f1ca:	f000 f8d5 	bl	800f378 <prvInsertTimerInActiveList>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d020      	beq.n	800f216 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	2300      	movs	r3, #0
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	2100      	movs	r1, #0
 800f1de:	6978      	ldr	r0, [r7, #20]
 800f1e0:	f7ff ff88 	bl	800f0f4 <xTimerGenericCommand>
 800f1e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d114      	bne.n	800f216 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	60fb      	str	r3, [r7, #12]
}
 800f1fe:	bf00      	nop
 800f200:	bf00      	nop
 800f202:	e7fd      	b.n	800f200 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f20a:	f023 0301 	bic.w	r3, r3, #1
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	6978      	ldr	r0, [r7, #20]
 800f21c:	4798      	blx	r3
}
 800f21e:	bf00      	nop
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	2000139c 	.word	0x2000139c

0800f22c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f234:	f107 0308 	add.w	r3, r7, #8
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f859 	bl	800f2f0 <prvGetNextExpireTime>
 800f23e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	4619      	mov	r1, r3
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f805 	bl	800f254 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f24a:	f000 f8d7 	bl	800f3fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f24e:	bf00      	nop
 800f250:	e7f0      	b.n	800f234 <prvTimerTask+0x8>
	...

0800f254 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f25e:	f7ff fa17 	bl	800e690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f262:	f107 0308 	add.w	r3, r7, #8
 800f266:	4618      	mov	r0, r3
 800f268:	f000 f866 	bl	800f338 <prvSampleTimeNow>
 800f26c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d130      	bne.n	800f2d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10a      	bne.n	800f290 <prvProcessTimerOrBlockTask+0x3c>
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d806      	bhi.n	800f290 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f282:	f7ff fa13 	bl	800e6ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f286:	68f9      	ldr	r1, [r7, #12]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7ff ff81 	bl	800f190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f28e:	e024      	b.n	800f2da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f296:	4b13      	ldr	r3, [pc, #76]	@ (800f2e4 <prvProcessTimerOrBlockTask+0x90>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d101      	bne.n	800f2a4 <prvProcessTimerOrBlockTask+0x50>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e000      	b.n	800f2a6 <prvProcessTimerOrBlockTask+0x52>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2a8:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e8 <prvProcessTimerOrBlockTask+0x94>)
 800f2aa:	6818      	ldr	r0, [r3, #0]
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	f7fe ff53 	bl	800e160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2ba:	f7ff f9f7 	bl	800e6ac <xTaskResumeAll>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10a      	bne.n	800f2da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2c4:	4b09      	ldr	r3, [pc, #36]	@ (800f2ec <prvProcessTimerOrBlockTask+0x98>)
 800f2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	f3bf 8f6f 	isb	sy
}
 800f2d4:	e001      	b.n	800f2da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2d6:	f7ff f9e9 	bl	800e6ac <xTaskResumeAll>
}
 800f2da:	bf00      	nop
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	200013a0 	.word	0x200013a0
 800f2e8:	200013a4 	.word	0x200013a4
 800f2ec:	e000ed04 	.word	0xe000ed04

0800f2f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f334 <prvGetNextExpireTime+0x44>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d101      	bne.n	800f306 <prvGetNextExpireTime+0x16>
 800f302:	2201      	movs	r2, #1
 800f304:	e000      	b.n	800f308 <prvGetNextExpireTime+0x18>
 800f306:	2200      	movs	r2, #0
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d105      	bne.n	800f320 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f314:	4b07      	ldr	r3, [pc, #28]	@ (800f334 <prvGetNextExpireTime+0x44>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60fb      	str	r3, [r7, #12]
 800f31e:	e001      	b.n	800f324 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f320:	2300      	movs	r3, #0
 800f322:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f324:	68fb      	ldr	r3, [r7, #12]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	2000139c 	.word	0x2000139c

0800f338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f340:	f7ff fa52 	bl	800e7e8 <xTaskGetTickCount>
 800f344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f346:	4b0b      	ldr	r3, [pc, #44]	@ (800f374 <prvSampleTimeNow+0x3c>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d205      	bcs.n	800f35c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f350:	f000 f93a 	bl	800f5c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	601a      	str	r2, [r3, #0]
 800f35a:	e002      	b.n	800f362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f362:	4a04      	ldr	r2, [pc, #16]	@ (800f374 <prvSampleTimeNow+0x3c>)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f368:	68fb      	ldr	r3, [r7, #12]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	200013ac 	.word	0x200013ac

0800f378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f386:	2300      	movs	r3, #0
 800f388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d812      	bhi.n	800f3c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	1ad2      	subs	r2, r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d302      	bcc.n	800f3b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	617b      	str	r3, [r7, #20]
 800f3b0:	e01b      	b.n	800f3ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <prvInsertTimerInActiveList+0x7c>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f7fe f8e8 	bl	800d592 <vListInsert>
 800f3c2:	e012      	b.n	800f3ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d206      	bcs.n	800f3da <prvInsertTimerInActiveList+0x62>
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d302      	bcc.n	800f3da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	e007      	b.n	800f3ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3da:	4b07      	ldr	r3, [pc, #28]	@ (800f3f8 <prvInsertTimerInActiveList+0x80>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f7fe f8d4 	bl	800d592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3ea:	697b      	ldr	r3, [r7, #20]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	200013a0 	.word	0x200013a0
 800f3f8:	2000139c 	.word	0x2000139c

0800f3fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08e      	sub	sp, #56	@ 0x38
 800f400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f402:	e0ce      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	da19      	bge.n	800f43e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f40a:	1d3b      	adds	r3, r7, #4
 800f40c:	3304      	adds	r3, #4
 800f40e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f412:	2b00      	cmp	r3, #0
 800f414:	d10b      	bne.n	800f42e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	61fb      	str	r3, [r7, #28]
}
 800f428:	bf00      	nop
 800f42a:	bf00      	nop
 800f42c:	e7fd      	b.n	800f42a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f434:	6850      	ldr	r0, [r2, #4]
 800f436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f438:	6892      	ldr	r2, [r2, #8]
 800f43a:	4611      	mov	r1, r2
 800f43c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	f2c0 80ae 	blt.w	800f5a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d004      	beq.n	800f45c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f454:	3304      	adds	r3, #4
 800f456:	4618      	mov	r0, r3
 800f458:	f7fe f8d4 	bl	800d604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f45c:	463b      	mov	r3, r7
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff ff6a 	bl	800f338 <prvSampleTimeNow>
 800f464:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b09      	cmp	r3, #9
 800f46a:	f200 8097 	bhi.w	800f59c <prvProcessReceivedCommands+0x1a0>
 800f46e:	a201      	add	r2, pc, #4	@ (adr r2, 800f474 <prvProcessReceivedCommands+0x78>)
 800f470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f49d 	.word	0x0800f49d
 800f47c:	0800f49d 	.word	0x0800f49d
 800f480:	0800f513 	.word	0x0800f513
 800f484:	0800f527 	.word	0x0800f527
 800f488:	0800f573 	.word	0x0800f573
 800f48c:	0800f49d 	.word	0x0800f49d
 800f490:	0800f49d 	.word	0x0800f49d
 800f494:	0800f513 	.word	0x0800f513
 800f498:	0800f527 	.word	0x0800f527
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4a2:	f043 0301 	orr.w	r3, r3, #1
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	18d1      	adds	r1, r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4bc:	f7ff ff5c 	bl	800f378 <prvInsertTimerInActiveList>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d06c      	beq.n	800f5a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4d4:	f003 0304 	and.w	r3, r3, #4
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d061      	beq.n	800f5a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	441a      	add	r2, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4ee:	f7ff fe01 	bl	800f0f4 <xTimerGenericCommand>
 800f4f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d152      	bne.n	800f5a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	61bb      	str	r3, [r7, #24]
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	e7fd      	b.n	800f50e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f518:	f023 0301 	bic.w	r3, r3, #1
 800f51c:	b2da      	uxtb	r2, r3
 800f51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f524:	e03d      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f52c:	f043 0301 	orr.w	r3, r3, #1
 800f530:	b2da      	uxtb	r2, r3
 800f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f53c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d10b      	bne.n	800f55e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f54a:	f383 8811 	msr	BASEPRI, r3
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	617b      	str	r3, [r7, #20]
}
 800f558:	bf00      	nop
 800f55a:	bf00      	nop
 800f55c:	e7fd      	b.n	800f55a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f560:	699a      	ldr	r2, [r3, #24]
 800f562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f564:	18d1      	adds	r1, r2, r3
 800f566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f56a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f56c:	f7ff ff04 	bl	800f378 <prvInsertTimerInActiveList>
					break;
 800f570:	e017      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f582:	f000 fb5f 	bl	800fc44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f586:	e00c      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f58e:	f023 0301 	bic.w	r3, r3, #1
 800f592:	b2da      	uxtb	r2, r3
 800f594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f59a:	e002      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f59c:	bf00      	nop
 800f59e:	e000      	b.n	800f5a2 <prvProcessReceivedCommands+0x1a6>
					break;
 800f5a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5a2:	4b08      	ldr	r3, [pc, #32]	@ (800f5c4 <prvProcessReceivedCommands+0x1c8>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	1d39      	adds	r1, r7, #4
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fe fb3a 	bl	800dc24 <xQueueReceive>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f47f af26 	bne.w	800f404 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f5b8:	bf00      	nop
 800f5ba:	bf00      	nop
 800f5bc:	3730      	adds	r7, #48	@ 0x30
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	200013a4 	.word	0x200013a4

0800f5c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5ce:	e049      	b.n	800f664 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5d0:	4b2e      	ldr	r3, [pc, #184]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5da:	4b2c      	ldr	r3, [pc, #176]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe f80b 	bl	800d604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5fc:	f003 0304 	and.w	r3, r3, #4
 800f600:	2b00      	cmp	r3, #0
 800f602:	d02f      	beq.n	800f664 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	693a      	ldr	r2, [r7, #16]
 800f60a:	4413      	add	r3, r2
 800f60c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	429a      	cmp	r2, r3
 800f614:	d90e      	bls.n	800f634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68fa      	ldr	r2, [r7, #12]
 800f620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f622:	4b1a      	ldr	r3, [pc, #104]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	3304      	adds	r3, #4
 800f62a:	4619      	mov	r1, r3
 800f62c:	4610      	mov	r0, r2
 800f62e:	f7fd ffb0 	bl	800d592 <vListInsert>
 800f632:	e017      	b.n	800f664 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f634:	2300      	movs	r3, #0
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	2300      	movs	r3, #0
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	2100      	movs	r1, #0
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f7ff fd58 	bl	800f0f4 <xTimerGenericCommand>
 800f644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10b      	bne.n	800f664 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	603b      	str	r3, [r7, #0]
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	e7fd      	b.n	800f660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f664:	4b09      	ldr	r3, [pc, #36]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1b0      	bne.n	800f5d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f66e:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f674:	4b06      	ldr	r3, [pc, #24]	@ (800f690 <prvSwitchTimerLists+0xc8>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a04      	ldr	r2, [pc, #16]	@ (800f68c <prvSwitchTimerLists+0xc4>)
 800f67a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f67c:	4a04      	ldr	r2, [pc, #16]	@ (800f690 <prvSwitchTimerLists+0xc8>)
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	6013      	str	r3, [r2, #0]
}
 800f682:	bf00      	nop
 800f684:	3718      	adds	r7, #24
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	2000139c 	.word	0x2000139c
 800f690:	200013a0 	.word	0x200013a0

0800f694 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f69a:	f000 f96d 	bl	800f978 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f69e:	4b15      	ldr	r3, [pc, #84]	@ (800f6f4 <prvCheckForValidListAndQueue+0x60>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d120      	bne.n	800f6e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6a6:	4814      	ldr	r0, [pc, #80]	@ (800f6f8 <prvCheckForValidListAndQueue+0x64>)
 800f6a8:	f7fd ff22 	bl	800d4f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6ac:	4813      	ldr	r0, [pc, #76]	@ (800f6fc <prvCheckForValidListAndQueue+0x68>)
 800f6ae:	f7fd ff1f 	bl	800d4f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6b2:	4b13      	ldr	r3, [pc, #76]	@ (800f700 <prvCheckForValidListAndQueue+0x6c>)
 800f6b4:	4a10      	ldr	r2, [pc, #64]	@ (800f6f8 <prvCheckForValidListAndQueue+0x64>)
 800f6b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6b8:	4b12      	ldr	r3, [pc, #72]	@ (800f704 <prvCheckForValidListAndQueue+0x70>)
 800f6ba:	4a10      	ldr	r2, [pc, #64]	@ (800f6fc <prvCheckForValidListAndQueue+0x68>)
 800f6bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6be:	2300      	movs	r3, #0
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	4b11      	ldr	r3, [pc, #68]	@ (800f708 <prvCheckForValidListAndQueue+0x74>)
 800f6c4:	4a11      	ldr	r2, [pc, #68]	@ (800f70c <prvCheckForValidListAndQueue+0x78>)
 800f6c6:	2110      	movs	r1, #16
 800f6c8:	200a      	movs	r0, #10
 800f6ca:	f7fe f82f 	bl	800d72c <xQueueGenericCreateStatic>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	4a08      	ldr	r2, [pc, #32]	@ (800f6f4 <prvCheckForValidListAndQueue+0x60>)
 800f6d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6d4:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <prvCheckForValidListAndQueue+0x60>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d005      	beq.n	800f6e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6dc:	4b05      	ldr	r3, [pc, #20]	@ (800f6f4 <prvCheckForValidListAndQueue+0x60>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	490b      	ldr	r1, [pc, #44]	@ (800f710 <prvCheckForValidListAndQueue+0x7c>)
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fd12 	bl	800e10c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6e8:	f000 f978 	bl	800f9dc <vPortExitCritical>
}
 800f6ec:	bf00      	nop
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	200013a4 	.word	0x200013a4
 800f6f8:	20001374 	.word	0x20001374
 800f6fc:	20001388 	.word	0x20001388
 800f700:	2000139c 	.word	0x2000139c
 800f704:	200013a0 	.word	0x200013a0
 800f708:	20001450 	.word	0x20001450
 800f70c:	200013b0 	.word	0x200013b0
 800f710:	08010cac 	.word	0x08010cac

0800f714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	3b04      	subs	r3, #4
 800f724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3b04      	subs	r3, #4
 800f732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	f023 0201 	bic.w	r2, r3, #1
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3b04      	subs	r3, #4
 800f742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f744:	4a0c      	ldr	r2, [pc, #48]	@ (800f778 <pxPortInitialiseStack+0x64>)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3b14      	subs	r3, #20
 800f74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3b04      	subs	r3, #4
 800f75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f06f 0202 	mvn.w	r2, #2
 800f762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3b20      	subs	r3, #32
 800f768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f76a:	68fb      	ldr	r3, [r7, #12]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	0800f77d 	.word	0x0800f77d

0800f77c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f782:	2300      	movs	r3, #0
 800f784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f786:	4b13      	ldr	r3, [pc, #76]	@ (800f7d4 <prvTaskExitError+0x58>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	d00b      	beq.n	800f7a8 <prvTaskExitError+0x2c>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	60fb      	str	r3, [r7, #12]
}
 800f7a2:	bf00      	nop
 800f7a4:	bf00      	nop
 800f7a6:	e7fd      	b.n	800f7a4 <prvTaskExitError+0x28>
	__asm volatile
 800f7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ac:	f383 8811 	msr	BASEPRI, r3
 800f7b0:	f3bf 8f6f 	isb	sy
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	60bb      	str	r3, [r7, #8]
}
 800f7ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7bc:	bf00      	nop
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d0fc      	beq.n	800f7be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	20000010 	.word	0x20000010
	...

0800f7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7e0:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <pxCurrentTCBConst2>)
 800f7e2:	6819      	ldr	r1, [r3, #0]
 800f7e4:	6808      	ldr	r0, [r1, #0]
 800f7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ea:	f380 8809 	msr	PSP, r0
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f04f 0000 	mov.w	r0, #0
 800f7f6:	f380 8811 	msr	BASEPRI, r0
 800f7fa:	4770      	bx	lr
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst2>:
 800f800:	20000e74 	.word	0x20000e74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f808:	4808      	ldr	r0, [pc, #32]	@ (800f82c <prvPortStartFirstTask+0x24>)
 800f80a:	6800      	ldr	r0, [r0, #0]
 800f80c:	6800      	ldr	r0, [r0, #0]
 800f80e:	f380 8808 	msr	MSP, r0
 800f812:	f04f 0000 	mov.w	r0, #0
 800f816:	f380 8814 	msr	CONTROL, r0
 800f81a:	b662      	cpsie	i
 800f81c:	b661      	cpsie	f
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	df00      	svc	0
 800f828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f82a:	bf00      	nop
 800f82c:	e000ed08 	.word	0xe000ed08

0800f830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f836:	4b47      	ldr	r3, [pc, #284]	@ (800f954 <xPortStartScheduler+0x124>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a47      	ldr	r2, [pc, #284]	@ (800f958 <xPortStartScheduler+0x128>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d10b      	bne.n	800f858 <xPortStartScheduler+0x28>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	613b      	str	r3, [r7, #16]
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	e7fd      	b.n	800f854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f858:	4b3e      	ldr	r3, [pc, #248]	@ (800f954 <xPortStartScheduler+0x124>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a3f      	ldr	r2, [pc, #252]	@ (800f95c <xPortStartScheduler+0x12c>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d10b      	bne.n	800f87a <xPortStartScheduler+0x4a>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	60fb      	str	r3, [r7, #12]
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop
 800f878:	e7fd      	b.n	800f876 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f87a:	4b39      	ldr	r3, [pc, #228]	@ (800f960 <xPortStartScheduler+0x130>)
 800f87c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	b2db      	uxtb	r3, r3
 800f884:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	22ff      	movs	r2, #255	@ 0xff
 800f88a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	b2db      	uxtb	r3, r3
 800f892:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f894:	78fb      	ldrb	r3, [r7, #3]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	4b31      	ldr	r3, [pc, #196]	@ (800f964 <xPortStartScheduler+0x134>)
 800f8a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8a2:	4b31      	ldr	r3, [pc, #196]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8a4:	2207      	movs	r2, #7
 800f8a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8a8:	e009      	b.n	800f8be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f8aa:	4b2f      	ldr	r3, [pc, #188]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8b4:	78fb      	ldrb	r3, [r7, #3]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	005b      	lsls	r3, r3, #1
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8be:	78fb      	ldrb	r3, [r7, #3]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8c6:	2b80      	cmp	r3, #128	@ 0x80
 800f8c8:	d0ef      	beq.n	800f8aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8ca:	4b27      	ldr	r3, [pc, #156]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f1c3 0307 	rsb	r3, r3, #7
 800f8d2:	2b04      	cmp	r3, #4
 800f8d4:	d00b      	beq.n	800f8ee <xPortStartScheduler+0xbe>
	__asm volatile
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	60bb      	str	r3, [r7, #8]
}
 800f8e8:	bf00      	nop
 800f8ea:	bf00      	nop
 800f8ec:	e7fd      	b.n	800f8ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	021b      	lsls	r3, r3, #8
 800f8f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800f968 <xPortStartScheduler+0x138>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f900:	4a19      	ldr	r2, [pc, #100]	@ (800f968 <xPortStartScheduler+0x138>)
 800f902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	b2da      	uxtb	r2, r3
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f90c:	4b17      	ldr	r3, [pc, #92]	@ (800f96c <xPortStartScheduler+0x13c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a16      	ldr	r2, [pc, #88]	@ (800f96c <xPortStartScheduler+0x13c>)
 800f912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f918:	4b14      	ldr	r3, [pc, #80]	@ (800f96c <xPortStartScheduler+0x13c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a13      	ldr	r2, [pc, #76]	@ (800f96c <xPortStartScheduler+0x13c>)
 800f91e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f924:	f000 f8da 	bl	800fadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f928:	4b11      	ldr	r3, [pc, #68]	@ (800f970 <xPortStartScheduler+0x140>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f92e:	f000 f8f9 	bl	800fb24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f932:	4b10      	ldr	r3, [pc, #64]	@ (800f974 <xPortStartScheduler+0x144>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a0f      	ldr	r2, [pc, #60]	@ (800f974 <xPortStartScheduler+0x144>)
 800f938:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f93c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f93e:	f7ff ff63 	bl	800f808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f942:	f7ff f82d 	bl	800e9a0 <vTaskSwitchContext>
	prvTaskExitError();
 800f946:	f7ff ff19 	bl	800f77c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	e000ed00 	.word	0xe000ed00
 800f958:	410fc271 	.word	0x410fc271
 800f95c:	410fc270 	.word	0x410fc270
 800f960:	e000e400 	.word	0xe000e400
 800f964:	200014a0 	.word	0x200014a0
 800f968:	200014a4 	.word	0x200014a4
 800f96c:	e000ed20 	.word	0xe000ed20
 800f970:	20000010 	.word	0x20000010
 800f974:	e000ef34 	.word	0xe000ef34

0800f978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	607b      	str	r3, [r7, #4]
}
 800f990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f992:	4b10      	ldr	r3, [pc, #64]	@ (800f9d4 <vPortEnterCritical+0x5c>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3301      	adds	r3, #1
 800f998:	4a0e      	ldr	r2, [pc, #56]	@ (800f9d4 <vPortEnterCritical+0x5c>)
 800f99a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f99c:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d4 <vPortEnterCritical+0x5c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d110      	bne.n	800f9c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d8 <vPortEnterCritical+0x60>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00b      	beq.n	800f9c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	603b      	str	r3, [r7, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	bf00      	nop
 800f9c4:	e7fd      	b.n	800f9c2 <vPortEnterCritical+0x4a>
	}
}
 800f9c6:	bf00      	nop
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20000010 	.word	0x20000010
 800f9d8:	e000ed04 	.word	0xe000ed04

0800f9dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9e2:	4b12      	ldr	r3, [pc, #72]	@ (800fa2c <vPortExitCritical+0x50>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d10b      	bne.n	800fa02 <vPortExitCritical+0x26>
	__asm volatile
 800f9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ee:	f383 8811 	msr	BASEPRI, r3
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	607b      	str	r3, [r7, #4]
}
 800f9fc:	bf00      	nop
 800f9fe:	bf00      	nop
 800fa00:	e7fd      	b.n	800f9fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa02:	4b0a      	ldr	r3, [pc, #40]	@ (800fa2c <vPortExitCritical+0x50>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	4a08      	ldr	r2, [pc, #32]	@ (800fa2c <vPortExitCritical+0x50>)
 800fa0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa0c:	4b07      	ldr	r3, [pc, #28]	@ (800fa2c <vPortExitCritical+0x50>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d105      	bne.n	800fa20 <vPortExitCritical+0x44>
 800fa14:	2300      	movs	r3, #0
 800fa16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	f383 8811 	msr	BASEPRI, r3
}
 800fa1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa20:	bf00      	nop
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	20000010 	.word	0x20000010

0800fa30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa30:	f3ef 8009 	mrs	r0, PSP
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	4b15      	ldr	r3, [pc, #84]	@ (800fa90 <pxCurrentTCBConst>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	f01e 0f10 	tst.w	lr, #16
 800fa40:	bf08      	it	eq
 800fa42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4a:	6010      	str	r0, [r2, #0]
 800fa4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa54:	f380 8811 	msr	BASEPRI, r0
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	f7fe ff9e 	bl	800e9a0 <vTaskSwitchContext>
 800fa64:	f04f 0000 	mov.w	r0, #0
 800fa68:	f380 8811 	msr	BASEPRI, r0
 800fa6c:	bc09      	pop	{r0, r3}
 800fa6e:	6819      	ldr	r1, [r3, #0]
 800fa70:	6808      	ldr	r0, [r1, #0]
 800fa72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa76:	f01e 0f10 	tst.w	lr, #16
 800fa7a:	bf08      	it	eq
 800fa7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa80:	f380 8809 	msr	PSP, r0
 800fa84:	f3bf 8f6f 	isb	sy
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	f3af 8000 	nop.w

0800fa90 <pxCurrentTCBConst>:
 800fa90:	20000e74 	.word	0x20000e74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop

0800fa98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	607b      	str	r3, [r7, #4]
}
 800fab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fab2:	f7fe febb 	bl	800e82c <xTaskIncrementTick>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fabc:	4b06      	ldr	r3, [pc, #24]	@ (800fad8 <xPortSysTickHandler+0x40>)
 800fabe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	2300      	movs	r3, #0
 800fac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f383 8811 	msr	BASEPRI, r3
}
 800face:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fae0:	4b0b      	ldr	r3, [pc, #44]	@ (800fb10 <vPortSetupTimerInterrupt+0x34>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fae6:	4b0b      	ldr	r3, [pc, #44]	@ (800fb14 <vPortSetupTimerInterrupt+0x38>)
 800fae8:	2200      	movs	r2, #0
 800faea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800faec:	4b0a      	ldr	r3, [pc, #40]	@ (800fb18 <vPortSetupTimerInterrupt+0x3c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a0a      	ldr	r2, [pc, #40]	@ (800fb1c <vPortSetupTimerInterrupt+0x40>)
 800faf2:	fba2 2303 	umull	r2, r3, r2, r3
 800faf6:	099b      	lsrs	r3, r3, #6
 800faf8:	4a09      	ldr	r2, [pc, #36]	@ (800fb20 <vPortSetupTimerInterrupt+0x44>)
 800fafa:	3b01      	subs	r3, #1
 800fafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fafe:	4b04      	ldr	r3, [pc, #16]	@ (800fb10 <vPortSetupTimerInterrupt+0x34>)
 800fb00:	2207      	movs	r2, #7
 800fb02:	601a      	str	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	e000e010 	.word	0xe000e010
 800fb14:	e000e018 	.word	0xe000e018
 800fb18:	20000000 	.word	0x20000000
 800fb1c:	10624dd3 	.word	0x10624dd3
 800fb20:	e000e014 	.word	0xe000e014

0800fb24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb34 <vPortEnableVFP+0x10>
 800fb28:	6801      	ldr	r1, [r0, #0]
 800fb2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb2e:	6001      	str	r1, [r0, #0]
 800fb30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb32:	bf00      	nop
 800fb34:	e000ed88 	.word	0xe000ed88

0800fb38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb3e:	f3ef 8305 	mrs	r3, IPSR
 800fb42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b0f      	cmp	r3, #15
 800fb48:	d915      	bls.n	800fb76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb4a:	4a18      	ldr	r2, [pc, #96]	@ (800fbac <vPortValidateInterruptPriority+0x74>)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	4413      	add	r3, r2
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb54:	4b16      	ldr	r3, [pc, #88]	@ (800fbb0 <vPortValidateInterruptPriority+0x78>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	7afa      	ldrb	r2, [r7, #11]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d20b      	bcs.n	800fb76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	607b      	str	r3, [r7, #4]
}
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
 800fb74:	e7fd      	b.n	800fb72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb76:	4b0f      	ldr	r3, [pc, #60]	@ (800fbb4 <vPortValidateInterruptPriority+0x7c>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800fbb8 <vPortValidateInterruptPriority+0x80>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d90b      	bls.n	800fb9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	603b      	str	r3, [r7, #0]
}
 800fb98:	bf00      	nop
 800fb9a:	bf00      	nop
 800fb9c:	e7fd      	b.n	800fb9a <vPortValidateInterruptPriority+0x62>
	}
 800fb9e:	bf00      	nop
 800fba0:	3714      	adds	r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr
 800fbaa:	bf00      	nop
 800fbac:	e000e3f0 	.word	0xe000e3f0
 800fbb0:	200014a0 	.word	0x200014a0
 800fbb4:	e000ed0c 	.word	0xe000ed0c
 800fbb8:	200014a4 	.word	0x200014a4

0800fbbc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f003 0307 	and.w	r3, r3, #7
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d004      	beq.n	800fbdc <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f023 0307 	bic.w	r3, r3, #7
 800fbd8:	3308      	adds	r3, #8
 800fbda:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800fbdc:	f7fe fd58 	bl	800e690 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800fbe0:	4b15      	ldr	r3, [pc, #84]	@ (800fc38 <pvPortMalloc+0x7c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d105      	bne.n	800fbf4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800fbe8:	4b14      	ldr	r3, [pc, #80]	@ (800fc3c <pvPortMalloc+0x80>)
 800fbea:	f023 0307 	bic.w	r3, r3, #7
 800fbee:	461a      	mov	r2, r3
 800fbf0:	4b11      	ldr	r3, [pc, #68]	@ (800fc38 <pvPortMalloc+0x7c>)
 800fbf2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800fbf4:	4b12      	ldr	r3, [pc, #72]	@ (800fc40 <pvPortMalloc+0x84>)
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	f5b3 6f3b 	cmp.w	r3, #2992	@ 0xbb0
 800fc00:	d213      	bcs.n	800fc2a <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800fc02:	4b0f      	ldr	r3, [pc, #60]	@ (800fc40 <pvPortMalloc+0x84>)
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	441a      	add	r2, r3
 800fc0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc40 <pvPortMalloc+0x84>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d90b      	bls.n	800fc2a <pvPortMalloc+0x6e>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800fc12:	4b09      	ldr	r3, [pc, #36]	@ (800fc38 <pvPortMalloc+0x7c>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	4b0a      	ldr	r3, [pc, #40]	@ (800fc40 <pvPortMalloc+0x84>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800fc1e:	4b08      	ldr	r3, [pc, #32]	@ (800fc40 <pvPortMalloc+0x84>)
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	4a06      	ldr	r2, [pc, #24]	@ (800fc40 <pvPortMalloc+0x84>)
 800fc28:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc2a:	f7fe fd3f 	bl	800e6ac <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	20002064 	.word	0x20002064
 800fc3c:	200014b0 	.word	0x200014b0
 800fc40:	20002060 	.word	0x20002060

0800fc44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00b      	beq.n	800fc6a <vPortFree+0x26>
	__asm volatile
 800fc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc56:	f383 8811 	msr	BASEPRI, r3
 800fc5a:	f3bf 8f6f 	isb	sy
 800fc5e:	f3bf 8f4f 	dsb	sy
 800fc62:	60fb      	str	r3, [r7, #12]
}
 800fc64:	bf00      	nop
 800fc66:	bf00      	nop
 800fc68:	e7fd      	b.n	800fc66 <vPortFree+0x22>
}
 800fc6a:	bf00      	nop
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
	...

0800fc78 <std>:
 800fc78:	2300      	movs	r3, #0
 800fc7a:	b510      	push	{r4, lr}
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800fc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc86:	6083      	str	r3, [r0, #8]
 800fc88:	8181      	strh	r1, [r0, #12]
 800fc8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc8c:	81c2      	strh	r2, [r0, #14]
 800fc8e:	6183      	str	r3, [r0, #24]
 800fc90:	4619      	mov	r1, r3
 800fc92:	2208      	movs	r2, #8
 800fc94:	305c      	adds	r0, #92	@ 0x5c
 800fc96:	f000 f9f9 	bl	801008c <memset>
 800fc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd0 <std+0x58>)
 800fc9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd4 <std+0x5c>)
 800fca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fca2:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd8 <std+0x60>)
 800fca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fca6:	4b0d      	ldr	r3, [pc, #52]	@ (800fcdc <std+0x64>)
 800fca8:	6323      	str	r3, [r4, #48]	@ 0x30
 800fcaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fce0 <std+0x68>)
 800fcac:	6224      	str	r4, [r4, #32]
 800fcae:	429c      	cmp	r4, r3
 800fcb0:	d006      	beq.n	800fcc0 <std+0x48>
 800fcb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fcb6:	4294      	cmp	r4, r2
 800fcb8:	d002      	beq.n	800fcc0 <std+0x48>
 800fcba:	33d0      	adds	r3, #208	@ 0xd0
 800fcbc:	429c      	cmp	r4, r3
 800fcbe:	d105      	bne.n	800fccc <std+0x54>
 800fcc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcc8:	f000 baae 	b.w	8010228 <__retarget_lock_init_recursive>
 800fccc:	bd10      	pop	{r4, pc}
 800fcce:	bf00      	nop
 800fcd0:	0800fedd 	.word	0x0800fedd
 800fcd4:	0800feff 	.word	0x0800feff
 800fcd8:	0800ff37 	.word	0x0800ff37
 800fcdc:	0800ff5b 	.word	0x0800ff5b
 800fce0:	20002068 	.word	0x20002068

0800fce4 <stdio_exit_handler>:
 800fce4:	4a02      	ldr	r2, [pc, #8]	@ (800fcf0 <stdio_exit_handler+0xc>)
 800fce6:	4903      	ldr	r1, [pc, #12]	@ (800fcf4 <stdio_exit_handler+0x10>)
 800fce8:	4803      	ldr	r0, [pc, #12]	@ (800fcf8 <stdio_exit_handler+0x14>)
 800fcea:	f000 b869 	b.w	800fdc0 <_fwalk_sglue>
 800fcee:	bf00      	nop
 800fcf0:	20000014 	.word	0x20000014
 800fcf4:	08010ae5 	.word	0x08010ae5
 800fcf8:	20000024 	.word	0x20000024

0800fcfc <cleanup_stdio>:
 800fcfc:	6841      	ldr	r1, [r0, #4]
 800fcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fd30 <cleanup_stdio+0x34>)
 800fd00:	4299      	cmp	r1, r3
 800fd02:	b510      	push	{r4, lr}
 800fd04:	4604      	mov	r4, r0
 800fd06:	d001      	beq.n	800fd0c <cleanup_stdio+0x10>
 800fd08:	f000 feec 	bl	8010ae4 <_fflush_r>
 800fd0c:	68a1      	ldr	r1, [r4, #8]
 800fd0e:	4b09      	ldr	r3, [pc, #36]	@ (800fd34 <cleanup_stdio+0x38>)
 800fd10:	4299      	cmp	r1, r3
 800fd12:	d002      	beq.n	800fd1a <cleanup_stdio+0x1e>
 800fd14:	4620      	mov	r0, r4
 800fd16:	f000 fee5 	bl	8010ae4 <_fflush_r>
 800fd1a:	68e1      	ldr	r1, [r4, #12]
 800fd1c:	4b06      	ldr	r3, [pc, #24]	@ (800fd38 <cleanup_stdio+0x3c>)
 800fd1e:	4299      	cmp	r1, r3
 800fd20:	d004      	beq.n	800fd2c <cleanup_stdio+0x30>
 800fd22:	4620      	mov	r0, r4
 800fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd28:	f000 bedc 	b.w	8010ae4 <_fflush_r>
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	bf00      	nop
 800fd30:	20002068 	.word	0x20002068
 800fd34:	200020d0 	.word	0x200020d0
 800fd38:	20002138 	.word	0x20002138

0800fd3c <global_stdio_init.part.0>:
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fd6c <global_stdio_init.part.0+0x30>)
 800fd40:	4c0b      	ldr	r4, [pc, #44]	@ (800fd70 <global_stdio_init.part.0+0x34>)
 800fd42:	4a0c      	ldr	r2, [pc, #48]	@ (800fd74 <global_stdio_init.part.0+0x38>)
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	4620      	mov	r0, r4
 800fd48:	2200      	movs	r2, #0
 800fd4a:	2104      	movs	r1, #4
 800fd4c:	f7ff ff94 	bl	800fc78 <std>
 800fd50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fd54:	2201      	movs	r2, #1
 800fd56:	2109      	movs	r1, #9
 800fd58:	f7ff ff8e 	bl	800fc78 <std>
 800fd5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fd60:	2202      	movs	r2, #2
 800fd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd66:	2112      	movs	r1, #18
 800fd68:	f7ff bf86 	b.w	800fc78 <std>
 800fd6c:	200021a0 	.word	0x200021a0
 800fd70:	20002068 	.word	0x20002068
 800fd74:	0800fce5 	.word	0x0800fce5

0800fd78 <__sfp_lock_acquire>:
 800fd78:	4801      	ldr	r0, [pc, #4]	@ (800fd80 <__sfp_lock_acquire+0x8>)
 800fd7a:	f000 ba56 	b.w	801022a <__retarget_lock_acquire_recursive>
 800fd7e:	bf00      	nop
 800fd80:	200021a9 	.word	0x200021a9

0800fd84 <__sfp_lock_release>:
 800fd84:	4801      	ldr	r0, [pc, #4]	@ (800fd8c <__sfp_lock_release+0x8>)
 800fd86:	f000 ba51 	b.w	801022c <__retarget_lock_release_recursive>
 800fd8a:	bf00      	nop
 800fd8c:	200021a9 	.word	0x200021a9

0800fd90 <__sinit>:
 800fd90:	b510      	push	{r4, lr}
 800fd92:	4604      	mov	r4, r0
 800fd94:	f7ff fff0 	bl	800fd78 <__sfp_lock_acquire>
 800fd98:	6a23      	ldr	r3, [r4, #32]
 800fd9a:	b11b      	cbz	r3, 800fda4 <__sinit+0x14>
 800fd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fda0:	f7ff bff0 	b.w	800fd84 <__sfp_lock_release>
 800fda4:	4b04      	ldr	r3, [pc, #16]	@ (800fdb8 <__sinit+0x28>)
 800fda6:	6223      	str	r3, [r4, #32]
 800fda8:	4b04      	ldr	r3, [pc, #16]	@ (800fdbc <__sinit+0x2c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1f5      	bne.n	800fd9c <__sinit+0xc>
 800fdb0:	f7ff ffc4 	bl	800fd3c <global_stdio_init.part.0>
 800fdb4:	e7f2      	b.n	800fd9c <__sinit+0xc>
 800fdb6:	bf00      	nop
 800fdb8:	0800fcfd 	.word	0x0800fcfd
 800fdbc:	200021a0 	.word	0x200021a0

0800fdc0 <_fwalk_sglue>:
 800fdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc4:	4607      	mov	r7, r0
 800fdc6:	4688      	mov	r8, r1
 800fdc8:	4614      	mov	r4, r2
 800fdca:	2600      	movs	r6, #0
 800fdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdd0:	f1b9 0901 	subs.w	r9, r9, #1
 800fdd4:	d505      	bpl.n	800fde2 <_fwalk_sglue+0x22>
 800fdd6:	6824      	ldr	r4, [r4, #0]
 800fdd8:	2c00      	cmp	r4, #0
 800fdda:	d1f7      	bne.n	800fdcc <_fwalk_sglue+0xc>
 800fddc:	4630      	mov	r0, r6
 800fdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fde2:	89ab      	ldrh	r3, [r5, #12]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d907      	bls.n	800fdf8 <_fwalk_sglue+0x38>
 800fde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdec:	3301      	adds	r3, #1
 800fdee:	d003      	beq.n	800fdf8 <_fwalk_sglue+0x38>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	47c0      	blx	r8
 800fdf6:	4306      	orrs	r6, r0
 800fdf8:	3568      	adds	r5, #104	@ 0x68
 800fdfa:	e7e9      	b.n	800fdd0 <_fwalk_sglue+0x10>

0800fdfc <iprintf>:
 800fdfc:	b40f      	push	{r0, r1, r2, r3}
 800fdfe:	b507      	push	{r0, r1, r2, lr}
 800fe00:	4906      	ldr	r1, [pc, #24]	@ (800fe1c <iprintf+0x20>)
 800fe02:	ab04      	add	r3, sp, #16
 800fe04:	6808      	ldr	r0, [r1, #0]
 800fe06:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe0a:	6881      	ldr	r1, [r0, #8]
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	f000 fb3f 	bl	8010490 <_vfiprintf_r>
 800fe12:	b003      	add	sp, #12
 800fe14:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe18:	b004      	add	sp, #16
 800fe1a:	4770      	bx	lr
 800fe1c:	20000020 	.word	0x20000020

0800fe20 <_puts_r>:
 800fe20:	6a03      	ldr	r3, [r0, #32]
 800fe22:	b570      	push	{r4, r5, r6, lr}
 800fe24:	6884      	ldr	r4, [r0, #8]
 800fe26:	4605      	mov	r5, r0
 800fe28:	460e      	mov	r6, r1
 800fe2a:	b90b      	cbnz	r3, 800fe30 <_puts_r+0x10>
 800fe2c:	f7ff ffb0 	bl	800fd90 <__sinit>
 800fe30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe32:	07db      	lsls	r3, r3, #31
 800fe34:	d405      	bmi.n	800fe42 <_puts_r+0x22>
 800fe36:	89a3      	ldrh	r3, [r4, #12]
 800fe38:	0598      	lsls	r0, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_puts_r+0x22>
 800fe3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe3e:	f000 f9f4 	bl	801022a <__retarget_lock_acquire_recursive>
 800fe42:	89a3      	ldrh	r3, [r4, #12]
 800fe44:	0719      	lsls	r1, r3, #28
 800fe46:	d502      	bpl.n	800fe4e <_puts_r+0x2e>
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d135      	bne.n	800feba <_puts_r+0x9a>
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4628      	mov	r0, r5
 800fe52:	f000 f8c5 	bl	800ffe0 <__swsetup_r>
 800fe56:	b380      	cbz	r0, 800feba <_puts_r+0x9a>
 800fe58:	f04f 35ff 	mov.w	r5, #4294967295
 800fe5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe5e:	07da      	lsls	r2, r3, #31
 800fe60:	d405      	bmi.n	800fe6e <_puts_r+0x4e>
 800fe62:	89a3      	ldrh	r3, [r4, #12]
 800fe64:	059b      	lsls	r3, r3, #22
 800fe66:	d402      	bmi.n	800fe6e <_puts_r+0x4e>
 800fe68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe6a:	f000 f9df 	bl	801022c <__retarget_lock_release_recursive>
 800fe6e:	4628      	mov	r0, r5
 800fe70:	bd70      	pop	{r4, r5, r6, pc}
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	da04      	bge.n	800fe80 <_puts_r+0x60>
 800fe76:	69a2      	ldr	r2, [r4, #24]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	dc17      	bgt.n	800feac <_puts_r+0x8c>
 800fe7c:	290a      	cmp	r1, #10
 800fe7e:	d015      	beq.n	800feac <_puts_r+0x8c>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	1c5a      	adds	r2, r3, #1
 800fe84:	6022      	str	r2, [r4, #0]
 800fe86:	7019      	strb	r1, [r3, #0]
 800fe88:	68a3      	ldr	r3, [r4, #8]
 800fe8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	60a3      	str	r3, [r4, #8]
 800fe92:	2900      	cmp	r1, #0
 800fe94:	d1ed      	bne.n	800fe72 <_puts_r+0x52>
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	da11      	bge.n	800febe <_puts_r+0x9e>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	210a      	movs	r1, #10
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f000 f85f 	bl	800ff62 <__swbuf_r>
 800fea4:	3001      	adds	r0, #1
 800fea6:	d0d7      	beq.n	800fe58 <_puts_r+0x38>
 800fea8:	250a      	movs	r5, #10
 800feaa:	e7d7      	b.n	800fe5c <_puts_r+0x3c>
 800feac:	4622      	mov	r2, r4
 800feae:	4628      	mov	r0, r5
 800feb0:	f000 f857 	bl	800ff62 <__swbuf_r>
 800feb4:	3001      	adds	r0, #1
 800feb6:	d1e7      	bne.n	800fe88 <_puts_r+0x68>
 800feb8:	e7ce      	b.n	800fe58 <_puts_r+0x38>
 800feba:	3e01      	subs	r6, #1
 800febc:	e7e4      	b.n	800fe88 <_puts_r+0x68>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	1c5a      	adds	r2, r3, #1
 800fec2:	6022      	str	r2, [r4, #0]
 800fec4:	220a      	movs	r2, #10
 800fec6:	701a      	strb	r2, [r3, #0]
 800fec8:	e7ee      	b.n	800fea8 <_puts_r+0x88>
	...

0800fecc <puts>:
 800fecc:	4b02      	ldr	r3, [pc, #8]	@ (800fed8 <puts+0xc>)
 800fece:	4601      	mov	r1, r0
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	f7ff bfa5 	b.w	800fe20 <_puts_r>
 800fed6:	bf00      	nop
 800fed8:	20000020 	.word	0x20000020

0800fedc <__sread>:
 800fedc:	b510      	push	{r4, lr}
 800fede:	460c      	mov	r4, r1
 800fee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee4:	f000 f952 	bl	801018c <_read_r>
 800fee8:	2800      	cmp	r0, #0
 800feea:	bfab      	itete	ge
 800feec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800feee:	89a3      	ldrhlt	r3, [r4, #12]
 800fef0:	181b      	addge	r3, r3, r0
 800fef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fef6:	bfac      	ite	ge
 800fef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fefa:	81a3      	strhlt	r3, [r4, #12]
 800fefc:	bd10      	pop	{r4, pc}

0800fefe <__swrite>:
 800fefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff02:	461f      	mov	r7, r3
 800ff04:	898b      	ldrh	r3, [r1, #12]
 800ff06:	05db      	lsls	r3, r3, #23
 800ff08:	4605      	mov	r5, r0
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	d505      	bpl.n	800ff1c <__swrite+0x1e>
 800ff10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff14:	2302      	movs	r3, #2
 800ff16:	2200      	movs	r2, #0
 800ff18:	f000 f926 	bl	8010168 <_lseek_r>
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff26:	81a3      	strh	r3, [r4, #12]
 800ff28:	4632      	mov	r2, r6
 800ff2a:	463b      	mov	r3, r7
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff32:	f000 b93d 	b.w	80101b0 <_write_r>

0800ff36 <__sseek>:
 800ff36:	b510      	push	{r4, lr}
 800ff38:	460c      	mov	r4, r1
 800ff3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff3e:	f000 f913 	bl	8010168 <_lseek_r>
 800ff42:	1c43      	adds	r3, r0, #1
 800ff44:	89a3      	ldrh	r3, [r4, #12]
 800ff46:	bf15      	itete	ne
 800ff48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff52:	81a3      	strheq	r3, [r4, #12]
 800ff54:	bf18      	it	ne
 800ff56:	81a3      	strhne	r3, [r4, #12]
 800ff58:	bd10      	pop	{r4, pc}

0800ff5a <__sclose>:
 800ff5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff5e:	f000 b89d 	b.w	801009c <_close_r>

0800ff62 <__swbuf_r>:
 800ff62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff64:	460e      	mov	r6, r1
 800ff66:	4614      	mov	r4, r2
 800ff68:	4605      	mov	r5, r0
 800ff6a:	b118      	cbz	r0, 800ff74 <__swbuf_r+0x12>
 800ff6c:	6a03      	ldr	r3, [r0, #32]
 800ff6e:	b90b      	cbnz	r3, 800ff74 <__swbuf_r+0x12>
 800ff70:	f7ff ff0e 	bl	800fd90 <__sinit>
 800ff74:	69a3      	ldr	r3, [r4, #24]
 800ff76:	60a3      	str	r3, [r4, #8]
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	071a      	lsls	r2, r3, #28
 800ff7c:	d501      	bpl.n	800ff82 <__swbuf_r+0x20>
 800ff7e:	6923      	ldr	r3, [r4, #16]
 800ff80:	b943      	cbnz	r3, 800ff94 <__swbuf_r+0x32>
 800ff82:	4621      	mov	r1, r4
 800ff84:	4628      	mov	r0, r5
 800ff86:	f000 f82b 	bl	800ffe0 <__swsetup_r>
 800ff8a:	b118      	cbz	r0, 800ff94 <__swbuf_r+0x32>
 800ff8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff90:	4638      	mov	r0, r7
 800ff92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	6922      	ldr	r2, [r4, #16]
 800ff98:	1a98      	subs	r0, r3, r2
 800ff9a:	6963      	ldr	r3, [r4, #20]
 800ff9c:	b2f6      	uxtb	r6, r6
 800ff9e:	4283      	cmp	r3, r0
 800ffa0:	4637      	mov	r7, r6
 800ffa2:	dc05      	bgt.n	800ffb0 <__swbuf_r+0x4e>
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f000 fd9c 	bl	8010ae4 <_fflush_r>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	d1ed      	bne.n	800ff8c <__swbuf_r+0x2a>
 800ffb0:	68a3      	ldr	r3, [r4, #8]
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	60a3      	str	r3, [r4, #8]
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	6022      	str	r2, [r4, #0]
 800ffbc:	701e      	strb	r6, [r3, #0]
 800ffbe:	6962      	ldr	r2, [r4, #20]
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d004      	beq.n	800ffd0 <__swbuf_r+0x6e>
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	07db      	lsls	r3, r3, #31
 800ffca:	d5e1      	bpl.n	800ff90 <__swbuf_r+0x2e>
 800ffcc:	2e0a      	cmp	r6, #10
 800ffce:	d1df      	bne.n	800ff90 <__swbuf_r+0x2e>
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f000 fd86 	bl	8010ae4 <_fflush_r>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d0d9      	beq.n	800ff90 <__swbuf_r+0x2e>
 800ffdc:	e7d6      	b.n	800ff8c <__swbuf_r+0x2a>
	...

0800ffe0 <__swsetup_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4b29      	ldr	r3, [pc, #164]	@ (8010088 <__swsetup_r+0xa8>)
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	6818      	ldr	r0, [r3, #0]
 800ffe8:	460c      	mov	r4, r1
 800ffea:	b118      	cbz	r0, 800fff4 <__swsetup_r+0x14>
 800ffec:	6a03      	ldr	r3, [r0, #32]
 800ffee:	b90b      	cbnz	r3, 800fff4 <__swsetup_r+0x14>
 800fff0:	f7ff fece 	bl	800fd90 <__sinit>
 800fff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff8:	0719      	lsls	r1, r3, #28
 800fffa:	d422      	bmi.n	8010042 <__swsetup_r+0x62>
 800fffc:	06da      	lsls	r2, r3, #27
 800fffe:	d407      	bmi.n	8010010 <__swsetup_r+0x30>
 8010000:	2209      	movs	r2, #9
 8010002:	602a      	str	r2, [r5, #0]
 8010004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010008:	81a3      	strh	r3, [r4, #12]
 801000a:	f04f 30ff 	mov.w	r0, #4294967295
 801000e:	e033      	b.n	8010078 <__swsetup_r+0x98>
 8010010:	0758      	lsls	r0, r3, #29
 8010012:	d512      	bpl.n	801003a <__swsetup_r+0x5a>
 8010014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010016:	b141      	cbz	r1, 801002a <__swsetup_r+0x4a>
 8010018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801001c:	4299      	cmp	r1, r3
 801001e:	d002      	beq.n	8010026 <__swsetup_r+0x46>
 8010020:	4628      	mov	r0, r5
 8010022:	f000 f913 	bl	801024c <_free_r>
 8010026:	2300      	movs	r3, #0
 8010028:	6363      	str	r3, [r4, #52]	@ 0x34
 801002a:	89a3      	ldrh	r3, [r4, #12]
 801002c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010030:	81a3      	strh	r3, [r4, #12]
 8010032:	2300      	movs	r3, #0
 8010034:	6063      	str	r3, [r4, #4]
 8010036:	6923      	ldr	r3, [r4, #16]
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	f043 0308 	orr.w	r3, r3, #8
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	6923      	ldr	r3, [r4, #16]
 8010044:	b94b      	cbnz	r3, 801005a <__swsetup_r+0x7a>
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801004c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010050:	d003      	beq.n	801005a <__swsetup_r+0x7a>
 8010052:	4621      	mov	r1, r4
 8010054:	4628      	mov	r0, r5
 8010056:	f000 fd93 	bl	8010b80 <__smakebuf_r>
 801005a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801005e:	f013 0201 	ands.w	r2, r3, #1
 8010062:	d00a      	beq.n	801007a <__swsetup_r+0x9a>
 8010064:	2200      	movs	r2, #0
 8010066:	60a2      	str	r2, [r4, #8]
 8010068:	6962      	ldr	r2, [r4, #20]
 801006a:	4252      	negs	r2, r2
 801006c:	61a2      	str	r2, [r4, #24]
 801006e:	6922      	ldr	r2, [r4, #16]
 8010070:	b942      	cbnz	r2, 8010084 <__swsetup_r+0xa4>
 8010072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010076:	d1c5      	bne.n	8010004 <__swsetup_r+0x24>
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	0799      	lsls	r1, r3, #30
 801007c:	bf58      	it	pl
 801007e:	6962      	ldrpl	r2, [r4, #20]
 8010080:	60a2      	str	r2, [r4, #8]
 8010082:	e7f4      	b.n	801006e <__swsetup_r+0x8e>
 8010084:	2000      	movs	r0, #0
 8010086:	e7f7      	b.n	8010078 <__swsetup_r+0x98>
 8010088:	20000020 	.word	0x20000020

0801008c <memset>:
 801008c:	4402      	add	r2, r0
 801008e:	4603      	mov	r3, r0
 8010090:	4293      	cmp	r3, r2
 8010092:	d100      	bne.n	8010096 <memset+0xa>
 8010094:	4770      	bx	lr
 8010096:	f803 1b01 	strb.w	r1, [r3], #1
 801009a:	e7f9      	b.n	8010090 <memset+0x4>

0801009c <_close_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d06      	ldr	r5, [pc, #24]	@ (80100b8 <_close_r+0x1c>)
 80100a0:	2300      	movs	r3, #0
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	602b      	str	r3, [r5, #0]
 80100a8:	f7f2 fd35 	bl	8002b16 <_close>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_close_r+0x1a>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_close_r+0x1a>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	200021a4 	.word	0x200021a4

080100bc <_reclaim_reent>:
 80100bc:	4b29      	ldr	r3, [pc, #164]	@ (8010164 <_reclaim_reent+0xa8>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4283      	cmp	r3, r0
 80100c2:	b570      	push	{r4, r5, r6, lr}
 80100c4:	4604      	mov	r4, r0
 80100c6:	d04b      	beq.n	8010160 <_reclaim_reent+0xa4>
 80100c8:	69c3      	ldr	r3, [r0, #28]
 80100ca:	b1ab      	cbz	r3, 80100f8 <_reclaim_reent+0x3c>
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	b16b      	cbz	r3, 80100ec <_reclaim_reent+0x30>
 80100d0:	2500      	movs	r5, #0
 80100d2:	69e3      	ldr	r3, [r4, #28]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	5959      	ldr	r1, [r3, r5]
 80100d8:	2900      	cmp	r1, #0
 80100da:	d13b      	bne.n	8010154 <_reclaim_reent+0x98>
 80100dc:	3504      	adds	r5, #4
 80100de:	2d80      	cmp	r5, #128	@ 0x80
 80100e0:	d1f7      	bne.n	80100d2 <_reclaim_reent+0x16>
 80100e2:	69e3      	ldr	r3, [r4, #28]
 80100e4:	4620      	mov	r0, r4
 80100e6:	68d9      	ldr	r1, [r3, #12]
 80100e8:	f000 f8b0 	bl	801024c <_free_r>
 80100ec:	69e3      	ldr	r3, [r4, #28]
 80100ee:	6819      	ldr	r1, [r3, #0]
 80100f0:	b111      	cbz	r1, 80100f8 <_reclaim_reent+0x3c>
 80100f2:	4620      	mov	r0, r4
 80100f4:	f000 f8aa 	bl	801024c <_free_r>
 80100f8:	6961      	ldr	r1, [r4, #20]
 80100fa:	b111      	cbz	r1, 8010102 <_reclaim_reent+0x46>
 80100fc:	4620      	mov	r0, r4
 80100fe:	f000 f8a5 	bl	801024c <_free_r>
 8010102:	69e1      	ldr	r1, [r4, #28]
 8010104:	b111      	cbz	r1, 801010c <_reclaim_reent+0x50>
 8010106:	4620      	mov	r0, r4
 8010108:	f000 f8a0 	bl	801024c <_free_r>
 801010c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801010e:	b111      	cbz	r1, 8010116 <_reclaim_reent+0x5a>
 8010110:	4620      	mov	r0, r4
 8010112:	f000 f89b 	bl	801024c <_free_r>
 8010116:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010118:	b111      	cbz	r1, 8010120 <_reclaim_reent+0x64>
 801011a:	4620      	mov	r0, r4
 801011c:	f000 f896 	bl	801024c <_free_r>
 8010120:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010122:	b111      	cbz	r1, 801012a <_reclaim_reent+0x6e>
 8010124:	4620      	mov	r0, r4
 8010126:	f000 f891 	bl	801024c <_free_r>
 801012a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801012c:	b111      	cbz	r1, 8010134 <_reclaim_reent+0x78>
 801012e:	4620      	mov	r0, r4
 8010130:	f000 f88c 	bl	801024c <_free_r>
 8010134:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010136:	b111      	cbz	r1, 801013e <_reclaim_reent+0x82>
 8010138:	4620      	mov	r0, r4
 801013a:	f000 f887 	bl	801024c <_free_r>
 801013e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010140:	b111      	cbz	r1, 8010148 <_reclaim_reent+0x8c>
 8010142:	4620      	mov	r0, r4
 8010144:	f000 f882 	bl	801024c <_free_r>
 8010148:	6a23      	ldr	r3, [r4, #32]
 801014a:	b14b      	cbz	r3, 8010160 <_reclaim_reent+0xa4>
 801014c:	4620      	mov	r0, r4
 801014e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010152:	4718      	bx	r3
 8010154:	680e      	ldr	r6, [r1, #0]
 8010156:	4620      	mov	r0, r4
 8010158:	f000 f878 	bl	801024c <_free_r>
 801015c:	4631      	mov	r1, r6
 801015e:	e7bb      	b.n	80100d8 <_reclaim_reent+0x1c>
 8010160:	bd70      	pop	{r4, r5, r6, pc}
 8010162:	bf00      	nop
 8010164:	20000020 	.word	0x20000020

08010168 <_lseek_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4d07      	ldr	r5, [pc, #28]	@ (8010188 <_lseek_r+0x20>)
 801016c:	4604      	mov	r4, r0
 801016e:	4608      	mov	r0, r1
 8010170:	4611      	mov	r1, r2
 8010172:	2200      	movs	r2, #0
 8010174:	602a      	str	r2, [r5, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	f7f2 fcf4 	bl	8002b64 <_lseek>
 801017c:	1c43      	adds	r3, r0, #1
 801017e:	d102      	bne.n	8010186 <_lseek_r+0x1e>
 8010180:	682b      	ldr	r3, [r5, #0]
 8010182:	b103      	cbz	r3, 8010186 <_lseek_r+0x1e>
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	bd38      	pop	{r3, r4, r5, pc}
 8010188:	200021a4 	.word	0x200021a4

0801018c <_read_r>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	4d07      	ldr	r5, [pc, #28]	@ (80101ac <_read_r+0x20>)
 8010190:	4604      	mov	r4, r0
 8010192:	4608      	mov	r0, r1
 8010194:	4611      	mov	r1, r2
 8010196:	2200      	movs	r2, #0
 8010198:	602a      	str	r2, [r5, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	f7f2 fc9e 	bl	8002adc <_read>
 80101a0:	1c43      	adds	r3, r0, #1
 80101a2:	d102      	bne.n	80101aa <_read_r+0x1e>
 80101a4:	682b      	ldr	r3, [r5, #0]
 80101a6:	b103      	cbz	r3, 80101aa <_read_r+0x1e>
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	bd38      	pop	{r3, r4, r5, pc}
 80101ac:	200021a4 	.word	0x200021a4

080101b0 <_write_r>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	4d07      	ldr	r5, [pc, #28]	@ (80101d0 <_write_r+0x20>)
 80101b4:	4604      	mov	r4, r0
 80101b6:	4608      	mov	r0, r1
 80101b8:	4611      	mov	r1, r2
 80101ba:	2200      	movs	r2, #0
 80101bc:	602a      	str	r2, [r5, #0]
 80101be:	461a      	mov	r2, r3
 80101c0:	f7f1 fe6e 	bl	8001ea0 <_write>
 80101c4:	1c43      	adds	r3, r0, #1
 80101c6:	d102      	bne.n	80101ce <_write_r+0x1e>
 80101c8:	682b      	ldr	r3, [r5, #0]
 80101ca:	b103      	cbz	r3, 80101ce <_write_r+0x1e>
 80101cc:	6023      	str	r3, [r4, #0]
 80101ce:	bd38      	pop	{r3, r4, r5, pc}
 80101d0:	200021a4 	.word	0x200021a4

080101d4 <__errno>:
 80101d4:	4b01      	ldr	r3, [pc, #4]	@ (80101dc <__errno+0x8>)
 80101d6:	6818      	ldr	r0, [r3, #0]
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	20000020 	.word	0x20000020

080101e0 <__libc_init_array>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	4d0d      	ldr	r5, [pc, #52]	@ (8010218 <__libc_init_array+0x38>)
 80101e4:	4c0d      	ldr	r4, [pc, #52]	@ (801021c <__libc_init_array+0x3c>)
 80101e6:	1b64      	subs	r4, r4, r5
 80101e8:	10a4      	asrs	r4, r4, #2
 80101ea:	2600      	movs	r6, #0
 80101ec:	42a6      	cmp	r6, r4
 80101ee:	d109      	bne.n	8010204 <__libc_init_array+0x24>
 80101f0:	4d0b      	ldr	r5, [pc, #44]	@ (8010220 <__libc_init_array+0x40>)
 80101f2:	4c0c      	ldr	r4, [pc, #48]	@ (8010224 <__libc_init_array+0x44>)
 80101f4:	f000 fd32 	bl	8010c5c <_init>
 80101f8:	1b64      	subs	r4, r4, r5
 80101fa:	10a4      	asrs	r4, r4, #2
 80101fc:	2600      	movs	r6, #0
 80101fe:	42a6      	cmp	r6, r4
 8010200:	d105      	bne.n	801020e <__libc_init_array+0x2e>
 8010202:	bd70      	pop	{r4, r5, r6, pc}
 8010204:	f855 3b04 	ldr.w	r3, [r5], #4
 8010208:	4798      	blx	r3
 801020a:	3601      	adds	r6, #1
 801020c:	e7ee      	b.n	80101ec <__libc_init_array+0xc>
 801020e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010212:	4798      	blx	r3
 8010214:	3601      	adds	r6, #1
 8010216:	e7f2      	b.n	80101fe <__libc_init_array+0x1e>
 8010218:	08010da4 	.word	0x08010da4
 801021c:	08010da4 	.word	0x08010da4
 8010220:	08010da4 	.word	0x08010da4
 8010224:	08010da8 	.word	0x08010da8

08010228 <__retarget_lock_init_recursive>:
 8010228:	4770      	bx	lr

0801022a <__retarget_lock_acquire_recursive>:
 801022a:	4770      	bx	lr

0801022c <__retarget_lock_release_recursive>:
 801022c:	4770      	bx	lr

0801022e <memcpy>:
 801022e:	440a      	add	r2, r1
 8010230:	4291      	cmp	r1, r2
 8010232:	f100 33ff 	add.w	r3, r0, #4294967295
 8010236:	d100      	bne.n	801023a <memcpy+0xc>
 8010238:	4770      	bx	lr
 801023a:	b510      	push	{r4, lr}
 801023c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010244:	4291      	cmp	r1, r2
 8010246:	d1f9      	bne.n	801023c <memcpy+0xe>
 8010248:	bd10      	pop	{r4, pc}
	...

0801024c <_free_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	4605      	mov	r5, r0
 8010250:	2900      	cmp	r1, #0
 8010252:	d041      	beq.n	80102d8 <_free_r+0x8c>
 8010254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010258:	1f0c      	subs	r4, r1, #4
 801025a:	2b00      	cmp	r3, #0
 801025c:	bfb8      	it	lt
 801025e:	18e4      	addlt	r4, r4, r3
 8010260:	f000 f8e0 	bl	8010424 <__malloc_lock>
 8010264:	4a1d      	ldr	r2, [pc, #116]	@ (80102dc <_free_r+0x90>)
 8010266:	6813      	ldr	r3, [r2, #0]
 8010268:	b933      	cbnz	r3, 8010278 <_free_r+0x2c>
 801026a:	6063      	str	r3, [r4, #4]
 801026c:	6014      	str	r4, [r2, #0]
 801026e:	4628      	mov	r0, r5
 8010270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010274:	f000 b8dc 	b.w	8010430 <__malloc_unlock>
 8010278:	42a3      	cmp	r3, r4
 801027a:	d908      	bls.n	801028e <_free_r+0x42>
 801027c:	6820      	ldr	r0, [r4, #0]
 801027e:	1821      	adds	r1, r4, r0
 8010280:	428b      	cmp	r3, r1
 8010282:	bf01      	itttt	eq
 8010284:	6819      	ldreq	r1, [r3, #0]
 8010286:	685b      	ldreq	r3, [r3, #4]
 8010288:	1809      	addeq	r1, r1, r0
 801028a:	6021      	streq	r1, [r4, #0]
 801028c:	e7ed      	b.n	801026a <_free_r+0x1e>
 801028e:	461a      	mov	r2, r3
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	b10b      	cbz	r3, 8010298 <_free_r+0x4c>
 8010294:	42a3      	cmp	r3, r4
 8010296:	d9fa      	bls.n	801028e <_free_r+0x42>
 8010298:	6811      	ldr	r1, [r2, #0]
 801029a:	1850      	adds	r0, r2, r1
 801029c:	42a0      	cmp	r0, r4
 801029e:	d10b      	bne.n	80102b8 <_free_r+0x6c>
 80102a0:	6820      	ldr	r0, [r4, #0]
 80102a2:	4401      	add	r1, r0
 80102a4:	1850      	adds	r0, r2, r1
 80102a6:	4283      	cmp	r3, r0
 80102a8:	6011      	str	r1, [r2, #0]
 80102aa:	d1e0      	bne.n	801026e <_free_r+0x22>
 80102ac:	6818      	ldr	r0, [r3, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	6053      	str	r3, [r2, #4]
 80102b2:	4408      	add	r0, r1
 80102b4:	6010      	str	r0, [r2, #0]
 80102b6:	e7da      	b.n	801026e <_free_r+0x22>
 80102b8:	d902      	bls.n	80102c0 <_free_r+0x74>
 80102ba:	230c      	movs	r3, #12
 80102bc:	602b      	str	r3, [r5, #0]
 80102be:	e7d6      	b.n	801026e <_free_r+0x22>
 80102c0:	6820      	ldr	r0, [r4, #0]
 80102c2:	1821      	adds	r1, r4, r0
 80102c4:	428b      	cmp	r3, r1
 80102c6:	bf04      	itt	eq
 80102c8:	6819      	ldreq	r1, [r3, #0]
 80102ca:	685b      	ldreq	r3, [r3, #4]
 80102cc:	6063      	str	r3, [r4, #4]
 80102ce:	bf04      	itt	eq
 80102d0:	1809      	addeq	r1, r1, r0
 80102d2:	6021      	streq	r1, [r4, #0]
 80102d4:	6054      	str	r4, [r2, #4]
 80102d6:	e7ca      	b.n	801026e <_free_r+0x22>
 80102d8:	bd38      	pop	{r3, r4, r5, pc}
 80102da:	bf00      	nop
 80102dc:	200021b0 	.word	0x200021b0

080102e0 <sbrk_aligned>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	4e0f      	ldr	r6, [pc, #60]	@ (8010320 <sbrk_aligned+0x40>)
 80102e4:	460c      	mov	r4, r1
 80102e6:	6831      	ldr	r1, [r6, #0]
 80102e8:	4605      	mov	r5, r0
 80102ea:	b911      	cbnz	r1, 80102f2 <sbrk_aligned+0x12>
 80102ec:	f000 fca6 	bl	8010c3c <_sbrk_r>
 80102f0:	6030      	str	r0, [r6, #0]
 80102f2:	4621      	mov	r1, r4
 80102f4:	4628      	mov	r0, r5
 80102f6:	f000 fca1 	bl	8010c3c <_sbrk_r>
 80102fa:	1c43      	adds	r3, r0, #1
 80102fc:	d103      	bne.n	8010306 <sbrk_aligned+0x26>
 80102fe:	f04f 34ff 	mov.w	r4, #4294967295
 8010302:	4620      	mov	r0, r4
 8010304:	bd70      	pop	{r4, r5, r6, pc}
 8010306:	1cc4      	adds	r4, r0, #3
 8010308:	f024 0403 	bic.w	r4, r4, #3
 801030c:	42a0      	cmp	r0, r4
 801030e:	d0f8      	beq.n	8010302 <sbrk_aligned+0x22>
 8010310:	1a21      	subs	r1, r4, r0
 8010312:	4628      	mov	r0, r5
 8010314:	f000 fc92 	bl	8010c3c <_sbrk_r>
 8010318:	3001      	adds	r0, #1
 801031a:	d1f2      	bne.n	8010302 <sbrk_aligned+0x22>
 801031c:	e7ef      	b.n	80102fe <sbrk_aligned+0x1e>
 801031e:	bf00      	nop
 8010320:	200021ac 	.word	0x200021ac

08010324 <_malloc_r>:
 8010324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010328:	1ccd      	adds	r5, r1, #3
 801032a:	f025 0503 	bic.w	r5, r5, #3
 801032e:	3508      	adds	r5, #8
 8010330:	2d0c      	cmp	r5, #12
 8010332:	bf38      	it	cc
 8010334:	250c      	movcc	r5, #12
 8010336:	2d00      	cmp	r5, #0
 8010338:	4606      	mov	r6, r0
 801033a:	db01      	blt.n	8010340 <_malloc_r+0x1c>
 801033c:	42a9      	cmp	r1, r5
 801033e:	d904      	bls.n	801034a <_malloc_r+0x26>
 8010340:	230c      	movs	r3, #12
 8010342:	6033      	str	r3, [r6, #0]
 8010344:	2000      	movs	r0, #0
 8010346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801034a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010420 <_malloc_r+0xfc>
 801034e:	f000 f869 	bl	8010424 <__malloc_lock>
 8010352:	f8d8 3000 	ldr.w	r3, [r8]
 8010356:	461c      	mov	r4, r3
 8010358:	bb44      	cbnz	r4, 80103ac <_malloc_r+0x88>
 801035a:	4629      	mov	r1, r5
 801035c:	4630      	mov	r0, r6
 801035e:	f7ff ffbf 	bl	80102e0 <sbrk_aligned>
 8010362:	1c43      	adds	r3, r0, #1
 8010364:	4604      	mov	r4, r0
 8010366:	d158      	bne.n	801041a <_malloc_r+0xf6>
 8010368:	f8d8 4000 	ldr.w	r4, [r8]
 801036c:	4627      	mov	r7, r4
 801036e:	2f00      	cmp	r7, #0
 8010370:	d143      	bne.n	80103fa <_malloc_r+0xd6>
 8010372:	2c00      	cmp	r4, #0
 8010374:	d04b      	beq.n	801040e <_malloc_r+0xea>
 8010376:	6823      	ldr	r3, [r4, #0]
 8010378:	4639      	mov	r1, r7
 801037a:	4630      	mov	r0, r6
 801037c:	eb04 0903 	add.w	r9, r4, r3
 8010380:	f000 fc5c 	bl	8010c3c <_sbrk_r>
 8010384:	4581      	cmp	r9, r0
 8010386:	d142      	bne.n	801040e <_malloc_r+0xea>
 8010388:	6821      	ldr	r1, [r4, #0]
 801038a:	1a6d      	subs	r5, r5, r1
 801038c:	4629      	mov	r1, r5
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ffa6 	bl	80102e0 <sbrk_aligned>
 8010394:	3001      	adds	r0, #1
 8010396:	d03a      	beq.n	801040e <_malloc_r+0xea>
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	442b      	add	r3, r5
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	f8d8 3000 	ldr.w	r3, [r8]
 80103a2:	685a      	ldr	r2, [r3, #4]
 80103a4:	bb62      	cbnz	r2, 8010400 <_malloc_r+0xdc>
 80103a6:	f8c8 7000 	str.w	r7, [r8]
 80103aa:	e00f      	b.n	80103cc <_malloc_r+0xa8>
 80103ac:	6822      	ldr	r2, [r4, #0]
 80103ae:	1b52      	subs	r2, r2, r5
 80103b0:	d420      	bmi.n	80103f4 <_malloc_r+0xd0>
 80103b2:	2a0b      	cmp	r2, #11
 80103b4:	d917      	bls.n	80103e6 <_malloc_r+0xc2>
 80103b6:	1961      	adds	r1, r4, r5
 80103b8:	42a3      	cmp	r3, r4
 80103ba:	6025      	str	r5, [r4, #0]
 80103bc:	bf18      	it	ne
 80103be:	6059      	strne	r1, [r3, #4]
 80103c0:	6863      	ldr	r3, [r4, #4]
 80103c2:	bf08      	it	eq
 80103c4:	f8c8 1000 	streq.w	r1, [r8]
 80103c8:	5162      	str	r2, [r4, r5]
 80103ca:	604b      	str	r3, [r1, #4]
 80103cc:	4630      	mov	r0, r6
 80103ce:	f000 f82f 	bl	8010430 <__malloc_unlock>
 80103d2:	f104 000b 	add.w	r0, r4, #11
 80103d6:	1d23      	adds	r3, r4, #4
 80103d8:	f020 0007 	bic.w	r0, r0, #7
 80103dc:	1ac2      	subs	r2, r0, r3
 80103de:	bf1c      	itt	ne
 80103e0:	1a1b      	subne	r3, r3, r0
 80103e2:	50a3      	strne	r3, [r4, r2]
 80103e4:	e7af      	b.n	8010346 <_malloc_r+0x22>
 80103e6:	6862      	ldr	r2, [r4, #4]
 80103e8:	42a3      	cmp	r3, r4
 80103ea:	bf0c      	ite	eq
 80103ec:	f8c8 2000 	streq.w	r2, [r8]
 80103f0:	605a      	strne	r2, [r3, #4]
 80103f2:	e7eb      	b.n	80103cc <_malloc_r+0xa8>
 80103f4:	4623      	mov	r3, r4
 80103f6:	6864      	ldr	r4, [r4, #4]
 80103f8:	e7ae      	b.n	8010358 <_malloc_r+0x34>
 80103fa:	463c      	mov	r4, r7
 80103fc:	687f      	ldr	r7, [r7, #4]
 80103fe:	e7b6      	b.n	801036e <_malloc_r+0x4a>
 8010400:	461a      	mov	r2, r3
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	42a3      	cmp	r3, r4
 8010406:	d1fb      	bne.n	8010400 <_malloc_r+0xdc>
 8010408:	2300      	movs	r3, #0
 801040a:	6053      	str	r3, [r2, #4]
 801040c:	e7de      	b.n	80103cc <_malloc_r+0xa8>
 801040e:	230c      	movs	r3, #12
 8010410:	6033      	str	r3, [r6, #0]
 8010412:	4630      	mov	r0, r6
 8010414:	f000 f80c 	bl	8010430 <__malloc_unlock>
 8010418:	e794      	b.n	8010344 <_malloc_r+0x20>
 801041a:	6005      	str	r5, [r0, #0]
 801041c:	e7d6      	b.n	80103cc <_malloc_r+0xa8>
 801041e:	bf00      	nop
 8010420:	200021b0 	.word	0x200021b0

08010424 <__malloc_lock>:
 8010424:	4801      	ldr	r0, [pc, #4]	@ (801042c <__malloc_lock+0x8>)
 8010426:	f7ff bf00 	b.w	801022a <__retarget_lock_acquire_recursive>
 801042a:	bf00      	nop
 801042c:	200021a8 	.word	0x200021a8

08010430 <__malloc_unlock>:
 8010430:	4801      	ldr	r0, [pc, #4]	@ (8010438 <__malloc_unlock+0x8>)
 8010432:	f7ff befb 	b.w	801022c <__retarget_lock_release_recursive>
 8010436:	bf00      	nop
 8010438:	200021a8 	.word	0x200021a8

0801043c <__sfputc_r>:
 801043c:	6893      	ldr	r3, [r2, #8]
 801043e:	3b01      	subs	r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	b410      	push	{r4}
 8010444:	6093      	str	r3, [r2, #8]
 8010446:	da08      	bge.n	801045a <__sfputc_r+0x1e>
 8010448:	6994      	ldr	r4, [r2, #24]
 801044a:	42a3      	cmp	r3, r4
 801044c:	db01      	blt.n	8010452 <__sfputc_r+0x16>
 801044e:	290a      	cmp	r1, #10
 8010450:	d103      	bne.n	801045a <__sfputc_r+0x1e>
 8010452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010456:	f7ff bd84 	b.w	800ff62 <__swbuf_r>
 801045a:	6813      	ldr	r3, [r2, #0]
 801045c:	1c58      	adds	r0, r3, #1
 801045e:	6010      	str	r0, [r2, #0]
 8010460:	7019      	strb	r1, [r3, #0]
 8010462:	4608      	mov	r0, r1
 8010464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010468:	4770      	bx	lr

0801046a <__sfputs_r>:
 801046a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046c:	4606      	mov	r6, r0
 801046e:	460f      	mov	r7, r1
 8010470:	4614      	mov	r4, r2
 8010472:	18d5      	adds	r5, r2, r3
 8010474:	42ac      	cmp	r4, r5
 8010476:	d101      	bne.n	801047c <__sfputs_r+0x12>
 8010478:	2000      	movs	r0, #0
 801047a:	e007      	b.n	801048c <__sfputs_r+0x22>
 801047c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010480:	463a      	mov	r2, r7
 8010482:	4630      	mov	r0, r6
 8010484:	f7ff ffda 	bl	801043c <__sfputc_r>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d1f3      	bne.n	8010474 <__sfputs_r+0xa>
 801048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010490 <_vfiprintf_r>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	460d      	mov	r5, r1
 8010496:	b09d      	sub	sp, #116	@ 0x74
 8010498:	4614      	mov	r4, r2
 801049a:	4698      	mov	r8, r3
 801049c:	4606      	mov	r6, r0
 801049e:	b118      	cbz	r0, 80104a8 <_vfiprintf_r+0x18>
 80104a0:	6a03      	ldr	r3, [r0, #32]
 80104a2:	b90b      	cbnz	r3, 80104a8 <_vfiprintf_r+0x18>
 80104a4:	f7ff fc74 	bl	800fd90 <__sinit>
 80104a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104aa:	07d9      	lsls	r1, r3, #31
 80104ac:	d405      	bmi.n	80104ba <_vfiprintf_r+0x2a>
 80104ae:	89ab      	ldrh	r3, [r5, #12]
 80104b0:	059a      	lsls	r2, r3, #22
 80104b2:	d402      	bmi.n	80104ba <_vfiprintf_r+0x2a>
 80104b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104b6:	f7ff feb8 	bl	801022a <__retarget_lock_acquire_recursive>
 80104ba:	89ab      	ldrh	r3, [r5, #12]
 80104bc:	071b      	lsls	r3, r3, #28
 80104be:	d501      	bpl.n	80104c4 <_vfiprintf_r+0x34>
 80104c0:	692b      	ldr	r3, [r5, #16]
 80104c2:	b99b      	cbnz	r3, 80104ec <_vfiprintf_r+0x5c>
 80104c4:	4629      	mov	r1, r5
 80104c6:	4630      	mov	r0, r6
 80104c8:	f7ff fd8a 	bl	800ffe0 <__swsetup_r>
 80104cc:	b170      	cbz	r0, 80104ec <_vfiprintf_r+0x5c>
 80104ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104d0:	07dc      	lsls	r4, r3, #31
 80104d2:	d504      	bpl.n	80104de <_vfiprintf_r+0x4e>
 80104d4:	f04f 30ff 	mov.w	r0, #4294967295
 80104d8:	b01d      	add	sp, #116	@ 0x74
 80104da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104de:	89ab      	ldrh	r3, [r5, #12]
 80104e0:	0598      	lsls	r0, r3, #22
 80104e2:	d4f7      	bmi.n	80104d4 <_vfiprintf_r+0x44>
 80104e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104e6:	f7ff fea1 	bl	801022c <__retarget_lock_release_recursive>
 80104ea:	e7f3      	b.n	80104d4 <_vfiprintf_r+0x44>
 80104ec:	2300      	movs	r3, #0
 80104ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80104f0:	2320      	movs	r3, #32
 80104f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80104fa:	2330      	movs	r3, #48	@ 0x30
 80104fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80106ac <_vfiprintf_r+0x21c>
 8010500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010504:	f04f 0901 	mov.w	r9, #1
 8010508:	4623      	mov	r3, r4
 801050a:	469a      	mov	sl, r3
 801050c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010510:	b10a      	cbz	r2, 8010516 <_vfiprintf_r+0x86>
 8010512:	2a25      	cmp	r2, #37	@ 0x25
 8010514:	d1f9      	bne.n	801050a <_vfiprintf_r+0x7a>
 8010516:	ebba 0b04 	subs.w	fp, sl, r4
 801051a:	d00b      	beq.n	8010534 <_vfiprintf_r+0xa4>
 801051c:	465b      	mov	r3, fp
 801051e:	4622      	mov	r2, r4
 8010520:	4629      	mov	r1, r5
 8010522:	4630      	mov	r0, r6
 8010524:	f7ff ffa1 	bl	801046a <__sfputs_r>
 8010528:	3001      	adds	r0, #1
 801052a:	f000 80a7 	beq.w	801067c <_vfiprintf_r+0x1ec>
 801052e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010530:	445a      	add	r2, fp
 8010532:	9209      	str	r2, [sp, #36]	@ 0x24
 8010534:	f89a 3000 	ldrb.w	r3, [sl]
 8010538:	2b00      	cmp	r3, #0
 801053a:	f000 809f 	beq.w	801067c <_vfiprintf_r+0x1ec>
 801053e:	2300      	movs	r3, #0
 8010540:	f04f 32ff 	mov.w	r2, #4294967295
 8010544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010548:	f10a 0a01 	add.w	sl, sl, #1
 801054c:	9304      	str	r3, [sp, #16]
 801054e:	9307      	str	r3, [sp, #28]
 8010550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010554:	931a      	str	r3, [sp, #104]	@ 0x68
 8010556:	4654      	mov	r4, sl
 8010558:	2205      	movs	r2, #5
 801055a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801055e:	4853      	ldr	r0, [pc, #332]	@ (80106ac <_vfiprintf_r+0x21c>)
 8010560:	f7ef fe36 	bl	80001d0 <memchr>
 8010564:	9a04      	ldr	r2, [sp, #16]
 8010566:	b9d8      	cbnz	r0, 80105a0 <_vfiprintf_r+0x110>
 8010568:	06d1      	lsls	r1, r2, #27
 801056a:	bf44      	itt	mi
 801056c:	2320      	movmi	r3, #32
 801056e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010572:	0713      	lsls	r3, r2, #28
 8010574:	bf44      	itt	mi
 8010576:	232b      	movmi	r3, #43	@ 0x2b
 8010578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801057c:	f89a 3000 	ldrb.w	r3, [sl]
 8010580:	2b2a      	cmp	r3, #42	@ 0x2a
 8010582:	d015      	beq.n	80105b0 <_vfiprintf_r+0x120>
 8010584:	9a07      	ldr	r2, [sp, #28]
 8010586:	4654      	mov	r4, sl
 8010588:	2000      	movs	r0, #0
 801058a:	f04f 0c0a 	mov.w	ip, #10
 801058e:	4621      	mov	r1, r4
 8010590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010594:	3b30      	subs	r3, #48	@ 0x30
 8010596:	2b09      	cmp	r3, #9
 8010598:	d94b      	bls.n	8010632 <_vfiprintf_r+0x1a2>
 801059a:	b1b0      	cbz	r0, 80105ca <_vfiprintf_r+0x13a>
 801059c:	9207      	str	r2, [sp, #28]
 801059e:	e014      	b.n	80105ca <_vfiprintf_r+0x13a>
 80105a0:	eba0 0308 	sub.w	r3, r0, r8
 80105a4:	fa09 f303 	lsl.w	r3, r9, r3
 80105a8:	4313      	orrs	r3, r2
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	46a2      	mov	sl, r4
 80105ae:	e7d2      	b.n	8010556 <_vfiprintf_r+0xc6>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	1d19      	adds	r1, r3, #4
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	9103      	str	r1, [sp, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	bfbb      	ittet	lt
 80105bc:	425b      	neglt	r3, r3
 80105be:	f042 0202 	orrlt.w	r2, r2, #2
 80105c2:	9307      	strge	r3, [sp, #28]
 80105c4:	9307      	strlt	r3, [sp, #28]
 80105c6:	bfb8      	it	lt
 80105c8:	9204      	strlt	r2, [sp, #16]
 80105ca:	7823      	ldrb	r3, [r4, #0]
 80105cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80105ce:	d10a      	bne.n	80105e6 <_vfiprintf_r+0x156>
 80105d0:	7863      	ldrb	r3, [r4, #1]
 80105d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80105d4:	d132      	bne.n	801063c <_vfiprintf_r+0x1ac>
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	1d1a      	adds	r2, r3, #4
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	9203      	str	r2, [sp, #12]
 80105de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105e2:	3402      	adds	r4, #2
 80105e4:	9305      	str	r3, [sp, #20]
 80105e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106bc <_vfiprintf_r+0x22c>
 80105ea:	7821      	ldrb	r1, [r4, #0]
 80105ec:	2203      	movs	r2, #3
 80105ee:	4650      	mov	r0, sl
 80105f0:	f7ef fdee 	bl	80001d0 <memchr>
 80105f4:	b138      	cbz	r0, 8010606 <_vfiprintf_r+0x176>
 80105f6:	9b04      	ldr	r3, [sp, #16]
 80105f8:	eba0 000a 	sub.w	r0, r0, sl
 80105fc:	2240      	movs	r2, #64	@ 0x40
 80105fe:	4082      	lsls	r2, r0
 8010600:	4313      	orrs	r3, r2
 8010602:	3401      	adds	r4, #1
 8010604:	9304      	str	r3, [sp, #16]
 8010606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060a:	4829      	ldr	r0, [pc, #164]	@ (80106b0 <_vfiprintf_r+0x220>)
 801060c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010610:	2206      	movs	r2, #6
 8010612:	f7ef fddd 	bl	80001d0 <memchr>
 8010616:	2800      	cmp	r0, #0
 8010618:	d03f      	beq.n	801069a <_vfiprintf_r+0x20a>
 801061a:	4b26      	ldr	r3, [pc, #152]	@ (80106b4 <_vfiprintf_r+0x224>)
 801061c:	bb1b      	cbnz	r3, 8010666 <_vfiprintf_r+0x1d6>
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	3307      	adds	r3, #7
 8010622:	f023 0307 	bic.w	r3, r3, #7
 8010626:	3308      	adds	r3, #8
 8010628:	9303      	str	r3, [sp, #12]
 801062a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801062c:	443b      	add	r3, r7
 801062e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010630:	e76a      	b.n	8010508 <_vfiprintf_r+0x78>
 8010632:	fb0c 3202 	mla	r2, ip, r2, r3
 8010636:	460c      	mov	r4, r1
 8010638:	2001      	movs	r0, #1
 801063a:	e7a8      	b.n	801058e <_vfiprintf_r+0xfe>
 801063c:	2300      	movs	r3, #0
 801063e:	3401      	adds	r4, #1
 8010640:	9305      	str	r3, [sp, #20]
 8010642:	4619      	mov	r1, r3
 8010644:	f04f 0c0a 	mov.w	ip, #10
 8010648:	4620      	mov	r0, r4
 801064a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801064e:	3a30      	subs	r2, #48	@ 0x30
 8010650:	2a09      	cmp	r2, #9
 8010652:	d903      	bls.n	801065c <_vfiprintf_r+0x1cc>
 8010654:	2b00      	cmp	r3, #0
 8010656:	d0c6      	beq.n	80105e6 <_vfiprintf_r+0x156>
 8010658:	9105      	str	r1, [sp, #20]
 801065a:	e7c4      	b.n	80105e6 <_vfiprintf_r+0x156>
 801065c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010660:	4604      	mov	r4, r0
 8010662:	2301      	movs	r3, #1
 8010664:	e7f0      	b.n	8010648 <_vfiprintf_r+0x1b8>
 8010666:	ab03      	add	r3, sp, #12
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	462a      	mov	r2, r5
 801066c:	4b12      	ldr	r3, [pc, #72]	@ (80106b8 <_vfiprintf_r+0x228>)
 801066e:	a904      	add	r1, sp, #16
 8010670:	4630      	mov	r0, r6
 8010672:	f3af 8000 	nop.w
 8010676:	4607      	mov	r7, r0
 8010678:	1c78      	adds	r0, r7, #1
 801067a:	d1d6      	bne.n	801062a <_vfiprintf_r+0x19a>
 801067c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801067e:	07d9      	lsls	r1, r3, #31
 8010680:	d405      	bmi.n	801068e <_vfiprintf_r+0x1fe>
 8010682:	89ab      	ldrh	r3, [r5, #12]
 8010684:	059a      	lsls	r2, r3, #22
 8010686:	d402      	bmi.n	801068e <_vfiprintf_r+0x1fe>
 8010688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801068a:	f7ff fdcf 	bl	801022c <__retarget_lock_release_recursive>
 801068e:	89ab      	ldrh	r3, [r5, #12]
 8010690:	065b      	lsls	r3, r3, #25
 8010692:	f53f af1f 	bmi.w	80104d4 <_vfiprintf_r+0x44>
 8010696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010698:	e71e      	b.n	80104d8 <_vfiprintf_r+0x48>
 801069a:	ab03      	add	r3, sp, #12
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	462a      	mov	r2, r5
 80106a0:	4b05      	ldr	r3, [pc, #20]	@ (80106b8 <_vfiprintf_r+0x228>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	4630      	mov	r0, r6
 80106a6:	f000 f879 	bl	801079c <_printf_i>
 80106aa:	e7e4      	b.n	8010676 <_vfiprintf_r+0x1e6>
 80106ac:	08010d68 	.word	0x08010d68
 80106b0:	08010d72 	.word	0x08010d72
 80106b4:	00000000 	.word	0x00000000
 80106b8:	0801046b 	.word	0x0801046b
 80106bc:	08010d6e 	.word	0x08010d6e

080106c0 <_printf_common>:
 80106c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c4:	4616      	mov	r6, r2
 80106c6:	4698      	mov	r8, r3
 80106c8:	688a      	ldr	r2, [r1, #8]
 80106ca:	690b      	ldr	r3, [r1, #16]
 80106cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106d0:	4293      	cmp	r3, r2
 80106d2:	bfb8      	it	lt
 80106d4:	4613      	movlt	r3, r2
 80106d6:	6033      	str	r3, [r6, #0]
 80106d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106dc:	4607      	mov	r7, r0
 80106de:	460c      	mov	r4, r1
 80106e0:	b10a      	cbz	r2, 80106e6 <_printf_common+0x26>
 80106e2:	3301      	adds	r3, #1
 80106e4:	6033      	str	r3, [r6, #0]
 80106e6:	6823      	ldr	r3, [r4, #0]
 80106e8:	0699      	lsls	r1, r3, #26
 80106ea:	bf42      	ittt	mi
 80106ec:	6833      	ldrmi	r3, [r6, #0]
 80106ee:	3302      	addmi	r3, #2
 80106f0:	6033      	strmi	r3, [r6, #0]
 80106f2:	6825      	ldr	r5, [r4, #0]
 80106f4:	f015 0506 	ands.w	r5, r5, #6
 80106f8:	d106      	bne.n	8010708 <_printf_common+0x48>
 80106fa:	f104 0a19 	add.w	sl, r4, #25
 80106fe:	68e3      	ldr	r3, [r4, #12]
 8010700:	6832      	ldr	r2, [r6, #0]
 8010702:	1a9b      	subs	r3, r3, r2
 8010704:	42ab      	cmp	r3, r5
 8010706:	dc26      	bgt.n	8010756 <_printf_common+0x96>
 8010708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	3b00      	subs	r3, #0
 8010710:	bf18      	it	ne
 8010712:	2301      	movne	r3, #1
 8010714:	0692      	lsls	r2, r2, #26
 8010716:	d42b      	bmi.n	8010770 <_printf_common+0xb0>
 8010718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801071c:	4641      	mov	r1, r8
 801071e:	4638      	mov	r0, r7
 8010720:	47c8      	blx	r9
 8010722:	3001      	adds	r0, #1
 8010724:	d01e      	beq.n	8010764 <_printf_common+0xa4>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	6922      	ldr	r2, [r4, #16]
 801072a:	f003 0306 	and.w	r3, r3, #6
 801072e:	2b04      	cmp	r3, #4
 8010730:	bf02      	ittt	eq
 8010732:	68e5      	ldreq	r5, [r4, #12]
 8010734:	6833      	ldreq	r3, [r6, #0]
 8010736:	1aed      	subeq	r5, r5, r3
 8010738:	68a3      	ldr	r3, [r4, #8]
 801073a:	bf0c      	ite	eq
 801073c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010740:	2500      	movne	r5, #0
 8010742:	4293      	cmp	r3, r2
 8010744:	bfc4      	itt	gt
 8010746:	1a9b      	subgt	r3, r3, r2
 8010748:	18ed      	addgt	r5, r5, r3
 801074a:	2600      	movs	r6, #0
 801074c:	341a      	adds	r4, #26
 801074e:	42b5      	cmp	r5, r6
 8010750:	d11a      	bne.n	8010788 <_printf_common+0xc8>
 8010752:	2000      	movs	r0, #0
 8010754:	e008      	b.n	8010768 <_printf_common+0xa8>
 8010756:	2301      	movs	r3, #1
 8010758:	4652      	mov	r2, sl
 801075a:	4641      	mov	r1, r8
 801075c:	4638      	mov	r0, r7
 801075e:	47c8      	blx	r9
 8010760:	3001      	adds	r0, #1
 8010762:	d103      	bne.n	801076c <_printf_common+0xac>
 8010764:	f04f 30ff 	mov.w	r0, #4294967295
 8010768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076c:	3501      	adds	r5, #1
 801076e:	e7c6      	b.n	80106fe <_printf_common+0x3e>
 8010770:	18e1      	adds	r1, r4, r3
 8010772:	1c5a      	adds	r2, r3, #1
 8010774:	2030      	movs	r0, #48	@ 0x30
 8010776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801077a:	4422      	add	r2, r4
 801077c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010784:	3302      	adds	r3, #2
 8010786:	e7c7      	b.n	8010718 <_printf_common+0x58>
 8010788:	2301      	movs	r3, #1
 801078a:	4622      	mov	r2, r4
 801078c:	4641      	mov	r1, r8
 801078e:	4638      	mov	r0, r7
 8010790:	47c8      	blx	r9
 8010792:	3001      	adds	r0, #1
 8010794:	d0e6      	beq.n	8010764 <_printf_common+0xa4>
 8010796:	3601      	adds	r6, #1
 8010798:	e7d9      	b.n	801074e <_printf_common+0x8e>
	...

0801079c <_printf_i>:
 801079c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107a0:	7e0f      	ldrb	r7, [r1, #24]
 80107a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107a4:	2f78      	cmp	r7, #120	@ 0x78
 80107a6:	4691      	mov	r9, r2
 80107a8:	4680      	mov	r8, r0
 80107aa:	460c      	mov	r4, r1
 80107ac:	469a      	mov	sl, r3
 80107ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107b2:	d807      	bhi.n	80107c4 <_printf_i+0x28>
 80107b4:	2f62      	cmp	r7, #98	@ 0x62
 80107b6:	d80a      	bhi.n	80107ce <_printf_i+0x32>
 80107b8:	2f00      	cmp	r7, #0
 80107ba:	f000 80d2 	beq.w	8010962 <_printf_i+0x1c6>
 80107be:	2f58      	cmp	r7, #88	@ 0x58
 80107c0:	f000 80b9 	beq.w	8010936 <_printf_i+0x19a>
 80107c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107cc:	e03a      	b.n	8010844 <_printf_i+0xa8>
 80107ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107d2:	2b15      	cmp	r3, #21
 80107d4:	d8f6      	bhi.n	80107c4 <_printf_i+0x28>
 80107d6:	a101      	add	r1, pc, #4	@ (adr r1, 80107dc <_printf_i+0x40>)
 80107d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107dc:	08010835 	.word	0x08010835
 80107e0:	08010849 	.word	0x08010849
 80107e4:	080107c5 	.word	0x080107c5
 80107e8:	080107c5 	.word	0x080107c5
 80107ec:	080107c5 	.word	0x080107c5
 80107f0:	080107c5 	.word	0x080107c5
 80107f4:	08010849 	.word	0x08010849
 80107f8:	080107c5 	.word	0x080107c5
 80107fc:	080107c5 	.word	0x080107c5
 8010800:	080107c5 	.word	0x080107c5
 8010804:	080107c5 	.word	0x080107c5
 8010808:	08010949 	.word	0x08010949
 801080c:	08010873 	.word	0x08010873
 8010810:	08010903 	.word	0x08010903
 8010814:	080107c5 	.word	0x080107c5
 8010818:	080107c5 	.word	0x080107c5
 801081c:	0801096b 	.word	0x0801096b
 8010820:	080107c5 	.word	0x080107c5
 8010824:	08010873 	.word	0x08010873
 8010828:	080107c5 	.word	0x080107c5
 801082c:	080107c5 	.word	0x080107c5
 8010830:	0801090b 	.word	0x0801090b
 8010834:	6833      	ldr	r3, [r6, #0]
 8010836:	1d1a      	adds	r2, r3, #4
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	6032      	str	r2, [r6, #0]
 801083c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010844:	2301      	movs	r3, #1
 8010846:	e09d      	b.n	8010984 <_printf_i+0x1e8>
 8010848:	6833      	ldr	r3, [r6, #0]
 801084a:	6820      	ldr	r0, [r4, #0]
 801084c:	1d19      	adds	r1, r3, #4
 801084e:	6031      	str	r1, [r6, #0]
 8010850:	0606      	lsls	r6, r0, #24
 8010852:	d501      	bpl.n	8010858 <_printf_i+0xbc>
 8010854:	681d      	ldr	r5, [r3, #0]
 8010856:	e003      	b.n	8010860 <_printf_i+0xc4>
 8010858:	0645      	lsls	r5, r0, #25
 801085a:	d5fb      	bpl.n	8010854 <_printf_i+0xb8>
 801085c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010860:	2d00      	cmp	r5, #0
 8010862:	da03      	bge.n	801086c <_printf_i+0xd0>
 8010864:	232d      	movs	r3, #45	@ 0x2d
 8010866:	426d      	negs	r5, r5
 8010868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801086c:	4859      	ldr	r0, [pc, #356]	@ (80109d4 <_printf_i+0x238>)
 801086e:	230a      	movs	r3, #10
 8010870:	e011      	b.n	8010896 <_printf_i+0xfa>
 8010872:	6821      	ldr	r1, [r4, #0]
 8010874:	6833      	ldr	r3, [r6, #0]
 8010876:	0608      	lsls	r0, r1, #24
 8010878:	f853 5b04 	ldr.w	r5, [r3], #4
 801087c:	d402      	bmi.n	8010884 <_printf_i+0xe8>
 801087e:	0649      	lsls	r1, r1, #25
 8010880:	bf48      	it	mi
 8010882:	b2ad      	uxthmi	r5, r5
 8010884:	2f6f      	cmp	r7, #111	@ 0x6f
 8010886:	4853      	ldr	r0, [pc, #332]	@ (80109d4 <_printf_i+0x238>)
 8010888:	6033      	str	r3, [r6, #0]
 801088a:	bf14      	ite	ne
 801088c:	230a      	movne	r3, #10
 801088e:	2308      	moveq	r3, #8
 8010890:	2100      	movs	r1, #0
 8010892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010896:	6866      	ldr	r6, [r4, #4]
 8010898:	60a6      	str	r6, [r4, #8]
 801089a:	2e00      	cmp	r6, #0
 801089c:	bfa2      	ittt	ge
 801089e:	6821      	ldrge	r1, [r4, #0]
 80108a0:	f021 0104 	bicge.w	r1, r1, #4
 80108a4:	6021      	strge	r1, [r4, #0]
 80108a6:	b90d      	cbnz	r5, 80108ac <_printf_i+0x110>
 80108a8:	2e00      	cmp	r6, #0
 80108aa:	d04b      	beq.n	8010944 <_printf_i+0x1a8>
 80108ac:	4616      	mov	r6, r2
 80108ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80108b2:	fb03 5711 	mls	r7, r3, r1, r5
 80108b6:	5dc7      	ldrb	r7, [r0, r7]
 80108b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108bc:	462f      	mov	r7, r5
 80108be:	42bb      	cmp	r3, r7
 80108c0:	460d      	mov	r5, r1
 80108c2:	d9f4      	bls.n	80108ae <_printf_i+0x112>
 80108c4:	2b08      	cmp	r3, #8
 80108c6:	d10b      	bne.n	80108e0 <_printf_i+0x144>
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	07df      	lsls	r7, r3, #31
 80108cc:	d508      	bpl.n	80108e0 <_printf_i+0x144>
 80108ce:	6923      	ldr	r3, [r4, #16]
 80108d0:	6861      	ldr	r1, [r4, #4]
 80108d2:	4299      	cmp	r1, r3
 80108d4:	bfde      	ittt	le
 80108d6:	2330      	movle	r3, #48	@ 0x30
 80108d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80108e0:	1b92      	subs	r2, r2, r6
 80108e2:	6122      	str	r2, [r4, #16]
 80108e4:	f8cd a000 	str.w	sl, [sp]
 80108e8:	464b      	mov	r3, r9
 80108ea:	aa03      	add	r2, sp, #12
 80108ec:	4621      	mov	r1, r4
 80108ee:	4640      	mov	r0, r8
 80108f0:	f7ff fee6 	bl	80106c0 <_printf_common>
 80108f4:	3001      	adds	r0, #1
 80108f6:	d14a      	bne.n	801098e <_printf_i+0x1f2>
 80108f8:	f04f 30ff 	mov.w	r0, #4294967295
 80108fc:	b004      	add	sp, #16
 80108fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	f043 0320 	orr.w	r3, r3, #32
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	4833      	ldr	r0, [pc, #204]	@ (80109d8 <_printf_i+0x23c>)
 801090c:	2778      	movs	r7, #120	@ 0x78
 801090e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	6831      	ldr	r1, [r6, #0]
 8010916:	061f      	lsls	r7, r3, #24
 8010918:	f851 5b04 	ldr.w	r5, [r1], #4
 801091c:	d402      	bmi.n	8010924 <_printf_i+0x188>
 801091e:	065f      	lsls	r7, r3, #25
 8010920:	bf48      	it	mi
 8010922:	b2ad      	uxthmi	r5, r5
 8010924:	6031      	str	r1, [r6, #0]
 8010926:	07d9      	lsls	r1, r3, #31
 8010928:	bf44      	itt	mi
 801092a:	f043 0320 	orrmi.w	r3, r3, #32
 801092e:	6023      	strmi	r3, [r4, #0]
 8010930:	b11d      	cbz	r5, 801093a <_printf_i+0x19e>
 8010932:	2310      	movs	r3, #16
 8010934:	e7ac      	b.n	8010890 <_printf_i+0xf4>
 8010936:	4827      	ldr	r0, [pc, #156]	@ (80109d4 <_printf_i+0x238>)
 8010938:	e7e9      	b.n	801090e <_printf_i+0x172>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	f023 0320 	bic.w	r3, r3, #32
 8010940:	6023      	str	r3, [r4, #0]
 8010942:	e7f6      	b.n	8010932 <_printf_i+0x196>
 8010944:	4616      	mov	r6, r2
 8010946:	e7bd      	b.n	80108c4 <_printf_i+0x128>
 8010948:	6833      	ldr	r3, [r6, #0]
 801094a:	6825      	ldr	r5, [r4, #0]
 801094c:	6961      	ldr	r1, [r4, #20]
 801094e:	1d18      	adds	r0, r3, #4
 8010950:	6030      	str	r0, [r6, #0]
 8010952:	062e      	lsls	r6, r5, #24
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	d501      	bpl.n	801095c <_printf_i+0x1c0>
 8010958:	6019      	str	r1, [r3, #0]
 801095a:	e002      	b.n	8010962 <_printf_i+0x1c6>
 801095c:	0668      	lsls	r0, r5, #25
 801095e:	d5fb      	bpl.n	8010958 <_printf_i+0x1bc>
 8010960:	8019      	strh	r1, [r3, #0]
 8010962:	2300      	movs	r3, #0
 8010964:	6123      	str	r3, [r4, #16]
 8010966:	4616      	mov	r6, r2
 8010968:	e7bc      	b.n	80108e4 <_printf_i+0x148>
 801096a:	6833      	ldr	r3, [r6, #0]
 801096c:	1d1a      	adds	r2, r3, #4
 801096e:	6032      	str	r2, [r6, #0]
 8010970:	681e      	ldr	r6, [r3, #0]
 8010972:	6862      	ldr	r2, [r4, #4]
 8010974:	2100      	movs	r1, #0
 8010976:	4630      	mov	r0, r6
 8010978:	f7ef fc2a 	bl	80001d0 <memchr>
 801097c:	b108      	cbz	r0, 8010982 <_printf_i+0x1e6>
 801097e:	1b80      	subs	r0, r0, r6
 8010980:	6060      	str	r0, [r4, #4]
 8010982:	6863      	ldr	r3, [r4, #4]
 8010984:	6123      	str	r3, [r4, #16]
 8010986:	2300      	movs	r3, #0
 8010988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801098c:	e7aa      	b.n	80108e4 <_printf_i+0x148>
 801098e:	6923      	ldr	r3, [r4, #16]
 8010990:	4632      	mov	r2, r6
 8010992:	4649      	mov	r1, r9
 8010994:	4640      	mov	r0, r8
 8010996:	47d0      	blx	sl
 8010998:	3001      	adds	r0, #1
 801099a:	d0ad      	beq.n	80108f8 <_printf_i+0x15c>
 801099c:	6823      	ldr	r3, [r4, #0]
 801099e:	079b      	lsls	r3, r3, #30
 80109a0:	d413      	bmi.n	80109ca <_printf_i+0x22e>
 80109a2:	68e0      	ldr	r0, [r4, #12]
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	4298      	cmp	r0, r3
 80109a8:	bfb8      	it	lt
 80109aa:	4618      	movlt	r0, r3
 80109ac:	e7a6      	b.n	80108fc <_printf_i+0x160>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4632      	mov	r2, r6
 80109b2:	4649      	mov	r1, r9
 80109b4:	4640      	mov	r0, r8
 80109b6:	47d0      	blx	sl
 80109b8:	3001      	adds	r0, #1
 80109ba:	d09d      	beq.n	80108f8 <_printf_i+0x15c>
 80109bc:	3501      	adds	r5, #1
 80109be:	68e3      	ldr	r3, [r4, #12]
 80109c0:	9903      	ldr	r1, [sp, #12]
 80109c2:	1a5b      	subs	r3, r3, r1
 80109c4:	42ab      	cmp	r3, r5
 80109c6:	dcf2      	bgt.n	80109ae <_printf_i+0x212>
 80109c8:	e7eb      	b.n	80109a2 <_printf_i+0x206>
 80109ca:	2500      	movs	r5, #0
 80109cc:	f104 0619 	add.w	r6, r4, #25
 80109d0:	e7f5      	b.n	80109be <_printf_i+0x222>
 80109d2:	bf00      	nop
 80109d4:	08010d79 	.word	0x08010d79
 80109d8:	08010d8a 	.word	0x08010d8a

080109dc <__sflush_r>:
 80109dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e4:	0716      	lsls	r6, r2, #28
 80109e6:	4605      	mov	r5, r0
 80109e8:	460c      	mov	r4, r1
 80109ea:	d454      	bmi.n	8010a96 <__sflush_r+0xba>
 80109ec:	684b      	ldr	r3, [r1, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	dc02      	bgt.n	80109f8 <__sflush_r+0x1c>
 80109f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dd48      	ble.n	8010a8a <__sflush_r+0xae>
 80109f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109fa:	2e00      	cmp	r6, #0
 80109fc:	d045      	beq.n	8010a8a <__sflush_r+0xae>
 80109fe:	2300      	movs	r3, #0
 8010a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010a04:	682f      	ldr	r7, [r5, #0]
 8010a06:	6a21      	ldr	r1, [r4, #32]
 8010a08:	602b      	str	r3, [r5, #0]
 8010a0a:	d030      	beq.n	8010a6e <__sflush_r+0x92>
 8010a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010a0e:	89a3      	ldrh	r3, [r4, #12]
 8010a10:	0759      	lsls	r1, r3, #29
 8010a12:	d505      	bpl.n	8010a20 <__sflush_r+0x44>
 8010a14:	6863      	ldr	r3, [r4, #4]
 8010a16:	1ad2      	subs	r2, r2, r3
 8010a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010a1a:	b10b      	cbz	r3, 8010a20 <__sflush_r+0x44>
 8010a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a1e:	1ad2      	subs	r2, r2, r3
 8010a20:	2300      	movs	r3, #0
 8010a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a24:	6a21      	ldr	r1, [r4, #32]
 8010a26:	4628      	mov	r0, r5
 8010a28:	47b0      	blx	r6
 8010a2a:	1c43      	adds	r3, r0, #1
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	d106      	bne.n	8010a3e <__sflush_r+0x62>
 8010a30:	6829      	ldr	r1, [r5, #0]
 8010a32:	291d      	cmp	r1, #29
 8010a34:	d82b      	bhi.n	8010a8e <__sflush_r+0xb2>
 8010a36:	4a2a      	ldr	r2, [pc, #168]	@ (8010ae0 <__sflush_r+0x104>)
 8010a38:	410a      	asrs	r2, r1
 8010a3a:	07d6      	lsls	r6, r2, #31
 8010a3c:	d427      	bmi.n	8010a8e <__sflush_r+0xb2>
 8010a3e:	2200      	movs	r2, #0
 8010a40:	6062      	str	r2, [r4, #4]
 8010a42:	04d9      	lsls	r1, r3, #19
 8010a44:	6922      	ldr	r2, [r4, #16]
 8010a46:	6022      	str	r2, [r4, #0]
 8010a48:	d504      	bpl.n	8010a54 <__sflush_r+0x78>
 8010a4a:	1c42      	adds	r2, r0, #1
 8010a4c:	d101      	bne.n	8010a52 <__sflush_r+0x76>
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	b903      	cbnz	r3, 8010a54 <__sflush_r+0x78>
 8010a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a56:	602f      	str	r7, [r5, #0]
 8010a58:	b1b9      	cbz	r1, 8010a8a <__sflush_r+0xae>
 8010a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	d002      	beq.n	8010a68 <__sflush_r+0x8c>
 8010a62:	4628      	mov	r0, r5
 8010a64:	f7ff fbf2 	bl	801024c <_free_r>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a6c:	e00d      	b.n	8010a8a <__sflush_r+0xae>
 8010a6e:	2301      	movs	r3, #1
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b0      	blx	r6
 8010a74:	4602      	mov	r2, r0
 8010a76:	1c50      	adds	r0, r2, #1
 8010a78:	d1c9      	bne.n	8010a0e <__sflush_r+0x32>
 8010a7a:	682b      	ldr	r3, [r5, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d0c6      	beq.n	8010a0e <__sflush_r+0x32>
 8010a80:	2b1d      	cmp	r3, #29
 8010a82:	d001      	beq.n	8010a88 <__sflush_r+0xac>
 8010a84:	2b16      	cmp	r3, #22
 8010a86:	d11e      	bne.n	8010ac6 <__sflush_r+0xea>
 8010a88:	602f      	str	r7, [r5, #0]
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	e022      	b.n	8010ad4 <__sflush_r+0xf8>
 8010a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a92:	b21b      	sxth	r3, r3
 8010a94:	e01b      	b.n	8010ace <__sflush_r+0xf2>
 8010a96:	690f      	ldr	r7, [r1, #16]
 8010a98:	2f00      	cmp	r7, #0
 8010a9a:	d0f6      	beq.n	8010a8a <__sflush_r+0xae>
 8010a9c:	0793      	lsls	r3, r2, #30
 8010a9e:	680e      	ldr	r6, [r1, #0]
 8010aa0:	bf08      	it	eq
 8010aa2:	694b      	ldreq	r3, [r1, #20]
 8010aa4:	600f      	str	r7, [r1, #0]
 8010aa6:	bf18      	it	ne
 8010aa8:	2300      	movne	r3, #0
 8010aaa:	eba6 0807 	sub.w	r8, r6, r7
 8010aae:	608b      	str	r3, [r1, #8]
 8010ab0:	f1b8 0f00 	cmp.w	r8, #0
 8010ab4:	dde9      	ble.n	8010a8a <__sflush_r+0xae>
 8010ab6:	6a21      	ldr	r1, [r4, #32]
 8010ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010aba:	4643      	mov	r3, r8
 8010abc:	463a      	mov	r2, r7
 8010abe:	4628      	mov	r0, r5
 8010ac0:	47b0      	blx	r6
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	dc08      	bgt.n	8010ad8 <__sflush_r+0xfc>
 8010ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ace:	81a3      	strh	r3, [r4, #12]
 8010ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	4407      	add	r7, r0
 8010ada:	eba8 0800 	sub.w	r8, r8, r0
 8010ade:	e7e7      	b.n	8010ab0 <__sflush_r+0xd4>
 8010ae0:	dfbffffe 	.word	0xdfbffffe

08010ae4 <_fflush_r>:
 8010ae4:	b538      	push	{r3, r4, r5, lr}
 8010ae6:	690b      	ldr	r3, [r1, #16]
 8010ae8:	4605      	mov	r5, r0
 8010aea:	460c      	mov	r4, r1
 8010aec:	b913      	cbnz	r3, 8010af4 <_fflush_r+0x10>
 8010aee:	2500      	movs	r5, #0
 8010af0:	4628      	mov	r0, r5
 8010af2:	bd38      	pop	{r3, r4, r5, pc}
 8010af4:	b118      	cbz	r0, 8010afe <_fflush_r+0x1a>
 8010af6:	6a03      	ldr	r3, [r0, #32]
 8010af8:	b90b      	cbnz	r3, 8010afe <_fflush_r+0x1a>
 8010afa:	f7ff f949 	bl	800fd90 <__sinit>
 8010afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d0f3      	beq.n	8010aee <_fflush_r+0xa>
 8010b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010b08:	07d0      	lsls	r0, r2, #31
 8010b0a:	d404      	bmi.n	8010b16 <_fflush_r+0x32>
 8010b0c:	0599      	lsls	r1, r3, #22
 8010b0e:	d402      	bmi.n	8010b16 <_fflush_r+0x32>
 8010b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b12:	f7ff fb8a 	bl	801022a <__retarget_lock_acquire_recursive>
 8010b16:	4628      	mov	r0, r5
 8010b18:	4621      	mov	r1, r4
 8010b1a:	f7ff ff5f 	bl	80109dc <__sflush_r>
 8010b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b20:	07da      	lsls	r2, r3, #31
 8010b22:	4605      	mov	r5, r0
 8010b24:	d4e4      	bmi.n	8010af0 <_fflush_r+0xc>
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	059b      	lsls	r3, r3, #22
 8010b2a:	d4e1      	bmi.n	8010af0 <_fflush_r+0xc>
 8010b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b2e:	f7ff fb7d 	bl	801022c <__retarget_lock_release_recursive>
 8010b32:	e7dd      	b.n	8010af0 <_fflush_r+0xc>

08010b34 <__swhatbuf_r>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	460c      	mov	r4, r1
 8010b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b3c:	2900      	cmp	r1, #0
 8010b3e:	b096      	sub	sp, #88	@ 0x58
 8010b40:	4615      	mov	r5, r2
 8010b42:	461e      	mov	r6, r3
 8010b44:	da0d      	bge.n	8010b62 <__swhatbuf_r+0x2e>
 8010b46:	89a3      	ldrh	r3, [r4, #12]
 8010b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b4c:	f04f 0100 	mov.w	r1, #0
 8010b50:	bf14      	ite	ne
 8010b52:	2340      	movne	r3, #64	@ 0x40
 8010b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b58:	2000      	movs	r0, #0
 8010b5a:	6031      	str	r1, [r6, #0]
 8010b5c:	602b      	str	r3, [r5, #0]
 8010b5e:	b016      	add	sp, #88	@ 0x58
 8010b60:	bd70      	pop	{r4, r5, r6, pc}
 8010b62:	466a      	mov	r2, sp
 8010b64:	f000 f848 	bl	8010bf8 <_fstat_r>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	dbec      	blt.n	8010b46 <__swhatbuf_r+0x12>
 8010b6c:	9901      	ldr	r1, [sp, #4]
 8010b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b76:	4259      	negs	r1, r3
 8010b78:	4159      	adcs	r1, r3
 8010b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b7e:	e7eb      	b.n	8010b58 <__swhatbuf_r+0x24>

08010b80 <__smakebuf_r>:
 8010b80:	898b      	ldrh	r3, [r1, #12]
 8010b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b84:	079d      	lsls	r5, r3, #30
 8010b86:	4606      	mov	r6, r0
 8010b88:	460c      	mov	r4, r1
 8010b8a:	d507      	bpl.n	8010b9c <__smakebuf_r+0x1c>
 8010b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	6123      	str	r3, [r4, #16]
 8010b94:	2301      	movs	r3, #1
 8010b96:	6163      	str	r3, [r4, #20]
 8010b98:	b003      	add	sp, #12
 8010b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b9c:	ab01      	add	r3, sp, #4
 8010b9e:	466a      	mov	r2, sp
 8010ba0:	f7ff ffc8 	bl	8010b34 <__swhatbuf_r>
 8010ba4:	9f00      	ldr	r7, [sp, #0]
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	4639      	mov	r1, r7
 8010baa:	4630      	mov	r0, r6
 8010bac:	f7ff fbba 	bl	8010324 <_malloc_r>
 8010bb0:	b948      	cbnz	r0, 8010bc6 <__smakebuf_r+0x46>
 8010bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb6:	059a      	lsls	r2, r3, #22
 8010bb8:	d4ee      	bmi.n	8010b98 <__smakebuf_r+0x18>
 8010bba:	f023 0303 	bic.w	r3, r3, #3
 8010bbe:	f043 0302 	orr.w	r3, r3, #2
 8010bc2:	81a3      	strh	r3, [r4, #12]
 8010bc4:	e7e2      	b.n	8010b8c <__smakebuf_r+0xc>
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	6020      	str	r0, [r4, #0]
 8010bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bce:	81a3      	strh	r3, [r4, #12]
 8010bd0:	9b01      	ldr	r3, [sp, #4]
 8010bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010bd6:	b15b      	cbz	r3, 8010bf0 <__smakebuf_r+0x70>
 8010bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f000 f81d 	bl	8010c1c <_isatty_r>
 8010be2:	b128      	cbz	r0, 8010bf0 <__smakebuf_r+0x70>
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	f023 0303 	bic.w	r3, r3, #3
 8010bea:	f043 0301 	orr.w	r3, r3, #1
 8010bee:	81a3      	strh	r3, [r4, #12]
 8010bf0:	89a3      	ldrh	r3, [r4, #12]
 8010bf2:	431d      	orrs	r5, r3
 8010bf4:	81a5      	strh	r5, [r4, #12]
 8010bf6:	e7cf      	b.n	8010b98 <__smakebuf_r+0x18>

08010bf8 <_fstat_r>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	4d07      	ldr	r5, [pc, #28]	@ (8010c18 <_fstat_r+0x20>)
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	4604      	mov	r4, r0
 8010c00:	4608      	mov	r0, r1
 8010c02:	4611      	mov	r1, r2
 8010c04:	602b      	str	r3, [r5, #0]
 8010c06:	f7f1 ff92 	bl	8002b2e <_fstat>
 8010c0a:	1c43      	adds	r3, r0, #1
 8010c0c:	d102      	bne.n	8010c14 <_fstat_r+0x1c>
 8010c0e:	682b      	ldr	r3, [r5, #0]
 8010c10:	b103      	cbz	r3, 8010c14 <_fstat_r+0x1c>
 8010c12:	6023      	str	r3, [r4, #0]
 8010c14:	bd38      	pop	{r3, r4, r5, pc}
 8010c16:	bf00      	nop
 8010c18:	200021a4 	.word	0x200021a4

08010c1c <_isatty_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d06      	ldr	r5, [pc, #24]	@ (8010c38 <_isatty_r+0x1c>)
 8010c20:	2300      	movs	r3, #0
 8010c22:	4604      	mov	r4, r0
 8010c24:	4608      	mov	r0, r1
 8010c26:	602b      	str	r3, [r5, #0]
 8010c28:	f7f1 ff91 	bl	8002b4e <_isatty>
 8010c2c:	1c43      	adds	r3, r0, #1
 8010c2e:	d102      	bne.n	8010c36 <_isatty_r+0x1a>
 8010c30:	682b      	ldr	r3, [r5, #0]
 8010c32:	b103      	cbz	r3, 8010c36 <_isatty_r+0x1a>
 8010c34:	6023      	str	r3, [r4, #0]
 8010c36:	bd38      	pop	{r3, r4, r5, pc}
 8010c38:	200021a4 	.word	0x200021a4

08010c3c <_sbrk_r>:
 8010c3c:	b538      	push	{r3, r4, r5, lr}
 8010c3e:	4d06      	ldr	r5, [pc, #24]	@ (8010c58 <_sbrk_r+0x1c>)
 8010c40:	2300      	movs	r3, #0
 8010c42:	4604      	mov	r4, r0
 8010c44:	4608      	mov	r0, r1
 8010c46:	602b      	str	r3, [r5, #0]
 8010c48:	f7f1 ff9a 	bl	8002b80 <_sbrk>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	d102      	bne.n	8010c56 <_sbrk_r+0x1a>
 8010c50:	682b      	ldr	r3, [r5, #0]
 8010c52:	b103      	cbz	r3, 8010c56 <_sbrk_r+0x1a>
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	bd38      	pop	{r3, r4, r5, pc}
 8010c58:	200021a4 	.word	0x200021a4

08010c5c <_init>:
 8010c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5e:	bf00      	nop
 8010c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c62:	bc08      	pop	{r3}
 8010c64:	469e      	mov	lr, r3
 8010c66:	4770      	bx	lr

08010c68 <_fini>:
 8010c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6a:	bf00      	nop
 8010c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c6e:	bc08      	pop	{r3}
 8010c70:	469e      	mov	lr, r3
 8010c72:	4770      	bx	lr
