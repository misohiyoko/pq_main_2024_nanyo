
balloon_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08012fb8  08012fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133e0  080133e0  00015070  2**0
                  CONTENTS
  4 .ARM          00000008  080133e0  080133e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133e8  080133e8  00015070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133e8  080133e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133ec  080133ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080133f0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a2c  20000070  08013460  00015070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20003a9c  08013460  00015a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003081c  00000000  00000000  000150a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000697b  00000000  00000000  000458bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d8  00000000  00000000  0004c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002051  00000000  00000000  0004eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4de  00000000  00000000  00050b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000335ad  00000000  00000000  0007d03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4058  00000000  00000000  000b05ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a4644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b624  00000000  00000000  001a4688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001afcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012fa0 	.word	0x08012fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08012fa0 	.word	0x08012fa0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d88:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d013      	beq.n	8000dc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000da0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00b      	beq.n	8000dc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000da8:	e000      	b.n	8000dac <ITM_SendChar+0x2c>
    {
      __NOP();
 8000daa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000dac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f9      	beq.n	8000daa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000db6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(const struct minmea_float *f)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <minmea_tofloat+0x16>
        return NAN;
 8000de0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000e14 <minmea_tofloat+0x44>
 8000de4:	e00d      	b.n	8000e02 <minmea_tofloat+0x32>
    return (float) f->value / (float) f->scale;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8000e02:	eef0 7a66 	vmov.f32	s15, s13
 8000e06:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	7fc00000 	.word	0x7fc00000

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f004 fec4 	bl	8005ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f890 	bl	8000f44 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fcbc 	bl	80017a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f000 fc60 	bl	80016ec <MX_DMA_Init>
  MX_I2C1_Init();
 8000e2c:	f000 f902 	bl	8001034 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e30:	f000 fbcc 	bl	80015cc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000e34:	f000 f9f2 	bl	800121c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000e38:	f000 fa80 	bl	800133c <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8000e3c:	f000 f8d8 	bl	8000ff0 <MX_CRC_Init>
  MX_LPTIM2_Init();
 8000e40:	f000 f9b8 	bl	80011b4 <MX_LPTIM2_Init>
  MX_I2C2_Init();
 8000e44:	f000 f936 	bl	80010b4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000e48:	f000 f974 	bl	8001134 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000e4c:	f000 fa96 	bl	800137c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e50:	f000 fad2 	bl	80013f8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e54:	f000 fb0e 	bl	8001474 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000e58:	f00d ffc6 	bl	800ede8 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000e5c:	f000 fc16 	bl	800168c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000e60:	f000 fbe4 	bl	800162c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ARGB_Init();  // Initialization
 8000e64:	f004 f9a8 	bl	80051b8 <ARGB_Init>
  ARGB_FillRGB(200, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	20c8      	movs	r0, #200	@ 0xc8
 8000e6e:	f004 fa87 	bl	8005380 <ARGB_FillRGB>
  while (!ARGB_Show());
 8000e72:	bf00      	nop
 8000e74:	f004 faa6 	bl	80053c4 <ARGB_Show>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0fa      	beq.n	8000e74 <main+0x5c>
  reset_sense_power();
 8000e7e:	f004 f973 	bl	8005168 <reset_sense_power>

  HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	481e      	ldr	r0, [pc, #120]	@ (8000f00 <main+0xe8>)
 8000e88:	f005 fd2a 	bl	80068e0 <HAL_GPIO_WritePin>
  printf("Hello World!!\r\n");
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <main+0xec>)
 8000e8e:	f011 f925 	bl	80120dc <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e92:	f00e fa45 	bl	800f320 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messageHandlerQueue1 */
  messageHandlerQueue1Handle = osMessageQueueNew (64, sizeof(uint8_t), &messageHandlerQueue1_attributes);
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <main+0xf0>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2040      	movs	r0, #64	@ 0x40
 8000e9c:	f00e fb37 	bl	800f50e <osMessageQueueNew>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f0c <main+0xf4>)
 8000ea4:	6013      	str	r3, [r2, #0]

  /* creation of messageHandlerQueue2 */
  messageHandlerQueue2Handle = osMessageQueueNew (64, sizeof(uint8_t), &messageHandlerQueue2_attributes);
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f10 <main+0xf8>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2040      	movs	r0, #64	@ 0x40
 8000eac:	f00e fb2f 	bl	800f50e <osMessageQueueNew>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <main+0xfc>)
 8000eb4:	6013      	str	r3, [r2, #0]

  /* creation of messageHandlerQueue3 */
  messageHandlerQueue3Handle = osMessageQueueNew (64, sizeof(uint8_t), &messageHandlerQueue3_attributes);
 8000eb6:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <main+0x100>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2040      	movs	r0, #64	@ 0x40
 8000ebc:	f00e fb27 	bl	800f50e <osMessageQueueNew>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <main+0x104>)
 8000ec4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000ec6:	4a16      	ldr	r2, [pc, #88]	@ (8000f20 <main+0x108>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <main+0x10c>)
 8000ecc:	f00e fa72 	bl	800f3b4 <osThreadNew>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <main+0x110>)
 8000ed4:	6013      	str	r3, [r2, #0]

  /* creation of saveFile */
  saveFileHandle = osThreadNew(SaveFile, NULL, &saveFile_attributes);
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <main+0x114>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <main+0x118>)
 8000edc:	f00e fa6a 	bl	800f3b4 <osThreadNew>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <main+0x11c>)
 8000ee4:	6013      	str	r3, [r2, #0]

  /* creation of downLink */
  downLinkHandle = osThreadNew(DownLink, NULL, &downLink_attributes);
 8000ee6:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <main+0x120>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <main+0x124>)
 8000eec:	f00e fa62 	bl	800f3b4 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <main+0x128>)
 8000ef4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ef6:	f00e fa37 	bl	800f368 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000efa:	bf00      	nop
 8000efc:	e7fd      	b.n	8000efa <main+0xe2>
 8000efe:	bf00      	nop
 8000f00:	48000800 	.word	0x48000800
 8000f04:	08013024 	.word	0x08013024
 8000f08:	08013208 	.word	0x08013208
 8000f0c:	2000073c 	.word	0x2000073c
 8000f10:	08013220 	.word	0x08013220
 8000f14:	20000740 	.word	0x20000740
 8000f18:	08013238 	.word	0x08013238
 8000f1c:	20000744 	.word	0x20000744
 8000f20:	0801319c 	.word	0x0801319c
 8000f24:	08001aa5 	.word	0x08001aa5
 8000f28:	20000730 	.word	0x20000730
 8000f2c:	080131c0 	.word	0x080131c0
 8000f30:	08001b8d 	.word	0x08001b8d
 8000f34:	20000734 	.word	0x20000734
 8000f38:	080131e4 	.word	0x080131e4
 8000f3c:	08001e15 	.word	0x08001e15
 8000f40:	20000738 	.word	0x20000738

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	@ 0x58
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2244      	movs	r2, #68	@ 0x44
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f011 f8ca 	bl	80120ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6a:	f006 fc43 	bl	80077f4 <HAL_PWREx_ControlVoltageScaling>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f74:	f000 ff6a 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000f78:	2338      	movs	r3, #56	@ 0x38
 8000f7a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f8c:	2360      	movs	r3, #96	@ 0x60
 8000f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f94:	2301      	movs	r3, #1
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f9c:	2328      	movs	r3, #40	@ 0x28
 8000f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fc75 	bl	80078a0 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 ff46 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 f875 	bl	80080c8 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fe4:	f000 ff32 	bl	8001e4c <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3758      	adds	r7, #88	@ 0x58
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <MX_CRC_Init+0x40>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_CRC_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <MX_CRC_Init+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_CRC_Init+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <MX_CRC_Init+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_CRC_Init+0x3c>)
 8001014:	2201      	movs	r2, #1
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_CRC_Init+0x3c>)
 800101a:	f004 fedf 	bl	8005ddc <HAL_CRC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001024:	f000 ff12 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000008c 	.word	0x2000008c
 8001030:	40023000 	.word	0x40023000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_I2C1_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <MX_I2C1_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001040:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <MX_I2C1_Init+0x7c>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_I2C1_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106e:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001070:	f005 fc4e 	bl	8006910 <HAL_I2C_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800107a:	f000 fee7 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001082:	f006 fa70 	bl	8007566 <HAL_I2CEx_ConfigAnalogFilter>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800108c:	f000 fede 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_I2C1_Init+0x74>)
 8001094:	f006 fab2 	bl	80075fc <HAL_I2CEx_ConfigDigitalFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fed5 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000b0 	.word	0x200000b0
 80010ac:	40005400 	.word	0x40005400
 80010b0:	10909cec 	.word	0x10909cec

080010b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <MX_I2C2_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <MX_I2C2_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	@ (8001128 <MX_I2C2_Init+0x74>)
 80010f0:	f005 fc0e 	bl	8006910 <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 fea7 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <MX_I2C2_Init+0x74>)
 8001102:	f006 fa30 	bl	8007566 <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fe9e 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_I2C2_Init+0x74>)
 8001114:	f006 fa72 	bl	80075fc <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fe95 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000104 	.word	0x20000104
 800112c:	40005800 	.word	0x40005800
 8001130:	10909cec 	.word	0x10909cec

08001134 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_I2C3_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <MX_I2C3_Init+0x7c>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C3_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001170:	f005 fbce 	bl	8006910 <HAL_I2C_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800117a:	f000 fe67 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001182:	f006 f9f0 	bl	8007566 <HAL_I2CEx_ConfigAnalogFilter>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 fe5e 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_I2C3_Init+0x74>)
 8001194:	f006 fa32 	bl	80075fc <HAL_I2CEx_ConfigDigitalFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 fe55 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000158 	.word	0x20000158
 80011ac:	40005c00 	.word	0x40005c00
 80011b0:	10909cec 	.word	0x10909cec

080011b4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <MX_LPTIM2_Init+0x64>)
 80011bc:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011dc:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_LPTIM2_Init+0x60>)
 8001200:	f006 fa48 	bl	8007694 <HAL_LPTIM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 800120a:	f000 fe1f 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000023c 	.word	0x2000023c
 8001218:	40009400 	.word	0x40009400

0800121c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b092      	sub	sp, #72	@ 0x48
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001222:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	222c      	movs	r2, #44	@ 0x2c
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f010 ff55 	bl	80120ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <MX_RTC_Init+0x118>)
 8001244:	4a3c      	ldr	r2, [pc, #240]	@ (8001338 <MX_RTC_Init+0x11c>)
 8001246:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001248:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <MX_RTC_Init+0x118>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800124e:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <MX_RTC_Init+0x118>)
 8001250:	227f      	movs	r2, #127	@ 0x7f
 8001252:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001254:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <MX_RTC_Init+0x118>)
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <MX_RTC_Init+0x118>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001260:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <MX_RTC_Init+0x118>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001266:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <MX_RTC_Init+0x118>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800126c:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <MX_RTC_Init+0x118>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001272:	4830      	ldr	r0, [pc, #192]	@ (8001334 <MX_RTC_Init+0x118>)
 8001274:	f008 f9da 	bl	800962c <HAL_RTC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800127e:	f000 fde5 	bl	8001e4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800129c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	4823      	ldr	r0, [pc, #140]	@ (8001334 <MX_RTC_Init+0x118>)
 80012a6:	f008 fa49 	bl	800973c <HAL_RTC_SetTime>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80012b0:	f000 fdcc 	bl	8001e4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	4817      	ldr	r0, [pc, #92]	@ (8001334 <MX_RTC_Init+0x118>)
 80012d6:	f008 face 	bl	8009876 <HAL_RTC_SetDate>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80012e0:	f000 fdb4 	bl	8001e4c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001308:	2301      	movs	r3, #1
 800130a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800130e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2201      	movs	r2, #1
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_RTC_Init+0x118>)
 800131c:	f008 fb32 	bl	8009984 <HAL_RTC_SetAlarm>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001326:	f000 fd91 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3748      	adds	r7, #72	@ 0x48
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000274 	.word	0x20000274
 8001338:	40002800 	.word	0x40002800

0800133c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 8001342:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <MX_SDMMC1_SD_Init+0x3c>)
 8001344:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 128;
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <MX_SDMMC1_SD_Init+0x38>)
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000298 	.word	0x20000298
 8001378:	40012800 	.word	0x40012800

0800137c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <MX_SPI1_Init+0x74>)
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <MX_SPI1_Init+0x78>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_SPI1_Init+0x74>)
 8001388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_SPI1_Init+0x74>)
 8001396:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800139a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_SPI1_Init+0x74>)
 800139e:	2202      	movs	r2, #2
 80013a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013b2:	2228      	movs	r2, #40	@ 0x28
 80013b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013ca:	2207      	movs	r2, #7
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_SPI1_Init+0x74>)
 80013dc:	f009 fdc2 	bl	800af64 <HAL_SPI_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f000 fd31 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000364 	.word	0x20000364
 80013f4:	40013000 	.word	0x40013000

080013f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_SPI2_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <MX_SPI2_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_SPI2_Init+0x74>)
 8001404:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_SPI2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI2_Init+0x74>)
 8001412:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPI2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_SPI2_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPI2_Init+0x74>)
 8001426:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800142a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_SPI2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_SPI2_Init+0x74>)
 8001446:	2207      	movs	r2, #7
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_SPI2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPI2_Init+0x74>)
 8001452:	2208      	movs	r2, #8
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_SPI2_Init+0x74>)
 8001458:	f009 fd84 	bl	800af64 <HAL_SPI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001462:	f000 fcf3 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003c8 	.word	0x200003c8
 8001470:	40003800 	.word	0x40003800

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	@ 0x68
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	222c      	movs	r2, #44	@ 0x2c
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f010 fe1c 	bl	80120ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b4:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014b6:	4a44      	ldr	r2, [pc, #272]	@ (80015c8 <MX_TIM1_Init+0x154>)
 80014b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80014ba:	4b42      	ldr	r3, [pc, #264]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014bc:	2202      	movs	r2, #2
 80014be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32;
 80014c6:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014c8:	2220      	movs	r2, #32
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014de:	4839      	ldr	r0, [pc, #228]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014e0:	f00a fade 	bl	800baa0 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ea:	f000 fcaf 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014f8:	4619      	mov	r1, r3
 80014fa:	4832      	ldr	r0, [pc, #200]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80014fc:	f00a fdf4 	bl	800c0e8 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001506:	f000 fca1 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150a:	482e      	ldr	r0, [pc, #184]	@ (80015c4 <MX_TIM1_Init+0x150>)
 800150c:	f00a fb74 	bl	800bbf8 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001516:	f000 fc99 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800151a:	2340      	movs	r3, #64	@ 0x40
 800151c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001526:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800152a:	4619      	mov	r1, r3
 800152c:	4825      	ldr	r0, [pc, #148]	@ (80015c4 <MX_TIM1_Init+0x150>)
 800152e:	f00b fac1 	bl	800cab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001538:	f000 fc88 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	@ 0x60
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800154c:	2304      	movs	r3, #4
 800154e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	@ (80015c4 <MX_TIM1_Init+0x150>)
 8001562:	f00a fcad 	bl	800bec0 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800156c:	f000 fc6e 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80015a6:	f00b faeb 	bl	800cb80 <HAL_TIMEx_ConfigBreakDeadTime>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80015b0:	f000 fc4c 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b4:	4803      	ldr	r0, [pc, #12]	@ (80015c4 <MX_TIM1_Init+0x150>)
 80015b6:	f001 f803 	bl	80025c0 <HAL_TIM_MspPostInit>

}
 80015ba:	bf00      	nop
 80015bc:	3768      	adds	r7, #104	@ 0x68
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000042c 	.word	0x2000042c
 80015c8:	40012c00 	.word	0x40012c00

080015cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <MX_USART1_UART_Init+0x5c>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_USART1_UART_Init+0x58>)
 8001610:	f00b fb4c 	bl	800ccac <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800161a:	f000 fc17 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200004c0 	.word	0x200004c0
 8001628:	40013800 	.word	0x40013800

0800162c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	@ (8001688 <MX_USART2_UART_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART2_UART_Init+0x58>)
 8001670:	f00b fb1c 	bl	800ccac <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 fbe7 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000548 	.word	0x20000548
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <MX_USART3_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 8001698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_USART3_UART_Init+0x58>)
 80016d0:	f00b faec 	bl	800ccac <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 fbb7 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200005d0 	.word	0x200005d0
 80016e8:	40004800 	.word	0x40004800

080016ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <MX_DMA_Init+0xb0>)
 80016f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f6:	4a29      	ldr	r2, [pc, #164]	@ (800179c <MX_DMA_Init+0xb0>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <MX_DMA_Init+0xb0>)
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <MX_DMA_Init+0xb0>)
 800170c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <MX_DMA_Init+0xb0>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6493      	str	r3, [r2, #72]	@ 0x48
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_DMA_Init+0xb0>)
 8001718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2105      	movs	r1, #5
 8001726:	200c      	movs	r0, #12
 8001728:	f004 fb2e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800172c:	200c      	movs	r0, #12
 800172e:	f004 fb47 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2105      	movs	r1, #5
 8001736:	200d      	movs	r0, #13
 8001738:	f004 fb26 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800173c:	200d      	movs	r0, #13
 800173e:	f004 fb3f 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2105      	movs	r1, #5
 8001746:	200e      	movs	r0, #14
 8001748:	f004 fb1e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800174c:	200e      	movs	r0, #14
 800174e:	f004 fb37 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	200f      	movs	r0, #15
 8001758:	f004 fb16 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800175c:	200f      	movs	r0, #15
 800175e:	f004 fb2f 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	2010      	movs	r0, #16
 8001768:	f004 fb0e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800176c:	2010      	movs	r0, #16
 800176e:	f004 fb27 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2011      	movs	r0, #17
 8001778:	f004 fb06 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800177c:	2011      	movs	r0, #17
 800177e:	f004 fb1f 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	203b      	movs	r0, #59	@ 0x3b
 8001788:	f004 fafe 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800178c:	203b      	movs	r0, #59	@ 0x3b
 800178e:	f004 fb17 	bl	8005dc0 <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b45      	ldr	r3, [pc, #276]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a44      	ldr	r2, [pc, #272]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a3e      	ldr	r2, [pc, #248]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a38      	ldr	r2, [pc, #224]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <MX_GPIO_Init+0x12c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <MX_GPIO_Init+0x12c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a32      	ldr	r2, [pc, #200]	@ (80018cc <MX_GPIO_Init+0x12c>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <MX_GPIO_Init+0x12c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPS_RESET_Pin|RM92A_RESET_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2188      	movs	r1, #136	@ 0x88
 800181a:	482d      	ldr	r0, [pc, #180]	@ (80018d0 <MX_GPIO_Init+0x130>)
 800181c:	f005 f860 	bl	80068e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_Cs_Pin|CTRL_SENSE_Pin|CTRL_COMM_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2170      	movs	r1, #112	@ 0x70
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f005 f85a 	bl	80068e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BNO055_RESET_GPIO_Port, BNO055_RESET_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001832:	4828      	ldr	r0, [pc, #160]	@ (80018d4 <MX_GPIO_Init+0x134>)
 8001834:	f005 f854 	bl	80068e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_DET_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|GPS_INT_Pin;
 8001838:	f242 0304 	movw	r3, #8196	@ 0x2004
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4820      	ldr	r0, [pc, #128]	@ (80018d0 <MX_GPIO_Init+0x130>)
 800184e:	f004 fecd 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RESET_Pin RM92A_RESET_Pin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin|RM92A_RESET_Pin;
 8001852:	2388      	movs	r3, #136	@ 0x88
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4819      	ldr	r0, [pc, #100]	@ (80018d0 <MX_GPIO_Init+0x130>)
 800186a:	f004 febf 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_Cs_Pin CTRL_SENSE_Pin CTRL_COMM_Pin */
  GPIO_InitStruct.Pin = SPI1_Cs_Pin|CTRL_SENSE_Pin|CTRL_COMM_Pin;
 800186e:	2370      	movs	r3, #112	@ 0x70
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001888:	f004 feb0 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_SAFE_Pin */
  GPIO_InitStruct.Pin = GPS_SAFE_Pin;
 800188c:	2340      	movs	r3, #64	@ 0x40
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001890:	2303      	movs	r3, #3
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_SAFE_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <MX_GPIO_Init+0x130>)
 80018a0:	f004 fea4 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO055_RESET_Pin */
  GPIO_InitStruct.Pin = BNO055_RESET_Pin;
 80018a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BNO055_RESET_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_GPIO_Init+0x134>)
 80018be:	f004 fe95 	bl	80065ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000400 	.word	0x48000400

080018d8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e009      	b.n	80018fe <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fa44 	bl	8000d80 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf1      	blt.n	80018ea <_write+0x12>
  }
  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_Delay>:
void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    osDelay(Delay);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f00d fddd 	bl	800f4d8 <osDelay>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <HAL_UART_RxCpltCallback+0xa0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d111      	bne.n	8001962 <HAL_UART_RxCpltCallback+0x3a>
	{
		printf("%c", byte_uart_1);
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_UART_RxCpltCallback+0xa4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f010 fb6c 	bl	8012020 <putchar>
		xQueueSendToBackFromISR(messageHandlerQueue1Handle, &byte_uart_1, &xHigherPriorityTaskWoken);
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_UART_RxCpltCallback+0xa8>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	f107 020c 	add.w	r2, r7, #12
 8001950:	2300      	movs	r3, #0
 8001952:	491e      	ldr	r1, [pc, #120]	@ (80019cc <HAL_UART_RxCpltCallback+0xa4>)
 8001954:	f00e f97e 	bl	800fc54 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(huart, &byte_uart_1, 1);
 8001958:	2201      	movs	r2, #1
 800195a:	491c      	ldr	r1, [pc, #112]	@ (80019cc <HAL_UART_RxCpltCallback+0xa4>)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f00b fa7d 	bl	800ce5c <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_UART_RxCpltCallback+0xac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d10c      	bne.n	8001986 <HAL_UART_RxCpltCallback+0x5e>
	{
		xQueueSendToBackFromISR(messageHandlerQueue2Handle, &byte_uart_2, &xHigherPriorityTaskWoken);
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_UART_RxCpltCallback+0xb0>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f107 020c 	add.w	r2, r7, #12
 8001974:	2300      	movs	r3, #0
 8001976:	4919      	ldr	r1, [pc, #100]	@ (80019dc <HAL_UART_RxCpltCallback+0xb4>)
 8001978:	f00e f96c 	bl	800fc54 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(huart, &byte_uart_2, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	4917      	ldr	r1, [pc, #92]	@ (80019dc <HAL_UART_RxCpltCallback+0xb4>)
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f00b fa6b 	bl	800ce5c <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART3)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a15      	ldr	r2, [pc, #84]	@ (80019e0 <HAL_UART_RxCpltCallback+0xb8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d10c      	bne.n	80019aa <HAL_UART_RxCpltCallback+0x82>
	{
		xQueueSendToBackFromISR(messageHandlerQueue3Handle, &byte_uart_3, &xHigherPriorityTaskWoken);
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <HAL_UART_RxCpltCallback+0xbc>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f107 020c 	add.w	r2, r7, #12
 8001998:	2300      	movs	r3, #0
 800199a:	4913      	ldr	r1, [pc, #76]	@ (80019e8 <HAL_UART_RxCpltCallback+0xc0>)
 800199c:	f00e f95a 	bl	800fc54 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(huart, &byte_uart_3, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	4911      	ldr	r1, [pc, #68]	@ (80019e8 <HAL_UART_RxCpltCallback+0xc0>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f00b fa59 	bl	800ce5c <HAL_UART_Receive_IT>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <HAL_UART_RxCpltCallback+0x98>
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_UART_RxCpltCallback+0xc4>)
 80019b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	f3bf 8f6f 	isb	sy
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40013800 	.word	0x40013800
 80019cc:	20000748 	.word	0x20000748
 80019d0:	2000073c 	.word	0x2000073c
 80019d4:	40004400 	.word	0x40004400
 80019d8:	20000740 	.word	0x20000740
 80019dc:	20000749 	.word	0x20000749
 80019e0:	40004800 	.word	0x40004800
 80019e4:	20000744 	.word	0x20000744
 80019e8:	2000074a 	.word	0x2000074a
 80019ec:	e000ed04 	.word	0xe000ed04

080019f0 <BSP_SD_ReadBlocks_DMA>:

uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

  uint8_t sd_state = MSD_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
  HAL_DMA_Abort(&hdma_sdmmc1);
 8001a00:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <BSP_SD_ReadBlocks_DMA+0x50>)
 8001a02:	f004 fc87 	bl	8006314 <HAL_DMA_Abort>
  HAL_DMA_Abort(&hdma_sdmmc1);
 8001a06:	480e      	ldr	r0, [pc, #56]	@ (8001a40 <BSP_SD_ReadBlocks_DMA+0x50>)
 8001a08:	f004 fc84 	bl	8006314 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_sdmmc1);
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <BSP_SD_ReadBlocks_DMA+0x50>)
 8001a0e:	f004 fb8f 	bl	8006130 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_sdmmc1);
 8001a12:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <BSP_SD_ReadBlocks_DMA+0x50>)
 8001a14:	f004 fb8c 	bl	8006130 <HAL_DMA_DeInit>

  HAL_DMA_Init(&hdma_sdmmc1);
 8001a18:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <BSP_SD_ReadBlocks_DMA+0x50>)
 8001a1a:	f004 fad1 	bl	8005fc0 <HAL_DMA_Init>
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <BSP_SD_ReadBlocks_DMA+0x54>)
 8001a26:	f008 fa67 	bl	8009ef8 <HAL_SD_ReadBlocks_DMA>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <BSP_SD_ReadBlocks_DMA+0x44>
  {
    sd_state = MSD_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000031c 	.word	0x2000031c
 8001a44:	20000298 	.word	0x20000298

08001a48 <BSP_SD_WriteBlocks_DMA>:
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f004 f8d2 	bl	8005c00 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]
  HAL_DMA_Abort(&hdma_sdmmc1);
 8001a5e:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <BSP_SD_WriteBlocks_DMA+0x54>)
 8001a60:	f004 fc58 	bl	8006314 <HAL_DMA_Abort>
  HAL_DMA_Abort(&hdma_sdmmc1);
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <BSP_SD_WriteBlocks_DMA+0x54>)
 8001a66:	f004 fc55 	bl	8006314 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_sdmmc1);
 8001a6a:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <BSP_SD_WriteBlocks_DMA+0x54>)
 8001a6c:	f004 fb60 	bl	8006130 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_sdmmc1);
 8001a70:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <BSP_SD_WriteBlocks_DMA+0x54>)
 8001a72:	f004 fb5d 	bl	8006130 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  HAL_DMA_Init(&hdma_sdmmc1);
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <BSP_SD_WriteBlocks_DMA+0x54>)
 8001a78:	f004 faa2 	bl	8005fc0 <HAL_DMA_Init>
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <BSP_SD_WriteBlocks_DMA+0x58>)
 8001a84:	f008 fb00 	bl	800a088 <HAL_SD_WriteBlocks_DMA>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <BSP_SD_WriteBlocks_DMA+0x4a>
  {
    sd_state = MSD_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000031c 	.word	0x2000031c
 8001aa0:	20000298 	.word	0x20000298

08001aa4 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t received;
	BaseType_t result;
	HAL_UART_Receive_IT(&huart1, &byte_uart_1, 1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	492e      	ldr	r1, [pc, #184]	@ (8001b68 <StartMainTask+0xc4>)
 8001ab0:	482e      	ldr	r0, [pc, #184]	@ (8001b6c <StartMainTask+0xc8>)
 8001ab2:	f00b f9d3 	bl	800ce5c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &byte_uart_2, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	492d      	ldr	r1, [pc, #180]	@ (8001b70 <StartMainTask+0xcc>)
 8001aba:	482e      	ldr	r0, [pc, #184]	@ (8001b74 <StartMainTask+0xd0>)
 8001abc:	f00b f9ce 	bl	800ce5c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &byte_uart_3, 1);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	492d      	ldr	r1, [pc, #180]	@ (8001b78 <StartMainTask+0xd4>)
 8001ac4:	482d      	ldr	r0, [pc, #180]	@ (8001b7c <StartMainTask+0xd8>)
 8001ac6:	f00b f9c9 	bl	800ce5c <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  while(uxQueueMessagesWaiting( messageHandlerQueue1Handle )){
 8001aca:	e008      	b.n	8001ade <StartMainTask+0x3a>
		  result = xQueueReceive(messageHandlerQueue1Handle, &received, 10);
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <StartMainTask+0xdc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f107 010b 	add.w	r1, r7, #11
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00e f95a 	bl	800fd90 <xQueueReceive>
 8001adc:	60f8      	str	r0, [r7, #12]
	  while(uxQueueMessagesWaiting( messageHandlerQueue1Handle )){
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <StartMainTask+0xdc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00e fa36 	bl	800ff54 <uxQueueMessagesWaiting>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ee      	bne.n	8001acc <StartMainTask+0x28>
		  if(result == pdPASS){

		  }
	  }
	  while(uxQueueMessagesWaiting( messageHandlerQueue2Handle )){
 8001aee:	e00f      	b.n	8001b10 <StartMainTask+0x6c>
		  result = xQueueReceive(messageHandlerQueue2Handle, &received, 10);
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <StartMainTask+0xe0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f107 010b 	add.w	r1, r7, #11
 8001af8:	220a      	movs	r2, #10
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00e f948 	bl	800fd90 <xQueueReceive>
 8001b00:	60f8      	str	r0, [r7, #12]
		  if(result == pdPASS){
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d103      	bne.n	8001b10 <StartMainTask+0x6c>
			  printf("%c", received);
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f010 fa88 	bl	8012020 <putchar>
	  while(uxQueueMessagesWaiting( messageHandlerQueue2Handle )){
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <StartMainTask+0xe0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00e fa1d 	bl	800ff54 <uxQueueMessagesWaiting>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e7      	bne.n	8001af0 <StartMainTask+0x4c>
		  }
	  }
	  while(uxQueueMessagesWaiting( messageHandlerQueue3Handle )){
 8001b20:	e00f      	b.n	8001b42 <StartMainTask+0x9e>
		  result = xQueueReceive(messageHandlerQueue3Handle, &received, 10);
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <StartMainTask+0xe4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f107 010b 	add.w	r1, r7, #11
 8001b2a:	220a      	movs	r2, #10
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00e f92f 	bl	800fd90 <xQueueReceive>
 8001b32:	60f8      	str	r0, [r7, #12]
		  if(result == pdPASS){
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d103      	bne.n	8001b42 <StartMainTask+0x9e>
		    if(feed_nmea(received) == 0)
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fb3b 	bl	80041b8 <feed_nmea>
	  while(uxQueueMessagesWaiting( messageHandlerQueue3Handle )){
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <StartMainTask+0xe4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00e fa04 	bl	800ff54 <uxQueueMessagesWaiting>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1e7      	bne.n	8001b22 <StartMainTask+0x7e>
		    {
		    }
		  }
	  }
    taskENTER_CRITICAL();
 8001b52:	f00f ff79 	bl	8011a48 <vPortEnterCritical>
    if(read_env_data() == 0)
 8001b56:	f002 fb23 	bl	80041a0 <read_env_data>
    {

    }
    taskEXIT_CRITICAL();
 8001b5a:	f00f ffa7 	bl	8011aac <vPortExitCritical>
    osDelay(100);
 8001b5e:	2064      	movs	r0, #100	@ 0x64
 8001b60:	f00d fcba 	bl	800f4d8 <osDelay>
	  while(uxQueueMessagesWaiting( messageHandlerQueue1Handle )){
 8001b64:	e7bb      	b.n	8001ade <StartMainTask+0x3a>
 8001b66:	bf00      	nop
 8001b68:	20000748 	.word	0x20000748
 8001b6c:	200004c0 	.word	0x200004c0
 8001b70:	20000749 	.word	0x20000749
 8001b74:	20000548 	.word	0x20000548
 8001b78:	2000074a 	.word	0x2000074a
 8001b7c:	200005d0 	.word	0x200005d0
 8001b80:	2000073c 	.word	0x2000073c
 8001b84:	20000740 	.word	0x20000740
 8001b88:	20000744 	.word	0x20000744

08001b8c <SaveFile>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SaveFile */
void SaveFile(void *argument)
{
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	ed2d 8b02 	vpush	{d8}
 8001b92:	b0bd      	sub	sp, #244	@ 0xf4
 8001b94:	af0e      	add	r7, sp, #56	@ 0x38
 8001b96:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN SaveFile */
  uint8_t put_txt[128];
  ///init_sd();
  lora_init();
 8001b98:	f003 fa6a 	bl	8005070 <lora_init>

  /* Infinite loop */
  for(;;)
  {
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001b9c:	4b93      	ldr	r3, [pc, #588]	@ (8001dec <SaveFile+0x260>)
 8001b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
			  gnss_data.recent_timestamp,
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.latitude), 100),
 8001ba4:	4892      	ldr	r0, [pc, #584]	@ (8001df0 <SaveFile+0x264>)
 8001ba6:	f7ff f913 	bl	8000dd0 <minmea_tofloat>
 8001baa:	eef0 7a40 	vmov.f32	s15, s0
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001bae:	eebd 8ae7 	vcvt.s32.f32	s16, s15
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.latitude), 100),
 8001bb2:	488f      	ldr	r0, [pc, #572]	@ (8001df0 <SaveFile+0x264>)
 8001bb4:	f7ff f90c 	bl	8000dd0 <minmea_tofloat>
 8001bb8:	eef0 7a40 	vmov.f32	s15, s0
 8001bbc:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001df4 <SaveFile+0x268>
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 3a90 	vmov	r3, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8001df8 <SaveFile+0x26c>)
 8001bce:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd2:	1151      	asrs	r1, r2, #5
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	1a8d      	subs	r5, r1, r2
 8001bd8:	2264      	movs	r2, #100	@ 0x64
 8001bda:	fb05 f202 	mul.w	r2, r5, r2
 8001bde:	1a9d      	subs	r5, r3, r2
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.longitude), 100),
 8001be0:	4886      	ldr	r0, [pc, #536]	@ (8001dfc <SaveFile+0x270>)
 8001be2:	f7ff f8f5 	bl	8000dd0 <minmea_tofloat>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.longitude), 100),
 8001bf2:	4882      	ldr	r0, [pc, #520]	@ (8001dfc <SaveFile+0x270>)
 8001bf4:	f7ff f8ec 	bl	8000dd0 <minmea_tofloat>
 8001bf8:	eef0 7a40 	vmov.f32	s15, s0
 8001bfc:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001df4 <SaveFile+0x268>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001c0c:	4a7a      	ldr	r2, [pc, #488]	@ (8001df8 <SaveFile+0x26c>)
 8001c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c12:	1151      	asrs	r1, r2, #5
 8001c14:	17da      	asrs	r2, r3, #31
 8001c16:	1a8e      	subs	r6, r1, r2
 8001c18:	2264      	movs	r2, #100	@ 0x64
 8001c1a:	fb06 f202 	mul.w	r2, r6, r2
 8001c1e:	1a9e      	subs	r6, r3, r2
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.altitude), 100),
 8001c20:	4877      	ldr	r0, [pc, #476]	@ (8001e00 <SaveFile+0x274>)
 8001c22:	f7ff f8d5 	bl	8000dd0 <minmea_tofloat>
 8001c26:	eef0 7a40 	vmov.f32	s15, s0
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	edc7 7a08 	vstr	s15, [r7, #32]
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gga.altitude), 100),
 8001c32:	4873      	ldr	r0, [pc, #460]	@ (8001e00 <SaveFile+0x274>)
 8001c34:	f7ff f8cc 	bl	8000dd0 <minmea_tofloat>
 8001c38:	eef0 7a40 	vmov.f32	s15, s0
 8001c3c:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001df4 <SaveFile+0x268>
 8001c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001df8 <SaveFile+0x26c>)
 8001c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c52:	1151      	asrs	r1, r2, #5
 8001c54:	17da      	asrs	r2, r3, #31
 8001c56:	1a89      	subs	r1, r1, r2
 8001c58:	2264      	movs	r2, #100	@ 0x64
 8001c5a:	fb01 f202 	mul.w	r2, r1, r2
 8001c5e:	1a99      	subs	r1, r3, r2
 8001c60:	61f9      	str	r1, [r7, #28]
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gsa.hdop), 100),
 8001c62:	4868      	ldr	r0, [pc, #416]	@ (8001e04 <SaveFile+0x278>)
 8001c64:	f7ff f8b4 	bl	8000dd0 <minmea_tofloat>
 8001c68:	eef0 7a40 	vmov.f32	s15, s0
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c70:	edc7 7a06 	vstr	s15, [r7, #24]
			  PSEUDO_FLOAT_PRINT(minmea_tofloat(&gnss_data.gsa.hdop), 100),
 8001c74:	4863      	ldr	r0, [pc, #396]	@ (8001e04 <SaveFile+0x278>)
 8001c76:	f7ff f8ab 	bl	8000dd0 <minmea_tofloat>
 8001c7a:	eef0 7a40 	vmov.f32	s15, s0
 8001c7e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001df4 <SaveFile+0x268>
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8a:	ee17 3a90 	vmov	r3, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001df8 <SaveFile+0x26c>)
 8001c90:	fb82 1203 	smull	r1, r2, r2, r3
 8001c94:	1151      	asrs	r1, r2, #5
 8001c96:	17da      	asrs	r2, r3, #31
 8001c98:	1a88      	subs	r0, r1, r2
 8001c9a:	2264      	movs	r2, #100	@ 0x64
 8001c9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ca0:	1a98      	subs	r0, r3, r2
 8001ca2:	6178      	str	r0, [r7, #20]
 8001ca4:	4b58      	ldr	r3, [pc, #352]	@ (8001e08 <SaveFile+0x27c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	613b      	str	r3, [r7, #16]
			  env_data.timestamp,
			  PSEUDO_FLOAT_PRINT(env_data.temp, 100),
 8001caa:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <SaveFile+0x27c>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb4:	edc7 7a03 	vstr	s15, [r7, #12]
			  PSEUDO_FLOAT_PRINT(env_data.temp, 100),
 8001cb8:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <SaveFile+0x27c>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001df4 <SaveFile+0x268>
 8001cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001cce:	4a4a      	ldr	r2, [pc, #296]	@ (8001df8 <SaveFile+0x26c>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1151      	asrs	r1, r2, #5
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	4610      	mov	r0, r2
 8001cdc:	2264      	movs	r2, #100	@ 0x64
 8001cde:	fb00 f202 	mul.w	r2, r0, r2
 8001ce2:	1a9a      	subs	r2, r3, r2
 8001ce4:	60ba      	str	r2, [r7, #8]
			  PSEUDO_FLOAT_PRINT(env_data.hum, 100),
 8001ce6:	4b48      	ldr	r3, [pc, #288]	@ (8001e08 <SaveFile+0x27c>)
 8001ce8:	edd3 7a02 	vldr	s15, [r3, #8]
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf0:	edc7 7a01 	vstr	s15, [r7, #4]
			  PSEUDO_FLOAT_PRINT(env_data.hum, 100),
 8001cf4:	4b44      	ldr	r3, [pc, #272]	@ (8001e08 <SaveFile+0x27c>)
 8001cf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cfa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001df4 <SaveFile+0x268>
 8001cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d06:	ee17 1a90 	vmov	r1, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <SaveFile+0x26c>)
 8001d0c:	fb83 2301 	smull	r2, r3, r3, r1
 8001d10:	115a      	asrs	r2, r3, #5
 8001d12:	17cb      	asrs	r3, r1, #31
 8001d14:	1ad4      	subs	r4, r2, r3
 8001d16:	2364      	movs	r3, #100	@ 0x64
 8001d18:	fb04 f303 	mul.w	r3, r4, r3
 8001d1c:	1acc      	subs	r4, r1, r3
			  PSEUDO_FLOAT_PRINT(env_data.press, 100));
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <SaveFile+0x27c>)
 8001d20:	edd3 7a01 	vldr	s15, [r3, #4]
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d28:	edc7 7a00 	vstr	s15, [r7]
			  PSEUDO_FLOAT_PRINT(env_data.press, 100));
 8001d2c:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <SaveFile+0x27c>)
 8001d2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d32:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001df4 <SaveFile+0x268>
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3e:	ee17 1a90 	vmov	r1, s15
	  size_t written = sprintf(&put_txt, "%ld, %d.%d, %d.%d, %d.%d, %d.%d, %ld, %d.%d, %d.%d, %d.%d \r\n",
 8001d42:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <SaveFile+0x26c>)
 8001d44:	fb83 2301 	smull	r2, r3, r3, r1
 8001d48:	115a      	asrs	r2, r3, #5
 8001d4a:	17cb      	asrs	r3, r1, #31
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2264      	movs	r2, #100	@ 0x64
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001d5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	910c      	str	r1, [sp, #48]	@ 0x30
 8001d60:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001d62:	687c      	ldr	r4, [r7, #4]
 8001d64:	940a      	str	r4, [sp, #40]	@ 0x28
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	9208      	str	r2, [sp, #32]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	9307      	str	r3, [sp, #28]
 8001d72:	697c      	ldr	r4, [r7, #20]
 8001d74:	9406      	str	r4, [sp, #24]
 8001d76:	69bc      	ldr	r4, [r7, #24]
 8001d78:	9405      	str	r4, [sp, #20]
 8001d7a:	69f9      	ldr	r1, [r7, #28]
 8001d7c:	9104      	str	r1, [sp, #16]
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	9103      	str	r1, [sp, #12]
 8001d82:	9602      	str	r6, [sp, #8]
 8001d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d86:	9101      	str	r1, [sp, #4]
 8001d88:	9500      	str	r5, [sp, #0]
 8001d8a:	ee18 3a10 	vmov	r3, s16
 8001d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d90:	491e      	ldr	r1, [pc, #120]	@ (8001e0c <SaveFile+0x280>)
 8001d92:	f00f ffdf 	bl	8011d54 <siprintf>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    ///write_line(put_txt, written);
	for(int i = 0; i < written; i++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da2:	e017      	b.n	8001dd4 <SaveFile+0x248>
		printf("%c", put_txt[i]);
 8001da4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f010 f935 	bl	8012020 <putchar>
	  lora_send("%c", put_txt[i]);
 8001db6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <SaveFile+0x284>)
 8001dc6:	f003 f99d 	bl	8005104 <lora_send>
	for(int i = 0; i < written; i++){
 8001dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8e1      	bhi.n	8001da4 <SaveFile+0x218>
	}
    osDelay(1000);
 8001de0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001de4:	f00d fb78 	bl	800f4d8 <osDelay>
  {
 8001de8:	e6d8      	b.n	8001b9c <SaveFile+0x10>
 8001dea:	bf00      	nop
 8001dec:	20000840 	.word	0x20000840
 8001df0:	200008a4 	.word	0x200008a4
 8001df4:	42c80000 	.word	0x42c80000
 8001df8:	51eb851f 	.word	0x51eb851f
 8001dfc:	200008ac 	.word	0x200008ac
 8001e00:	200008c4 	.word	0x200008c4
 8001e04:	20000880 	.word	0x20000880
 8001e08:	200007dc 	.word	0x200007dc
 8001e0c:	08013034 	.word	0x08013034
 8001e10:	08013074 	.word	0x08013074

08001e14 <DownLink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DownLink */
void DownLink(void *argument)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DownLink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(3000);
 8001e1c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e20:	f00d fb5a 	bl	800f4d8 <osDelay>
 8001e24:	e7fa      	b.n	8001e1c <DownLink+0x8>
	...

08001e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e3a:	f003 fecd 	bl	8005bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40001000 	.word	0x40001000

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <Error_Handler+0x8>

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	4a10      	ldr	r2, [pc, #64]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	210f      	movs	r1, #15
 8001e92:	f06f 0001 	mvn.w	r0, #1
 8001e96:	f003 ff77 	bl	8005d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_CRC_MspInit+0x38>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_CRC_MspInit+0x3c>)
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <HAL_CRC_MspInit+0x3c>)
 8001ec0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ec4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_CRC_MspInit+0x3c>)
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023000 	.word	0x40023000
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0a4      	sub	sp, #144	@ 0x90
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f00:	f107 0320 	add.w	r3, r7, #32
 8001f04:	225c      	movs	r2, #92	@ 0x5c
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f010 f8ef 	bl	80120ec <memset>
  if(hi2c->Instance==I2C1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a8f      	ldr	r2, [pc, #572]	@ (8002150 <HAL_I2C_MspInit+0x268>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	f040 8096 	bne.w	8002046 <HAL_I2C_MspInit+0x15e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f1a:	2340      	movs	r3, #64	@ 0x40
 8001f1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4618      	mov	r0, r3
 8001f28:	f006 fb24 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f32:	f7ff ff8b 	bl	8001e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b87      	ldr	r3, [pc, #540]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4a86      	ldr	r2, [pc, #536]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f42:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f4e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f54:	2312      	movs	r3, #18
 8001f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f66:	2304      	movs	r3, #4
 8001f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001f70:	4619      	mov	r1, r3
 8001f72:	4879      	ldr	r0, [pc, #484]	@ (8002158 <HAL_I2C_MspInit+0x270>)
 8001f74:	f004 fb3a 	bl	80065ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f84:	4b73      	ldr	r3, [pc, #460]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001f90:	4b72      	ldr	r3, [pc, #456]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001f92:	4a73      	ldr	r2, [pc, #460]	@ (8002160 <HAL_I2C_MspInit+0x278>)
 8001f94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001f96:	4b71      	ldr	r3, [pc, #452]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001f98:	2203      	movs	r2, #3
 8001f9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fae:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb4:	4b69      	ldr	r3, [pc, #420]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001fba:	4b68      	ldr	r3, [pc, #416]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc0:	4b66      	ldr	r3, [pc, #408]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001fc6:	4865      	ldr	r0, [pc, #404]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fc8:	f003 fffa 	bl	8005fc0 <HAL_DMA_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8001fd2:	f7ff ff3b 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a60      	ldr	r2, [pc, #384]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fdc:	4a5f      	ldr	r2, [pc, #380]	@ (800215c <HAL_I2C_MspInit+0x274>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001fe2:	4b60      	ldr	r3, [pc, #384]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8001fe4:	4a60      	ldr	r2, [pc, #384]	@ (8002168 <HAL_I2C_MspInit+0x280>)
 8001fe6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8001fea:	2203      	movs	r2, #3
 8001fec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fee:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8001ffc:	2280      	movs	r2, #128	@ 0x80
 8001ffe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002000:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002006:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800200c:	4b55      	ldr	r3, [pc, #340]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002018:	4852      	ldr	r0, [pc, #328]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 800201a:	f003 ffd1 	bl	8005fc0 <HAL_DMA_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8002024:	f7ff ff12 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 800202c:	639a      	str	r2, [r3, #56]	@ 0x38
 800202e:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_I2C_MspInit+0x27c>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2105      	movs	r1, #5
 8002038:	2020      	movs	r0, #32
 800203a:	f003 fea5 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800203e:	2020      	movs	r0, #32
 8002040:	f003 febe 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002044:	e080      	b.n	8002148 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a48      	ldr	r2, [pc, #288]	@ (800216c <HAL_I2C_MspInit+0x284>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d13b      	bne.n	80020c8 <HAL_I2C_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002054:	2300      	movs	r3, #0
 8002056:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	4618      	mov	r0, r3
 800205e:	f006 fa89 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_MspInit+0x184>
      Error_Handler();
 8002068:	f7ff fef0 	bl	8001e4c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	4a38      	ldr	r2, [pc, #224]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002078:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002084:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002088:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209c:	2304      	movs	r3, #4
 800209e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80020a6:	4619      	mov	r1, r3
 80020a8:	482b      	ldr	r0, [pc, #172]	@ (8002158 <HAL_I2C_MspInit+0x270>)
 80020aa:	f004 fa9f 	bl	80065ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a28      	ldr	r2, [pc, #160]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	e03f      	b.n	8002148 <HAL_I2C_MspInit+0x260>
  else if(hi2c->Instance==I2C3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a28      	ldr	r2, [pc, #160]	@ (8002170 <HAL_I2C_MspInit+0x288>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d13a      	bne.n	8002148 <HAL_I2C_MspInit+0x260>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020d8:	2300      	movs	r3, #0
 80020da:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	4618      	mov	r0, r3
 80020e2:	f006 fa47 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_MspInit+0x208>
      Error_Handler();
 80020ec:	f7ff feae 	bl	8001e4c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002108:	2303      	movs	r3, #3
 800210a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800211e:	2304      	movs	r3, #4
 8002120:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002128:	4619      	mov	r1, r3
 800212a:	4812      	ldr	r0, [pc, #72]	@ (8002174 <HAL_I2C_MspInit+0x28c>)
 800212c:	f004 fa5e 	bl	80065ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 8002136:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_I2C_MspInit+0x26c>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
}
 8002148:	bf00      	nop
 800214a:	3790      	adds	r7, #144	@ 0x90
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40005400 	.word	0x40005400
 8002154:	40021000 	.word	0x40021000
 8002158:	48000400 	.word	0x48000400
 800215c:	200001ac 	.word	0x200001ac
 8002160:	40020080 	.word	0x40020080
 8002164:	200001f4 	.word	0x200001f4
 8002168:	4002006c 	.word	0x4002006c
 800216c:	40005800 	.word	0x40005800
 8002170:	40005c00 	.word	0x40005c00
 8002174:	48000800 	.word	0x48000800

08002178 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0a0      	sub	sp, #128	@ 0x80
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	225c      	movs	r2, #92	@ 0x5c
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f00f ffa7 	bl	80120ec <memset>
  if(hlptim->Instance==LPTIM2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_LPTIM_MspInit+0xa8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d136      	bne.n	8002216 <HAL_LPTIM_MspInit+0x9e>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80021a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f006 f9dc 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80021c2:	f7ff fe43 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_LPTIM_MspInit+0xac>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM2 GPIO Configuration
    PB1     ------> LPTIM2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021f6:	2302      	movs	r3, #2
 80021f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8002206:	230e      	movs	r3, #14
 8002208:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	@ (8002228 <HAL_LPTIM_MspInit+0xb0>)
 8002212:	f004 f9eb 	bl	80065ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3780      	adds	r7, #128	@ 0x80
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40009400 	.word	0x40009400
 8002224:	40021000 	.word	0x40021000
 8002228:	48000400 	.word	0x48000400

0800222c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b09a      	sub	sp, #104	@ 0x68
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	225c      	movs	r2, #92	@ 0x5c
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00f ff55 	bl	80120ec <memset>
  if(hrtc->Instance==RTC)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <HAL_RTC_MspInit+0x58>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d117      	bne.n	800227c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800224c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002250:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002256:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4618      	mov	r0, r3
 800225e:	f006 f989 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002268:	f7ff fdf0 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_RTC_MspInit+0x5c>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <HAL_RTC_MspInit+0x5c>)
 8002274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3768      	adds	r7, #104	@ 0x68
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40002800 	.word	0x40002800
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0a2      	sub	sp, #136	@ 0x88
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	225c      	movs	r2, #92	@ 0x5c
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00f ff1d 	bl	80120ec <memset>
  if(hsd->Instance==SDMMC1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4d      	ldr	r2, [pc, #308]	@ (80023ec <HAL_SD_MspInit+0x160>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	f040 8092 	bne.w	80023e2 <HAL_SD_MspInit+0x156>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80022be:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80022c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 80022c4:	2300      	movs	r3, #0
 80022c6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f006 f951 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80022d8:	f7ff fdb8 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022dc:	4b44      	ldr	r3, [pc, #272]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e0:	4a43      	ldr	r2, [pc, #268]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e8:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a3d      	ldr	r2, [pc, #244]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002300:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230c:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002310:	4a37      	ldr	r2, [pc, #220]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002318:	4b35      	ldr	r3, [pc, #212]	@ (80023f0 <HAL_SD_MspInit+0x164>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002324:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002328:	677b      	str	r3, [r7, #116]	@ 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002338:	230c      	movs	r3, #12
 800233a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002342:	4619      	mov	r1, r3
 8002344:	482b      	ldr	r0, [pc, #172]	@ (80023f4 <HAL_SD_MspInit+0x168>)
 8002346:	f004 f951 	bl	80065ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234a:	2304      	movs	r3, #4
 800234c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800235c:	230c      	movs	r3, #12
 800235e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002362:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002366:	4619      	mov	r1, r3
 8002368:	4823      	ldr	r0, [pc, #140]	@ (80023f8 <HAL_SD_MspInit+0x16c>)
 800236a:	f004 f93f 	bl	80065ec <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 800236e:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <HAL_SD_MspInit+0x170>)
 8002370:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <HAL_SD_MspInit+0x174>)
 8002372:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <HAL_SD_MspInit+0x170>)
 8002376:	2207      	movs	r2, #7
 8002378:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_SD_MspInit+0x170>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002380:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <HAL_SD_MspInit+0x170>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_SD_MspInit+0x170>)
 8002388:	2280      	movs	r2, #128	@ 0x80
 800238a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_SD_MspInit+0x170>)
 800238e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002392:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_SD_MspInit+0x170>)
 8002396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800239a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <HAL_SD_MspInit+0x170>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 80023aa:	4814      	ldr	r0, [pc, #80]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023ac:	f003 fe08 	bl	8005fc0 <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_SD_MspInit+0x12e>
    {
      Error_Handler();
 80023b6:	f7ff fd49 	bl	8001e4c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40
 80023c0:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023cc:	4a0b      	ldr	r2, [pc, #44]	@ (80023fc <HAL_SD_MspInit+0x170>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2031      	movs	r0, #49	@ 0x31
 80023d8:	f003 fcd6 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80023dc:	2031      	movs	r0, #49	@ 0x31
 80023de:	f003 fcef 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3788      	adds	r7, #136	@ 0x88
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40012800 	.word	0x40012800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	2000031c 	.word	0x2000031c
 8002400:	40020444 	.word	0x40020444

08002404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	@ 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_SPI_MspInit+0x114>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d145      	bne.n	80024b2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	4a3c      	ldr	r2, [pc, #240]	@ (800251c <HAL_SPI_MspInit+0x118>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002430:	6613      	str	r3, [r2, #96]	@ 0x60
 8002432:	4b3a      	ldr	r3, [pc, #232]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b37      	ldr	r3, [pc, #220]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	4a36      	ldr	r2, [pc, #216]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244a:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HAL_SPI_MspInit+0x118>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a30      	ldr	r2, [pc, #192]	@ (800251c <HAL_SPI_MspInit+0x118>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <HAL_SPI_MspInit+0x118>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800246e:	2302      	movs	r3, #2
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247e:	2305      	movs	r3, #5
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248c:	f004 f8ae 	bl	80065ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002490:	2330      	movs	r3, #48	@ 0x30
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a0:	2305      	movs	r3, #5
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	481d      	ldr	r0, [pc, #116]	@ (8002520 <HAL_SPI_MspInit+0x11c>)
 80024ac:	f004 f89e 	bl	80065ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024b0:	e02d      	b.n	800250e <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_SPI_MspInit+0x120>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d128      	bne.n	800250e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	4a16      	ldr	r2, [pc, #88]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d8:	4a10      	ldr	r2, [pc, #64]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e0:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_SPI_MspInit+0x118>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024ec:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024fe:	2305      	movs	r3, #5
 8002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	@ (8002520 <HAL_SPI_MspInit+0x11c>)
 800250a:	f004 f86f 	bl	80065ec <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3730      	adds	r7, #48	@ 0x30
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40013000 	.word	0x40013000
 800251c:	40021000 	.word	0x40021000
 8002520:	48000400 	.word	0x48000400
 8002524:	40003800 	.word	0x40003800

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_TIM_Base_MspInit+0x88>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d135      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_TIM_Base_MspInit+0x8c>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002540:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002544:	6613      	str	r3, [r2, #96]	@ 0x60
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_TIM_Base_MspInit+0x8c>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <HAL_TIM_Base_MspInit+0x94>)
 8002556:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 800255a:	2207      	movs	r2, #7
 800255c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002576:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002580:	2220      	movs	r2, #32
 8002582:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800258a:	480b      	ldr	r0, [pc, #44]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 800258c:	f003 fd18 	bl	8005fc0 <HAL_DMA_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8002596:	f7ff fc59 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
 80025a0:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_TIM_Base_MspInit+0x90>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	20000478 	.word	0x20000478
 80025bc:	4002001c 	.word	0x4002001c

080025c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <HAL_TIM_MspPostInit+0x68>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d11d      	bne.n	800261e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	4a11      	ldr	r2, [pc, #68]	@ (800262c <HAL_TIM_MspPostInit+0x6c>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <HAL_TIM_MspPostInit+0x6c>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261a:	f003 ffe7 	bl	80065ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0a4      	sub	sp, #144	@ 0x90
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002648:	f107 0320 	add.w	r3, r7, #32
 800264c:	225c      	movs	r2, #92	@ 0x5c
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00f fd4b 	bl	80120ec <memset>
  if(huart->Instance==USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4aac      	ldr	r2, [pc, #688]	@ (800290c <HAL_UART_MspInit+0x2dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	f040 8097 	bne.w	8002790 <HAL_UART_MspInit+0x160>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002662:	2301      	movs	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	4618      	mov	r0, r3
 8002670:	f005 ff80 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800267a:	f7ff fbe7 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267e:	4ba4      	ldr	r3, [pc, #656]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	4aa3      	ldr	r2, [pc, #652]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002688:	6613      	str	r3, [r2, #96]	@ 0x60
 800268a:	4ba1      	ldr	r3, [pc, #644]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	4b9e      	ldr	r3, [pc, #632]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	4a9d      	ldr	r2, [pc, #628]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a2:	4b9b      	ldr	r3, [pc, #620]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026ae:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80026b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c6:	2307      	movs	r3, #7
 80026c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d6:	f003 ff89 	bl	80065ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026da:	4b8e      	ldr	r3, [pc, #568]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002918 <HAL_UART_MspInit+0x2e8>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80026e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026e2:	2202      	movs	r2, #2
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b89      	ldr	r3, [pc, #548]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f8:	4b86      	ldr	r3, [pc, #536]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fe:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002704:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002710:	4880      	ldr	r0, [pc, #512]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 8002712:	f003 fc55 	bl	8005fc0 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800271c:	f7ff fb96 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a7c      	ldr	r2, [pc, #496]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 8002724:	675a      	str	r2, [r3, #116]	@ 0x74
 8002726:	4a7b      	ldr	r2, [pc, #492]	@ (8002914 <HAL_UART_MspInit+0x2e4>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800272c:	4b7b      	ldr	r3, [pc, #492]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 800272e:	4a7c      	ldr	r2, [pc, #496]	@ (8002920 <HAL_UART_MspInit+0x2f0>)
 8002730:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002732:	4b7a      	ldr	r3, [pc, #488]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002734:	2202      	movs	r2, #2
 8002736:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002738:	4b78      	ldr	r3, [pc, #480]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 800273a:	2210      	movs	r2, #16
 800273c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273e:	4b77      	ldr	r3, [pc, #476]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	4b75      	ldr	r3, [pc, #468]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800274a:	4b74      	ldr	r3, [pc, #464]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002750:	4b72      	ldr	r3, [pc, #456]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002756:	4b71      	ldr	r3, [pc, #452]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800275c:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 800275e:	2200      	movs	r2, #0
 8002760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002762:	486e      	ldr	r0, [pc, #440]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002764:	f003 fc2c 	bl	8005fc0 <HAL_DMA_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800276e:	f7ff fb6d 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a69      	ldr	r2, [pc, #420]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 8002776:	671a      	str	r2, [r3, #112]	@ 0x70
 8002778:	4a68      	ldr	r2, [pc, #416]	@ (800291c <HAL_UART_MspInit+0x2ec>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2105      	movs	r1, #5
 8002782:	2025      	movs	r0, #37	@ 0x25
 8002784:	f003 fb00 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002788:	2025      	movs	r0, #37	@ 0x25
 800278a:	f003 fb19 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800278e:	e0b8      	b.n	8002902 <HAL_UART_MspInit+0x2d2>
  else if(huart->Instance==USART2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a63      	ldr	r2, [pc, #396]	@ (8002924 <HAL_UART_MspInit+0x2f4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d143      	bne.n	8002822 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800279e:	2300      	movs	r3, #0
 80027a0:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a2:	f107 0320 	add.w	r3, r7, #32
 80027a6:	4618      	mov	r0, r3
 80027a8:	f005 fee4 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0x186>
      Error_Handler();
 80027b2:	f7ff fb4b 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b6:	4b56      	ldr	r3, [pc, #344]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	4a55      	ldr	r2, [pc, #340]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c2:	4b53      	ldr	r3, [pc, #332]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027da:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027e6:	230c      	movs	r3, #12
 80027e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fc:	2307      	movs	r3, #7
 80027fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002806:	4619      	mov	r1, r3
 8002808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280c:	f003 feee 	bl	80065ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2105      	movs	r1, #5
 8002814:	2026      	movs	r0, #38	@ 0x26
 8002816:	f003 fab7 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800281a:	2026      	movs	r0, #38	@ 0x26
 800281c:	f003 fad0 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
}
 8002820:	e06f      	b.n	8002902 <HAL_UART_MspInit+0x2d2>
  else if(huart->Instance==USART3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a40      	ldr	r2, [pc, #256]	@ (8002928 <HAL_UART_MspInit+0x2f8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d16a      	bne.n	8002902 <HAL_UART_MspInit+0x2d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800282c:	2304      	movs	r3, #4
 800282e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	f107 0320 	add.w	r3, r7, #32
 8002838:	4618      	mov	r0, r3
 800283a:	f005 fe9b 	bl	8008574 <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002844:	f7ff fb02 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002848:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	4a30      	ldr	r2, [pc, #192]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 800284e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002852:	6593      	str	r3, [r2, #88]	@ 0x58
 8002854:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a2a      	ldr	r2, [pc, #168]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286c:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <HAL_UART_MspInit+0x2e0>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002878:	2330      	movs	r3, #48	@ 0x30
 800287a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800288e:	2307      	movs	r3, #7
 8002890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002894:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002898:	4619      	mov	r1, r3
 800289a:	4824      	ldr	r0, [pc, #144]	@ (800292c <HAL_UART_MspInit+0x2fc>)
 800289c:	f003 fea6 	bl	80065ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80028a0:	4b23      	ldr	r3, [pc, #140]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028a2:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <HAL_UART_MspInit+0x304>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80028a6:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028a8:	2202      	movs	r2, #2
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ac:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028be:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028d0:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028d6:	4816      	ldr	r0, [pc, #88]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028d8:	f003 fb72 	bl	8005fc0 <HAL_DMA_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 80028e2:	f7ff fab3 	bl	8001e4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a11      	ldr	r2, [pc, #68]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028ea:	675a      	str	r2, [r3, #116]	@ 0x74
 80028ec:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_UART_MspInit+0x300>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2105      	movs	r1, #5
 80028f6:	2027      	movs	r0, #39	@ 0x27
 80028f8:	f003 fa46 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028fc:	2027      	movs	r0, #39	@ 0x27
 80028fe:	f003 fa5f 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3790      	adds	r7, #144	@ 0x90
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40013800 	.word	0x40013800
 8002910:	40021000 	.word	0x40021000
 8002914:	20000658 	.word	0x20000658
 8002918:	40020058 	.word	0x40020058
 800291c:	200006a0 	.word	0x200006a0
 8002920:	40020044 	.word	0x40020044
 8002924:	40004400 	.word	0x40004400
 8002928:	40004800 	.word	0x40004800
 800292c:	48000800 	.word	0x48000800
 8002930:	200006e8 	.word	0x200006e8
 8002934:	40020030 	.word	0x40020030

08002938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	@ 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002946:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <HAL_InitTick+0xe0>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a33      	ldr	r2, [pc, #204]	@ (8002a18 <HAL_InitTick+0xe0>)
 800294c:	f043 0310 	orr.w	r3, r3, #16
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b31      	ldr	r3, [pc, #196]	@ (8002a18 <HAL_InitTick+0xe0>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800295e:	f107 0210 	add.w	r2, r7, #16
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f005 fd71 	bl	8008450 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002978:	f005 fd3e 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800297c:	6378      	str	r0, [r7, #52]	@ 0x34
 800297e:	e004      	b.n	800298a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002980:	f005 fd3a 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8002984:	4603      	mov	r3, r0
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800298a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298c:	4a23      	ldr	r2, [pc, #140]	@ (8002a1c <HAL_InitTick+0xe4>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	3b01      	subs	r3, #1
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002998:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <HAL_InitTick+0xe8>)
 800299a:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <HAL_InitTick+0xec>)
 800299c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800299e:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80029be:	4818      	ldr	r0, [pc, #96]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029c0:	f009 f86e 	bl	800baa0 <HAL_TIM_Base_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80029ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11b      	bne.n	8002a0a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80029d2:	4813      	ldr	r0, [pc, #76]	@ (8002a20 <HAL_InitTick+0xe8>)
 80029d4:	f009 f8bc 	bl	800bb50 <HAL_TIM_Base_Start_IT>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80029de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d111      	bne.n	8002a0a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029e6:	2036      	movs	r0, #54	@ 0x36
 80029e8:	f003 f9ea 	bl	8005dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d808      	bhi.n	8002a04 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80029f2:	2200      	movs	r2, #0
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	2036      	movs	r0, #54	@ 0x36
 80029f8:	f003 f9c6 	bl	8005d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_InitTick+0xf0>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e002      	b.n	8002a0a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3738      	adds	r7, #56	@ 0x38
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	2000074c 	.word	0x2000074c
 8002a24:	40001000 	.word	0x40001000
 8002a28:	20000008 	.word	0x20000008

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <NMI_Handler+0x4>

08002a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <MemManage_Handler+0x4>

08002a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <DMA1_Channel2_IRQHandler+0x10>)
 8002a6a:	f003 fcd2 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000478 	.word	0x20000478

08002a78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <DMA1_Channel3_IRQHandler+0x10>)
 8002a7e:	f003 fcc8 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200006e8 	.word	0x200006e8

08002a8c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a90:	4802      	ldr	r0, [pc, #8]	@ (8002a9c <DMA1_Channel4_IRQHandler+0x10>)
 8002a92:	f003 fcbe 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200006a0 	.word	0x200006a0

08002aa0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002aa4:	4802      	ldr	r0, [pc, #8]	@ (8002ab0 <DMA1_Channel5_IRQHandler+0x10>)
 8002aa6:	f003 fcb4 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000658 	.word	0x20000658

08002ab4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <DMA1_Channel6_IRQHandler+0x10>)
 8002aba:	f003 fcaa 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200001f4 	.word	0x200001f4

08002ac8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <DMA1_Channel7_IRQHandler+0x10>)
 8002ace:	f003 fca0 	bl	8006412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200001ac 	.word	0x200001ac

08002adc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <I2C1_ER_IRQHandler+0x10>)
 8002ae2:	f003 ffb0 	bl	8006a46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200000b0 	.word	0x200000b0

08002af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <USART1_IRQHandler+0x10>)
 8002af6:	f00a f9fd 	bl	800cef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200004c0 	.word	0x200004c0

08002b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <USART2_IRQHandler+0x10>)
 8002b0a:	f00a f9f3 	bl	800cef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000548 	.word	0x20000548

08002b18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <USART3_IRQHandler+0x10>)
 8002b1e:	f00a f9e9 	bl	800cef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200005d0 	.word	0x200005d0

08002b2c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <SDMMC1_IRQHandler+0x10>)
 8002b32:	f007 fb75 	bl	800a220 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000298 	.word	0x20000298

08002b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <TIM6_DAC_IRQHandler+0x10>)
 8002b46:	f009 f8b8 	bl	800bcba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000074c 	.word	0x2000074c

08002b54 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <DMA2_Channel4_IRQHandler+0x38>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	2b81      	cmp	r3, #129	@ 0x81
 8002b5e:	d003      	beq.n	8002b68 <DMA2_Channel4_IRQHandler+0x14>
         (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <DMA2_Channel4_IRQHandler+0x38>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8002b64:	2b82      	cmp	r3, #130	@ 0x82
 8002b66:	d103      	bne.n	8002b70 <DMA2_Channel4_IRQHandler+0x1c>
  {
    HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8002b68:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <DMA2_Channel4_IRQHandler+0x3c>)
 8002b6a:	f003 fc52 	bl	8006412 <HAL_DMA_IRQHandler>
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
          (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
  {
    HAL_DMA_IRQHandler(&hdma_sdmmc1);
  }
  return;
 8002b6e:	e00a      	b.n	8002b86 <DMA2_Channel4_IRQHandler+0x32>
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <DMA2_Channel4_IRQHandler+0x38>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	2b90      	cmp	r3, #144	@ 0x90
 8002b76:	d003      	beq.n	8002b80 <DMA2_Channel4_IRQHandler+0x2c>
          (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 8002b78:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <DMA2_Channel4_IRQHandler+0x38>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8002b7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b7e:	d102      	bne.n	8002b86 <DMA2_Channel4_IRQHandler+0x32>
    HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8002b80:	4803      	ldr	r0, [pc, #12]	@ (8002b90 <DMA2_Channel4_IRQHandler+0x3c>)
 8002b82:	f003 fc46 	bl	8006412 <HAL_DMA_IRQHandler>
  return;
 8002b86:	bf00      	nop
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000298 	.word	0x20000298
 8002b90:	2000031c 	.word	0x2000031c

08002b94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e00a      	b.n	8002bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ba6:	f3af 8000 	nop.w
 8002baa:	4601      	mov	r1, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60ba      	str	r2, [r7, #8]
 8002bb2:	b2ca      	uxtb	r2, r1
 8002bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dbf0      	blt.n	8002ba6 <_read+0x12>
  }

  return len;
 8002bc4:	687b      	ldr	r3, [r7, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_isatty>:

int _isatty(int file)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f00f fa9e 	bl	80121a8 <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20010000 	.word	0x20010000
 8002c98:	00000800 	.word	0x00000800
 8002c9c:	20000798 	.word	0x20000798
 8002ca0:	20003aa0 	.word	0x20003aa0

08002ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <SystemInit+0x20>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <SystemInit+0x20>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ccc:	f7ff ffea 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd2:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <LoopForever+0xe>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8002d14 <LoopForever+0x16>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cf6:	f00f fa5d 	bl	80121b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cfa:	f7fe f88d 	bl	8000e18 <main>

08002cfe <LoopForever>:

LoopForever:
    b LoopForever
 8002cfe:	e7fe      	b.n	8002cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d0c:	080133f0 	.word	0x080133f0
  ldr r2, =_sbss
 8002d10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d14:	20003a9c 	.word	0x20003a9c

08002d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC1_IRQHandler>
	...

08002d1c <bme280_init>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_init(struct bme280_t *bme280)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8002d24:	23ff      	movs	r3, #255	@ 0xff
 8002d26:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BME280_CHIP_ID_READ_COUNT;
 8002d2c:	2305      	movs	r3, #5
 8002d2e:	73bb      	strb	r3, [r7, #14]

	/* assign BME280 ptr */
	p_bme280 = bme280;
 8002d30:	4a20      	ldr	r2, [pc, #128]	@ (8002db4 <bme280_init+0x98>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]

	while (v_chip_id_read_count > 0) {
 8002d36:	e018      	b.n	8002d6a <bme280_init+0x4e>

		/* read Chip Id */
		com_rslt = p_bme280->BME280_BUS_READ_FUNC(p_bme280->dev_addr,
 8002d38:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <bme280_init+0x98>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <bme280_init+0x98>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8002d46:	f107 020d 	add.w	r2, r7, #13
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	21d0      	movs	r1, #208	@ 0xd0
 8002d4e:	47a0      	blx	r4
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
				BME280_CHIP_ID_REG, &v_data_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if (v_data_u8 == BME280_CHIP_ID)
 8002d54:	7b7b      	ldrb	r3, [r7, #13]
 8002d56:	2b60      	cmp	r3, #96	@ 0x60
 8002d58:	d00b      	beq.n	8002d72 <bme280_init+0x56>
			break;
		v_chip_id_read_count--;
 8002d5a:	7bbb      	ldrb	r3, [r7, #14]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bme280->delay_msec(BME280_REGISTER_READ_DELAY);
 8002d60:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <bme280_init+0x98>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	2001      	movs	r0, #1
 8002d68:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <bme280_init+0x1c>
 8002d70:	e000      	b.n	8002d74 <bme280_init+0x58>
			break;
 8002d72:	bf00      	nop
	}
	/*assign chip ID to the global structure*/
	p_bme280->chip_id = v_data_u8;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <bme280_init+0x98>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	7b7a      	ldrb	r2, [r7, #13]
 8002d7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BME280_INIT_VALUE) ?
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <bme280_init+0x6e>
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d88:	e000      	b.n	8002d8c <bme280_init+0x70>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
			BME280_CHIP_ID_READ_FAIL : BME280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BME280_CHIP_ID_READ_SUCCESS) {
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <bme280_init+0x8a>
		/* readout bme280 calibparam structure */
		com_rslt += bme280_get_calib_param();
 8002d96:	f000 faa1 	bl	80032dc <bme280_get_calib_param>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	4413      	add	r3, r2
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 8002da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000079c 	.word	0x2000079c

08002db8 <bme280_read_uncomp_temperature>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_temperature(
s32 *v_uncomp_temperature_s32)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8002dc0:	23ff      	movs	r3, #255	@ 0xff
 8002dc2:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8r[0] - Temperature MSB
	a_data_u8r[1] - Temperature LSB
	a_data_u8r[2] - Temperature XLSB
	*/
	u8 a_data_u8r[BME280_TEMPERATURE_DATA_SIZE] = {
 8002dc4:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <bme280_read_uncomp_temperature+0x6c>)
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	8019      	strh	r1, [r3, #0]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	0c12      	lsrs	r2, r2, #16
 8002dd4:	701a      	strb	r2, [r3, #0]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <bme280_read_uncomp_temperature+0x70>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <bme280_read_uncomp_temperature+0x2c>
		return E_BME280_NULL_PTR;
 8002dde:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8002de2:	e01b      	b.n	8002e1c <bme280_read_uncomp_temperature+0x64>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8002de4:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <bme280_read_uncomp_temperature+0x70>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002dea:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <bme280_read_uncomp_temperature+0x70>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8002df2:	f107 020c 	add.w	r2, r7, #12
 8002df6:	2303      	movs	r3, #3
 8002df8:	21fa      	movs	r1, #250	@ 0xfa
 8002dfa:	47a0      	blx	r4
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_TEMPERATURE_MSB_REG,
			a_data_u8r,
			BME280_TEMPERATURE_DATA_LENGTH);
			*v_uncomp_temperature_s32 = (s32)(((
			(u32) (a_data_u8r[BME280_TEMPERATURE_MSB_DATA]))
 8002e00:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8002e02:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8r[BME280_TEMPERATURE_LSB_DATA]))
 8002e04:	7b7b      	ldrb	r3, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
 8002e06:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8002e08:	4313      	orrs	r3, r2
			| ((u32)a_data_u8r[BME280_TEMPERATURE_XLSB_DATA] >>
 8002e0a:	7bba      	ldrb	r2, [r7, #14]
 8002e0c:	0912      	lsrs	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	4313      	orrs	r3, r2
			*v_uncomp_temperature_s32 = (s32)(((
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
		}
	return com_rslt;
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	08013078 	.word	0x08013078
 8002e28:	2000079c 	.word	0x2000079c

08002e2c <bme280_compensate_temperature_int32>:
 *
 *  @return Returns the actual temperature
 *
*/
s32 bme280_compensate_temperature_int32(s32 v_uncomp_temperature_s32)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32r = BME280_INIT_VALUE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
	s32 v_x2_u32r = BME280_INIT_VALUE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
	s32 temperature = BME280_INIT_VALUE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

	/* calculate x1*/
	v_x1_u32r  =
	((((v_uncomp_temperature_s32
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) -
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	10da      	asrs	r2, r3, #3
	((s32)p_bme280->cal_param.dig_T1
 8002e44:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	881b      	ldrh	r3, [r3, #0]
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT))) *
 8002e4a:	005b      	lsls	r3, r3, #1
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) -
 8002e4c:	1ad3      	subs	r3, r2, r3
	((s32)p_bme280->cal_param.dig_T2)) >>
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT))) *
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
	v_x1_u32r  =
 8002e5a:	12db      	asrs	r3, r3, #11
 8002e5c:	617b      	str	r3, [r7, #20]
	BME280_SHIFT_BIT_POSITION_BY_11_BITS;
	/* calculate x2*/
	v_x2_u32r  = (((((v_uncomp_temperature_s32
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	111b      	asrs	r3, r3, #4
	((s32)p_bme280->cal_param.dig_T1))
 8002e62:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	8812      	ldrh	r2, [r2, #0]
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8002e68:	1a9b      	subs	r3, r3, r2
	* ((v_uncomp_temperature_s32 >> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	1112      	asrs	r2, r2, #4
	((s32)p_bme280->cal_param.dig_T1)))
 8002e6e:	4912      	ldr	r1, [pc, #72]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e70:	6809      	ldr	r1, [r1, #0]
 8002e72:	8809      	ldrh	r1, [r1, #0]
	* ((v_uncomp_temperature_s32 >> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8002e74:	1a52      	subs	r2, r2, r1
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_12_BITS) *
 8002e7a:	131b      	asrs	r3, r3, #12
	((s32)p_bme280->cal_param.dig_T3))
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	>> BME280_SHIFT_BIT_POSITION_BY_12_BITS) *
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
	v_x2_u32r  = (((((v_uncomp_temperature_s32
 8002e88:	139b      	asrs	r3, r3, #14
 8002e8a:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_14_BITS;
	/* calculate t_fine*/
	p_bme280->cal_param.t_fine = v_x1_u32r + v_x2_u32r;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6979      	ldr	r1, [r7, #20]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	440a      	add	r2, r1
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
	/* calculate temperature*/
	temperature  = (p_bme280->cal_param.t_fine * 5 + 128)
 8002e98:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <bme280_compensate_temperature_int32+0x8c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3380      	adds	r3, #128	@ 0x80
 8002ea6:	121b      	asrs	r3, r3, #8
 8002ea8:	60fb      	str	r3, [r7, #12]
	>> BME280_SHIFT_BIT_POSITION_BY_08_BITS;
	return temperature;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	2000079c 	.word	0x2000079c

08002ebc <bme280_read_uncomp_pressure>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure(
s32 *v_uncomp_pressure_s32)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8002ec4:	23ff      	movs	r3, #255	@ 0xff
 8002ec6:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8[0] - Pressure MSB
	a_data_u8[1] - Pressure LSB
	a_data_u8[2] - Pressure XLSB
	*/
	u8 a_data_u8[BME280_PRESSURE_DATA_SIZE] = {
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <bme280_read_uncomp_pressure+0x6c>)
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	8019      	strh	r1, [r3, #0]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	0c12      	lsrs	r2, r2, #16
 8002ed8:	701a      	strb	r2, [r3, #0]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <bme280_read_uncomp_pressure+0x70>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <bme280_read_uncomp_pressure+0x2c>
		return E_BME280_NULL_PTR;
 8002ee2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8002ee6:	e01b      	b.n	8002f20 <bme280_read_uncomp_pressure+0x64>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <bme280_read_uncomp_pressure+0x70>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <bme280_read_uncomp_pressure+0x70>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8002ef6:	f107 020c 	add.w	r2, r7, #12
 8002efa:	2303      	movs	r3, #3
 8002efc:	21f7      	movs	r1, #247	@ 0xf7
 8002efe:	47a0      	blx	r4
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_PRESSURE_MSB_REG,
			a_data_u8, BME280_PRESSURE_DATA_LENGTH);
			*v_uncomp_pressure_s32 = (s32)((
			((u32)(a_data_u8[BME280_PRESSURE_MSB_DATA]))
 8002f04:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8002f06:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[BME280_PRESSURE_LSB_DATA]))
 8002f08:	7b7b      	ldrb	r3, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8002f0a:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8002f0c:	4313      	orrs	r3, r2
			((u32)a_data_u8[BME280_PRESSURE_XLSB_DATA] >>
 8002f0e:	7bba      	ldrb	r2, [r7, #14]
 8002f10:	0912      	lsrs	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8002f14:	4313      	orrs	r3, r2
			*v_uncomp_pressure_s32 = (s32)((
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
		}
	return com_rslt;
 8002f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	08013078 	.word	0x08013078
 8002f2c:	2000079c 	.word	0x2000079c

08002f30 <bme280_compensate_pressure_int32>:
 *
 *  @return Return the actual pressure output as u32
 *
*/
u32 bme280_compensate_pressure_int32(s32 v_uncomp_pressure_s32)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32 = BME280_INIT_VALUE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
	s32 v_x2_u32 = BME280_INIT_VALUE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
	u32 v_pressure_u32 = BME280_INIT_VALUE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

	/* calculate x1*/
	v_x1_u32 = (((s32)p_bme280->cal_param.t_fine)
 8002f44:	4b52      	ldr	r3, [pc, #328]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT) - (s32)64000;
 8002f4a:	105b      	asrs	r3, r3, #1
	v_x1_u32 = (((s32)p_bme280->cal_param.t_fine)
 8002f4c:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8002f50:	613b      	str	r3, [r7, #16]
	/* calculate x2*/
	v_x2_u32 = (((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	109b      	asrs	r3, r3, #2
	* (v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	1092      	asrs	r2, r2, #2
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
	) >> BME280_SHIFT_BIT_POSITION_BY_11_BITS)
 8002f5e:	12db      	asrs	r3, r3, #11
	* ((s32)p_bme280->cal_param.dig_P6);
 8002f60:	4a4b      	ldr	r2, [pc, #300]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
	v_x2_u32 = (((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
	/* calculate x2*/
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
	((s32)p_bme280->cal_param.dig_P5))
 8002f6e:	4b48      	ldr	r3, [pc, #288]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f76:	461a      	mov	r2, r3
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT);
 8002f7e:	005b      	lsls	r3, r3, #1
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
	/* calculate x2*/
	v_x2_u32 = (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) +
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	109a      	asrs	r2, r3, #2
	(((s32)p_bme280->cal_param.dig_P4)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	<< BME280_SHIFT_BIT_POSITION_BY_16_BITS);
 8002f92:	041b      	lsls	r3, r3, #16
	v_x2_u32 = (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) +
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
	/* calculate x1*/
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8002f98:	4b3d      	ldr	r3, [pc, #244]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002fa0:	4619      	mov	r1, r3
	(((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) *
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	109b      	asrs	r3, r3, #2
	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS))
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	1092      	asrs	r2, r2, #2
	(((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) *
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_13_BITS))
 8002fae:	135b      	asrs	r3, r3, #13
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) +
 8002fb4:	10da      	asrs	r2, r3, #3
	((((s32)p_bme280->cal_param.dig_P2) *
 8002fb6:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32) >> BME280_SHIFT_BIT_POSITION_BY_01_BIT))
 8002fc6:	105b      	asrs	r3, r3, #1
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) +
 8002fc8:	4413      	add	r3, r2
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8002fca:	149b      	asrs	r3, r3, #18
 8002fcc:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_18_BITS;
	/* calculate x1*/
	v_x1_u32 = ((((32768 + v_x1_u32)) *
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
	((s32)p_bme280->cal_param.dig_P1))
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	88d2      	ldrh	r2, [r2, #6]
	v_x1_u32 = ((((32768 + v_x1_u32)) *
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	13db      	asrs	r3, r3, #15
 8002fe0:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS);
	/* calculate pressure*/
	v_pressure_u32 =
	(((u32)(((s32)1048576) - v_uncomp_pressure_s32)
	- (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS))) * 3125;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	131b      	asrs	r3, r3, #12
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <bme280_compensate_pressure_int32+0x164>)
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
	v_pressure_u32 =
 8002ff2:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8002ff6:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8002ffa:	617b      	str	r3, [r7, #20]
	if (v_pressure_u32
	< 0x80000000)
 8002ffc:	697b      	ldr	r3, [r7, #20]
	if (v_pressure_u32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <bme280_compensate_pressure_int32+0xea>
		/* Avoid exception caused by division by zero */
		if (v_x1_u32 != BME280_INIT_VALUE)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <bme280_compensate_pressure_int32+0xe6>
			v_pressure_u32 =
			(v_pressure_u32
			<< BME280_SHIFT_BIT_POSITION_BY_01_BIT) /
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005a      	lsls	r2, r3, #1
			((u32)v_x1_u32);
 800300c:	693b      	ldr	r3, [r7, #16]
			v_pressure_u32 =
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e00d      	b.n	8003032 <bme280_compensate_pressure_int32+0x102>
		else
			return BME280_INVALID_DATA;
 8003016:	2300      	movs	r3, #0
 8003018:	e033      	b.n	8003082 <bme280_compensate_pressure_int32+0x152>
	else
		/* Avoid exception caused by division by zero */
		if (v_x1_u32 != BME280_INIT_VALUE)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <bme280_compensate_pressure_int32+0xfe>
			v_pressure_u32 = (v_pressure_u32
			/ (u32)v_x1_u32) * 2;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
			v_pressure_u32 = (v_pressure_u32
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e001      	b.n	8003032 <bme280_compensate_pressure_int32+0x102>
		else
			return BME280_INVALID_DATA;
 800302e:	2300      	movs	r3, #0
 8003030:	e027      	b.n	8003082 <bme280_compensate_pressure_int32+0x152>

		v_x1_u32 = (((s32)p_bme280->cal_param.dig_P9) *
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800303a:	4619      	mov	r1, r3
		((s32)(((v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	08db      	lsrs	r3, r3, #3
		* (v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS))
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	08d2      	lsrs	r2, r2, #3
 8003044:	fb02 f303 	mul.w	r3, r2, r3
		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS)))
 8003048:	0b5b      	lsrs	r3, r3, #13
		v_x1_u32 = (((s32)p_bme280->cal_param.dig_P9) *
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	131b      	asrs	r3, r3, #12
 8003050:	613b      	str	r3, [r7, #16]
		>> BME280_SHIFT_BIT_POSITION_BY_12_BITS;
		v_x2_u32 = (((s32)(v_pressure_u32
		>> BME280_SHIFT_BIT_POSITION_BY_02_BITS)) *
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	089b      	lsrs	r3, r3, #2
		v_x2_u32 = (((s32)(v_pressure_u32
 8003056:	461a      	mov	r2, r3
		((s32)p_bme280->cal_param.dig_P8))
 8003058:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		>> BME280_SHIFT_BIT_POSITION_BY_02_BITS)) *
 8003060:	fb02 f303 	mul.w	r3, r2, r3
		v_x2_u32 = (((s32)(v_pressure_u32
 8003064:	135b      	asrs	r3, r3, #13
 8003066:	60fb      	str	r3, [r7, #12]
		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS;
		v_pressure_u32 = (u32)((s32)v_pressure_u32 +
		((v_x1_u32 + v_x2_u32 + p_bme280->cal_param.dig_P7)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	4a08      	ldr	r2, [pc, #32]	@ (8003090 <bme280_compensate_pressure_int32+0x160>)
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8003076:	4413      	add	r3, r2
		>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 8003078:	111a      	asrs	r2, r3, #4
		v_pressure_u32 = (u32)((s32)v_pressure_u32 +
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4413      	add	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

	return v_pressure_u32;
 8003080:	697b      	ldr	r3, [r7, #20]
}
 8003082:	4618      	mov	r0, r3
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	2000079c 	.word	0x2000079c
 8003094:	fffff3cb 	.word	0xfffff3cb

08003098 <bme280_read_uncomp_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_humidity(
s32 *v_uncomp_humidity_s32)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80030a0:	23ff      	movs	r3, #255	@ 0xff
 80030a2:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8[0] - Humidity MSB
	a_data_u8[1] - Humidity LSB
	*/
	u8 a_data_u8[BME280_HUMIDITY_DATA_SIZE] = {
 80030a4:	2300      	movs	r3, #0
 80030a6:	81bb      	strh	r3, [r7, #12]
	BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80030a8:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <bme280_read_uncomp_humidity+0x54>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <bme280_read_uncomp_humidity+0x1e>
		return E_BME280_NULL_PTR;
 80030b0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80030b4:	e016      	b.n	80030e4 <bme280_read_uncomp_humidity+0x4c>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <bme280_read_uncomp_humidity+0x54>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <bme280_read_uncomp_humidity+0x54>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 80030c4:	f107 020c 	add.w	r2, r7, #12
 80030c8:	2302      	movs	r3, #2
 80030ca:	21fd      	movs	r1, #253	@ 0xfd
 80030cc:	47a0      	blx	r4
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_HUMIDITY_MSB_REG, a_data_u8,
			BME280_HUMIDITY_DATA_LENGTH);
			*v_uncomp_humidity_s32 = (s32)(
			(((u32)(a_data_u8[BME280_HUMIDITY_MSB_DATA]))
 80030d2:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 80030d4:	021b      	lsls	r3, r3, #8
			((u32)(a_data_u8[BME280_HUMIDITY_LSB_DATA])));
 80030d6:	7b7a      	ldrb	r2, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 80030d8:	4313      	orrs	r3, r2
			*v_uncomp_humidity_s32 = (s32)(
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
		}
	return com_rslt;
 80030e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd90      	pop	{r4, r7, pc}
 80030ec:	2000079c 	.word	0x2000079c

080030f0 <bme280_compensate_humidity_int32>:
 *
 *  @return Return the actual relative humidity output as u32
 *
*/
u32 bme280_compensate_humidity_int32(s32 v_uncomp_humidity_s32)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32 = BME280_INIT_VALUE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

	/* calculate x1*/
	v_x1_u32 = (p_bme280->cal_param.t_fine - ((s32)76800));
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8003106:	60fb      	str	r3, [r7, #12]
	/* calculate x1*/
	v_x1_u32 = (((((v_uncomp_humidity_s32
	<< BME280_SHIFT_BIT_POSITION_BY_14_BITS) -
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	039a      	lsls	r2, r3, #14
	(((s32)p_bme280->cal_param.dig_H4)
 800310c:	4b2c      	ldr	r3, [pc, #176]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
	<< BME280_SHIFT_BIT_POSITION_BY_20_BITS) -
 8003114:	051b      	lsls	r3, r3, #20
	<< BME280_SHIFT_BIT_POSITION_BY_14_BITS) -
 8003116:	1ad2      	subs	r2, r2, r3
	(((s32)p_bme280->cal_param.dig_H5) * v_x1_u32)) +
 8003118:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003120:	4619      	mov	r1, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	fb01 f303 	mul.w	r3, r1, r3
	<< BME280_SHIFT_BIT_POSITION_BY_20_BITS) -
 8003128:	1ad3      	subs	r3, r2, r3
	(((s32)p_bme280->cal_param.dig_H5) * v_x1_u32)) +
 800312a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
	((s32)16384)) >> BME280_SHIFT_BIT_POSITION_BY_15_BITS)
 800312e:	13db      	asrs	r3, r3, #15
	* (((((((v_x1_u32 *
	((s32)p_bme280->cal_param.dig_H6))
 8003130:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8003138:	4611      	mov	r1, r2
	* (((((((v_x1_u32 *
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	fb01 f202 	mul.w	r2, r1, r2
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) *
 8003140:	1292      	asrs	r2, r2, #10
	(((v_x1_u32 * ((s32)p_bme280->cal_param.dig_H3))
 8003142:	491f      	ldr	r1, [pc, #124]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 8003144:	6809      	ldr	r1, [r1, #0]
 8003146:	7f09      	ldrb	r1, [r1, #28]
 8003148:	4608      	mov	r0, r1
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	fb00 f101 	mul.w	r1, r0, r1
	>> BME280_SHIFT_BIT_POSITION_BY_11_BITS) + ((s32)32768)))
 8003150:	12c9      	asrs	r1, r1, #11
 8003152:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) *
 8003156:	fb01 f202 	mul.w	r2, r1, r2
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) + ((s32)2097152)) *
 800315a:	1292      	asrs	r2, r2, #10
 800315c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
	((s32)p_bme280->cal_param.dig_H2) + 8192) >> 14));
 8003160:	4917      	ldr	r1, [pc, #92]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 8003162:	6809      	ldr	r1, [r1, #0]
 8003164:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) + ((s32)2097152)) *
 8003168:	fb01 f202 	mul.w	r2, r1, r2
	((s32)p_bme280->cal_param.dig_H2) + 8192) >> 14));
 800316c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003170:	1392      	asrs	r2, r2, #14
	v_x1_u32 = (((((v_uncomp_humidity_s32
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 - (((((v_x1_u32
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS) *
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	13db      	asrs	r3, r3, #15
	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_15_BITS))
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	13d2      	asrs	r2, r2, #15
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS) *
 8003180:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_07_BITS) *
 8003184:	11db      	asrs	r3, r3, #7
	((s32)p_bme280->cal_param.dig_H1))
 8003186:	4a0e      	ldr	r2, [pc, #56]	@ (80031c0 <bme280_compensate_humidity_int32+0xd0>)
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	7e12      	ldrb	r2, [r2, #24]
	>> BME280_SHIFT_BIT_POSITION_BY_07_BITS) *
 800318c:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 8003190:	111b      	asrs	r3, r3, #4
	v_x1_u32 = (v_x1_u32 - (((((v_x1_u32
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 < 0 ? 0 : v_x1_u32);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800319e:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 > 419430400 ?
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80031a6:	bfa8      	it	ge
 80031a8:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80031ac:	60fb      	str	r3, [r7, #12]
	419430400 : v_x1_u32);
	return (u32)(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	131b      	asrs	r3, r3, #12
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000079c 	.word	0x2000079c

080031c4 <bme280_read_uncomp_pressure_temperature_humidity>:
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure_temperature_humidity(
s32 *v_uncomp_pressure_s32,
s32 *v_uncomp_temperature_s32, s32 *v_uncomp_humidity_s32)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80031d0:	23ff      	movs	r3, #255	@ 0xff
 80031d2:	77fb      	strb	r3, [r7, #31]
	a_data_u8[1] - Temperature LSB
	a_data_u8[1] - Temperature LSB
	a_data_u8[1] - Humidity MSB
	a_data_u8[1] - Humidity LSB
	*/
	u8 a_data_u8[BME280_DATA_FRAME_SIZE] = {
 80031d4:	4a20      	ldr	r2, [pc, #128]	@ (8003258 <bme280_read_uncomp_pressure_temperature_humidity+0x94>)
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031de:	e883 0003 	stmia.w	r3, {r0, r1}
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <bme280_read_uncomp_pressure_temperature_humidity+0x98>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <bme280_read_uncomp_pressure_temperature_humidity+0x2c>
		return E_BME280_NULL_PTR;
 80031ea:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80031ee:	e02e      	b.n	800324e <bme280_read_uncomp_pressure_temperature_humidity+0x8a>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <bme280_read_uncomp_pressure_temperature_humidity+0x98>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <bme280_read_uncomp_pressure_temperature_humidity+0x98>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 80031fe:	f107 0214 	add.w	r2, r7, #20
 8003202:	2308      	movs	r3, #8
 8003204:	21f7      	movs	r1, #247	@ 0xf7
 8003206:	47a0      	blx	r4
 8003208:	4603      	mov	r3, r0
 800320a:	77fb      	strb	r3, [r7, #31]
			p_bme280->dev_addr,
			BME280_PRESSURE_MSB_REG,
			a_data_u8, BME280_ALL_DATA_FRAME_LENGTH);
			/*Pressure*/
			*v_uncomp_pressure_s32 = (s32)((
			((u32)(a_data_u8[
 800320c:	7d3b      	ldrb	r3, [r7, #20]
			BME280_DATA_FRAME_PRESSURE_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 800320e:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[
 8003210:	7d7b      	ldrb	r3, [r7, #21]
			BME280_DATA_FRAME_PRESSURE_LSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8003212:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8003214:	4313      	orrs	r3, r2
			((u32)a_data_u8[
 8003216:	7dba      	ldrb	r2, [r7, #22]
			BME280_DATA_FRAME_PRESSURE_XLSB_BYTE] >>
 8003218:	0912      	lsrs	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 800321c:	4313      	orrs	r3, r2
			*v_uncomp_pressure_s32 = (s32)((
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));

			/* Temperature */
			*v_uncomp_temperature_s32 = (s32)(((
			(u32) (a_data_u8[
 8003224:	7dfb      	ldrb	r3, [r7, #23]
			BME280_DATA_FRAME_TEMPERATURE_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8003226:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[
 8003228:	7e3b      	ldrb	r3, [r7, #24]
			BME280_DATA_FRAME_TEMPERATURE_LSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
 800322a:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 800322c:	4313      	orrs	r3, r2
			| ((u32)a_data_u8[
 800322e:	7e7a      	ldrb	r2, [r7, #25]
			BME280_DATA_FRAME_TEMPERATURE_XLSB_BYTE]
			>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 8003230:	0912      	lsrs	r2, r2, #4
 8003232:	b2d2      	uxtb	r2, r2
			| ((u32)a_data_u8[
 8003234:	4313      	orrs	r3, r2
			*v_uncomp_temperature_s32 = (s32)(((
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	601a      	str	r2, [r3, #0]

			/*Humidity*/
			*v_uncomp_humidity_s32 = (s32)((
			((u32)(a_data_u8[
 800323c:	7ebb      	ldrb	r3, [r7, #26]
			BME280_DATA_FRAME_HUMIDITY_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 800323e:	021b      	lsls	r3, r3, #8
			((u32)(a_data_u8[
 8003240:	7efa      	ldrb	r2, [r7, #27]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 8003242:	4313      	orrs	r3, r2
			*v_uncomp_humidity_s32 = (s32)((
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
			BME280_DATA_FRAME_HUMIDITY_LSB_BYTE])));
		}
	return com_rslt;
 800324a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	0801307c 	.word	0x0801307c
 800325c:	2000079c 	.word	0x2000079c

08003260 <bme280_read_pressure_temperature_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_pressure_temperature_humidity(
u32 *v_pressure_u32, s32 *v_temperature_s32, u32 *v_humidity_u32)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 800326c:	23ff      	movs	r3, #255	@ 0xff
 800326e:	77fb      	strb	r3, [r7, #31]
	s32 v_uncomp_pressure_s32 = BME280_INIT_VALUE;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
	s32 v_uncom_temperature_s32 = BME280_INIT_VALUE;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
	s32 v_uncom_humidity_s32 = BME280_INIT_VALUE;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 800327c:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <bme280_read_pressure_temperature_humidity+0x78>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <bme280_read_pressure_temperature_humidity+0x2a>
		return E_BME280_NULL_PTR;
 8003284:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003288:	e021      	b.n	80032ce <bme280_read_pressure_temperature_humidity+0x6e>
		} else {
			/* read the uncompensated pressure,
			temperature and humidity*/
			com_rslt =
			bme280_read_uncomp_pressure_temperature_humidity(
 800328a:	f107 0210 	add.w	r2, r7, #16
 800328e:	f107 0114 	add.w	r1, r7, #20
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff94 	bl	80031c4 <bme280_read_uncomp_pressure_temperature_humidity>
 800329c:	4603      	mov	r3, r0
 800329e:	77fb      	strb	r3, [r7, #31]
			&v_uncomp_pressure_s32, &v_uncom_temperature_s32,
			&v_uncom_humidity_s32);
			/* read the true pressure, temperature and humidity*/
			*v_temperature_s32 =
			bme280_compensate_temperature_int32(
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fdc2 	bl	8002e2c <bme280_compensate_temperature_int32>
 80032a8:	4602      	mov	r2, r0
			*v_temperature_s32 =
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	601a      	str	r2, [r3, #0]
			v_uncom_temperature_s32);
			*v_pressure_u32 = bme280_compensate_pressure_int32(
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe3d 	bl	8002f30 <bme280_compensate_pressure_int32>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]
			v_uncomp_pressure_s32);
			*v_humidity_u32 = bme280_compensate_humidity_int32(
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff16 	bl	80030f0 <bme280_compensate_humidity_int32>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
			v_uncom_humidity_s32);
		}
	return com_rslt;
 80032ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000079c 	.word	0x2000079c

080032dc <bme280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_get_calib_param(void)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80032e2:	23ff      	movs	r3, #255	@ 0xff
 80032e4:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BME280_CALIB_DATA_SIZE] = {
 80032e6:	4b76      	ldr	r3, [pc, #472]	@ (80034c0 <bme280_get_calib_param+0x1e4>)
 80032e8:	1d3c      	adds	r4, r7, #4
 80032ea:	461d      	mov	r5, r3
 80032ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032f4:	c403      	stmia	r4!, {r0, r1}
 80032f6:	8022      	strh	r2, [r4, #0]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80032f8:	4b72      	ldr	r3, [pc, #456]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <bme280_get_calib_param+0x2a>
		return E_BME280_NULL_PTR;
 8003300:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003304:	e0d7      	b.n	80034b6 <bme280_get_calib_param+0x1da>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8003306:	4b6f      	ldr	r3, [pc, #444]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800330c:	4b6d      	ldr	r3, [pc, #436]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003314:	1d3a      	adds	r2, r7, #4
 8003316:	231a      	movs	r3, #26
 8003318:	2188      	movs	r1, #136	@ 0x88
 800331a:	47a0      	blx	r4
 800331c:	4603      	mov	r3, r0
 800331e:	77fb      	strb	r3, [r7, #31]
			BME280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
			a_data_u8,
			BME280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);

			p_bme280->cal_param.dig_T1 = (u16)(((
			(u16)((u8)a_data_u8[
 8003320:	797b      	ldrb	r3, [r7, #5]
			BME280_TEMPERATURE_CALIB_DIG_T1_MSB])) <<
 8003322:	021b      	lsls	r3, r3, #8
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T1_LSB]);
 8003324:	b21a      	sxth	r2, r3
 8003326:	793b      	ldrb	r3, [r7, #4]
 8003328:	b21b      	sxth	r3, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T1 = (u16)(((
 800332e:	4b65      	ldr	r3, [pc, #404]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b292      	uxth	r2, r2
 8003334:	801a      	strh	r2, [r3, #0]
			p_bme280->cal_param.dig_T2 = (s16)(((
			(s16)((s8)a_data_u8[
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	b25b      	sxtb	r3, r3
			BME280_TEMPERATURE_CALIB_DIG_T2_MSB])) <<
 800333a:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_T2 = (s16)(((
 800333c:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T2_LSB]);
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T2 = (s16)(((
 8003342:	4b60      	ldr	r3, [pc, #384]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	b212      	sxth	r2, r2
 800334a:	805a      	strh	r2, [r3, #2]
			p_bme280->cal_param.dig_T3 = (s16)(((
			(s16)((s8)a_data_u8[
 800334c:	7a7b      	ldrb	r3, [r7, #9]
 800334e:	b25b      	sxtb	r3, r3
			BME280_TEMPERATURE_CALIB_DIG_T3_MSB])) <<
 8003350:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_T3 = (s16)(((
 8003352:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T3_LSB]);
 8003354:	7a3b      	ldrb	r3, [r7, #8]
 8003356:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T3 = (s16)(((
 8003358:	4b5a      	ldr	r3, [pc, #360]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	b212      	sxth	r2, r2
 8003360:	809a      	strh	r2, [r3, #4]
			p_bme280->cal_param.dig_P1 = (u16)(((
			(u16)((u8)a_data_u8[
 8003362:	7afb      	ldrb	r3, [r7, #11]
			BME280_PRESSURE_CALIB_DIG_P1_MSB])) <<
 8003364:	021b      	lsls	r3, r3, #8
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P1_LSB]);
 8003366:	b21a      	sxth	r2, r3
 8003368:	7abb      	ldrb	r3, [r7, #10]
 800336a:	b21b      	sxth	r3, r3
 800336c:	4313      	orrs	r3, r2
 800336e:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P1 = (u16)(((
 8003370:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b292      	uxth	r2, r2
 8003376:	80da      	strh	r2, [r3, #6]
			p_bme280->cal_param.dig_P2 = (s16)(((
			(s16)((s8)a_data_u8[
 8003378:	7b7b      	ldrb	r3, [r7, #13]
 800337a:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P2_MSB])) <<
 800337c:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P2 = (s16)(((
 800337e:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P2_LSB]);
 8003380:	7b3b      	ldrb	r3, [r7, #12]
 8003382:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P2 = (s16)(((
 8003384:	4b4f      	ldr	r3, [pc, #316]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	b212      	sxth	r2, r2
 800338c:	811a      	strh	r2, [r3, #8]
			p_bme280->cal_param.dig_P3 = (s16)(((
			(s16)((s8)a_data_u8[
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P3_MSB])) <<
 8003392:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P3 = (s16)(((
 8003394:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P3 = (s16)(((
 800339a:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	b212      	sxth	r2, r2
 80033a2:	815a      	strh	r2, [r3, #10]
			BME280_PRESSURE_CALIB_DIG_P3_LSB]);
			p_bme280->cal_param.dig_P4 = (s16)(((
			(s16)((s8)a_data_u8[
 80033a4:	7c7b      	ldrb	r3, [r7, #17]
 80033a6:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P4_MSB])) <<
 80033a8:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P4 = (s16)(((
 80033aa:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P4_LSB]);
 80033ac:	7c3b      	ldrb	r3, [r7, #16]
 80033ae:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P4 = (s16)(((
 80033b0:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	b212      	sxth	r2, r2
 80033b8:	819a      	strh	r2, [r3, #12]
			p_bme280->cal_param.dig_P5 = (s16)(((
			(s16)((s8)a_data_u8[
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P5_MSB])) <<
 80033be:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P5 = (s16)(((
 80033c0:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P5_LSB]);
 80033c2:	7cbb      	ldrb	r3, [r7, #18]
 80033c4:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P5 = (s16)(((
 80033c6:	4b3f      	ldr	r3, [pc, #252]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	b212      	sxth	r2, r2
 80033ce:	81da      	strh	r2, [r3, #14]
			p_bme280->cal_param.dig_P6 = (s16)(((
			(s16)((s8)a_data_u8[
 80033d0:	7d7b      	ldrb	r3, [r7, #21]
 80033d2:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P6_MSB])) <<
 80033d4:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P6 = (s16)(((
 80033d6:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P6_LSB]);
 80033d8:	7d3b      	ldrb	r3, [r7, #20]
 80033da:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P6 = (s16)(((
 80033dc:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	b212      	sxth	r2, r2
 80033e4:	821a      	strh	r2, [r3, #16]
			p_bme280->cal_param.dig_P7 = (s16)(((
			(s16)((s8)a_data_u8[
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P7_MSB])) <<
 80033ea:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P7 = (s16)(((
 80033ec:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P7_LSB]);
 80033ee:	7dbb      	ldrb	r3, [r7, #22]
 80033f0:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P7 = (s16)(((
 80033f2:	4b34      	ldr	r3, [pc, #208]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	b212      	sxth	r2, r2
 80033fa:	825a      	strh	r2, [r3, #18]
			p_bme280->cal_param.dig_P8 = (s16)(((
			(s16)((s8)a_data_u8[
 80033fc:	7e7b      	ldrb	r3, [r7, #25]
 80033fe:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P8_MSB])) <<
 8003400:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P8 = (s16)(((
 8003402:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P8_LSB]);
 8003404:	7e3b      	ldrb	r3, [r7, #24]
 8003406:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P8 = (s16)(((
 8003408:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	b212      	sxth	r2, r2
 8003410:	829a      	strh	r2, [r3, #20]
			p_bme280->cal_param.dig_P9 = (s16)(((
			(s16)((s8)a_data_u8[
 8003412:	7efb      	ldrb	r3, [r7, #27]
 8003414:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P9_MSB])) <<
 8003416:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P9 = (s16)(((
 8003418:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P9_LSB]);
 800341a:	7ebb      	ldrb	r3, [r7, #26]
 800341c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P9 = (s16)(((
 800341e:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	b212      	sxth	r2, r2
 8003426:	82da      	strh	r2, [r3, #22]
			p_bme280->cal_param.dig_H1 =
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800342a:	681b      	ldr	r3, [r3, #0]
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H1];
 800342c:	7f7a      	ldrb	r2, [r7, #29]
			p_bme280->cal_param.dig_H1 =
 800342e:	761a      	strb	r2, [r3, #24]
			com_rslt += p_bme280->BME280_BUS_READ_FUNC(
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 800343e:	1d3a      	adds	r2, r7, #4
 8003440:	2307      	movs	r3, #7
 8003442:	21e1      	movs	r1, #225	@ 0xe1
 8003444:	47a0      	blx	r4
 8003446:	4603      	mov	r3, r0
 8003448:	b2da      	uxtb	r2, r3
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	4413      	add	r3, r2
 800344e:	b2db      	uxtb	r3, r3
 8003450:	77fb      	strb	r3, [r7, #31]
			p_bme280->dev_addr,
			BME280_HUMIDITY_CALIB_DIG_H2_LSB_REG, a_data_u8,
			BME280_HUMIDITY_CALIB_DATA_LENGTH);
			p_bme280->cal_param.dig_H2 = (s16)(((
			(s16)((s8)a_data_u8[
 8003452:	797b      	ldrb	r3, [r7, #5]
 8003454:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H2_MSB])) <<
 8003456:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_H2 = (s16)(((
 8003458:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_HUMIDITY_CALIB_DIG_H2_LSB]);
 800345a:	793b      	ldrb	r3, [r7, #4]
 800345c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_H2 = (s16)(((
 800345e:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	b212      	sxth	r2, r2
 8003466:	835a      	strh	r2, [r3, #26]
			p_bme280->cal_param.dig_H3 =
 8003468:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800346a:	681b      	ldr	r3, [r3, #0]
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H3];
 800346c:	79ba      	ldrb	r2, [r7, #6]
			p_bme280->cal_param.dig_H3 =
 800346e:	771a      	strb	r2, [r3, #28]
			p_bme280->cal_param.dig_H4 = (s16)(((
			(s16)((s8)a_data_u8[
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H4_MSB])) <<
 8003474:	011b      	lsls	r3, r3, #4
			p_bme280->cal_param.dig_H4 = (s16)(((
 8003476:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
			(((u8)BME280_MASK_DIG_H4) &
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB]));
 8003478:	7a3b      	ldrb	r3, [r7, #8]
			p_bme280->cal_param.dig_H4 = (s16)(((
 800347a:	b21b      	sxth	r3, r3
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b21a      	sxth	r2, r3
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	b212      	sxth	r2, r2
 800348a:	83da      	strh	r2, [r3, #30]
			p_bme280->cal_param.dig_H5 = (s16)(((
			(s16)((s8)a_data_u8[
 800348c:	7a7b      	ldrb	r3, [r7, #9]
 800348e:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H5_MSB])) <<
 8003490:	011b      	lsls	r3, r3, #4
			p_bme280->cal_param.dig_H5 = (s16)(((
 8003492:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
			(a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB] >>
 8003494:	7a3b      	ldrb	r3, [r7, #8]
			p_bme280->cal_param.dig_H5 = (s16)(((
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	b2db      	uxtb	r3, r3
 800349a:	b21a      	sxth	r2, r3
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	b212      	sxth	r2, r2
 80034a4:	841a      	strh	r2, [r3, #32]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
			p_bme280->cal_param.dig_H6 =
			(s8)a_data_u8[BME280_HUMIDITY_CALIB_DIG_H6];
 80034a6:	7aba      	ldrb	r2, [r7, #10]
			p_bme280->cal_param.dig_H6 =
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <bme280_get_calib_param+0x1e8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
			(s8)a_data_u8[BME280_HUMIDITY_CALIB_DIG_H6];
 80034ac:	b252      	sxtb	r2, r2
			p_bme280->cal_param.dig_H6 =
 80034ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		}
	return com_rslt;
 80034b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	08013084 	.word	0x08013084
 80034c4:	2000079c 	.word	0x2000079c

080034c8 <bme280_set_oversamp_temperature>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_temperature(
u8 v_value_u8)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80034d2:	23ff      	movs	r3, #255	@ 0xff
 80034d4:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80034da:	2300      	movs	r3, #0
 80034dc:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 80034de:	2300      	movs	r3, #0
 80034e0:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80034e6:	4b56      	ldr	r3, [pc, #344]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <bme280_set_oversamp_temperature+0x2c>
		return E_BME280_NULL_PTR;
 80034ee:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80034f2:	e0a0      	b.n	8003636 <bme280_set_oversamp_temperature+0x16e>
		} else {
			v_data_u8 = p_bme280->ctrl_meas_reg;
 80034f4:	4b52      	ldr	r3, [pc, #328]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80034fc:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 80034fe:	7bbb      	ldrb	r3, [r7, #14]
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	b25a      	sxtb	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	015b      	lsls	r3, r3, #5
 800350c:	b25b      	sxtb	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b25b      	sxtb	r3, r3
 8003512:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8003514:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8003516:	f107 030d 	add.w	r3, r7, #13
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa22 	bl	8003964 <bme280_get_power_mode>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8003524:	7b7b      	ldrb	r3, [r7, #13]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03e      	beq.n	80035a8 <bme280_set_oversamp_temperature+0xe0>
				com_rslt += bme280_set_soft_rst();
 800352a:	f000 fb07 	bl	8003b3c <bme280_set_soft_rst>
 800352e:	4603      	mov	r3, r0
 8003530:	b2da      	uxtb	r2, r3
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	4413      	add	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 800353a:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	2003      	movs	r0, #3
 8003542:	4798      	blx	r3
				/* write previous value
				of configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 8003544:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800354c:	72fb      	strb	r3, [r7, #11]
				com_rslt += bme280_write_register(
 800354e:	f107 030b 	add.w	r3, r7, #11
 8003552:	2201      	movs	r2, #1
 8003554:	4619      	mov	r1, r3
 8003556:	20f5      	movs	r0, #245	@ 0xf5
 8003558:	f000 fbd0 	bl	8003cfc <bme280_write_register>
 800355c:	4603      	mov	r3, r0
 800355e:	b2da      	uxtb	r2, r3
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	4413      	add	r3, r2
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73fb      	strb	r3, [r7, #15]
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value
				of humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 8003568:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
				v_pre_ctrl_hum_value_u8 =
 8003570:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	2201      	movs	r2, #1
 8003578:	4619      	mov	r1, r3
 800357a:	20f2      	movs	r0, #242	@ 0xf2
 800357c:	f000 fbbe 	bl	8003cfc <bme280_write_register>
 8003580:	4603      	mov	r3, r0
 8003582:	b2da      	uxtb	r2, r3
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	4413      	add	r3, r2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous and updated value
				of configuration register*/
				com_rslt += bme280_write_register(
 800358c:	f107 030e 	add.w	r3, r7, #14
 8003590:	2201      	movs	r2, #1
 8003592:	4619      	mov	r1, r3
 8003594:	20f4      	movs	r0, #244	@ 0xf4
 8003596:	f000 fbb1 	bl	8003cfc <bme280_write_register>
 800359a:	4603      	mov	r3, r0
 800359c:	b2da      	uxtb	r2, r3
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	4413      	add	r3, r2
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e00d      	b.n	80035c4 <bme280_set_oversamp_temperature+0xfc>
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 80035a8:	4b25      	ldr	r3, [pc, #148]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80035ae:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 80035b6:	f107 020e 	add.w	r2, r7, #14
 80035ba:	2301      	movs	r3, #1
 80035bc:	21f4      	movs	r1, #244	@ 0xf4
 80035be:	47a0      	blx	r4
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
				p_bme280->oversamp_temperature = v_value_u8;
 80035c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 80035ce:	f107 030e 	add.w	r3, r7, #14
 80035d2:	2201      	movs	r2, #1
 80035d4:	4619      	mov	r1, r3
 80035d6:	20f4      	movs	r0, #244	@ 0xf4
 80035d8:	f000 fbb6 	bl	8003d48 <bme280_read_register>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 80035e0:	4b17      	ldr	r3, [pc, #92]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	7bba      	ldrb	r2, [r7, #14]
 80035e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 80035ea:	f107 030e 	add.w	r3, r7, #14
 80035ee:	2201      	movs	r2, #1
 80035f0:	4619      	mov	r1, r3
 80035f2:	20f2      	movs	r0, #242	@ 0xf2
 80035f4:	f000 fba8 	bl	8003d48 <bme280_read_register>
 80035f8:	4603      	mov	r3, r0
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	4413      	add	r3, r2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 8003604:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	7bba      	ldrb	r2, [r7, #14]
 800360a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				/* read the control
				configuration register value*/
				com_rslt += bme280_read_register(
 800360e:	f107 030e 	add.w	r3, r7, #14
 8003612:	2201      	movs	r2, #1
 8003614:	4619      	mov	r1, r3
 8003616:	20f5      	movs	r0, #245	@ 0xf5
 8003618:	f000 fb96 	bl	8003d48 <bme280_read_register>
 800361c:	4603      	mov	r3, r0
 800361e:	b2da      	uxtb	r2, r3
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	4413      	add	r3, r2
 8003624:	b2db      	uxtb	r3, r3
 8003626:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <bme280_set_oversamp_temperature+0x178>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	7bba      	ldrb	r2, [r7, #14]
 800362e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		}
	return com_rslt;
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	bf00      	nop
 8003640:	2000079c 	.word	0x2000079c

08003644 <bme280_set_oversamp_pressure>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_pressure(
u8 v_value_u8)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 800364e:	23ff      	movs	r3, #255	@ 0xff
 8003650:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 8003652:	2300      	movs	r3, #0
 8003654:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 8003656:	2300      	movs	r3, #0
 8003658:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 800365a:	2300      	movs	r3, #0
 800365c:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 800365e:	2300      	movs	r3, #0
 8003660:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003662:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <bme280_set_oversamp_pressure+0x2c>
		return E_BME280_NULL_PTR;
 800366a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800366e:	e099      	b.n	80037a4 <bme280_set_oversamp_pressure+0x160>
		} else {
			v_data_u8 = p_bme280->ctrl_meas_reg;
 8003670:	4b4e      	ldr	r3, [pc, #312]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8003678:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	b25b      	sxtb	r3, r3
 800367e:	f023 031c 	bic.w	r3, r3, #28
 8003682:	b25a      	sxtb	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	f003 031c 	and.w	r3, r3, #28
 800368e:	b25b      	sxtb	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b25b      	sxtb	r3, r3
 8003694:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8003696:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8003698:	f107 030d 	add.w	r3, r7, #13
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f961 	bl	8003964 <bme280_get_power_mode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 80036a6:	7b7b      	ldrb	r3, [r7, #13]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d034      	beq.n	8003716 <bme280_set_oversamp_pressure+0xd2>
				com_rslt += bme280_set_soft_rst();
 80036ac:	f000 fa46 	bl	8003b3c <bme280_set_soft_rst>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	4413      	add	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 80036bc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	2003      	movs	r0, #3
 80036c4:	4798      	blx	r3
				/* write previous value of
				configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 80036c6:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80036ce:	72fb      	strb	r3, [r7, #11]
				com_rslt = bme280_write_register(
 80036d0:	f107 030b 	add.w	r3, r7, #11
 80036d4:	2201      	movs	r2, #1
 80036d6:	4619      	mov	r1, r3
 80036d8:	20f5      	movs	r0, #245	@ 0xf5
 80036da:	f000 fb0f 	bl	8003cfc <bme280_write_register>
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 80036e2:	4b32      	ldr	r3, [pc, #200]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
				v_pre_ctrl_hum_value_u8 =
 80036ea:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	2201      	movs	r2, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	20f2      	movs	r0, #242	@ 0xf2
 80036f6:	f000 fb01 	bl	8003cfc <bme280_write_register>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	4413      	add	r3, r2
 8003702:	b2db      	uxtb	r3, r3
 8003704:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous and updated value of
				control measurement register*/
				bme280_write_register(
 8003706:	f107 030e 	add.w	r3, r7, #14
 800370a:	2201      	movs	r2, #1
 800370c:	4619      	mov	r1, r3
 800370e:	20f4      	movs	r0, #244	@ 0xf4
 8003710:	f000 faf4 	bl	8003cfc <bme280_write_register>
 8003714:	e00d      	b.n	8003732 <bme280_set_oversamp_pressure+0xee>
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8003716:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003724:	f107 020e 	add.w	r2, r7, #14
 8003728:	2301      	movs	r3, #1
 800372a:	21f4      	movs	r1, #244	@ 0xf4
 800372c:	47a0      	blx	r4
 800372e:	4603      	mov	r3, r0
 8003730:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
				p_bme280->oversamp_pressure = v_value_u8;
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	79fa      	ldrb	r2, [r7, #7]
 8003738:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 800373c:	f107 030e 	add.w	r3, r7, #14
 8003740:	2201      	movs	r2, #1
 8003742:	4619      	mov	r1, r3
 8003744:	20f4      	movs	r0, #244	@ 0xf4
 8003746:	f000 faff 	bl	8003d48 <bme280_read_register>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 800374e:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	7bba      	ldrb	r2, [r7, #14]
 8003754:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 8003758:	f107 030e 	add.w	r3, r7, #14
 800375c:	2201      	movs	r2, #1
 800375e:	4619      	mov	r1, r3
 8003760:	20f2      	movs	r0, #242	@ 0xf2
 8003762:	f000 faf1 	bl	8003d48 <bme280_read_register>
 8003766:	4603      	mov	r3, r0
 8003768:	b2da      	uxtb	r2, r3
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	4413      	add	r3, r2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	7bba      	ldrb	r2, [r7, #14]
 8003778:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				/* read the control
				configuration register value*/
				com_rslt += bme280_read_register(
 800377c:	f107 030e 	add.w	r3, r7, #14
 8003780:	2201      	movs	r2, #1
 8003782:	4619      	mov	r1, r3
 8003784:	20f5      	movs	r0, #245	@ 0xf5
 8003786:	f000 fadf 	bl	8003d48 <bme280_read_register>
 800378a:	4603      	mov	r3, r0
 800378c:	b2da      	uxtb	r2, r3
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	4413      	add	r3, r2
 8003792:	b2db      	uxtb	r3, r3
 8003794:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 8003796:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <bme280_set_oversamp_pressure+0x168>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	7bba      	ldrb	r2, [r7, #14]
 800379c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		}
	return com_rslt;
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	2000079c 	.word	0x2000079c

080037b0 <bme280_set_oversamp_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_humidity(
u8 v_value_u8)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80037ba:	23ff      	movs	r3, #255	@ 0xff
 80037bc:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80037be:	2300      	movs	r3, #0
 80037c0:	73bb      	strb	r3, [r7, #14]
	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	737b      	strb	r3, [r7, #13]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	733b      	strb	r3, [r7, #12]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80037ce:	4b64      	ldr	r3, [pc, #400]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <bme280_set_oversamp_humidity+0x2c>
		return E_BME280_NULL_PTR;
 80037d6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80037da:	e0bc      	b.n	8003956 <bme280_set_oversamp_humidity+0x1a6>
		} else {
			/* write humidity oversampling*/
			v_data_u8 = p_bme280->ctrl_hum_reg;
 80037dc:	4b60      	ldr	r3, [pc, #384]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80037e4:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	f023 0307 	bic.w	r3, r3, #7
 80037ee:	b25a      	sxtb	r2, r3
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8003800:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8003802:	f107 030b 	add.w	r3, r7, #11
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f8ac 	bl	8003964 <bme280_get_power_mode>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d03e      	beq.n	8003894 <bme280_set_oversamp_humidity+0xe4>
				com_rslt += bme280_set_soft_rst();
 8003816:	f000 f991 	bl	8003b3c <bme280_set_soft_rst>
 800381a:	4603      	mov	r3, r0
 800381c:	b2da      	uxtb	r2, r3
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	4413      	add	r3, r2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 8003826:	4b4e      	ldr	r3, [pc, #312]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2003      	movs	r0, #3
 800382e:	4798      	blx	r3
				/* write previous value of
				configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 8003830:	4b4b      	ldr	r3, [pc, #300]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003838:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	2201      	movs	r2, #1
 8003840:	4619      	mov	r1, r3
 8003842:	20f5      	movs	r0, #245	@ 0xf5
 8003844:	f000 fa5a 	bl	8003cfc <bme280_write_register>
 8003848:	4603      	mov	r3, r0
 800384a:	b2da      	uxtb	r2, r3
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	4413      	add	r3, r2
 8003850:	b2db      	uxtb	r3, r3
 8003852:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write the value of control humidity*/
				com_rslt += bme280_write_register(
 8003854:	f107 030e 	add.w	r3, r7, #14
 8003858:	2201      	movs	r2, #1
 800385a:	4619      	mov	r1, r3
 800385c:	20f2      	movs	r0, #242	@ 0xf2
 800385e:	f000 fa4d 	bl	8003cfc <bme280_write_register>
 8003862:	4603      	mov	r3, r0
 8003864:	b2da      	uxtb	r2, r3
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4413      	add	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				control measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 800386e:	4b3c      	ldr	r3, [pc, #240]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
				pre_ctrl_meas_value =
 8003876:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 8003878:	f107 030d 	add.w	r3, r7, #13
 800387c:	2201      	movs	r2, #1
 800387e:	4619      	mov	r1, r3
 8003880:	20f4      	movs	r0, #244	@ 0xf4
 8003882:	f000 fa3b 	bl	8003cfc <bme280_write_register>
 8003886:	4603      	mov	r3, r0
 8003888:	b2da      	uxtb	r2, r3
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	4413      	add	r3, r2
 800388e:	b2db      	uxtb	r3, r3
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e023      	b.n	80038dc <bme280_set_oversamp_humidity+0x12c>
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt +=
				p_bme280->BME280_BUS_WRITE_FUNC(
 8003894:	4b32      	ldr	r3, [pc, #200]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800389a:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 80038a2:	f107 020e 	add.w	r2, r7, #14
 80038a6:	2301      	movs	r3, #1
 80038a8:	21f2      	movs	r1, #242	@ 0xf2
 80038aa:	47a0      	blx	r4
 80038ac:	4603      	mov	r3, r0
 80038ae:	b2da      	uxtb	r2, r3
				com_rslt +=
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	4413      	add	r3, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
				BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* Control humidity write will effective only
				after the control measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 80038b8:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
				pre_ctrl_meas_value =
 80038c0:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 80038c2:	f107 030d 	add.w	r3, r7, #13
 80038c6:	2201      	movs	r2, #1
 80038c8:	4619      	mov	r1, r3
 80038ca:	20f4      	movs	r0, #244	@ 0xf4
 80038cc:	f000 fa16 	bl	8003cfc <bme280_write_register>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	4413      	add	r3, r2
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
			p_bme280->oversamp_humidity = v_value_u8;
 80038dc:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	79fa      	ldrb	r2, [r7, #7]
 80038e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			/* read the control measurement register value*/
			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
 80038e6:	f107 030e 	add.w	r3, r7, #14
 80038ea:	2201      	movs	r2, #1
 80038ec:	4619      	mov	r1, r3
 80038ee:	20f4      	movs	r0, #244	@ 0xf4
 80038f0:	f000 fa2a 	bl	8003d48 <bme280_read_register>
 80038f4:	4603      	mov	r3, r0
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4413      	add	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_meas_reg = v_data_u8;
 8003900:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	7bba      	ldrb	r2, [r7, #14]
 8003906:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			/* read the control humidity register value*/
			com_rslt += bme280_read_register(
 800390a:	f107 030e 	add.w	r3, r7, #14
 800390e:	2201      	movs	r2, #1
 8003910:	4619      	mov	r1, r3
 8003912:	20f2      	movs	r0, #242	@ 0xf2
 8003914:	f000 fa18 	bl	8003d48 <bme280_read_register>
 8003918:	4603      	mov	r3, r0
 800391a:	b2da      	uxtb	r2, r3
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	4413      	add	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	73fb      	strb	r3, [r7, #15]
			BME280_CTRL_HUMIDITY_REG,
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_hum_reg = v_data_u8;
 8003924:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	7bba      	ldrb	r2, [r7, #14]
 800392a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			/* read the control configuration register value*/
			com_rslt += bme280_read_register(BME280_CONFIG_REG,
 800392e:	f107 030e 	add.w	r3, r7, #14
 8003932:	2201      	movs	r2, #1
 8003934:	4619      	mov	r1, r3
 8003936:	20f5      	movs	r0, #245	@ 0xf5
 8003938:	f000 fa06 	bl	8003d48 <bme280_read_register>
 800393c:	4603      	mov	r3, r0
 800393e:	b2da      	uxtb	r2, r3
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	4413      	add	r3, r2
 8003944:	b2db      	uxtb	r3, r3
 8003946:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->config_reg = v_data_u8;
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <bme280_set_oversamp_humidity+0x1b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	7bba      	ldrb	r2, [r7, #14]
 800394e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		}
	return com_rslt;
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	bf00      	nop
 8003960:	2000079c 	.word	0x2000079c

08003964 <bme280_get_power_mode>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_get_power_mode(u8 *v_power_mode_u8)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 800396c:	23ff      	movs	r3, #255	@ 0xff
 800396e:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8r = BME280_INIT_VALUE;
 8003970:	2300      	movs	r3, #0
 8003972:	73bb      	strb	r3, [r7, #14]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003974:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <bme280_get_power_mode+0x54>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <bme280_get_power_mode+0x1e>
		return E_BME280_NULL_PTR;
 800397c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003980:	e015      	b.n	80039ae <bme280_get_power_mode+0x4a>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <bme280_get_power_mode+0x54>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <bme280_get_power_mode+0x54>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003990:	f107 020e 	add.w	r2, r7, #14
 8003994:	2301      	movs	r3, #1
 8003996:	21f4      	movs	r1, #244	@ 0xf4
 8003998:	47a0      	blx	r4
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_CTRL_MEAS_REG_POWER_MODE__REG,
			&v_mode_u8r, BME280_GEN_READ_WRITE_DATA_LENGTH);
			*v_power_mode_u8 = BME280_GET_BITSLICE(v_mode_u8r,
 800399e:	7bbb      	ldrb	r3, [r7, #14]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	701a      	strb	r2, [r3, #0]
			BME280_CTRL_MEAS_REG_POWER_MODE);
		}
	return com_rslt;
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	2000079c 	.word	0x2000079c

080039bc <bme280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_power_mode(u8 v_power_mode_u8)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 80039c6:	23ff      	movs	r3, #255	@ 0xff
 80039c8:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8r = BME280_INIT_VALUE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	72fb      	strb	r3, [r7, #11]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80039da:	2300      	movs	r3, #0
 80039dc:	72bb      	strb	r3, [r7, #10]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80039de:	4b56      	ldr	r3, [pc, #344]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <bme280_set_power_mode+0x30>
		return E_BME280_NULL_PTR;
 80039e6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80039ea:	e0a0      	b.n	8003b2e <bme280_set_power_mode+0x172>
		} else {
			if (v_power_mode_u8 <= BME280_NORMAL_MODE) {
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	f200 8099 	bhi.w	8003b26 <bme280_set_power_mode+0x16a>
				v_mode_u8r = p_bme280->ctrl_meas_reg;
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80039fc:	73bb      	strb	r3, [r7, #14]
				v_mode_u8r =
				BME280_SET_BITSLICE(v_mode_u8r,
 80039fe:	7bbb      	ldrb	r3, [r7, #14]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	4313      	orrs	r3, r2
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
				v_mode_u8r =
 8003a18:	73bb      	strb	r3, [r7, #14]
				BME280_CTRL_MEAS_REG_POWER_MODE,
				v_power_mode_u8);
				com_rslt = bme280_get_power_mode(
 8003a1a:	f107 030d 	add.w	r3, r7, #13
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ffa0 	bl	8003964 <bme280_get_power_mode>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
					&v_prev_pow_mode_u8);
				if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8003a28:	7b7b      	ldrb	r3, [r7, #13]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d03a      	beq.n	8003aa4 <bme280_set_power_mode+0xe8>
					com_rslt += bme280_set_soft_rst();
 8003a2e:	f000 f885 	bl	8003b3c <bme280_set_soft_rst>
 8003a32:	4603      	mov	r3, r0
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	4413      	add	r3, r2
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
					p_bme280->delay_msec(BME280_3MS_DELAY);
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	2003      	movs	r0, #3
 8003a46:	4798      	blx	r3
					/* write previous value of
					configuration register*/
					v_pre_config_value_u8 =
					p_bme280->config_reg;
 8003a48:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
					v_pre_config_value_u8 =
 8003a50:	72fb      	strb	r3, [r7, #11]
					com_rslt = bme280_write_register(
 8003a52:	f107 030b 	add.w	r3, r7, #11
 8003a56:	2201      	movs	r2, #1
 8003a58:	4619      	mov	r1, r3
 8003a5a:	20f5      	movs	r0, #245	@ 0xf5
 8003a5c:	f000 f94e 	bl	8003cfc <bme280_write_register>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
					&v_pre_config_value_u8,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
					/* write previous value of
					humidity oversampling*/
					v_pre_ctrl_hum_value_u8 =
					p_bme280->ctrl_hum_reg;
 8003a64:	4b34      	ldr	r3, [pc, #208]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
					v_pre_ctrl_hum_value_u8 =
 8003a6c:	733b      	strb	r3, [r7, #12]
					com_rslt += bme280_write_register(
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	2201      	movs	r2, #1
 8003a74:	4619      	mov	r1, r3
 8003a76:	20f2      	movs	r0, #242	@ 0xf2
 8003a78:	f000 f940 	bl	8003cfc <bme280_write_register>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	4413      	add	r3, r2
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
					&v_pre_ctrl_hum_value_u8,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
					/* write previous and updated value of
					control measurement register*/
					com_rslt += bme280_write_register(
 8003a88:	f107 030e 	add.w	r3, r7, #14
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4619      	mov	r1, r3
 8003a90:	20f4      	movs	r0, #244	@ 0xf4
 8003a92:	f000 f933 	bl	8003cfc <bme280_write_register>
 8003a96:	4603      	mov	r3, r0
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	73fb      	strb	r3, [r7, #15]
 8003aa2:	e00d      	b.n	8003ac0 <bme280_set_power_mode+0x104>
					BME280_CTRL_MEAS_REG,
					&v_mode_u8r,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
				} else {
					com_rslt =
					p_bme280->BME280_BUS_WRITE_FUNC(
 8003aa4:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003aaa:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003ab2:	f107 020e 	add.w	r2, r7, #14
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	21f4      	movs	r1, #244	@ 0xf4
 8003aba:	47a0      	blx	r4
 8003abc:	4603      	mov	r3, r0
 8003abe:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8r,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
				}
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 8003ac0:	f107 030a 	add.w	r3, r7, #10
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	20f4      	movs	r0, #244	@ 0xf4
 8003aca:	f000 f93d 	bl	8003d48 <bme280_read_register>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	7aba      	ldrb	r2, [r7, #10]
 8003ad8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 8003adc:	f107 030a 	add.w	r3, r7, #10
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	20f2      	movs	r0, #242	@ 0xf2
 8003ae6:	f000 f92f 	bl	8003d48 <bme280_read_register>
 8003aea:	4603      	mov	r3, r0
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	4413      	add	r3, r2
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	7aba      	ldrb	r2, [r7, #10]
 8003afc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				/* read the config register value*/
				com_rslt += bme280_read_register(
 8003b00:	f107 030a 	add.w	r3, r7, #10
 8003b04:	2201      	movs	r2, #1
 8003b06:	4619      	mov	r1, r3
 8003b08:	20f5      	movs	r0, #245	@ 0xf5
 8003b0a:	f000 f91d 	bl	8003d48 <bme280_read_register>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	4413      	add	r3, r2
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <bme280_set_power_mode+0x17c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	7aba      	ldrb	r2, [r7, #10]
 8003b20:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003b24:	e001      	b.n	8003b2a <bme280_set_power_mode+0x16e>
			} else {
			com_rslt = E_BME280_OUT_OF_RANGE;
 8003b26:	23fe      	movs	r3, #254	@ 0xfe
 8003b28:	73fb      	strb	r3, [r7, #15]
			}
		}
	return com_rslt;
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000079c 	.word	0x2000079c

08003b3c <bme280_set_soft_rst>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_soft_rst(void)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8003b42:	23ff      	movs	r3, #255	@ 0xff
 8003b44:	71fb      	strb	r3, [r7, #7]
	u8 v_data_u8 = BME280_SOFT_RESET_CODE;
 8003b46:	23b6      	movs	r3, #182	@ 0xb6
 8003b48:	71bb      	strb	r3, [r7, #6]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <bme280_set_soft_rst+0x44>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <bme280_set_soft_rst+0x1c>
		return E_BME280_NULL_PTR;
 8003b52:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003b56:	e00e      	b.n	8003b76 <bme280_set_soft_rst+0x3a>
		} else {
			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8003b58:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <bme280_set_soft_rst+0x44>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <bme280_set_soft_rst+0x44>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003b66:	1dba      	adds	r2, r7, #6
 8003b68:	2301      	movs	r3, #1
 8003b6a:	21e0      	movs	r1, #224	@ 0xe0
 8003b6c:	47a0      	blx	r4
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
			p_bme280->dev_addr,
			BME280_RST_REG, &v_data_u8,
			BME280_GEN_READ_WRITE_DATA_LENGTH);
		}
	return com_rslt;
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000079c 	.word	0x2000079c

08003b84 <bme280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_standby_durn(u8 v_standby_durn_u8)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8003b8e:	23ff      	movs	r3, #255	@ 0xff
 8003b90:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73bb      	strb	r3, [r7, #14]
	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	737b      	strb	r3, [r7, #13]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	733b      	strb	r3, [r7, #12]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003ba2:	4b55      	ldr	r3, [pc, #340]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <bme280_set_standby_durn+0x2c>
		return E_BME280_NULL_PTR;
 8003baa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003bae:	e09f      	b.n	8003cf0 <bme280_set_standby_durn+0x16c>
		} else {
			v_data_u8 = p_bme280->config_reg;
 8003bb0:	4b51      	ldr	r3, [pc, #324]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003bb8:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	b25a      	sxtb	r2, r3
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	015b      	lsls	r3, r3, #5
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8003bd0:	73bb      	strb	r3, [r7, #14]
			BME280_CONFIG_REG_TSB, v_standby_durn_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fec4 	bl	8003964 <bme280_get_power_mode>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8003be0:	7b3b      	ldrb	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03e      	beq.n	8003c64 <bme280_set_standby_durn+0xe0>
				com_rslt += bme280_set_soft_rst();
 8003be6:	f7ff ffa9 	bl	8003b3c <bme280_set_soft_rst>
 8003bea:	4603      	mov	r3, r0
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 8003bf6:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	4798      	blx	r3
				/* write previous and updated value of
				configuration register*/
				com_rslt += bme280_write_register(
 8003c00:	f107 030e 	add.w	r3, r7, #14
 8003c04:	2201      	movs	r2, #1
 8003c06:	4619      	mov	r1, r3
 8003c08:	20f5      	movs	r0, #245	@ 0xf5
 8003c0a:	f000 f877 	bl	8003cfc <bme280_write_register>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 8003c1a:	4b37      	ldr	r3, [pc, #220]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
				v_pre_ctrl_hum_value_u8 =
 8003c22:	72fb      	strb	r3, [r7, #11]
				com_rslt += bme280_write_register(
 8003c24:	f107 030b 	add.w	r3, r7, #11
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	20f2      	movs	r0, #242	@ 0xf2
 8003c2e:	f000 f865 	bl	8003cfc <bme280_write_register>
 8003c32:	4603      	mov	r3, r0
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	4413      	add	r3, r2
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	73fb      	strb	r3, [r7, #15]
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of control
				measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
				pre_ctrl_meas_value =
 8003c46:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 8003c48:	f107 030d 	add.w	r3, r7, #13
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4619      	mov	r1, r3
 8003c50:	20f4      	movs	r0, #244	@ 0xf4
 8003c52:	f000 f853 	bl	8003cfc <bme280_write_register>
 8003c56:	4603      	mov	r3, r0
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	e00d      	b.n	8003c80 <bme280_set_standby_durn+0xfc>
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt =
				p_bme280->BME280_BUS_WRITE_FUNC(
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003c6a:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003c72:	f107 020e 	add.w	r2, r7, #14
 8003c76:	2301      	movs	r3, #1
 8003c78:	21f5      	movs	r1, #245	@ 0xf5
 8003c7a:	47a0      	blx	r4
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CONFIG_REG_TSB__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
			/* read the control measurement register value*/
			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
 8003c80:	f107 030e 	add.w	r3, r7, #14
 8003c84:	2201      	movs	r2, #1
 8003c86:	4619      	mov	r1, r3
 8003c88:	20f4      	movs	r0, #244	@ 0xf4
 8003c8a:	f000 f85d 	bl	8003d48 <bme280_read_register>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_meas_reg = v_data_u8;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	7bba      	ldrb	r2, [r7, #14]
 8003ca0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			/* read the control humidity register value*/
			com_rslt += bme280_read_register(
 8003ca4:	f107 030e 	add.w	r3, r7, #14
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4619      	mov	r1, r3
 8003cac:	20f2      	movs	r0, #242	@ 0xf2
 8003cae:	f000 f84b 	bl	8003d48 <bme280_read_register>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	73fb      	strb	r3, [r7, #15]
			BME280_CTRL_HUMIDITY_REG,
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_hum_reg = v_data_u8;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	7bba      	ldrb	r2, [r7, #14]
 8003cc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			/* read the configuration register value*/
			com_rslt += bme280_read_register(BME280_CONFIG_REG,
 8003cc8:	f107 030e 	add.w	r3, r7, #14
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4619      	mov	r1, r3
 8003cd0:	20f5      	movs	r0, #245	@ 0xf5
 8003cd2:	f000 f839 	bl	8003d48 <bme280_read_register>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	4413      	add	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->config_reg = v_data_u8;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <bme280_set_standby_durn+0x174>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	7bba      	ldrb	r2, [r7, #14]
 8003ce8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		}
	return com_rslt;
 8003cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd90      	pop	{r4, r7, pc}
 8003cf8:	2000079c 	.word	0x2000079c

08003cfc <bme280_write_register>:
 *
 *
 */
BME280_RETURN_FUNCTION_TYPE bme280_write_register(u8 v_addr_u8,
u8 *v_data_u8, u8 v_len_u8)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	71bb      	strb	r3, [r7, #6]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8003d0c:	23ff      	movs	r3, #255	@ 0xff
 8003d0e:	73fb      	strb	r3, [r7, #15]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003d10:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <bme280_write_register+0x48>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <bme280_write_register+0x22>
		return E_BME280_NULL_PTR;
 8003d18:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003d1c:	e00e      	b.n	8003d3c <bme280_write_register+0x40>
		} else {
			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8003d1e:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <bme280_write_register+0x48>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <bme280_write_register+0x48>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	79f9      	ldrb	r1, [r7, #7]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	47a0      	blx	r4
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			v_addr_u8, v_data_u8, v_len_u8);
		}
	return com_rslt;
 8003d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	2000079c 	.word	0x2000079c

08003d48 <bme280_read_register>:
 *
 *
 */
BME280_RETURN_FUNCTION_TYPE bme280_read_register(u8 v_addr_u8,
u8 *v_data_u8, u8 v_len_u8)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71bb      	strb	r3, [r7, #6]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = BME280_ERROR;
 8003d58:	23ff      	movs	r3, #255	@ 0xff
 8003d5a:	73fb      	strb	r3, [r7, #15]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <bme280_read_register+0x48>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <bme280_read_register+0x22>
		return E_BME280_NULL_PTR;
 8003d64:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8003d68:	e00e      	b.n	8003d88 <bme280_read_register+0x40>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <bme280_read_register+0x48>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <bme280_read_register+0x48>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 8003d78:	79bb      	ldrb	r3, [r7, #6]
 8003d7a:	79f9      	ldrb	r1, [r7, #7]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	47a0      	blx	r4
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			v_addr_u8, v_data_u8, v_len_u8);
		}
	return com_rslt;
 8003d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd90      	pop	{r4, r7, pc}
 8003d90:	2000079c 	.word	0x2000079c

08003d94 <bme280_data_readout_template>:
/* This function is an example for reading sensor data
 *	\param: None
 *	\return: communication result
 */
s32 bme280_data_readout_template(env_data_t *env_data)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b090      	sub	sp, #64	@ 0x40
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* The variable used to assign the standby time*/
	u8 v_stand_by_time_u8 = BME280_INIT_VALUE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	/* The variable used to read uncompensated temperature*/
	s32 v_data_uncomp_temp_s32 = BME280_INIT_VALUE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* The variable used to read uncompensated pressure*/
	s32 v_data_uncomp_pres_s32 = BME280_INIT_VALUE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
	/* The variable used to read uncompensated pressure*/
	s32 v_data_uncomp_hum_s32 = BME280_INIT_VALUE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
	/* The variable used to read compensated temperature*/
	s32 v_comp_temp_s32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
	/* The variable used to read compensated pressure*/
	u32 v_comp_press_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
	/* The variable used to read compensated humidity*/
	u32 v_comp_humidity_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]

	/* result of communication results*/
	s32 com_rslt = ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 /*********************** START INITIALIZATION ************************/
  /*	Based on the user need configure I2C or SPI interface.
  *	It is example code to explain how to use the bme280 API*/
 	#ifdef BME280_API
	//I2C_routine();
	SPI_routine();
 8003dca:	f000 f8c5 	bl	8003f58 <SPI_routine>
 *	I2C address
 *	Bus Write
 *	Bus read
 *	Chip id
*-------------------------------------------------------------------------*/
	com_rslt = bme280_init(&bme280);
 8003dce:	485f      	ldr	r0, [pc, #380]	@ (8003f4c <bme280_data_readout_template+0x1b8>)
 8003dd0:	f7fe ffa4 	bl	8002d1c <bme280_init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	/*	For initialization it is required to set the mode of
	 *	the sensor as "NORMAL"
	 *	data acquisition/read/write is possible in this mode
	 *	by using the below API able to set the power mode as NORMAL*/
	/* Set the power mode as NORMAL*/
	com_rslt += bme280_set_power_mode(BME280_FORCED_MODE);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7ff fdef 	bl	80039bc <bme280_set_power_mode>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	4413      	add	r3, r2
 8003de6:	63bb      	str	r3, [r7, #56]	@ 0x38
	 * changes to this registers only become effective after a write operation to
	 * "BME280_CTRLMEAS_REG" register.
	 * In the code automated reading and writing of "BME280_CTRLHUM_REG_OSRSH"
	 * register first set the "BME280_CTRLHUM_REG_OSRSH" and then read and write
	 * the "BME280_CTRLMEAS_REG" register in the function*/
	com_rslt += bme280_set_oversamp_humidity(BME280_OVERSAMP_1X);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7ff fce1 	bl	80037b0 <bme280_set_oversamp_humidity>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	4413      	add	r3, r2
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* set the pressure oversampling*/
	com_rslt += bme280_set_oversamp_pressure(BME280_OVERSAMP_1X);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7ff fc23 	bl	8003644 <bme280_set_oversamp_pressure>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	4413      	add	r3, r2
 8003e06:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* set the temperature oversampling*/
	com_rslt += bme280_set_oversamp_temperature(BME280_OVERSAMP_1X);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7ff fb5d 	bl	80034c8 <bme280_set_oversamp_temperature>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	4413      	add	r3, r2
 8003e16:	63bb      	str	r3, [r7, #56]	@ 0x38
	 *	Normal mode comprises an automated perpetual cycling between an (active)
	 *	Measurement period and an (inactive) standby period.
	 *	The standby time is determined by the contents of the register t_sb.
	 *	Standby time can be set using BME280_STANDBYTIME_125_MS.
	 *	Usage Hint : bme280_set_standbydur(BME280_STANDBYTIME_125_MS)*/
	com_rslt += bme280_set_standby_durn(BME280_STANDBY_TIME_1_MS);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff feb3 	bl	8003b84 <bme280_set_standby_durn>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	4413      	add	r3, r2
 8003e26:	63bb      	str	r3, [r7, #56]	@ 0x38
************ START READ UNCOMPENSATED PRESSURE, TEMPERATURE
AND HUMIDITY DATA ********
*---------------------------------------------------------------------*/

	/* API is used to read the uncompensated humidity*/
	com_rslt += bme280_read_uncomp_humidity(&v_data_uncomp_hum_s32);
 8003e28:	f107 0320 	add.w	r3, r7, #32
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f933 	bl	8003098 <bme280_read_uncomp_humidity>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	4413      	add	r3, r2
 8003e3a:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* API is used to read the uncompensated temperature*/
	com_rslt += bme280_read_uncomp_temperature(&v_data_uncomp_temp_s32);
 8003e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe ffb9 	bl	8002db8 <bme280_read_uncomp_temperature>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	4413      	add	r3, r2
 8003e4e:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* API is used to read the uncompensated pressure*/
	com_rslt += bme280_read_uncomp_pressure(&v_data_uncomp_pres_s32);
 8003e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f831 	bl	8002ebc <bme280_read_uncomp_pressure>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	4413      	add	r3, r2
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8003e64:	f00d fe22 	bl	8011aac <vPortExitCritical>
	HAL_Delay(100);
 8003e68:	2064      	movs	r0, #100	@ 0x64
 8003e6a:	f7fd fd51 	bl	8001910 <HAL_Delay>
	taskENTER_CRITICAL();
 8003e6e:	f00d fdeb 	bl	8011a48 <vPortEnterCritical>
	/* API is used to read the uncompensated temperature,pressure
	and humidity data */
	com_rslt += bme280_read_uncomp_pressure_temperature_humidity(
 8003e72:	f107 0220 	add.w	r2, r7, #32
 8003e76:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f9a0 	bl	80031c4 <bme280_read_uncomp_pressure_temperature_humidity>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8a:	4413      	add	r3, r2
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
/*------------------------------------------------------------------*
************ START READ COMPENSATED PRESSURE, TEMPERATURE
AND HUMIDITY DATA ********
*---------------------------------------------------------------------*/
	/* API is used to compute the compensated temperature*/
	v_comp_temp_s32[0] = bme280_compensate_temperature_int32(
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe ffcb 	bl	8002e2c <bme280_compensate_temperature_int32>
 8003e96:	4603      	mov	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]
			v_data_uncomp_temp_s32);

	/* API is used to compute the compensated pressure*/
	v_comp_press_u32[0] = bme280_compensate_pressure_int32(
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f847 	bl	8002f30 <bme280_compensate_pressure_int32>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	613b      	str	r3, [r7, #16]
			v_data_uncomp_pres_s32);

	/* API is used to compute the compensated humidity*/
	v_comp_humidity_u32[0] = bme280_compensate_humidity_int32(
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f921 	bl	80030f0 <bme280_compensate_humidity_int32>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	60bb      	str	r3, [r7, #8]
			v_data_uncomp_hum_s32);

	/* API is used to read the compensated temperature, humidity and pressure*/
	com_rslt += bme280_read_pressure_temperature_humidity(
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	f107 0318 	add.w	r3, r7, #24
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	f107 0310 	add.w	r3, r7, #16
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff f9cb 	bl	8003260 <bme280_read_pressure_temperature_humidity>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	4413      	add	r3, r2
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
	&v_comp_press_u32[1], &v_comp_temp_s32[1],  &v_comp_humidity_u32[1]);

	float imp_temp = ((float)(v_comp_temp_s32[1])/100);		// convert to fahrenheit
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ede:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003f50 <bme280_data_readout_template+0x1bc>
 8003ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	//float temp = ((float)v_comp_temp_s32[1]/100);
	float imp_press = ((float)(v_comp_press_u32[1])/100); 	// convert to inches of mercury
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8003f50 <bme280_data_readout_template+0x1bc>
 8003ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003efc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//float press = ((float)(v_comp_press_u32[1])/100);
	float imp_humi = ((float)(v_comp_humidity_u32[1])/1024);		// relative humidity
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f0a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003f54 <bme280_data_readout_template+0x1c0>
 8003f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f12:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	env_data->temp = imp_temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f1a:	601a      	str	r2, [r3, #0]
	env_data->press = imp_press;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f20:	605a      	str	r2, [r3, #4]
	env_data->hum = imp_humi;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f26:	609a      	str	r2, [r3, #8]
	env_data->timestamp = HAL_GetTick();
 8003f28:	f001 fe6a 	bl	8005c00 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]
	 *	the device reaches the lowest power consumption only
	 *	In SLEEP mode no measurements are performed
	 *	All registers are accessible
	 *	by using the below API able to set the power mode as SLEEP*/
	 /* Set the power mode as SLEEP*/
	com_rslt += bme280_set_power_mode(BME280_SLEEP_MODE);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7ff fd42 	bl	80039bc <bme280_set_power_mode>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	4413      	add	r3, r2
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
/*---------------------------------------------------------------------*
************************* END DE-INITIALIZATION **********************
*---------------------------------------------------------------------*/
return com_rslt;
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3740      	adds	r7, #64	@ 0x40
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200007a0 	.word	0x200007a0
 8003f50:	42c80000 	.word	0x42c80000
 8003f54:	44800000 	.word	0x44800000

08003f58 <SPI_routine>:

/*---------------------------------------------------------------------------*
 * The following function is used to map the SPI bus read, write and delay
 * with global structure bme280
 *--------------------------------------------------------------------------*/
s8 SPI_routine(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
 *	Bus write function pointer: BME280_WR_FUNC_PTR
 *	Bus read function pointer: BME280_RD_FUNC_PTR
 *	Delay function pointer: delay_msec
 *--------------------------------------------------------------------------*/

	bme280.bus_write = BME280_SPI_bus_write;
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <SPI_routine+0x3c>)
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f98 <SPI_routine+0x40>)
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
	bme280.bus_read = BME280_SPI_bus_read;
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <SPI_routine+0x3c>)
 8003f64:	4a0d      	ldr	r2, [pc, #52]	@ (8003f9c <SPI_routine+0x44>)
 8003f66:	635a      	str	r2, [r3, #52]	@ 0x34
	bme280.delay_msec = BME280_delay_msek;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <SPI_routine+0x3c>)
 8003f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa0 <SPI_routine+0x48>)
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
/*--------------------------------------------------------------------------*
 *  Drop the chip select pin to low - this tells the BME280 to
 *  use SPI mode. It will not respond to I2C commands until you
 *  reset the power to it.
 */
	HAL_GPIO_WritePin(SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_RESET);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2110      	movs	r1, #16
 8003f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f76:	f002 fcb3 	bl	80068e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f7fd fcc8 	bl	8001910 <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_SET);
 8003f80:	2201      	movs	r2, #1
 8003f82:	2110      	movs	r1, #16
 8003f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f88:	f002 fcaa 	bl	80068e0 <HAL_GPIO_WritePin>

	return BME280_INIT_VALUE;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200007a0 	.word	0x200007a0
 8003f98:	0800409d 	.word	0x0800409d
 8003f9c:	08003fa5 	.word	0x08003fa5
 8003fa0:	08004181 	.word	0x08004181

08003fa4 <BME280_SPI_bus_read>:
 *	\param reg_addr : Address of the first register, will data is going to be read
 *	\param reg_data : This data read from the sensor, which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
s8 BME280_SPI_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b094      	sub	sp, #80	@ 0x50
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	603a      	str	r2, [r7, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	71bb      	strb	r3, [r7, #6]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	s32 iError=BME280_INIT_VALUE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	647b      	str	r3, [r7, #68]	@ 0x44
	u8 txarray[SPI_BUFFER_LEN]={0,};
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
 8003fd8:	615a      	str	r2, [r3, #20]
	u8 rxarray[SPI_BUFFER_LEN] = {0,};
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	615a      	str	r2, [r3, #20]
	u8 stringpos;
	/*	For the SPI mode only 7 bits of register addresses are used.
	The MSB of register address is declared the bit what functionality it is
	read/write (read as 1/write as BME280_INIT_VALUE)*/
	txarray[BME280_INIT_VALUE] = reg_addr|SPI_READ;/*read routine is initiated register address is mask with 0x80*/
 8003ff0:	79bb      	ldrb	r3, [r7, #6]
 8003ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	HAL_GPIO_WritePin( SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_RESET );
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2110      	movs	r1, #16
 8004000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004004:	f002 fc6c 	bl	80068e0 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive( &hspi1, (uint8_t *)(&txarray), (uint8_t *)(&rxarray), cnt+1, 5);
 8004008:	797b      	ldrb	r3, [r7, #5]
 800400a:	b29b      	uxth	r3, r3
 800400c:	3301      	adds	r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	f107 0208 	add.w	r2, r7, #8
 8004014:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004018:	2005      	movs	r0, #5
 800401a:	9000      	str	r0, [sp, #0]
 800401c:	481e      	ldr	r0, [pc, #120]	@ (8004098 <BME280_SPI_bus_read+0xf4>)
 800401e:	f007 f9b9 	bl	800b394 <HAL_SPI_TransmitReceive>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while( hspi1.State == HAL_SPI_STATE_BUSY ) {};
 8004028:	bf00      	nop
 800402a:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <BME280_SPI_bus_read+0xf4>)
 800402c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d0f9      	beq.n	800402a <BME280_SPI_bus_read+0x86>
	HAL_GPIO_WritePin( SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_SET );
 8004036:	2201      	movs	r2, #1
 8004038:	2110      	movs	r1, #16
 800403a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800403e:	f002 fc4f 	bl	80068e0 <HAL_GPIO_WritePin>
	HAL_Delay(5); // since i can't find a buffer flushing command
 8004042:	2005      	movs	r0, #5
 8004044:	f7fd fc64 	bl	8001910 <HAL_Delay>
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800404e:	e010      	b.n	8004072 <BME280_SPI_bus_read+0xce>
		*(reg_data + stringpos) = rxarray[stringpos+BME280_DATA_INDEX];
 8004050:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	440b      	add	r3, r1
 800405e:	3248      	adds	r2, #72	@ 0x48
 8004060:	443a      	add	r2, r7
 8004062:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8004066:	701a      	strb	r2, [r3, #0]
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8004068:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800406c:	3301      	adds	r3, #1
 800406e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004072:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004076:	797b      	ldrb	r3, [r7, #5]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3e9      	bcc.n	8004050 <BME280_SPI_bus_read+0xac>
	}

    if (status != HAL_OK)
 800407c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <BME280_SPI_bus_read+0xe6>
    {
    	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
    	iError = (-1);
 8004084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004088:	647b      	str	r3, [r7, #68]	@ 0x44
    }
	return (s8)iError;
 800408a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408c:	b25b      	sxtb	r3, r3
}
 800408e:	4618      	mov	r0, r3
 8004090:	3748      	adds	r7, #72	@ 0x48
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000364 	.word	0x20000364

0800409c <BME280_SPI_bus_write>:
 *	\param reg_data : It is a value hold in the array,
 *		will be used for write the value into the register
 *	\param cnt : The no of byte of data to be write
 */
s8 BME280_SPI_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b092      	sub	sp, #72	@ 0x48
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	603a      	str	r2, [r7, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
 80040aa:	460b      	mov	r3, r1
 80040ac:	71bb      	strb	r3, [r7, #6]
 80040ae:	4613      	mov	r3, r2
 80040b0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	s32 iError = BME280_INIT_VALUE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	647b      	str	r3, [r7, #68]	@ 0x44
	u8 array[SPI_BUFFER_LEN * BME280_ADDRESS_INDEX];
	u8 stringpos = BME280_INIT_VALUE;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	u8 index = BME280_INIT_VALUE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ce:	e023      	b.n	8004118 <BME280_SPI_bus_write+0x7c>
		/* the operation of (reg_addr++)&0x7F done as per the
		SPI communication protocol specified in the data sheet*/
		index = stringpos * BME280_ADDRESS_INDEX;
 80040d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		array[index] = (reg_addr++) & SPI_WRITE;
 80040da:	79bb      	ldrb	r3, [r7, #6]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	71ba      	strb	r2, [r7, #6]
 80040e0:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80040e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e8:	b2d9      	uxtb	r1, r3
 80040ea:	f102 0348 	add.w	r3, r2, #72	@ 0x48
 80040ee:	443b      	add	r3, r7
 80040f0:	460a      	mov	r2, r1
 80040f2:	f803 2c40 	strb.w	r2, [r3, #-64]
		//printf("%X ", array[stringpos]);
		array[index + BME280_DATA_INDEX] = *(reg_data + stringpos);
 80040f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	441a      	add	r2, r3
 80040fe:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8004102:	3301      	adds	r3, #1
 8004104:	7812      	ldrb	r2, [r2, #0]
 8004106:	3348      	adds	r3, #72	@ 0x48
 8004108:	443b      	add	r3, r7
 800410a:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 800410e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004112:	3301      	adds	r3, #1
 8004114:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004118:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800411c:	797b      	ldrb	r3, [r7, #5]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3d6      	bcc.n	80040d0 <BME280_SPI_bus_write+0x34>
	}

	HAL_GPIO_WritePin( SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_RESET );
 8004122:	2200      	movs	r2, #0
 8004124:	2110      	movs	r1, #16
 8004126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800412a:	f002 fbd9 	bl	80068e0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit( &hspi1, (uint8_t*)(&array), cnt*2, 100);
 800412e:	797b      	ldrb	r3, [r7, #5]
 8004130:	b29b      	uxth	r3, r3
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	f107 0108 	add.w	r1, r7, #8
 800413a:	2364      	movs	r3, #100	@ 0x64
 800413c:	480f      	ldr	r0, [pc, #60]	@ (800417c <BME280_SPI_bus_write+0xe0>)
 800413e:	f006 ffb4 	bl	800b0aa <HAL_SPI_Transmit>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while( hspi1.State == HAL_SPI_STATE_BUSY ) {};
 8004148:	bf00      	nop
 800414a:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <BME280_SPI_bus_write+0xe0>)
 800414c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d0f9      	beq.n	800414a <BME280_SPI_bus_write+0xae>
	HAL_GPIO_WritePin( SPI1_Cs_GPIO_Port, SPI1_Cs_Pin, GPIO_PIN_SET );
 8004156:	2201      	movs	r2, #1
 8004158:	2110      	movs	r1, #16
 800415a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800415e:	f002 fbbf 	bl	80068e0 <HAL_GPIO_WritePin>

    if (status != HAL_OK)
 8004162:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <BME280_SPI_bus_write+0xd4>
    {
    	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
    	iError = (-1);
 800416a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
	return (s8)iError;
 8004170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004172:	b25b      	sxtb	r3, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	3748      	adds	r7, #72	@ 0x48
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000364 	.word	0x20000364

08004180 <BME280_delay_msek>:

/*	Brief : The delay routine
 *	\param : delay in ms
*/
void BME280_delay_msek(u32 msek)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	/*Here you can write your own delay routine*/
	HAL_Delay(10*msek);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fbbc 	bl	8001910 <HAL_Delay>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <read_env_data>:
#include "env.h"

env_data_t env_data;

int read_env_data()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
    bme280_data_readout_template(&env_data);
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <read_env_data+0x14>)
 80041a6:	f7ff fdf5 	bl	8003d94 <bme280_data_readout_template>
    return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041ae:	4618      	mov	r0, r3
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200007dc 	.word	0x200007dc

080041b8 <feed_nmea>:
#include "stm32l4xx_hal.h"

uint8_t nmea_buffer[MINMEA_MAX_SENTENCE_LENGTH];
size_t nmea_buffer_pos = 0;
gnss_data_t gnss_data;
int feed_nmea(uint8_t code){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	@ 0x30
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
    if(code == '\n' || code == '\r'){
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	2b0a      	cmp	r3, #10
 80041c6:	d002      	beq.n	80041ce <feed_nmea+0x16>
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	2b0d      	cmp	r3, #13
 80041cc:	d168      	bne.n	80042a0 <feed_nmea+0xe8>
        nmea_buffer[nmea_buffer_pos] = '\0';
 80041ce:	4b3f      	ldr	r3, [pc, #252]	@ (80042cc <feed_nmea+0x114>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a3f      	ldr	r2, [pc, #252]	@ (80042d0 <feed_nmea+0x118>)
 80041d4:	2100      	movs	r1, #0
 80041d6:	54d1      	strb	r1, [r2, r3]
        nmea_buffer_pos = 0;
 80041d8:	4b3c      	ldr	r3, [pc, #240]	@ (80042cc <feed_nmea+0x114>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        switch (minmea_sentence_id(nmea_buffer, false))
 80041de:	2100      	movs	r1, #0
 80041e0:	483b      	ldr	r0, [pc, #236]	@ (80042d0 <feed_nmea+0x118>)
 80041e2:	f000 fd19 	bl	8004c18 <minmea_sentence_id>
 80041e6:	4603      	mov	r3, r0
 80041e8:	3301      	adds	r3, #1
 80041ea:	2b0a      	cmp	r3, #10
 80041ec:	d855      	bhi.n	800429a <feed_nmea+0xe2>
 80041ee:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <feed_nmea+0x3c>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800429b 	.word	0x0800429b
 8004200:	0800422d 	.word	0x0800422d
 8004204:	0800429b 	.word	0x0800429b
 8004208:	0800424b 	.word	0x0800424b
 800420c:	0800429b 	.word	0x0800429b
 8004210:	0800429b 	.word	0x0800429b
 8004214:	0800429b 	.word	0x0800429b
 8004218:	0800429b 	.word	0x0800429b
 800421c:	08004267 	.word	0x08004267
        {
            case MINMEA_INVALID:
                return MINMEA_INVALID;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004224:	e04e      	b.n	80042c4 <feed_nmea+0x10c>
            case MINMEA_UNKNOWN:
                return MINMEA_INVALID;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800422a:	e04b      	b.n	80042c4 <feed_nmea+0x10c>
            case MINMEA_SENTENCE_GBS:
                break;
            case MINMEA_SENTENCE_GGA:
                if(minmea_parse_gga(&gnss_data.gga, nmea_buffer)){
 800422c:	4928      	ldr	r1, [pc, #160]	@ (80042d0 <feed_nmea+0x118>)
 800422e:	4829      	ldr	r0, [pc, #164]	@ (80042d4 <feed_nmea+0x11c>)
 8004230:	f000 fd9c 	bl	8004d6c <minmea_parse_gga>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <feed_nmea+0x8e>
                    gnss_data.gga_time = HAL_GetTick();
 800423a:	f001 fce1 	bl	8005c00 <HAL_GetTick>
 800423e:	4603      	mov	r3, r0
 8004240:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <feed_nmea+0x120>)
 8004242:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

                }
                return 0;
 8004246:	2300      	movs	r3, #0
 8004248:	e03c      	b.n	80042c4 <feed_nmea+0x10c>
            case MINMEA_SENTENCE_GLL:
                break;
            case MINMEA_SENTENCE_GSA:
                if(minmea_parse_gsa(&gnss_data.gsa, nmea_buffer)){
 800424a:	4921      	ldr	r1, [pc, #132]	@ (80042d0 <feed_nmea+0x118>)
 800424c:	4822      	ldr	r0, [pc, #136]	@ (80042d8 <feed_nmea+0x120>)
 800424e:	f000 fdf1 	bl	8004e34 <minmea_parse_gsa>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <feed_nmea+0xaa>
                    gnss_data.gsa_time = HAL_GetTick();
 8004258:	f001 fcd2 	bl	8005c00 <HAL_GetTick>
 800425c:	4603      	mov	r3, r0
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <feed_nmea+0x120>)
 8004260:	6513      	str	r3, [r2, #80]	@ 0x50

                }
                return 0;
 8004262:	2300      	movs	r3, #0
 8004264:	e02e      	b.n	80042c4 <feed_nmea+0x10c>
                break;
            case MINMEA_SENTENCE_VTG:
                break;
            case MINMEA_SENTENCE_ZDA:
                struct minmea_sentence_zda zda;
                if(minmea_parse_zda(&zda, nmea_buffer)){
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4919      	ldr	r1, [pc, #100]	@ (80042d0 <feed_nmea+0x118>)
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe65 	bl	8004f3c <minmea_parse_zda>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <feed_nmea+0xde>
                    gnss_data.recent_timestamp = HAL_GetTick();
 8004278:	f001 fcc2 	bl	8005c00 <HAL_GetTick>
 800427c:	4603      	mov	r3, r0
 800427e:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <feed_nmea+0x120>)
 8004280:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
                    minmea_getdatetime(&gnss_data.recent_time, &zda.date, &zda.time);
 8004284:	f107 020c 	add.w	r2, r7, #12
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	3310      	adds	r3, #16
 800428e:	4619      	mov	r1, r3
 8004290:	4812      	ldr	r0, [pc, #72]	@ (80042dc <feed_nmea+0x124>)
 8004292:	f000 fe9f 	bl	8004fd4 <minmea_getdatetime>
                }
                return 0;
 8004296:	2300      	movs	r3, #0
 8004298:	e014      	b.n	80042c4 <feed_nmea+0x10c>
        }
        return -2;
 800429a:	f06f 0301 	mvn.w	r3, #1
 800429e:	e011      	b.n	80042c4 <feed_nmea+0x10c>
    }else{
        nmea_buffer[nmea_buffer_pos++] = code;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <feed_nmea+0x114>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4909      	ldr	r1, [pc, #36]	@ (80042cc <feed_nmea+0x114>)
 80042a8:	600a      	str	r2, [r1, #0]
 80042aa:	4909      	ldr	r1, [pc, #36]	@ (80042d0 <feed_nmea+0x118>)
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	54ca      	strb	r2, [r1, r3]
        if(nmea_buffer_pos >= MINMEA_MAX_SENTENCE_LENGTH){
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <feed_nmea+0x114>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80042b6:	d905      	bls.n	80042c4 <feed_nmea+0x10c>
            nmea_buffer_pos = 0;
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <feed_nmea+0x114>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
            return MINMEA_INVALID;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042c2:	e7ff      	b.n	80042c4 <feed_nmea+0x10c>
        }
    }
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	@ 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	2000083c 	.word	0x2000083c
 80042d0:	200007ec 	.word	0x200007ec
 80042d4:	20000894 	.word	0x20000894
 80042d8:	20000840 	.word	0x20000840
 80042dc:	200008ec 	.word	0x200008ec

080042e0 <minmea_isfield>:

/**
 * Check whether a character belongs to the set of characters allowed in a
 * sentence data field.
 */
static inline bool minmea_isfield(char c) {
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <minmea_isfield+0x40>)
 80042f0:	4413      	add	r3, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <minmea_isfield+0x2c>
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b2c      	cmp	r3, #44	@ 0x2c
 8004300:	d004      	beq.n	800430c <minmea_isfield+0x2c>
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2b2a      	cmp	r3, #42	@ 0x2a
 8004306:	d001      	beq.n	800430c <minmea_isfield+0x2c>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <minmea_isfield+0x2e>
 800430c:	2300      	movs	r3, #0
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	080132ac 	.word	0x080132ac

08004324 <hex2int>:
#include <stdarg.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b2f      	cmp	r3, #47	@ 0x2f
 8004332:	d905      	bls.n	8004340 <hex2int+0x1c>
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	2b39      	cmp	r3, #57	@ 0x39
 8004338:	d802      	bhi.n	8004340 <hex2int+0x1c>
        return c - '0';
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	3b30      	subs	r3, #48	@ 0x30
 800433e:	e013      	b.n	8004368 <hex2int+0x44>
    if (c >= 'A' && c <= 'F')
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d905      	bls.n	8004352 <hex2int+0x2e>
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	2b46      	cmp	r3, #70	@ 0x46
 800434a:	d802      	bhi.n	8004352 <hex2int+0x2e>
        return c - 'A' + 10;
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	3b37      	subs	r3, #55	@ 0x37
 8004350:	e00a      	b.n	8004368 <hex2int+0x44>
    if (c >= 'a' && c <= 'f')
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b60      	cmp	r3, #96	@ 0x60
 8004356:	d905      	bls.n	8004364 <hex2int+0x40>
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b66      	cmp	r3, #102	@ 0x66
 800435c:	d802      	bhi.n	8004364 <hex2int+0x40>
        return c - 'a' + 10;
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	3b57      	subs	r3, #87	@ 0x57
 8004362:	e001      	b.n	8004368 <hex2int+0x44>
    return -1;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <minmea_check>:

    return checksum;
}

bool minmea_check(const char *sentence, bool strict)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0x00;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b24      	cmp	r3, #36	@ 0x24
 800438e:	d008      	beq.n	80043a2 <minmea_check+0x2e>
        return false;
 8004390:	2300      	movs	r3, #0
 8004392:	e05d      	b.n	8004450 <minmea_check+0xdc>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	4053      	eors	r3, r2
 80043a0:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <minmea_check+0x52>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b0:	d009      	beq.n	80043c6 <minmea_check+0x52>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	4a27      	ldr	r2, [pc, #156]	@ (8004458 <minmea_check+0xe4>)
 80043ba:	4413      	add	r3, r2
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <minmea_check+0x20>

    // If checksum is present...
    if (*sentence == '*') {
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80043cc:	d129      	bne.n	8004422 <minmea_check+0xae>
        // Extract checksum.
        sentence++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3301      	adds	r3, #1
 80043d2:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ffa1 	bl	8004324 <hex2int>
 80043e2:	6138      	str	r0, [r7, #16]
        if (upper == -1)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ea:	d101      	bne.n	80043f0 <minmea_check+0x7c>
            return false;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e02f      	b.n	8004450 <minmea_check+0xdc>
        int lower = hex2int(*sentence++);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff93 	bl	8004324 <hex2int>
 80043fe:	60f8      	str	r0, [r7, #12]
        if (lower == -1)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004406:	d101      	bne.n	800440c <minmea_check+0x98>
            return false;
 8004408:	2300      	movs	r3, #0
 800440a:	e021      	b.n	8004450 <minmea_check+0xdc>
        int expected = upper << 4 | lower;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d009      	beq.n	8004432 <minmea_check+0xbe>
            return false;
 800441e:	2300      	movs	r3, #0
 8004420:	e016      	b.n	8004450 <minmea_check+0xdc>
    } else if (strict) {
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <minmea_check+0xbe>
        // Discard non-checksummed frames in strict mode.
        return false;
 8004428:	2300      	movs	r3, #0
 800442a:	e011      	b.n	8004450 <minmea_check+0xdc>
    }

    // The only stuff allowed at this point is a newline.
    while (*sentence == '\r' || *sentence == '\n') {
        sentence++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
    while (*sentence == '\r' || *sentence == '\n') {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b0d      	cmp	r3, #13
 8004438:	d0f8      	beq.n	800442c <minmea_check+0xb8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b0a      	cmp	r3, #10
 8004440:	d0f4      	beq.n	800442c <minmea_check+0xb8>
    }
    
    if (*sentence) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <minmea_check+0xda>
        return false;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <minmea_check+0xdc>
    }

    return true;
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	080132ac 	.word	0x080132ac

0800445c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800445c:	b40e      	push	{r1, r2, r3}
 800445e:	b580      	push	{r7, lr}
 8004460:	b0a7      	sub	sp, #156	@ 0x9c
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
    bool result = false;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    bool optional = false;
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    if (sentence == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <minmea_scan+0x20>
        return false;
 8004478:	2300      	movs	r3, #0
 800447a:	e3c0      	b.n	8004bfe <minmea_scan+0x7a2>

    va_list ap;
    va_start(ap, format);
 800447c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8004488:	e394      	b.n	8004bb4 <minmea_scan+0x758>
        char type = *format++;
 800448a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        if (type == ';') {
 800449a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800449e:	2b3b      	cmp	r3, #59	@ 0x3b
 80044a0:	d103      	bne.n	80044aa <minmea_scan+0x4e>
            // All further fields are optional.
            optional = true;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
            continue;
 80044a8:	e384      	b.n	8004bb4 <minmea_scan+0x758>
        }

        if (!field && !optional) {
 80044aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <minmea_scan+0x66>
 80044b2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8383 	bne.w	8004bc8 <minmea_scan+0x76c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80044c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80044c6:	3b44      	subs	r3, #68	@ 0x44
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	f200 837f 	bhi.w	8004bcc <minmea_scan+0x770>
 80044ce:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <minmea_scan+0x78>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004911 	.word	0x08004911
 80044d8:	08004bcd 	.word	0x08004bcd
 80044dc:	08004bcd 	.word	0x08004bcd
 80044e0:	08004bcd 	.word	0x08004bcd
 80044e4:	08004bcd 	.word	0x08004bcd
 80044e8:	08004bcd 	.word	0x08004bcd
 80044ec:	08004bcd 	.word	0x08004bcd
 80044f0:	08004bcd 	.word	0x08004bcd
 80044f4:	08004bcd 	.word	0x08004bcd
 80044f8:	08004bcd 	.word	0x08004bcd
 80044fc:	08004bcd 	.word	0x08004bcd
 8004500:	08004bcd 	.word	0x08004bcd
 8004504:	08004bcd 	.word	0x08004bcd
 8004508:	08004bcd 	.word	0x08004bcd
 800450c:	08004bcd 	.word	0x08004bcd
 8004510:	08004bcd 	.word	0x08004bcd
 8004514:	08004a07 	.word	0x08004a07
 8004518:	08004bcd 	.word	0x08004bcd
 800451c:	08004bcd 	.word	0x08004bcd
 8004520:	08004bcd 	.word	0x08004bcd
 8004524:	08004bcd 	.word	0x08004bcd
 8004528:	08004bcd 	.word	0x08004bcd
 800452c:	08004bcd 	.word	0x08004bcd
 8004530:	08004bcd 	.word	0x08004bcd
 8004534:	08004bcd 	.word	0x08004bcd
 8004538:	08004bcd 	.word	0x08004bcd
 800453c:	08004bcd 	.word	0x08004bcd
 8004540:	08004b7f 	.word	0x08004b7f
 8004544:	08004bcd 	.word	0x08004bcd
 8004548:	08004bcd 	.word	0x08004bcd
 800454c:	08004bcd 	.word	0x08004bcd
 8004550:	08004599 	.word	0x08004599
 8004554:	080045d3 	.word	0x080045d3
 8004558:	08004bcd 	.word	0x08004bcd
 800455c:	08004677 	.word	0x08004677
 8004560:	08004bcd 	.word	0x08004bcd
 8004564:	08004bcd 	.word	0x08004bcd
 8004568:	08004823 	.word	0x08004823
 800456c:	08004bcd 	.word	0x08004bcd
 8004570:	08004bcd 	.word	0x08004bcd
 8004574:	08004bcd 	.word	0x08004bcd
 8004578:	08004bcd 	.word	0x08004bcd
 800457c:	08004bcd 	.word	0x08004bcd
 8004580:	08004bcd 	.word	0x08004bcd
 8004584:	08004bcd 	.word	0x08004bcd
 8004588:	08004bcd 	.word	0x08004bcd
 800458c:	08004bcd 	.word	0x08004bcd
 8004590:	08004861 	.word	0x08004861
 8004594:	080048a3 	.word	0x080048a3
            case 'c': { // Single character field (char).
                char value = '\0';
 8004598:	2300      	movs	r3, #0
 800459a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

                if (field && minmea_isfield(*field))
 800459e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <minmea_scan+0x166>
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fe97 	bl	80042e0 <minmea_isfield>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <minmea_scan+0x166>
                    value = *field;
 80045b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

                *va_arg(ap, char *) = value;
 80045c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80045ce:	701a      	strb	r2, [r3, #0]
            } break;
 80045d0:	e2d6      	b.n	8004b80 <minmea_scan+0x724>

            case 'd': { // Single character direction field (int).
                int value = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                if (field && minmea_isfield(*field)) {
 80045d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d042      	beq.n	8004666 <minmea_scan+0x20a>
 80045e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fe7a 	bl	80042e0 <minmea_isfield>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d039      	beq.n	8004666 <minmea_scan+0x20a>
                    switch (*field) {
 80045f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	3b45      	subs	r3, #69	@ 0x45
 80045fa:	2b12      	cmp	r3, #18
 80045fc:	f200 82e8 	bhi.w	8004bd0 <minmea_scan+0x774>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <minmea_scan+0x1ac>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004655 	.word	0x08004655
 800460c:	08004bd1 	.word	0x08004bd1
 8004610:	08004bd1 	.word	0x08004bd1
 8004614:	08004bd1 	.word	0x08004bd1
 8004618:	08004bd1 	.word	0x08004bd1
 800461c:	08004bd1 	.word	0x08004bd1
 8004620:	08004bd1 	.word	0x08004bd1
 8004624:	08004bd1 	.word	0x08004bd1
 8004628:	08004bd1 	.word	0x08004bd1
 800462c:	08004655 	.word	0x08004655
 8004630:	08004bd1 	.word	0x08004bd1
 8004634:	08004bd1 	.word	0x08004bd1
 8004638:	08004bd1 	.word	0x08004bd1
 800463c:	08004bd1 	.word	0x08004bd1
 8004640:	0800465d 	.word	0x0800465d
 8004644:	08004bd1 	.word	0x08004bd1
 8004648:	08004bd1 	.word	0x08004bd1
 800464c:	08004bd1 	.word	0x08004bd1
 8004650:	0800465d 	.word	0x0800465d
                        case 'N':
                        case 'E':
                            value = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            break;
 800465a:	e004      	b.n	8004666 <minmea_scan+0x20a>
                        case 'S':
                        case 'W':
                            value = -1;
 800465c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            break;
 8004664:	bf00      	nop
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	1d1a      	adds	r2, r3, #4
 800466a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004672:	601a      	str	r2, [r3, #0]
            } break;
 8004674:	e284      	b.n	8004b80 <minmea_scan+0x724>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                int_least32_t value = -1;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                int_least32_t scale = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8004688:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8095 	beq.w	80047bc <minmea_scan+0x360>
                    while (minmea_isfield(*field)) {
 8004692:	e089      	b.n	80047a8 <minmea_scan+0x34c>
                        if (*field == '+' && !sign && value == -1) {
 8004694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b2b      	cmp	r3, #43	@ 0x2b
 800469c:	d10c      	bne.n	80046b8 <minmea_scan+0x25c>
 800469e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <minmea_scan+0x25c>
 80046a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ae:	d103      	bne.n	80046b8 <minmea_scan+0x25c>
                            sign = 1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046b6:	e072      	b.n	800479e <minmea_scan+0x342>
                        } else if (*field == '-' && !sign && value == -1) {
 80046b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b2d      	cmp	r3, #45	@ 0x2d
 80046c0:	d10d      	bne.n	80046de <minmea_scan+0x282>
 80046c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <minmea_scan+0x282>
 80046ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d2:	d104      	bne.n	80046de <minmea_scan+0x282>
                            sign = -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046dc:	e05f      	b.n	800479e <minmea_scan+0x342>
                        } else if (isdigit((unsigned char) *field)) {
 80046de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a99      	ldr	r2, [pc, #612]	@ (800494c <minmea_scan+0x4f0>)
 80046e8:	4413      	add	r3, r2
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d034      	beq.n	800475e <minmea_scan+0x302>
                            int digit = *field - '0';
 80046f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	3b30      	subs	r3, #48	@ 0x30
 80046fc:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 80046fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004706:	d102      	bne.n	800470e <minmea_scan+0x2b2>
                                value = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800470e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004710:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	4a8e      	ldr	r2, [pc, #568]	@ (8004950 <minmea_scan+0x4f4>)
 8004718:	fb82 1203 	smull	r1, r2, r2, r3
 800471c:	1092      	asrs	r2, r2, #2
 800471e:	17db      	asrs	r3, r3, #31
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004726:	429a      	cmp	r2, r3
 8004728:	dd04      	ble.n	8004734 <minmea_scan+0x2d8>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800472a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8251 	beq.w	8004bd4 <minmea_scan+0x778>
                                    /* truncate extra precision */
                                    break;
 8004732:	e043      	b.n	80047bc <minmea_scan+0x360>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8004734:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	461a      	mov	r2, r3
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	4413      	add	r3, r2
 8004746:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            if (scale)
 800474a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d026      	beq.n	800479e <minmea_scan+0x342>
                                scale *= 10;
 8004750:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800475c:	e01f      	b.n	800479e <minmea_scan+0x342>
                        } else if (*field == '.' && scale == 0) {
 800475e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b2e      	cmp	r3, #46	@ 0x2e
 8004766:	d105      	bne.n	8004774 <minmea_scan+0x318>
 8004768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <minmea_scan+0x318>
                            scale = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004772:	e014      	b.n	800479e <minmea_scan+0x342>
                        } else if (*field == ' ') {
 8004774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 822c 	bne.w	8004bd8 <minmea_scan+0x77c>
                            /* Allow spaces at the start of the field. Not NMEA
                             * conformant, but some modules do this. */
                            if (sign != 0 || value != -1 || scale != 0)
 8004780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 8229 	bne.w	8004bdc <minmea_scan+0x780>
 800478a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004792:	f040 8223 	bne.w	8004bdc <minmea_scan+0x780>
 8004796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 821f 	bne.w	8004bdc <minmea_scan+0x780>
                                goto parse_error;
                        } else {
                            goto parse_error;
                        }
                        field++;
 800479e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047a2:	3301      	adds	r3, #1
 80047a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                    while (minmea_isfield(*field)) {
 80047a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd96 	bl	80042e0 <minmea_isfield>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f47f af6c 	bne.w	8004694 <minmea_scan+0x238>
                    }
                }

                if ((sign || scale) && value == -1)
 80047bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <minmea_scan+0x36e>
 80047c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <minmea_scan+0x37a>
 80047ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047d2:	f000 8205 	beq.w	8004be0 <minmea_scan+0x784>
                    goto parse_error;

                if (value == -1) {
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047de:	d105      	bne.n	80047ec <minmea_scan+0x390>
                    /* No digits were scanned. */
                    value = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    scale = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047ea:	e004      	b.n	80047f6 <minmea_scan+0x39a>
                } else if (scale == 0) {
 80047ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <minmea_scan+0x39a>
                    /* No decimal point. */
                    scale = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 80047f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <minmea_scan+0x3b2>
                    value *= sign;
 80047fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004802:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	1d1a      	adds	r2, r3, #4
 8004812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800481e:	605a      	str	r2, [r3, #4]
            } break;
 8004820:	e1ae      	b.n	8004b80 <minmea_scan+0x724>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8004826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <minmea_scan+0x3f6>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 800482e:	f107 0320 	add.w	r3, r7, #32
 8004832:	220a      	movs	r2, #10
 8004834:	4619      	mov	r1, r3
 8004836:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800483a:	f00d fbc9 	bl	8011fd0 <strtol>
 800483e:	67b8      	str	r0, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fd4b 	bl	80042e0 <minmea_isfield>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 81c9 	bne.w	8004be4 <minmea_scan+0x788>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800485c:	601a      	str	r2, [r3, #0]
            } break;
 800485e:	e18f      	b.n	8004b80 <minmea_scan+0x724>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8004860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 800486a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <minmea_scan+0x43e>
                    while (minmea_isfield(*field))
 8004872:	e009      	b.n	8004888 <minmea_scan+0x42c>
                        *buf++ = *field++;
 8004874:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004878:	1c53      	adds	r3, r2, #1
 800487a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800487e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	6779      	str	r1, [r7, #116]	@ 0x74
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8004888:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd26 	bl	80042e0 <minmea_isfield>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ec      	bne.n	8004874 <minmea_scan+0x418>
                }

                *buf = '\0';
 800489a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
            } break;
 80048a0:	e16e      	b.n	8004b80 <minmea_scan+0x724>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80048a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 819e 	beq.w	8004be8 <minmea_scan+0x78c>
                    goto parse_error;

                if (field[0] != '$')
 80048ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b24      	cmp	r3, #36	@ 0x24
 80048b4:	f040 819a 	bne.w	8004bec <minmea_scan+0x790>
                    goto parse_error;
                for (int f=0; f<5; f++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80048bc:	e013      	b.n	80048e6 <minmea_scan+0x48a>
                    if (!minmea_isfield(field[1+f]))
 80048be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048c0:	3301      	adds	r3, #1
 80048c2:	461a      	mov	r2, r3
 80048c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fd07 	bl	80042e0 <minmea_isfield>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 8188 	bne.w	8004bf0 <minmea_scan+0x794>
                for (int f=0; f<5; f++)
 80048e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048e2:	3301      	adds	r3, #1
 80048e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	dde8      	ble.n	80048be <minmea_scan+0x462>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 80048f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048fa:	3301      	adds	r3, #1
 80048fc:	2205      	movs	r2, #5
 80048fe:	4619      	mov	r1, r3
 8004900:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004902:	f00d fc7e 	bl	8012202 <memcpy>
                buf[5] = '\0';
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	3305      	adds	r3, #5
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
            } break;
 800490e:	e137      	b.n	8004b80 <minmea_scan+0x724>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800491e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800492a:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 800492c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004930:	2b00      	cmp	r3, #0
 8004932:	d05e      	beq.n	80049f2 <minmea_scan+0x596>
 8004934:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fcd0 	bl	80042e0 <minmea_isfield>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d055      	beq.n	80049f2 <minmea_scan+0x596>
                    // Always six digits.
                    for (int f=0; f<6; f++)
 8004946:	2300      	movs	r3, #0
 8004948:	663b      	str	r3, [r7, #96]	@ 0x60
 800494a:	e014      	b.n	8004976 <minmea_scan+0x51a>
 800494c:	080132ac 	.word	0x080132ac
 8004950:	66666667 	.word	0x66666667
                        if (!isdigit((unsigned char) field[f]))
 8004954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004956:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800495a:	4413      	add	r3, r2
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4aaa      	ldr	r2, [pc, #680]	@ (8004c0c <minmea_scan+0x7b0>)
 8004962:	4413      	add	r3, r2
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8142 	beq.w	8004bf4 <minmea_scan+0x798>
                    for (int f=0; f<6; f++)
 8004970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004972:	3301      	adds	r3, #1
 8004974:	663b      	str	r3, [r7, #96]	@ 0x60
 8004976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004978:	2b05      	cmp	r3, #5
 800497a:	ddeb      	ble.n	8004954 <minmea_scan+0x4f8>
                            goto parse_error;

                    char dArr[] = {field[0], field[1], '\0'};
 800497c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	773b      	strb	r3, [r7, #28]
 8004984:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004988:	3301      	adds	r3, #1
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	777b      	strb	r3, [r7, #29]
 800498e:	2300      	movs	r3, #0
 8004990:	77bb      	strb	r3, [r7, #30]
                    char mArr[] = {field[2], field[3], '\0'};
 8004992:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004996:	3302      	adds	r3, #2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	763b      	strb	r3, [r7, #24]
 800499c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049a0:	3303      	adds	r3, #3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	767b      	strb	r3, [r7, #25]
 80049a6:	2300      	movs	r3, #0
 80049a8:	76bb      	strb	r3, [r7, #26]
                    char yArr[] = {field[4], field[5], '\0'};
 80049aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049ae:	3304      	adds	r3, #4
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	753b      	strb	r3, [r7, #20]
 80049b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049b8:	3305      	adds	r3, #5
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	757b      	strb	r3, [r7, #21]
 80049be:	2300      	movs	r3, #0
 80049c0:	75bb      	strb	r3, [r7, #22]
                    d = strtol(dArr, NULL, 10);
 80049c2:	f107 031c 	add.w	r3, r7, #28
 80049c6:	220a      	movs	r2, #10
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00d fb00 	bl	8011fd0 <strtol>
 80049d0:	66f8      	str	r0, [r7, #108]	@ 0x6c
                    m = strtol(mArr, NULL, 10);
 80049d2:	f107 0318 	add.w	r3, r7, #24
 80049d6:	220a      	movs	r2, #10
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f00d faf8 	bl	8011fd0 <strtol>
 80049e0:	66b8      	str	r0, [r7, #104]	@ 0x68
                    y = strtol(yArr, NULL, 10);
 80049e2:	f107 0314 	add.w	r3, r7, #20
 80049e6:	220a      	movs	r2, #10
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f00d faf0 	bl	8011fd0 <strtol>
 80049f0:	6678      	str	r0, [r7, #100]	@ 0x64
                }

                date->day = d;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049f6:	601a      	str	r2, [r3, #0]
                date->month = m;
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049fc:	605a      	str	r2, [r3, #4]
                date->year = y;
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a02:	609a      	str	r2, [r3, #8]
            } break;
 8004a04:	e0bc      	b.n	8004b80 <minmea_scan+0x724>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 8004a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a26:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8004a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8099 	beq.w	8004b64 <minmea_scan+0x708>
 8004a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fc51 	bl	80042e0 <minmea_isfield>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 808f 	beq.w	8004b64 <minmea_scan+0x708>
                    // Minimum required: integer time.
                    for (int f=0; f<6; f++)
 8004a46:	2300      	movs	r3, #0
 8004a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4a:	e010      	b.n	8004a6e <minmea_scan+0x612>
                        if (!isdigit((unsigned char) field[f]))
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a6c      	ldr	r2, [pc, #432]	@ (8004c0c <minmea_scan+0x7b0>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80c8 	beq.w	8004bf8 <minmea_scan+0x79c>
                    for (int f=0; f<6; f++)
 8004a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a70:	2b05      	cmp	r3, #5
 8004a72:	ddeb      	ble.n	8004a4c <minmea_scan+0x5f0>
                            goto parse_error;

                    char hArr[] = {field[0], field[1], '\0'};
 8004a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	743b      	strb	r3, [r7, #16]
 8004a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a80:	3301      	adds	r3, #1
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	747b      	strb	r3, [r7, #17]
 8004a86:	2300      	movs	r3, #0
 8004a88:	74bb      	strb	r3, [r7, #18]
                    char iArr[] = {field[2], field[3], '\0'};
 8004a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a8e:	3302      	adds	r3, #2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	733b      	strb	r3, [r7, #12]
 8004a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a98:	3303      	adds	r3, #3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	737b      	strb	r3, [r7, #13]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73bb      	strb	r3, [r7, #14]
                    char sArr[] = {field[4], field[5], '\0'};
 8004aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	723b      	strb	r3, [r7, #8]
 8004aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ab0:	3305      	adds	r3, #5
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	727b      	strb	r3, [r7, #9]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	72bb      	strb	r3, [r7, #10]
                    h = strtol(hArr, NULL, 10);
 8004aba:	f107 0310 	add.w	r3, r7, #16
 8004abe:	220a      	movs	r2, #10
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f00d fa84 	bl	8011fd0 <strtol>
 8004ac8:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    i = strtol(iArr, NULL, 10);
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	220a      	movs	r2, #10
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f00d fa7c 	bl	8011fd0 <strtol>
 8004ad8:	65b8      	str	r0, [r7, #88]	@ 0x58
                    s = strtol(sArr, NULL, 10);
 8004ada:	f107 0308 	add.w	r3, r7, #8
 8004ade:	220a      	movs	r2, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f00d fa74 	bl	8011fd0 <strtol>
 8004ae8:	6578      	str	r0, [r7, #84]	@ 0x54
                    field += 6;
 8004aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004aee:	3306      	adds	r3, #6
 8004af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8004af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b02:	d12d      	bne.n	8004b60 <minmea_scan+0x704>
                        uint32_t value = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	64bb      	str	r3, [r7, #72]	@ 0x48
                        uint32_t scale = 1000000LU;
 8004b08:	4b41      	ldr	r3, [pc, #260]	@ (8004c10 <minmea_scan+0x7b4>)
 8004b0a:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8004b0c:	e014      	b.n	8004b38 <minmea_scan+0x6dc>
                            value = (value * 10) + (*field++ - '0');
 8004b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	440b      	add	r3, r1
 8004b28:	3b30      	subs	r3, #48	@ 0x30
 8004b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2e:	4a39      	ldr	r2, [pc, #228]	@ (8004c14 <minmea_scan+0x7b8>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	08db      	lsrs	r3, r3, #3
 8004b36:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8004b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a32      	ldr	r2, [pc, #200]	@ (8004c0c <minmea_scan+0x7b0>)
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <minmea_scan+0x6f8>
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d8dc      	bhi.n	8004b0e <minmea_scan+0x6b2>
                        }
                        u = value * scale;
 8004b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5e:	e001      	b.n	8004b64 <minmea_scan+0x708>
                    } else {
                        u = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time_->hours = h;
 8004b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b68:	601a      	str	r2, [r3, #0]
                time_->minutes = i;
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b6e:	605a      	str	r2, [r3, #4]
                time_->seconds = s;
 8004b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b74:	609a      	str	r2, [r3, #8]
                time_->microseconds = u;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b7a:	60da      	str	r2, [r3, #12]
            } break;
 8004b7c:	e000      	b.n	8004b80 <minmea_scan+0x724>

            case '_': { // Ignore the field.
            } break;
 8004b7e:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 8004b80:	e002      	b.n	8004b88 <minmea_scan+0x72c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3301      	adds	r3, #1
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fba7 	bl	80042e0 <minmea_isfield>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f4      	bne.n	8004b82 <minmea_scan+0x726>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b2c      	cmp	r3, #44	@ 0x2c
 8004b9e:	d106      	bne.n	8004bae <minmea_scan+0x752>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bac:	e002      	b.n	8004bb4 <minmea_scan+0x758>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    while (*format) {
 8004bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f47f ac65 	bne.w	800448a <minmea_scan+0x2e>
    }

    result = true;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8004bc6:	e018      	b.n	8004bfa <minmea_scan+0x79e>
            goto parse_error;
 8004bc8:	bf00      	nop
 8004bca:	e016      	b.n	8004bfa <minmea_scan+0x79e>
                goto parse_error;
 8004bcc:	bf00      	nop
 8004bce:	e014      	b.n	8004bfa <minmea_scan+0x79e>
                            goto parse_error;
 8004bd0:	bf00      	nop
 8004bd2:	e012      	b.n	8004bfa <minmea_scan+0x79e>
                                    goto parse_error;
 8004bd4:	bf00      	nop
 8004bd6:	e010      	b.n	8004bfa <minmea_scan+0x79e>
                            goto parse_error;
 8004bd8:	bf00      	nop
 8004bda:	e00e      	b.n	8004bfa <minmea_scan+0x79e>
                                goto parse_error;
 8004bdc:	bf00      	nop
 8004bde:	e00c      	b.n	8004bfa <minmea_scan+0x79e>
                    goto parse_error;
 8004be0:	bf00      	nop
 8004be2:	e00a      	b.n	8004bfa <minmea_scan+0x79e>
                        goto parse_error;
 8004be4:	bf00      	nop
 8004be6:	e008      	b.n	8004bfa <minmea_scan+0x79e>
                    goto parse_error;
 8004be8:	bf00      	nop
 8004bea:	e006      	b.n	8004bfa <minmea_scan+0x79e>
                    goto parse_error;
 8004bec:	bf00      	nop
 8004bee:	e004      	b.n	8004bfa <minmea_scan+0x79e>
                        goto parse_error;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <minmea_scan+0x79e>
                            goto parse_error;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <minmea_scan+0x79e>
                            goto parse_error;
 8004bf8:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 8004bfa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	379c      	adds	r7, #156	@ 0x9c
 8004c02:	46bd      	mov	sp, r7
 8004c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c08:	b003      	add	sp, #12
 8004c0a:	4770      	bx	lr
 8004c0c:	080132ac 	.word	0x080132ac
 8004c10:	000f4240 	.word	0x000f4240
 8004c14:	cccccccd 	.word	0xcccccccd

08004c18 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
    if (!minmea_check(sentence, strict))
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fba3 	bl	8004374 <minmea_check>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f083 0301 	eor.w	r3, r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <minmea_sentence_id+0x28>
        return MINMEA_INVALID;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c3e:	e07c      	b.n	8004d3a <minmea_sentence_id+0x122>

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	461a      	mov	r2, r3
 8004c46:	493f      	ldr	r1, [pc, #252]	@ (8004d44 <minmea_sentence_id+0x12c>)
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fc07 	bl	800445c <minmea_scan>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f083 0301 	eor.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <minmea_sentence_id+0x48>
        return MINMEA_INVALID;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c5e:	e06c      	b.n	8004d3a <minmea_sentence_id+0x122>

    if (!strcmp(type+2, "GBS"))
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	3302      	adds	r3, #2
 8004c66:	4938      	ldr	r1, [pc, #224]	@ (8004d48 <minmea_sentence_id+0x130>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fab1 	bl	80001d0 <strcmp>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <minmea_sentence_id+0x60>
        return MINMEA_SENTENCE_GBS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e060      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "GGA"))
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	4933      	ldr	r1, [pc, #204]	@ (8004d4c <minmea_sentence_id+0x134>)
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb faa5 	bl	80001d0 <strcmp>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <minmea_sentence_id+0x78>
        return MINMEA_SENTENCE_GGA;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e054      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "GLL"))
 8004c90:	f107 0308 	add.w	r3, r7, #8
 8004c94:	3302      	adds	r3, #2
 8004c96:	492e      	ldr	r1, [pc, #184]	@ (8004d50 <minmea_sentence_id+0x138>)
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fa99 	bl	80001d0 <strcmp>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GLL;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e048      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "GSA"))
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	3302      	adds	r3, #2
 8004cae:	4929      	ldr	r1, [pc, #164]	@ (8004d54 <minmea_sentence_id+0x13c>)
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fb fa8d 	bl	80001d0 <strcmp>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <minmea_sentence_id+0xa8>
        return MINMEA_SENTENCE_GSA;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	e03c      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "GST"))
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	4924      	ldr	r1, [pc, #144]	@ (8004d58 <minmea_sentence_id+0x140>)
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fa81 	bl	80001d0 <strcmp>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <minmea_sentence_id+0xc0>
        return MINMEA_SENTENCE_GST;
 8004cd4:	2305      	movs	r3, #5
 8004cd6:	e030      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "GSV"))
 8004cd8:	f107 0308 	add.w	r3, r7, #8
 8004cdc:	3302      	adds	r3, #2
 8004cde:	491f      	ldr	r1, [pc, #124]	@ (8004d5c <minmea_sentence_id+0x144>)
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fa75 	bl	80001d0 <strcmp>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <minmea_sentence_id+0xd8>
        return MINMEA_SENTENCE_GSV;
 8004cec:	2306      	movs	r3, #6
 8004cee:	e024      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "RMC"))
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	491a      	ldr	r1, [pc, #104]	@ (8004d60 <minmea_sentence_id+0x148>)
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fa69 	bl	80001d0 <strcmp>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <minmea_sentence_id+0xf0>
        return MINMEA_SENTENCE_RMC;
 8004d04:	2307      	movs	r3, #7
 8004d06:	e018      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "VTG"))
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	4915      	ldr	r1, [pc, #84]	@ (8004d64 <minmea_sentence_id+0x14c>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fa5d 	bl	80001d0 <strcmp>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <minmea_sentence_id+0x108>
        return MINMEA_SENTENCE_VTG;
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	e00c      	b.n	8004d3a <minmea_sentence_id+0x122>
    if (!strcmp(type+2, "ZDA"))
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	3302      	adds	r3, #2
 8004d26:	4910      	ldr	r1, [pc, #64]	@ (8004d68 <minmea_sentence_id+0x150>)
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fa51 	bl	80001d0 <strcmp>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <minmea_sentence_id+0x120>
        return MINMEA_SENTENCE_ZDA;
 8004d34:	2309      	movs	r3, #9
 8004d36:	e000      	b.n	8004d3a <minmea_sentence_id+0x122>

    return MINMEA_UNKNOWN;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	080130a0 	.word	0x080130a0
 8004d48:	080130a4 	.word	0x080130a4
 8004d4c:	080130a8 	.word	0x080130a8
 8004d50:	080130ac 	.word	0x080130ac
 8004d54:	080130b0 	.word	0x080130b0
 8004d58:	080130b4 	.word	0x080130b4
 8004d5c:	080130b8 	.word	0x080130b8
 8004d60:	080130bc 	.word	0x080130bc
 8004d64:	080130c0 	.word	0x080130c0
 8004d68:	080130c4 	.word	0x080130c4

08004d6c <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	b097      	sub	sp, #92	@ 0x5c
 8004d70:	af0c      	add	r7, sp, #48	@ 0x30
 8004d72:	6178      	str	r0, [r7, #20]
 8004d74:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_",
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	3218      	adds	r2, #24
 8004d82:	60ba      	str	r2, [r7, #8]
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	3120      	adds	r1, #32
 8004d88:	6978      	ldr	r0, [r7, #20]
 8004d8a:	3024      	adds	r0, #36	@ 0x24
 8004d8c:	697c      	ldr	r4, [r7, #20]
 8004d8e:	3428      	adds	r4, #40	@ 0x28
 8004d90:	697d      	ldr	r5, [r7, #20]
 8004d92:	3530      	adds	r5, #48	@ 0x30
 8004d94:	697e      	ldr	r6, [r7, #20]
 8004d96:	3638      	adds	r6, #56	@ 0x38
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	323c      	adds	r2, #60	@ 0x3c
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	3244      	adds	r2, #68	@ 0x44
 8004da2:	603a      	str	r2, [r7, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	3248      	adds	r2, #72	@ 0x48
 8004da8:	f107 0c20 	add.w	ip, r7, #32
 8004dac:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004db6:	9608      	str	r6, [sp, #32]
 8004db8:	9507      	str	r5, [sp, #28]
 8004dba:	9406      	str	r4, [sp, #24]
 8004dbc:	9005      	str	r0, [sp, #20]
 8004dbe:	9104      	str	r1, [sp, #16]
 8004dc0:	f107 0118 	add.w	r1, r7, #24
 8004dc4:	9103      	str	r1, [sp, #12]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	f107 021c 	add.w	r2, r7, #28
 8004dce:	9201      	str	r2, [sp, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4662      	mov	r2, ip
 8004dd6:	4915      	ldr	r1, [pc, #84]	@ (8004e2c <minmea_parse_gga+0xc0>)
 8004dd8:	6938      	ldr	r0, [r7, #16]
 8004dda:	f7ff fb3f 	bl	800445c <minmea_scan>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f083 0301 	eor.w	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <minmea_parse_gga+0x82>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e01a      	b.n	8004e24 <minmea_parse_gga+0xb8>
    if (strcmp(type+2, "GGA"))
 8004dee:	f107 0320 	add.w	r3, r7, #32
 8004df2:	3302      	adds	r3, #2
 8004df4:	490e      	ldr	r1, [pc, #56]	@ (8004e30 <minmea_parse_gga+0xc4>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb f9ea 	bl	80001d0 <strcmp>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <minmea_parse_gga+0x9a>
        return false;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e00e      	b.n	8004e24 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	fb03 f202 	mul.w	r2, r3, r2
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	fb03 f202 	mul.w	r2, r3, r2
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	619a      	str	r2, [r3, #24]

    return true;
 8004e22:	2301      	movs	r3, #1
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	372c      	adds	r7, #44	@ 0x2c
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2c:	080130e4 	.word	0x080130e4
 8004e30:	080130a8 	.word	0x080130a8

08004e34 <minmea_parse_gsa>:

bool minmea_parse_gsa(struct minmea_sentence_gsa *frame, const char *sentence)
{
 8004e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e36:	b0a1      	sub	sp, #132	@ 0x84
 8004e38:	af10      	add	r7, sp, #64	@ 0x40
 8004e3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e3c:	6339      	str	r1, [r7, #48]	@ 0x30
    // $GPGSA,A,3,04,05,,09,12,,,24,,,,,2.5,1.3,2.1*39
    char type[6];

    if (!minmea_scan(sentence, "tciiiiiiiiiiiiifff",
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	1d1d      	adds	r5, r3, #4
 8004e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e48:	f103 0608 	add.w	r6, r3, #8
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	f103 020c 	add.w	r2, r3, #12
 8004e52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	f103 0110 	add.w	r1, r3, #16
 8004e5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5e:	f103 0414 	add.w	r4, r3, #20
 8004e62:	623c      	str	r4, [r7, #32]
 8004e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e66:	f103 0118 	add.w	r1, r3, #24
 8004e6a:	61f9      	str	r1, [r7, #28]
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	f103 0c1c 	add.w	ip, r3, #28
 8004e72:	4663      	mov	r3, ip
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e78:	f103 0c20 	add.w	ip, r3, #32
 8004e7c:	4662      	mov	r2, ip
 8004e7e:	617a      	str	r2, [r7, #20]
 8004e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e82:	f103 0c24 	add.w	ip, r3, #36	@ 0x24
 8004e86:	4661      	mov	r1, ip
 8004e88:	6139      	str	r1, [r7, #16]
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8004e90:	4664      	mov	r4, ip
 8004e92:	60fc      	str	r4, [r7, #12]
 8004e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e96:	f103 0c2c 	add.w	ip, r3, #44	@ 0x2c
 8004e9a:	4661      	mov	r1, ip
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 8004ea4:	4663      	mov	r3, ip
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8004eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	3348      	adds	r3, #72	@ 0x48
 8004ebe:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ec4:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ec6:	900d      	str	r0, [sp, #52]	@ 0x34
 8004ec8:	940c      	str	r4, [sp, #48]	@ 0x30
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	900a      	str	r0, [sp, #40]	@ 0x28
 8004ed2:	68fc      	ldr	r4, [r7, #12]
 8004ed4:	9409      	str	r4, [sp, #36]	@ 0x24
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	9008      	str	r0, [sp, #32]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	9207      	str	r2, [sp, #28]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	9306      	str	r3, [sp, #24]
 8004ee2:	69f8      	ldr	r0, [r7, #28]
 8004ee4:	9005      	str	r0, [sp, #20]
 8004ee6:	6a3c      	ldr	r4, [r7, #32]
 8004ee8:	9404      	str	r4, [sp, #16]
 8004eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004eec:	9003      	str	r0, [sp, #12]
 8004eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef0:	9202      	str	r2, [sp, #8]
 8004ef2:	9601      	str	r6, [sp, #4]
 8004ef4:	9500      	str	r5, [sp, #0]
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef8:	460a      	mov	r2, r1
 8004efa:	490e      	ldr	r1, [pc, #56]	@ (8004f34 <minmea_parse_gsa+0x100>)
 8004efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004efe:	f7ff faad 	bl	800445c <minmea_scan>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f083 0301 	eor.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <minmea_parse_gsa+0xde>
            &frame->sats[10],
            &frame->sats[11],
            &frame->pdop,
            &frame->hdop,
            &frame->vdop))
        return false;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e00c      	b.n	8004f2c <minmea_parse_gsa+0xf8>
    if (strcmp(type+2, "GSA"))
 8004f12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004f16:	3302      	adds	r3, #2
 8004f18:	4907      	ldr	r1, [pc, #28]	@ (8004f38 <minmea_parse_gsa+0x104>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb f958 	bl	80001d0 <strcmp>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <minmea_parse_gsa+0xf6>
        return false;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <minmea_parse_gsa+0xf8>

    return true;
 8004f2a:	2301      	movs	r3, #1
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3744      	adds	r7, #68	@ 0x44
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f34:	080130f4 	.word	0x080130f4
 8004f38:	080130b0 	.word	0x080130b0

08004f3c <minmea_parse_zda>:

    return true;
}

bool minmea_parse_zda(struct minmea_sentence_zda *frame, const char *sentence)
{
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b08b      	sub	sp, #44	@ 0x2c
 8004f40:	af06      	add	r7, sp, #24
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  // $GPZDA,201530.00,04,07,2002,00,00*60
  char type[6];

  if(!minmea_scan(sentence, "tTiiiii",
 8004f46:	687e      	ldr	r6, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	3214      	adds	r2, #20
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	3118      	adds	r1, #24
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	301c      	adds	r0, #28
 8004f58:	687c      	ldr	r4, [r7, #4]
 8004f5a:	3420      	adds	r4, #32
 8004f5c:	f107 0508 	add.w	r5, r7, #8
 8004f60:	9404      	str	r4, [sp, #16]
 8004f62:	9003      	str	r0, [sp, #12]
 8004f64:	9102      	str	r1, [sp, #8]
 8004f66:	9201      	str	r2, [sp, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4633      	mov	r3, r6
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4917      	ldr	r1, [pc, #92]	@ (8004fcc <minmea_parse_zda+0x90>)
 8004f70:	6838      	ldr	r0, [r7, #0]
 8004f72:	f7ff fa73 	bl	800445c <minmea_scan>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f083 0301 	eor.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <minmea_parse_zda+0x4a>
          &frame->date.day,
          &frame->date.month,
          &frame->date.year,
          &frame->hour_offset,
          &frame->minute_offset))
      return false;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e01d      	b.n	8004fc2 <minmea_parse_zda+0x86>
  if (strcmp(type+2, "ZDA"))
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	4910      	ldr	r1, [pc, #64]	@ (8004fd0 <minmea_parse_zda+0x94>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb f91e 	bl	80001d0 <strcmp>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <minmea_parse_zda+0x62>
      return false;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e011      	b.n	8004fc2 <minmea_parse_zda+0x86>

  // check offsets
  if (abs(frame->hour_offset) > 13 ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bfb8      	it	lt
 8004fa6:	425b      	neglt	r3, r3
 8004fa8:	2b0d      	cmp	r3, #13
 8004faa:	dc07      	bgt.n	8004fbc <minmea_parse_zda+0x80>
      frame->minute_offset > 59 ||
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
  if (abs(frame->hour_offset) > 13 ||
 8004fb0:	2b3b      	cmp	r3, #59	@ 0x3b
 8004fb2:	dc03      	bgt.n	8004fbc <minmea_parse_zda+0x80>
      frame->minute_offset < 0)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
      frame->minute_offset > 59 ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da01      	bge.n	8004fc0 <minmea_parse_zda+0x84>
      return false;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <minmea_parse_zda+0x86>

  return true;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	08013144 	.word	0x08013144
 8004fd0:	080130c4 	.word	0x080130c4

08004fd4 <minmea_getdatetime>:

int minmea_getdatetime(struct tm *tm, const struct minmea_date *date, const struct minmea_time *time_)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
    if (date->year == -1 || time_->hours == -1)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe8:	d004      	beq.n	8004ff4 <minmea_getdatetime+0x20>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff2:	d102      	bne.n	8004ffa <minmea_getdatetime+0x26>
        return -1;
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ff8:	e036      	b.n	8005068 <minmea_getdatetime+0x94>

    memset(tm, 0, sizeof(*tm));
 8004ffa:	2224      	movs	r2, #36	@ 0x24
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f00d f874 	bl	80120ec <memset>
    if (date->year < 80) {
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b4f      	cmp	r3, #79	@ 0x4f
 800500a:	dc06      	bgt.n	800501a <minmea_getdatetime+0x46>
        tm->tm_year = 2000 + date->year - 1900; // 2000-2079
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	615a      	str	r2, [r3, #20]
 8005018:	e010      	b.n	800503c <minmea_getdatetime+0x68>
    } else if (date->year >= 1900) {
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f240 726b 	movw	r2, #1899	@ 0x76b
 8005022:	4293      	cmp	r3, r2
 8005024:	dd06      	ble.n	8005034 <minmea_getdatetime+0x60>
        tm->tm_year = date->year - 1900;        // 4 digit year, use directly
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f2a3 726c 	subw	r2, r3, #1900	@ 0x76c
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	615a      	str	r2, [r3, #20]
 8005032:	e003      	b.n	800503c <minmea_getdatetime+0x68>
    } else {
        tm->tm_year = date->year;               // 1980-1999
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	615a      	str	r2, [r3, #20]
    }
    tm->tm_mon = date->month - 1;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	1e5a      	subs	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	611a      	str	r2, [r3, #16]
    tm->tm_mday = date->day;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	60da      	str	r2, [r3, #12]
    tm->tm_hour = time_->hours;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	609a      	str	r2, [r3, #8]
    tm->tm_min = time_->minutes;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]
    tm->tm_sec = time_->seconds;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

    return 0;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <lora_init>:
#include <sys/types.h>


extern UART_HandleTypeDef huart1;
uint8_t buffer[512];
int lora_init(){
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b090      	sub	sp, #64	@ 0x40
 8005074:	af00      	add	r7, sp, #0
    reset_comm_power();
 8005076:	f000 f88a 	bl	800518e <reset_comm_power>
	HAL_GPIO_WritePin(RM92A_RESET_GPIO_Port, RM92A_RESET_Pin, GPIO_PIN_SET);
 800507a:	2201      	movs	r2, #1
 800507c:	2180      	movs	r1, #128	@ 0x80
 800507e:	481d      	ldr	r0, [pc, #116]	@ (80050f4 <lora_init+0x84>)
 8005080:	f001 fc2e 	bl	80068e0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8005084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005088:	f7fc fc42 	bl	8001910 <HAL_Delay>
    uint8_t config[] = "\r\r1\ra32\ra32\rc0\rd65535\re0\ri0\rl1\r0\rp1\r0\rp2\r0\rt0\rxs";
 800508c:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <lora_init+0x88>)
 800508e:	f107 0408 	add.w	r4, r7, #8
 8005092:	461d      	mov	r5, r3
 8005094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800509a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800509c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800509e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	7023      	strb	r3, [r4, #0]
    uint8_t down[1];
    for (size_t i = 0; i < sizeof(config); i++) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a8:	e015      	b.n	80050d6 <lora_init+0x66>
     		down[0] = config[i];
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	713b      	strb	r3, [r7, #4]
     		HAL_UART_Transmit(&huart1, down, 1,10);
 80050b6:	1d39      	adds	r1, r7, #4
 80050b8:	230a      	movs	r3, #10
 80050ba:	2201      	movs	r2, #1
 80050bc:	480f      	ldr	r0, [pc, #60]	@ (80050fc <lora_init+0x8c>)
 80050be:	f007 fe43 	bl	800cd48 <HAL_UART_Transmit>
     		printf("%c", down[0]);
 80050c2:	793b      	ldrb	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f00c ffab 	bl	8012020 <putchar>
     		HAL_Delay(100);
 80050ca:	2064      	movs	r0, #100	@ 0x64
 80050cc:	f7fc fc20 	bl	8001910 <HAL_Delay>
    for (size_t i = 0; i < sizeof(config); i++) {
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	3301      	adds	r3, #1
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d8:	2b30      	cmp	r3, #48	@ 0x30
 80050da:	d9e6      	bls.n	80050aa <lora_init+0x3a>
     }
    printf("\r\n");
 80050dc:	4808      	ldr	r0, [pc, #32]	@ (8005100 <lora_init+0x90>)
 80050de:	f00c fffd 	bl	80120dc <puts>
    HAL_Delay(11000);
 80050e2:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 80050e6:	f7fc fc13 	bl	8001910 <HAL_Delay>
	return 0;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3740      	adds	r7, #64	@ 0x40
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bdb0      	pop	{r4, r5, r7, pc}
 80050f4:	48000800 	.word	0x48000800
 80050f8:	08013150 	.word	0x08013150
 80050fc:	200004c0 	.word	0x200004c0
 8005100:	0801314c 	.word	0x0801314c

08005104 <lora_send>:
int lora_send(const char *format, ...){
 8005104:	b40f      	push	{r0, r1, r2, r3}
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
	va_list va;
	va_start(va, format);
 800510c:	f107 031c 	add.w	r3, r7, #28
 8005110:	607b      	str	r3, [r7, #4]
	int size = sprintf(buffer,format, va);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	4812      	ldr	r0, [pc, #72]	@ (8005160 <lora_send+0x5c>)
 8005118:	f00c fe1c 	bl	8011d54 <siprintf>
 800511c:	60b8      	str	r0, [r7, #8]
	uint8_t down[1];
	for(int i = 0; i < size; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e011      	b.n	8005148 <lora_send+0x44>
	{
		down[0] = buffer[i];
 8005124:	4a0e      	ldr	r2, [pc, #56]	@ (8005160 <lora_send+0x5c>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	703b      	strb	r3, [r7, #0]
		HAL_UART_Transmit(&huart1, down, 1,10);
 800512e:	4639      	mov	r1, r7
 8005130:	230a      	movs	r3, #10
 8005132:	2201      	movs	r2, #1
 8005134:	480b      	ldr	r0, [pc, #44]	@ (8005164 <lora_send+0x60>)
 8005136:	f007 fe07 	bl	800cd48 <HAL_UART_Transmit>
		printf("%c", down[0]);
 800513a:	783b      	ldrb	r3, [r7, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f00c ff6f 	bl	8012020 <putchar>
	for(int i = 0; i < size; i++)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	dbe9      	blt.n	8005124 <lora_send+0x20>
	}
	va_end(va);
	return 0;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	20000910 	.word	0x20000910
 8005164:	200004c0 	.word	0x200004c0

08005168 <reset_sense_power>:
	HAL_GPIO_WritePin(CTRL_COMM_GPIO_Port, CTRL_COMM_Pin, mode);
}
void set_sense_power(int mode){
	HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, mode);
}
void reset_sense_power(){
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_RESET);
 800516c:	2200      	movs	r2, #0
 800516e:	2120      	movs	r1, #32
 8005170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005174:	f001 fbb4 	bl	80068e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005178:	200a      	movs	r0, #10
 800517a:	f7fc fbc9 	bl	8001910 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_SENSE_GPIO_Port, CTRL_SENSE_Pin, GPIO_PIN_SET);
 800517e:	2201      	movs	r2, #1
 8005180:	2120      	movs	r1, #32
 8005182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005186:	f001 fbab 	bl	80068e0 <HAL_GPIO_WritePin>
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}

0800518e <reset_comm_power>:
void reset_comm_power(){
 800518e:	b580      	push	{r7, lr}
 8005190:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_COMM_GPIO_Port, CTRL_COMM_Pin, GPIO_PIN_RESET);
 8005192:	2200      	movs	r2, #0
 8005194:	2140      	movs	r1, #64	@ 0x40
 8005196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800519a:	f001 fba1 	bl	80068e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800519e:	200a      	movs	r0, #10
 80051a0:	f7fc fbb6 	bl	8001910 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_COMM_GPIO_Port, CTRL_COMM_Pin, GPIO_PIN_SET);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2140      	movs	r1, #64	@ 0x40
 80051a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051ac:	f001 fb98 	bl	80068e0 <HAL_GPIO_WritePin>
}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	0000      	movs	r0, r0
	...

080051b8 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 80051be:	f003 f91b 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 80051c2:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 80051c4:	4b32      	ldr	r3, [pc, #200]	@ (8005290 <ARGB_Init+0xd8>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <ARGB_Init+0x1c>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <ARGB_Init+0x1e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <ARGB_Init+0xdc>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 80051ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <ARGB_Init+0xe0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	4b26      	ldr	r3, [pc, #152]	@ (8005298 <ARGB_Init+0xe0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8005204:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <ARGB_Init+0xe0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fb f981 	bl	8000514 <__aeabi_ui2d>
 8005212:	a31b      	add	r3, pc, #108	@ (adr r3, 8005280 <ARGB_Init+0xc8>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f9f6 	bl	8000608 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f7fb fc02 	bl	8000a2c <__aeabi_d2uiz>
 8005228:	4603      	mov	r3, r0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <ARGB_Init+0xe4>)
 8005232:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.24) - 1;     // Log.0 - 24% - 0.30us
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fb f96d 	bl	8000514 <__aeabi_ui2d>
 800523a:	a313      	add	r3, pc, #76	@ (adr r3, 8005288 <ARGB_Init+0xd0>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f9e2 	bl	8000608 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f7fb fbee 	bl	8000a2c <__aeabi_d2uiz>
 8005250:	4603      	mov	r3, r0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <ARGB_Init+0xe8>)
 800525a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 800525c:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <ARGB_Init+0xec>)
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <ARGB_Init+0xe0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f007 fbfc 	bl	800ca68 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8005270:	2001      	movs	r0, #1
 8005272:	f7fc fb4d 	bl	8001910 <HAL_Delay>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	eb851eb8 	.word	0xeb851eb8
 8005284:	3fdeb851 	.word	0x3fdeb851
 8005288:	eb851eb8 	.word	0xeb851eb8
 800528c:	3fceb851 	.word	0x3fceb851
 8005290:	40021000 	.word	0x40021000
 8005294:	014f8b59 	.word	0x014f8b59
 8005298:	2000042c 	.word	0x2000042c
 800529c:	20000b10 	.word	0x20000b10
 80052a0:	20000b11 	.word	0x20000b11
 80052a4:	20000b5e 	.word	0x20000b5e

080052a8 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4623      	mov	r3, r4
 80052b8:	80fb      	strh	r3, [r7, #6]
 80052ba:	4603      	mov	r3, r0
 80052bc:	717b      	strb	r3, [r7, #5]
 80052be:	460b      	mov	r3, r1
 80052c0:	713b      	strb	r3, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d908      	bls.n	80052de <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80052d2:	89fb      	ldrh	r3, [r7, #14]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80052de:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <ARGB_SetRGB+0xd0>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80052ee:	797a      	ldrb	r2, [r7, #5]
 80052f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80052f4:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80052f6:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <ARGB_SetRGB+0xd0>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3301      	adds	r3, #1
 80052fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005302:	fb92 f3f3 	sdiv	r3, r2, r3
 8005306:	793a      	ldrb	r2, [r7, #4]
 8005308:	fb92 f3f3 	sdiv	r3, r2, r3
 800530c:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800530e:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <ARGB_SetRGB+0xd0>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531a:	fb92 f3f3 	sdiv	r3, r2, r3
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	fb92 f3f3 	sdiv	r3, r2, r3
 8005324:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8005326:	793b      	ldrb	r3, [r7, #4]
 8005328:	21b0      	movs	r1, #176	@ 0xb0
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f9e8 	bl	8005700 <scale8>
 8005330:	4603      	mov	r3, r0
 8005332:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	21f0      	movs	r1, #240	@ 0xf0
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f9e1 	bl	8005700 <scale8>
 800533e:	4603      	mov	r3, r0
 8005340:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8005342:	797b      	ldrb	r3, [r7, #5]
 8005344:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8005346:	793b      	ldrb	r3, [r7, #4]
 8005348:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	490a      	ldr	r1, [pc, #40]	@ (800537c <ARGB_SetRGB+0xd4>)
 8005354:	7b7a      	ldrb	r2, [r7, #13]
 8005356:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3301      	adds	r3, #1
 800535e:	4907      	ldr	r1, [pc, #28]	@ (800537c <ARGB_SetRGB+0xd4>)
 8005360:	7b3a      	ldrb	r2, [r7, #12]
 8005362:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	3302      	adds	r3, #2
 800536a:	4904      	ldr	r1, [pc, #16]	@ (800537c <ARGB_SetRGB+0xd4>)
 800536c:	7afa      	ldrb	r2, [r7, #11]
 800536e:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
#endif
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	20000004 	.word	0x20000004
 800537c:	20000b14 	.word	0x20000b14

08005380 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
 800538a:	460b      	mov	r3, r1
 800538c:	71bb      	strb	r3, [r7, #6]
 800538e:	4613      	mov	r3, r2
 8005390:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	81fb      	strh	r3, [r7, #14]
 8005396:	e00b      	b.n	80053b0 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	b298      	uxth	r0, r3
 800539c:	797b      	ldrb	r3, [r7, #5]
 800539e:	79ba      	ldrb	r2, [r7, #6]
 80053a0:	79f9      	ldrb	r1, [r7, #7]
 80053a2:	f7ff ff81 	bl	80052a8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3301      	adds	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	81fb      	strh	r3, [r7, #14]
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d9ef      	bls.n	8005398 <ARGB_FillRGB+0x18>
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80053ca:	4b96      	ldr	r3, [pc, #600]	@ (8005624 <ARGB_Show+0x260>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80053d0:	4b95      	ldr	r3, [pc, #596]	@ (8005628 <ARGB_Show+0x264>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <ARGB_Show+0x22>
 80053da:	4b94      	ldr	r3, [pc, #592]	@ (800562c <ARGB_Show+0x268>)
 80053dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <ARGB_Show+0x26>
        return ARGB_BUSY;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e17c      	b.n	80056e4 <ARGB_Show+0x320>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	71fb      	strb	r3, [r7, #7]
 80053ee:	e0c4      	b.n	800557a <ARGB_Show+0x1b6>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80053f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005630 <ARGB_Show+0x26c>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005404:	2b00      	cmp	r3, #0
 8005406:	dd03      	ble.n	8005410 <ARGB_Show+0x4c>
 8005408:	4b8a      	ldr	r3, [pc, #552]	@ (8005634 <ARGB_Show+0x270>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e002      	b.n	8005416 <ARGB_Show+0x52>
 8005410:	4b89      	ldr	r3, [pc, #548]	@ (8005638 <ARGB_Show+0x274>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	79fa      	ldrb	r2, [r7, #7]
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	4611      	mov	r1, r2
 800541c:	4a87      	ldr	r2, [pc, #540]	@ (800563c <ARGB_Show+0x278>)
 800541e:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005420:	4b83      	ldr	r3, [pc, #524]	@ (8005630 <ARGB_Show+0x26c>)
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	dd03      	ble.n	8005440 <ARGB_Show+0x7c>
 8005438:	4b7e      	ldr	r3, [pc, #504]	@ (8005634 <ARGB_Show+0x270>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e002      	b.n	8005446 <ARGB_Show+0x82>
 8005440:	4b7d      	ldr	r3, [pc, #500]	@ (8005638 <ARGB_Show+0x274>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	79fa      	ldrb	r2, [r7, #7]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	3208      	adds	r2, #8
 800544c:	497b      	ldr	r1, [pc, #492]	@ (800563c <ARGB_Show+0x278>)
 800544e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005450:	4b77      	ldr	r3, [pc, #476]	@ (8005630 <ARGB_Show+0x26c>)
 8005452:	789b      	ldrb	r3, [r3, #2]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	dd03      	ble.n	8005470 <ARGB_Show+0xac>
 8005468:	4b72      	ldr	r3, [pc, #456]	@ (8005634 <ARGB_Show+0x270>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e002      	b.n	8005476 <ARGB_Show+0xb2>
 8005470:	4b71      	ldr	r3, [pc, #452]	@ (8005638 <ARGB_Show+0x274>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	79fa      	ldrb	r2, [r7, #7]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	3210      	adds	r2, #16
 800547c:	496f      	ldr	r1, [pc, #444]	@ (800563c <ARGB_Show+0x278>)
 800547e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005480:	4b6b      	ldr	r3, [pc, #428]	@ (8005630 <ARGB_Show+0x26c>)
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	dd03      	ble.n	80054a0 <ARGB_Show+0xdc>
 8005498:	4b66      	ldr	r3, [pc, #408]	@ (8005634 <ARGB_Show+0x270>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e002      	b.n	80054a6 <ARGB_Show+0xe2>
 80054a0:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <ARGB_Show+0x274>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	79fa      	ldrb	r2, [r7, #7]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	3218      	adds	r2, #24
 80054ac:	4963      	ldr	r1, [pc, #396]	@ (800563c <ARGB_Show+0x278>)
 80054ae:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80054b0:	4b5f      	ldr	r3, [pc, #380]	@ (8005630 <ARGB_Show+0x26c>)
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dd03      	ble.n	80054d0 <ARGB_Show+0x10c>
 80054c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005634 <ARGB_Show+0x270>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e002      	b.n	80054d6 <ARGB_Show+0x112>
 80054d0:	4b59      	ldr	r3, [pc, #356]	@ (8005638 <ARGB_Show+0x274>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	79fa      	ldrb	r2, [r7, #7]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	3220      	adds	r2, #32
 80054dc:	4957      	ldr	r1, [pc, #348]	@ (800563c <ARGB_Show+0x278>)
 80054de:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <ARGB_Show+0x26c>)
 80054e2:	795b      	ldrb	r3, [r3, #5]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd03      	ble.n	8005500 <ARGB_Show+0x13c>
 80054f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005634 <ARGB_Show+0x270>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e002      	b.n	8005506 <ARGB_Show+0x142>
 8005500:	4b4d      	ldr	r3, [pc, #308]	@ (8005638 <ARGB_Show+0x274>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	3228      	adds	r2, #40	@ 0x28
 800550c:	494b      	ldr	r1, [pc, #300]	@ (800563c <ARGB_Show+0x278>)
 800550e:	548b      	strb	r3, [r1, r2]
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005510:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <ARGB_Show+0x26c>)
 8005512:	799b      	ldrb	r3, [r3, #6]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	dd03      	ble.n	8005530 <ARGB_Show+0x16c>
 8005528:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <ARGB_Show+0x270>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e002      	b.n	8005536 <ARGB_Show+0x172>
 8005530:	4b41      	ldr	r3, [pc, #260]	@ (8005638 <ARGB_Show+0x274>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	79fa      	ldrb	r2, [r7, #7]
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	3230      	adds	r2, #48	@ 0x30
 800553c:	493f      	ldr	r1, [pc, #252]	@ (800563c <ARGB_Show+0x278>)
 800553e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005540:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <ARGB_Show+0x26c>)
 8005542:	79db      	ldrb	r3, [r3, #7]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd03      	ble.n	8005560 <ARGB_Show+0x19c>
 8005558:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <ARGB_Show+0x270>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e002      	b.n	8005566 <ARGB_Show+0x1a2>
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <ARGB_Show+0x274>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	79fa      	ldrb	r2, [r7, #7]
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	3238      	adds	r2, #56	@ 0x38
 800556c:	4933      	ldr	r1, [pc, #204]	@ (800563c <ARGB_Show+0x278>)
 800556e:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	3301      	adds	r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	71fb      	strb	r3, [r7, #7]
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b07      	cmp	r3, #7
 8005580:	f67f af36 	bls.w	80053f0 <ARGB_Show+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8005588:	e0a4      	b.n	80056d4 <ARGB_Show+0x310>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 800558a:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <ARGB_Show+0x27c>)
 800558c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d102      	bne.n	800559c <ARGB_Show+0x1d8>
                DMA_Send_Stat = HAL_BUSY;
 8005596:	2302      	movs	r3, #2
 8005598:	73fb      	strb	r3, [r7, #15]
                continue;
 800559a:	e09b      	b.n	80056d4 <ARGB_Show+0x310>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 800559c:	4b28      	ldr	r3, [pc, #160]	@ (8005640 <ARGB_Show+0x27c>)
 800559e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d11d      	bne.n	80055e4 <ARGB_Show+0x220>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a8:	4b25      	ldr	r3, [pc, #148]	@ (8005640 <ARGB_Show+0x27c>)
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 80055b0:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <ARGB_Show+0x27c>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	4a23      	ldr	r2, [pc, #140]	@ (8005644 <ARGB_Show+0x280>)
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 80055b8:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <ARGB_Show+0x27c>)
 80055ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055bc:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <ARGB_Show+0x284>)
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 80055c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <ARGB_Show+0x27c>)
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	4a21      	ldr	r2, [pc, #132]	@ (800564c <ARGB_Show+0x288>)
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 80055c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <ARGB_Show+0x27c>)
 80055ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80055cc:	491b      	ldr	r1, [pc, #108]	@ (800563c <ARGB_Show+0x278>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 80055ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <ARGB_Show+0x27c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3334      	adds	r3, #52	@ 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 80055d4:	461a      	mov	r2, r3
 80055d6:	2340      	movs	r3, #64	@ 0x40
 80055d8:	f000 fe3c 	bl	8006254 <HAL_DMA_Start_IT>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <ARGB_Show+0x22c>
 80055e2:	e002      	b.n	80055ea <ARGB_Show+0x226>
                DMA_Send_Stat = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
                continue;
 80055e8:	e074      	b.n	80056d4 <ARGB_Show+0x310>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
                continue;
 80055ee:	e071      	b.n	80056d4 <ARGB_Show+0x310>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <ARGB_Show+0x27c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <ARGB_Show+0x27c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fe:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8005600:	4b0f      	ldr	r3, [pc, #60]	@ (8005640 <ARGB_Show+0x27c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a12      	ldr	r2, [pc, #72]	@ (8005650 <ARGB_Show+0x28c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <ARGB_Show+0x25a>
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <ARGB_Show+0x27c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <ARGB_Show+0x290>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <ARGB_Show+0x25a>
 8005614:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <ARGB_Show+0x27c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a0f      	ldr	r2, [pc, #60]	@ (8005658 <ARGB_Show+0x294>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d11e      	bne.n	800565c <ARGB_Show+0x298>
 800561e:	2301      	movs	r3, #1
 8005620:	e01d      	b.n	800565e <ARGB_Show+0x29a>
 8005622:	bf00      	nop
 8005624:	20000b5e 	.word	0x20000b5e
 8005628:	20000b5c 	.word	0x20000b5c
 800562c:	20000478 	.word	0x20000478
 8005630:	20000b14 	.word	0x20000b14
 8005634:	20000b10 	.word	0x20000b10
 8005638:	20000b11 	.word	0x20000b11
 800563c:	20000b1c 	.word	0x20000b1c
 8005640:	2000042c 	.word	0x2000042c
 8005644:	08005729 	.word	0x08005729
 8005648:	08005a15 	.word	0x08005a15
 800564c:	0800c2df 	.word	0x0800c2df
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <ARGB_Show+0x2ae>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8005662:	4b22      	ldr	r3, [pc, #136]	@ (80056ec <ARGB_Show+0x328>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005668:	4b20      	ldr	r3, [pc, #128]	@ (80056ec <ARGB_Show+0x328>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8005672:	4b1e      	ldr	r3, [pc, #120]	@ (80056ec <ARGB_Show+0x328>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1e      	ldr	r2, [pc, #120]	@ (80056f0 <ARGB_Show+0x32c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <ARGB_Show+0x2cc>
 800567c:	4b1b      	ldr	r3, [pc, #108]	@ (80056ec <ARGB_Show+0x328>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005684:	d004      	beq.n	8005690 <ARGB_Show+0x2cc>
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <ARGB_Show+0x328>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1a      	ldr	r2, [pc, #104]	@ (80056f4 <ARGB_Show+0x330>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d115      	bne.n	80056bc <ARGB_Show+0x2f8>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8005690:	4b16      	ldr	r3, [pc, #88]	@ (80056ec <ARGB_Show+0x328>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	4b18      	ldr	r3, [pc, #96]	@ (80056f8 <ARGB_Show+0x334>)
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d015      	beq.n	80056ce <ARGB_Show+0x30a>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a8:	d011      	beq.n	80056ce <ARGB_Show+0x30a>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 80056aa:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <ARGB_Show+0x328>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0e      	ldr	r3, [pc, #56]	@ (80056ec <ARGB_Show+0x328>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80056ba:	e008      	b.n	80056ce <ARGB_Show+0x30a>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <ARGB_Show+0x328>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <ARGB_Show+0x328>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e000      	b.n	80056d0 <ARGB_Show+0x30c>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80056ce:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f47f af57 	bne.w	800558a <ARGB_Show+0x1c6>
        }
        BUF_COUNTER = 2;
 80056dc:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <ARGB_Show+0x338>)
 80056de:	2202      	movs	r2, #2
 80056e0:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80056e2:	2302      	movs	r3, #2
    }
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	2000042c 	.word	0x2000042c
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40014000 	.word	0x40014000
 80056f8:	00010007 	.word	0x00010007
 80056fc:	20000b5c 	.word	0x20000b5c

08005700 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	460a      	mov	r2, r1
 800570a:	71fb      	strb	r3, [r7, #7]
 800570c:	4613      	mov	r3, r2
 800570e:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	79ba      	ldrb	r2, [r7, #6]
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	121b      	asrs	r3, r3, #8
 800571a:	b2db      	uxtb	r3, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a88      	ldr	r2, [pc, #544]	@ (800595c <ARGB_TIM_DMADelayPulseCplt+0x234>)
 800573a:	4293      	cmp	r3, r2
 800573c:	f040 8162 	bne.w	8005a04 <ARGB_TIM_DMADelayPulseCplt+0x2dc>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a87      	ldr	r2, [pc, #540]	@ (8005960 <ARGB_TIM_DMADelayPulseCplt+0x238>)
 8005744:	4293      	cmp	r3, r2
 8005746:	f040 815d 	bne.w	8005a04 <ARGB_TIM_DMADelayPulseCplt+0x2dc>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800574a:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8159 	beq.w	8005a08 <ARGB_TIM_DMADelayPulseCplt+0x2e0>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d10b      	bne.n	8005778 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d136      	bne.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005776:	e031      	b.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d10b      	bne.n	800579a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d125      	bne.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005798:	e020      	b.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d10b      	bne.n	80057bc <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2204      	movs	r2, #4
 80057a8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d114      	bne.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057ba:	e00f      	b.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d10a      	bne.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2208      	movs	r2, #8
 80057ca:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80057dc:	4b61      	ldr	r3, [pc, #388]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	f200 8087 	bhi.w	80058f6 <ARGB_TIM_DMADelayPulseCplt+0x1ce>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80057e8:	2300      	movs	r3, #0
 80057ea:	72fb      	strb	r3, [r7, #11]
 80057ec:	e077      	b.n	80058de <ARGB_TIM_DMADelayPulseCplt+0x1b6>
#ifdef SK6812
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80057ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005968 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 80057f8:	5cd3      	ldrb	r3, [r2, r3]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	7afb      	ldrb	r3, [r7, #11]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	dd03      	ble.n	8005816 <ARGB_TIM_DMADelayPulseCplt+0xee>
 800580e:	4b57      	ldr	r3, [pc, #348]	@ (800596c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	e002      	b.n	800581c <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8005816:	4b56      	ldr	r3, [pc, #344]	@ (8005970 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	7afa      	ldrb	r2, [r7, #11]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	3220      	adds	r2, #32
 8005822:	4954      	ldr	r1, [pc, #336]	@ (8005974 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 8005824:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005826:	4b4f      	ldr	r3, [pc, #316]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3301      	adds	r3, #1
 8005830:	4a4d      	ldr	r2, [pc, #308]	@ (8005968 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd03      	ble.n	8005850 <ARGB_TIM_DMADelayPulseCplt+0x128>
 8005848:	4b48      	ldr	r3, [pc, #288]	@ (800596c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e002      	b.n	8005856 <ARGB_TIM_DMADelayPulseCplt+0x12e>
 8005850:	4b47      	ldr	r3, [pc, #284]	@ (8005970 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	7afa      	ldrb	r2, [r7, #11]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	3228      	adds	r2, #40	@ 0x28
 800585c:	4945      	ldr	r1, [pc, #276]	@ (8005974 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 800585e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005860:	4b40      	ldr	r3, [pc, #256]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	4a3f      	ldr	r2, [pc, #252]	@ (8005968 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 800586c:	5cd3      	ldrb	r3, [r2, r3]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	dd03      	ble.n	800588a <ARGB_TIM_DMADelayPulseCplt+0x162>
 8005882:	4b3a      	ldr	r3, [pc, #232]	@ (800596c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e002      	b.n	8005890 <ARGB_TIM_DMADelayPulseCplt+0x168>
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	7afa      	ldrb	r2, [r7, #11]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	3230      	adds	r2, #48	@ 0x30
 8005896:	4937      	ldr	r1, [pc, #220]	@ (8005974 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 8005898:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800589a:	4b32      	ldr	r3, [pc, #200]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	3303      	adds	r3, #3
 80058a4:	4a30      	ldr	r2, [pc, #192]	@ (8005968 <ARGB_TIM_DMADelayPulseCplt+0x240>)
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd03      	ble.n	80058c4 <ARGB_TIM_DMADelayPulseCplt+0x19c>
 80058bc:	4b2b      	ldr	r3, [pc, #172]	@ (800596c <ARGB_TIM_DMADelayPulseCplt+0x244>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	e002      	b.n	80058ca <ARGB_TIM_DMADelayPulseCplt+0x1a2>
 80058c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <ARGB_TIM_DMADelayPulseCplt+0x248>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	7afa      	ldrb	r2, [r7, #11]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	3238      	adds	r2, #56	@ 0x38
 80058d0:	4928      	ldr	r1, [pc, #160]	@ (8005974 <ARGB_TIM_DMADelayPulseCplt+0x24c>)
 80058d2:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80058d4:	7afb      	ldrb	r3, [r7, #11]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	72fb      	strb	r3, [r7, #11]
 80058de:	7afb      	ldrb	r3, [r7, #11]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	d983      	bls.n	80057ee <ARGB_TIM_DMADelayPulseCplt+0xc6>
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER++;
 80058e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3301      	adds	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e082      	b.n	80059fc <ARGB_TIM_DMADelayPulseCplt+0x2d4>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80058f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d80c      	bhi.n	800591a <ARGB_TIM_DMADelayPulseCplt+0x1f2>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8005900:	2220      	movs	r2, #32
 8005902:	2100      	movs	r1, #0
 8005904:	481c      	ldr	r0, [pc, #112]	@ (8005978 <ARGB_TIM_DMADelayPulseCplt+0x250>)
 8005906:	f00c fbf1 	bl	80120ec <memset>
        BUF_COUNTER++;
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	3301      	adds	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e070      	b.n	80059fc <ARGB_TIM_DMADelayPulseCplt+0x2d4>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 800591a:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <ARGB_TIM_DMADelayPulseCplt+0x23c>)
 800591c:	2200      	movs	r2, #0
 800591e:	801a      	strh	r2, [r3, #0]
        // STOP DMA:
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800592e:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fd2b 	bl	8006390 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a0f      	ldr	r2, [pc, #60]	@ (800597c <ARGB_TIM_DMADelayPulseCplt+0x254>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <ARGB_TIM_DMADelayPulseCplt+0x230>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a0d      	ldr	r2, [pc, #52]	@ (8005980 <ARGB_TIM_DMADelayPulseCplt+0x258>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <ARGB_TIM_DMADelayPulseCplt+0x230>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <ARGB_TIM_DMADelayPulseCplt+0x25c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d117      	bne.n	8005988 <ARGB_TIM_DMADelayPulseCplt+0x260>
 8005958:	2301      	movs	r3, #1
 800595a:	e016      	b.n	800598a <ARGB_TIM_DMADelayPulseCplt+0x262>
 800595c:	20000478 	.word	0x20000478
 8005960:	2000042c 	.word	0x2000042c
 8005964:	20000b5c 	.word	0x20000b5c
 8005968:	20000b14 	.word	0x20000b14
 800596c:	20000b10 	.word	0x20000b10
 8005970:	20000b11 	.word	0x20000b11
 8005974:	20000b1c 	.word	0x20000b1c
 8005978:	20000b3c 	.word	0x20000b3c
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	2300      	movs	r3, #0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d017      	beq.n	80059be <ARGB_TIM_DMADelayPulseCplt+0x296>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <ARGB_TIM_DMADelayPulseCplt+0x296>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <ARGB_TIM_DMADelayPulseCplt+0x296>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <ARGB_TIM_DMADelayPulseCplt+0x2c6>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <ARGB_TIM_DMADelayPulseCplt+0x2c6>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ARGB_LOC_ST = ARGB_READY;
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <ARGB_TIM_DMADelayPulseCplt+0x2e8>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	771a      	strb	r2, [r3, #28]
 8005a02:	e002      	b.n	8005a0a <ARGB_TIM_DMADelayPulseCplt+0x2e2>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <ARGB_TIM_DMADelayPulseCplt+0x2e2>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8005a08:	bf00      	nop
}
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000b5e 	.word	0x20000b5e

08005a14 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a59      	ldr	r2, [pc, #356]	@ (8005b8c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	f040 80aa 	bne.w	8005b80 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a58      	ldr	r2, [pc, #352]	@ (8005b90 <ARGB_TIM_DMADelayPulseHalfCplt+0x17c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f040 80a5 	bne.w	8005b80 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8005a36:	4b57      	ldr	r3, [pc, #348]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80a1 	beq.w	8005b84 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8005a42:	4b54      	ldr	r3, [pc, #336]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	f200 8087 	bhi.w	8005b5c <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8005a4e:	2300      	movs	r3, #0
 8005a50:	72fb      	strb	r3, [r7, #11]
 8005a52:	e077      	b.n	8005b44 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
#ifdef SK6812
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005a54:	4b4f      	ldr	r3, [pc, #316]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8005b98 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8005a5e:	5cd3      	ldrb	r3, [r2, r3]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dd03      	ble.n	8005a7c <ARGB_TIM_DMADelayPulseHalfCplt+0x68>
 8005a74:	4b49      	ldr	r3, [pc, #292]	@ (8005b9c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e002      	b.n	8005a82 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8005a7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ba0 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	7afa      	ldrb	r2, [r7, #11]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	4611      	mov	r1, r2
 8005a88:	4a46      	ldr	r2, [pc, #280]	@ (8005ba4 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8005a8a:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005a8c:	4b41      	ldr	r3, [pc, #260]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a40      	ldr	r2, [pc, #256]	@ (8005b98 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8005a98:	5cd3      	ldrb	r3, [r2, r3]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd03      	ble.n	8005ab6 <ARGB_TIM_DMADelayPulseHalfCplt+0xa2>
 8005aae:	4b3b      	ldr	r3, [pc, #236]	@ (8005b9c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	e002      	b.n	8005abc <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8005ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba0 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	7afa      	ldrb	r2, [r7, #11]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	3208      	adds	r2, #8
 8005ac2:	4938      	ldr	r1, [pc, #224]	@ (8005ba4 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8005ac4:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8005ac6:	4b33      	ldr	r3, [pc, #204]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3302      	adds	r3, #2
 8005ad0:	4a31      	ldr	r2, [pc, #196]	@ (8005b98 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8005ad2:	5cd3      	ldrb	r3, [r2, r3]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dd03      	ble.n	8005af0 <ARGB_TIM_DMADelayPulseHalfCplt+0xdc>
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b9c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e002      	b.n	8005af6 <ARGB_TIM_DMADelayPulseHalfCplt+0xe2>
 8005af0:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba0 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	7afa      	ldrb	r2, [r7, #11]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	3210      	adds	r2, #16
 8005afc:	4929      	ldr	r1, [pc, #164]	@ (8005ba4 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8005afe:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8005b00:	4b24      	ldr	r3, [pc, #144]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3303      	adds	r3, #3
 8005b0a:	4a23      	ldr	r2, [pc, #140]	@ (8005b98 <ARGB_TIM_DMADelayPulseHalfCplt+0x184>)
 8005b0c:	5cd3      	ldrb	r3, [r2, r3]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	dd03      	ble.n	8005b2a <ARGB_TIM_DMADelayPulseHalfCplt+0x116>
 8005b22:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <ARGB_TIM_DMADelayPulseHalfCplt+0x188>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e002      	b.n	8005b30 <ARGB_TIM_DMADelayPulseHalfCplt+0x11c>
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <ARGB_TIM_DMADelayPulseHalfCplt+0x18c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	7afa      	ldrb	r2, [r7, #11]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	3218      	adds	r2, #24
 8005b36:	491b      	ldr	r1, [pc, #108]	@ (8005ba4 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8005b38:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	72fb      	strb	r3, [r7, #11]
 8005b44:	7afb      	ldrb	r3, [r7, #11]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d983      	bls.n	8005a54 <ARGB_TIM_DMADelayPulseHalfCplt+0x40>
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER++;
 8005b4c:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b0f      	ldr	r3, [pc, #60]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e014      	b.n	8005b86 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d80f      	bhi.n	8005b86 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8005b66:	2220      	movs	r2, #32
 8005b68:	2100      	movs	r1, #0
 8005b6a:	480e      	ldr	r0, [pc, #56]	@ (8005ba4 <ARGB_TIM_DMADelayPulseHalfCplt+0x190>)
 8005b6c:	f00c fabe 	bl	80120ec <memset>
        BUF_COUNTER++;
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <ARGB_TIM_DMADelayPulseHalfCplt+0x180>)
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e002      	b.n	8005b86 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <ARGB_TIM_DMADelayPulseHalfCplt+0x172>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8005b84:	bf00      	nop
    }
}
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000478 	.word	0x20000478
 8005b90:	2000042c 	.word	0x2000042c
 8005b94:	20000b5c 	.word	0x20000b5c
 8005b98:	20000b14 	.word	0x20000b14
 8005b9c:	20000b10 	.word	0x20000b10
 8005ba0:	20000b11 	.word	0x20000b11
 8005ba4:	20000b1c 	.word	0x20000b1c

08005ba8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bb2:	2003      	movs	r0, #3
 8005bb4:	f000 f8dd 	bl	8005d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bb8:	200f      	movs	r0, #15
 8005bba:	f7fc febd 	bl	8002938 <HAL_InitTick>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	71fb      	strb	r3, [r7, #7]
 8005bc8:	e001      	b.n	8005bce <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005bca:	f7fc f945 	bl	8001e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005bce:	79fb      	ldrb	r3, [r7, #7]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_IncTick+0x20>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_IncTick+0x24>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <HAL_IncTick+0x24>)
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000000c 	.word	0x2000000c
 8005bfc:	20000b60 	.word	0x20000b60

08005c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return uwTick;
 8005c04:	4b03      	ldr	r3, [pc, #12]	@ (8005c14 <HAL_GetTick+0x14>)
 8005c06:	681b      	ldr	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000b60 	.word	0x20000b60

08005c18 <__NVIC_SetPriorityGrouping>:
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c28:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <__NVIC_SetPriorityGrouping+0x44>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c34:	4013      	ands	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c4a:	4a04      	ldr	r2, [pc, #16]	@ (8005c5c <__NVIC_SetPriorityGrouping+0x44>)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	60d3      	str	r3, [r2, #12]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <__NVIC_GetPriorityGrouping>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__NVIC_GetPriorityGrouping+0x18>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	f003 0307 	and.w	r3, r3, #7
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <__NVIC_EnableIRQ>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db0b      	blt.n	8005ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	4907      	ldr	r1, [pc, #28]	@ (8005cb4 <__NVIC_EnableIRQ+0x38>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	e000e100 	.word	0xe000e100

08005cb8 <__NVIC_SetPriority>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	6039      	str	r1, [r7, #0]
 8005cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	db0a      	blt.n	8005ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	490c      	ldr	r1, [pc, #48]	@ (8005d04 <__NVIC_SetPriority+0x4c>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	0112      	lsls	r2, r2, #4
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ce0:	e00a      	b.n	8005cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	4908      	ldr	r1, [pc, #32]	@ (8005d08 <__NVIC_SetPriority+0x50>)
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	0112      	lsls	r2, r2, #4
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	761a      	strb	r2, [r3, #24]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000e100 	.word	0xe000e100
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <NVIC_EncodePriority>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b089      	sub	sp, #36	@ 0x24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f1c3 0307 	rsb	r3, r3, #7
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	bf28      	it	cs
 8005d2a:	2304      	movcs	r3, #4
 8005d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3304      	adds	r3, #4
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d902      	bls.n	8005d3c <NVIC_EncodePriority+0x30>
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3b03      	subs	r3, #3
 8005d3a:	e000      	b.n	8005d3e <NVIC_EncodePriority+0x32>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	401a      	ands	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	43d9      	mvns	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	4313      	orrs	r3, r2
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3724      	adds	r7, #36	@ 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ff4c 	bl	8005c18 <__NVIC_SetPriorityGrouping>
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d9a:	f7ff ff61 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 8005d9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f7ff ffb1 	bl	8005d0c <NVIC_EncodePriority>
 8005daa:	4602      	mov	r2, r0
 8005dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff ff80 	bl	8005cb8 <__NVIC_SetPriority>
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff ff54 	bl	8005c7c <__NVIC_EnableIRQ>
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e054      	b.n	8005e98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7f5b      	ldrb	r3, [r3, #29]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f852 	bl	8001ea8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10c      	bne.n	8005e2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a22      	ldr	r2, [pc, #136]	@ (8005ea0 <HAL_CRC_Init+0xc4>)
 8005e18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0218 	bic.w	r2, r2, #24
 8005e28:	609a      	str	r2, [r3, #8]
 8005e2a:	e00c      	b.n	8005e46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f834 	bl	8005ea4 <HAL_CRCEx_Polynomial_Set>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e028      	b.n	8005e98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	795b      	ldrb	r3, [r3, #5]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e56:	611a      	str	r2, [r3, #16]
 8005e58:	e004      	b.n	8005e64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6912      	ldr	r2, [r2, #16]
 8005e62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	04c11db7 	.word	0x04c11db7

08005ea4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005eb4:	231f      	movs	r3, #31
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
 8005ec6:	e063      	b.n	8005f90 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ec8:	bf00      	nop
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	613a      	str	r2, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_CRCEx_Polynomial_Set+0x44>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	d846      	bhi.n	8005f7c <HAL_CRCEx_Polynomial_Set+0xd8>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f83 	.word	0x08005f83
 8005ef8:	08005f7d 	.word	0x08005f7d
 8005efc:	08005f7d 	.word	0x08005f7d
 8005f00:	08005f7d 	.word	0x08005f7d
 8005f04:	08005f7d 	.word	0x08005f7d
 8005f08:	08005f7d 	.word	0x08005f7d
 8005f0c:	08005f7d 	.word	0x08005f7d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f7d 	.word	0x08005f7d
 8005f2c:	08005f7d 	.word	0x08005f7d
 8005f30:	08005f7d 	.word	0x08005f7d
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f7d 	.word	0x08005f7d
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	08005f59 	.word	0x08005f59
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d913      	bls.n	8005f86 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f62:	e010      	b.n	8005f86 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	d90f      	bls.n	8005f8a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f6e:	e00c      	b.n	8005f8a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d90b      	bls.n	8005f8e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f7a:	e008      	b.n	8005f8e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f8e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10d      	bne.n	8005fb2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 0118 	bic.w	r1, r3, #24
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e098      	b.n	8006104 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006110 <HAL_DMA_Init+0x150>)
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d80f      	bhi.n	8005ffe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8006114 <HAL_DMA_Init+0x154>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8006118 <HAL_DMA_Init+0x158>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	009a      	lsls	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a48      	ldr	r2, [pc, #288]	@ (800611c <HAL_DMA_Init+0x15c>)
 8005ffa:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ffc:	e00e      	b.n	800601c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	4b46      	ldr	r3, [pc, #280]	@ (8006120 <HAL_DMA_Init+0x160>)
 8006006:	4413      	add	r3, r2
 8006008:	4a43      	ldr	r2, [pc, #268]	@ (8006118 <HAL_DMA_Init+0x158>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a42      	ldr	r2, [pc, #264]	@ (8006124 <HAL_DMA_Init+0x164>)
 800601a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800604c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006076:	d039      	beq.n	80060ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	4a27      	ldr	r2, [pc, #156]	@ (800611c <HAL_DMA_Init+0x15c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d11a      	bne.n	80060b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006082:	4b29      	ldr	r3, [pc, #164]	@ (8006128 <HAL_DMA_Init+0x168>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	f003 031c 	and.w	r3, r3, #28
 800608e:	210f      	movs	r1, #15
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	4924      	ldr	r1, [pc, #144]	@ (8006128 <HAL_DMA_Init+0x168>)
 8006098:	4013      	ands	r3, r2
 800609a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800609c:	4b22      	ldr	r3, [pc, #136]	@ (8006128 <HAL_DMA_Init+0x168>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a8:	f003 031c 	and.w	r3, r3, #28
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	491d      	ldr	r1, [pc, #116]	@ (8006128 <HAL_DMA_Init+0x168>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	e019      	b.n	80060ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80060b8:	4b1c      	ldr	r3, [pc, #112]	@ (800612c <HAL_DMA_Init+0x16c>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c0:	f003 031c 	and.w	r3, r3, #28
 80060c4:	210f      	movs	r1, #15
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	4917      	ldr	r1, [pc, #92]	@ (800612c <HAL_DMA_Init+0x16c>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80060d2:	4b16      	ldr	r3, [pc, #88]	@ (800612c <HAL_DMA_Init+0x16c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f003 031c 	and.w	r3, r3, #28
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	4911      	ldr	r1, [pc, #68]	@ (800612c <HAL_DMA_Init+0x16c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40020407 	.word	0x40020407
 8006114:	bffdfff8 	.word	0xbffdfff8
 8006118:	cccccccd 	.word	0xcccccccd
 800611c:	40020000 	.word	0x40020000
 8006120:	bffdfbf8 	.word	0xbffdfbf8
 8006124:	40020400 	.word	0x40020400
 8006128:	400200a8 	.word	0x400200a8
 800612c:	400204a8 	.word	0x400204a8

08006130 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e072      	b.n	8006228 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	4b36      	ldr	r3, [pc, #216]	@ (8006234 <HAL_DMA_DeInit+0x104>)
 800615a:	429a      	cmp	r2, r3
 800615c:	d80f      	bhi.n	800617e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	4b34      	ldr	r3, [pc, #208]	@ (8006238 <HAL_DMA_DeInit+0x108>)
 8006166:	4413      	add	r3, r2
 8006168:	4a34      	ldr	r2, [pc, #208]	@ (800623c <HAL_DMA_DeInit+0x10c>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	009a      	lsls	r2, r3, #2
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a31      	ldr	r2, [pc, #196]	@ (8006240 <HAL_DMA_DeInit+0x110>)
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40
 800617c:	e00e      	b.n	800619c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	4b2f      	ldr	r3, [pc, #188]	@ (8006244 <HAL_DMA_DeInit+0x114>)
 8006186:	4413      	add	r3, r2
 8006188:	4a2c      	ldr	r2, [pc, #176]	@ (800623c <HAL_DMA_DeInit+0x10c>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	009a      	lsls	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2b      	ldr	r2, [pc, #172]	@ (8006248 <HAL_DMA_DeInit+0x118>)
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a8:	f003 021c 	and.w	r2, r3, #28
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f202 	lsl.w	r2, r1, r2
 80061b6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	4a20      	ldr	r2, [pc, #128]	@ (8006240 <HAL_DMA_DeInit+0x110>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10d      	bne.n	80061de <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061c2:	4b22      	ldr	r3, [pc, #136]	@ (800624c <HAL_DMA_DeInit+0x11c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	f003 031c 	and.w	r3, r3, #28
 80061ce:	210f      	movs	r1, #15
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	491d      	ldr	r1, [pc, #116]	@ (800624c <HAL_DMA_DeInit+0x11c>)
 80061d8:	4013      	ands	r3, r2
 80061da:	600b      	str	r3, [r1, #0]
 80061dc:	e00c      	b.n	80061f8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061de:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <HAL_DMA_DeInit+0x120>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f003 031c 	and.w	r3, r3, #28
 80061ea:	210f      	movs	r1, #15
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	4917      	ldr	r1, [pc, #92]	@ (8006250 <HAL_DMA_DeInit+0x120>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	40020407 	.word	0x40020407
 8006238:	bffdfff8 	.word	0xbffdfff8
 800623c:	cccccccd 	.word	0xcccccccd
 8006240:	40020000 	.word	0x40020000
 8006244:	bffdfbf8 	.word	0xbffdfbf8
 8006248:	40020400 	.word	0x40020400
 800624c:	400200a8 	.word	0x400200a8
 8006250:	400204a8 	.word	0x400204a8

08006254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_DMA_Start_IT+0x20>
 8006270:	2302      	movs	r3, #2
 8006272:	e04b      	b.n	800630c <HAL_DMA_Start_IT+0xb8>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d13a      	bne.n	80062fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f96d 	bl	800658c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 020e 	orr.w	r2, r2, #14
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e00f      	b.n	80062ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 020a 	orr.w	r2, r2, #10
 80062ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e005      	b.n	800630a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006306:	2302      	movs	r3, #2
 8006308:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d008      	beq.n	800633e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2204      	movs	r2, #4
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e022      	b.n	8006384 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 020e 	bic.w	r2, r2, #14
 800634c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	f003 021c 	and.w	r2, r3, #28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	2101      	movs	r1, #1
 800636c:	fa01 f202 	lsl.w	r2, r1, r2
 8006370:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d005      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2204      	movs	r2, #4
 80063ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e029      	b.n	8006408 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 020e 	bic.w	r2, r2, #14
 80063c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d8:	f003 021c 	and.w	r2, r3, #28
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	2101      	movs	r1, #1
 80063e2:	fa01 f202 	lsl.w	r2, r1, r2
 80063e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
    }
  }
  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f003 031c 	and.w	r3, r3, #28
 8006432:	2204      	movs	r2, #4
 8006434:	409a      	lsls	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d026      	beq.n	800648c <HAL_DMA_IRQHandler+0x7a>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d021      	beq.n	800648c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	f003 021c 	and.w	r2, r3, #28
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	2104      	movs	r1, #4
 8006474:	fa01 f202 	lsl.w	r2, r1, r2
 8006478:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d071      	beq.n	8006566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800648a:	e06c      	b.n	8006566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006490:	f003 031c 	and.w	r3, r3, #28
 8006494:	2202      	movs	r2, #2
 8006496:	409a      	lsls	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02e      	beq.n	80064fe <HAL_DMA_IRQHandler+0xec>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d029      	beq.n	80064fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 020a 	bic.w	r2, r2, #10
 80064c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d4:	f003 021c 	and.w	r2, r3, #28
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	2102      	movs	r1, #2
 80064de:	fa01 f202 	lsl.w	r2, r1, r2
 80064e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d038      	beq.n	8006566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80064fc:	e033      	b.n	8006566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f003 031c 	and.w	r3, r3, #28
 8006506:	2208      	movs	r2, #8
 8006508:	409a      	lsls	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02a      	beq.n	8006568 <HAL_DMA_IRQHandler+0x156>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d025      	beq.n	8006568 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 020e 	bic.w	r2, r2, #14
 800652a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006530:	f003 021c 	and.w	r2, r3, #28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f202 	lsl.w	r2, r1, r2
 800653e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006566:	bf00      	nop
 8006568:	bf00      	nop
}
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800657e:	b2db      	uxtb	r3, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f003 021c 	and.w	r2, r3, #28
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	2101      	movs	r1, #1
 80065a8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d108      	bne.n	80065d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065ce:	e007      	b.n	80065e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065fa:	e154      	b.n	80068a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8146 	beq.w	80068a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d005      	beq.n	800662c <HAL_GPIO_Init+0x40>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d130      	bne.n	800668e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4013      	ands	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006662:	2201      	movs	r2, #1
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4013      	ands	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 0201 	and.w	r2, r3, #1
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b03      	cmp	r3, #3
 8006698:	d017      	beq.n	80066ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	2203      	movs	r2, #3
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4013      	ands	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d123      	bne.n	800671e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	08da      	lsrs	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3208      	adds	r2, #8
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	220f      	movs	r2, #15
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4013      	ands	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	6939      	ldr	r1, [r7, #16]
 800671a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	2203      	movs	r2, #3
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4013      	ands	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0203 	and.w	r2, r3, #3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a0 	beq.w	80068a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006760:	4b58      	ldr	r3, [pc, #352]	@ (80068c4 <HAL_GPIO_Init+0x2d8>)
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	4a57      	ldr	r2, [pc, #348]	@ (80068c4 <HAL_GPIO_Init+0x2d8>)
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	6613      	str	r3, [r2, #96]	@ 0x60
 800676c:	4b55      	ldr	r3, [pc, #340]	@ (80068c4 <HAL_GPIO_Init+0x2d8>)
 800676e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006778:	4a53      	ldr	r2, [pc, #332]	@ (80068c8 <HAL_GPIO_Init+0x2dc>)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	089b      	lsrs	r3, r3, #2
 800677e:	3302      	adds	r3, #2
 8006780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	220f      	movs	r2, #15
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	43db      	mvns	r3, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4013      	ands	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067a2:	d019      	beq.n	80067d8 <HAL_GPIO_Init+0x1ec>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a49      	ldr	r2, [pc, #292]	@ (80068cc <HAL_GPIO_Init+0x2e0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <HAL_GPIO_Init+0x1e8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a48      	ldr	r2, [pc, #288]	@ (80068d0 <HAL_GPIO_Init+0x2e4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00d      	beq.n	80067d0 <HAL_GPIO_Init+0x1e4>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a47      	ldr	r2, [pc, #284]	@ (80068d4 <HAL_GPIO_Init+0x2e8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <HAL_GPIO_Init+0x1e0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a46      	ldr	r2, [pc, #280]	@ (80068d8 <HAL_GPIO_Init+0x2ec>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_GPIO_Init+0x1dc>
 80067c4:	2304      	movs	r3, #4
 80067c6:	e008      	b.n	80067da <HAL_GPIO_Init+0x1ee>
 80067c8:	2307      	movs	r3, #7
 80067ca:	e006      	b.n	80067da <HAL_GPIO_Init+0x1ee>
 80067cc:	2303      	movs	r3, #3
 80067ce:	e004      	b.n	80067da <HAL_GPIO_Init+0x1ee>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e002      	b.n	80067da <HAL_GPIO_Init+0x1ee>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_GPIO_Init+0x1ee>
 80067d8:	2300      	movs	r3, #0
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	f002 0203 	and.w	r2, r2, #3
 80067e0:	0092      	lsls	r2, r2, #2
 80067e2:	4093      	lsls	r3, r2
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80067ea:	4937      	ldr	r1, [pc, #220]	@ (80068c8 <HAL_GPIO_Init+0x2dc>)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	089b      	lsrs	r3, r3, #2
 80067f0:	3302      	adds	r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067f8:	4b38      	ldr	r3, [pc, #224]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	43db      	mvns	r3, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4013      	ands	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800681c:	4a2f      	ldr	r2, [pc, #188]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006822:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	43db      	mvns	r3, r3
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4013      	ands	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006846:	4a25      	ldr	r2, [pc, #148]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800684c:	4b23      	ldr	r3, [pc, #140]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	43db      	mvns	r3, r3
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006870:	4a1a      	ldr	r2, [pc, #104]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006876:	4b19      	ldr	r3, [pc, #100]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	43db      	mvns	r3, r3
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4013      	ands	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800689a:	4a10      	ldr	r2, [pc, #64]	@ (80068dc <HAL_GPIO_Init+0x2f0>)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3301      	adds	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f aea3 	bne.w	80065fc <HAL_GPIO_Init+0x10>
  }
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40010000 	.word	0x40010000
 80068cc:	48000400 	.word	0x48000400
 80068d0:	48000800 	.word	0x48000800
 80068d4:	48000c00 	.word	0x48000c00
 80068d8:	48001000 	.word	0x48001000
 80068dc:	40010400 	.word	0x40010400

080068e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	807b      	strh	r3, [r7, #2]
 80068ec:	4613      	mov	r3, r2
 80068ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068f0:	787b      	ldrb	r3, [r7, #1]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068f6:	887a      	ldrh	r2, [r7, #2]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068fc:	e002      	b.n	8006904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068fe:	887a      	ldrh	r2, [r7, #2]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e08d      	b.n	8006a3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fb fad6 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2224      	movs	r2, #36	@ 0x24
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006960:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006970:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d107      	bne.n	800698a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	e006      	b.n	8006998 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006996:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d108      	bne.n	80069b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069ae:	605a      	str	r2, [r3, #4]
 80069b0:	e007      	b.n	80069c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69d9      	ldr	r1, [r3, #28]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00f      	beq.n	8006a88 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00f      	beq.n	8006ab2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa0:	f043 0208 	orr.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ab0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aca:	f043 0202 	orr.w	r2, r3, #2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ada:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 030b 	and.w	r3, r3, #11
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb82 	bl	80071f8 <I2C_ITError>
  }
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
 8006b30:	4613      	mov	r3, r2
 8006b32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <I2C_Slave_ISR_IT+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e0e1      	b.n	8006d64 <I2C_Slave_ISR_IT+0x1e8>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006bbc:	6939      	ldr	r1, [r7, #16]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f9b4 	bl	8006f2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04b      	beq.n	8006c66 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d046      	beq.n	8006c66 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d128      	bne.n	8006c34 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b28      	cmp	r3, #40	@ 0x28
 8006bec:	d108      	bne.n	8006c00 <I2C_Slave_ISR_IT+0x84>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bf4:	d104      	bne.n	8006c00 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006bf6:	6939      	ldr	r1, [r7, #16]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 faa9 	bl	8007150 <I2C_ITListenCplt>
 8006bfe:	e031      	b.n	8006c64 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b29      	cmp	r3, #41	@ 0x29
 8006c0a:	d10e      	bne.n	8006c2a <I2C_Slave_ISR_IT+0xae>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c12:	d00a      	beq.n	8006c2a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2210      	movs	r2, #16
 8006c1a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fc02 	bl	8007426 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f926 	bl	8006e74 <I2C_ITSlaveSeqCplt>
 8006c28:	e01c      	b.n	8006c64 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006c32:	e08f      	b.n	8006d54 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c40:	f043 0204 	orr.w	r2, r3, #4
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <I2C_Slave_ISR_IT+0xda>
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c54:	d17e      	bne.n	8006d54 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 facb 	bl	80071f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006c62:	e077      	b.n	8006d54 <I2C_Slave_ISR_IT+0x1d8>
 8006c64:	e076      	b.n	8006d54 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02f      	beq.n	8006cd0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d02a      	beq.n	8006cd0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d018      	beq.n	8006cb6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d14b      	bne.n	8006d58 <I2C_Slave_ISR_IT+0x1dc>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cc6:	d047      	beq.n	8006d58 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f8d3 	bl	8006e74 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006cce:	e043      	b.n	8006d58 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006ce4:	6939      	ldr	r1, [r7, #16]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f840 	bl	8006d6c <I2C_ITAddrCplt>
 8006cec:	e035      	b.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d030      	beq.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02b      	beq.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d018      	beq.n	8006d3e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d3c:	e00d      	b.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d44:	d002      	beq.n	8006d4c <I2C_Slave_ISR_IT+0x1d0>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f891 	bl	8006e74 <I2C_ITSlaveSeqCplt>
 8006d52:	e002      	b.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006d58:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d82:	2b28      	cmp	r3, #40	@ 0x28
 8006d84:	d16a      	bne.n	8006e5c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	0c1b      	lsrs	r3, r3, #16
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006da4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006dc0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d138      	bne.n	8006e3c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006dca:	897b      	ldrh	r3, [r7, #10]
 8006dcc:	09db      	lsrs	r3, r3, #7
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	89bb      	ldrh	r3, [r7, #12]
 8006dd2:	4053      	eors	r3, r2
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f003 0306 	and.w	r3, r3, #6
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d11c      	bne.n	8006e18 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006dde:	897b      	ldrh	r3, [r7, #10]
 8006de0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d13b      	bne.n	8006e6c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e0a:	89ba      	ldrh	r2, [r7, #12]
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff fe87 	bl	8006b24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e16:	e029      	b.n	8006e6c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006e18:	893b      	ldrh	r3, [r7, #8]
 8006e1a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb42 	bl	80074aa <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e2e:	89ba      	ldrh	r2, [r7, #12]
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fe75 	bl	8006b24 <HAL_I2C_AddrCallback>
}
 8006e3a:	e017      	b.n	8006e6c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb32 	bl	80074aa <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e4e:	89ba      	ldrh	r2, [r7, #12]
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe65 	bl	8006b24 <HAL_I2C_AddrCallback>
}
 8006e5a:	e007      	b.n	8006e6c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d008      	beq.n	8006ea8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	e00c      	b.n	8006ec2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ec0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b29      	cmp	r3, #41	@ 0x29
 8006ecc:	d112      	bne.n	8006ef4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2228      	movs	r2, #40	@ 0x28
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2221      	movs	r2, #33	@ 0x21
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006edc:	2101      	movs	r1, #1
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fae3 	bl	80074aa <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fe05 	bl	8006afc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ef2:	e017      	b.n	8006f24 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efe:	d111      	bne.n	8006f24 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2228      	movs	r2, #40	@ 0x28
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2222      	movs	r2, #34	@ 0x22
 8006f0c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f0e:	2102      	movs	r1, #2
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 faca 	bl	80074aa <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fdf6 	bl	8006b10 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f48:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b21      	cmp	r3, #33	@ 0x21
 8006f56:	d002      	beq.n	8006f5e <I2C_ITSlaveCplt+0x32>
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b29      	cmp	r3, #41	@ 0x29
 8006f5c:	d108      	bne.n	8006f70 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006f5e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 faa1 	bl	80074aa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2221      	movs	r2, #33	@ 0x21
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f6e:	e019      	b.n	8006fa4 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b22      	cmp	r3, #34	@ 0x22
 8006f74:	d002      	beq.n	8006f7c <I2C_ITSlaveCplt+0x50>
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f7a:	d108      	bne.n	8006f8e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f7c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa92 	bl	80074aa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2222      	movs	r2, #34	@ 0x22
 8006f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f8c:	e00a      	b.n	8006fa4 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b28      	cmp	r3, #40	@ 0x28
 8006f92:	d107      	bne.n	8006fa4 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006f94:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fa86 	bl	80074aa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6859      	ldr	r1, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b62      	ldr	r3, [pc, #392]	@ (8007148 <I2C_ITSlaveCplt+0x21c>)
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fa2e 	bl	8007426 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006fe2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01f      	beq.n	800702c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ffa:	e017      	b.n	800702c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d012      	beq.n	800702c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007014:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d020      	beq.n	8007078 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f023 0304 	bic.w	r3, r3, #4
 800703c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00c      	beq.n	8007078 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	f043 0204 	orr.w	r2, r3, #4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d010      	beq.n	80070c6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f8a4 	bl	80071f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b28      	cmp	r3, #40	@ 0x28
 80070ba:	d141      	bne.n	8007140 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f846 	bl	8007150 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070c4:	e03c      	b.n	8007140 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80070ce:	d014      	beq.n	80070fa <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fecf 	bl	8006e74 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1c      	ldr	r2, [pc, #112]	@ (800714c <I2C_ITSlaveCplt+0x220>)
 80070da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fd24 	bl	8006b40 <HAL_I2C_ListenCpltCallback>
}
 80070f8:	e022      	b.n	8007140 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b22      	cmp	r3, #34	@ 0x22
 8007104:	d10e      	bne.n	8007124 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fcf7 	bl	8006b10 <HAL_I2C_SlaveRxCpltCallback>
}
 8007122:	e00d      	b.n	8007140 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fcde 	bl	8006afc <HAL_I2C_SlaveTxCpltCallback>
}
 8007140:	bf00      	nop
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	fe00e800 	.word	0xfe00e800
 800714c:	ffff0000 	.word	0xffff0000

08007150 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a25      	ldr	r2, [pc, #148]	@ (80071f4 <I2C_ITListenCplt+0xa4>)
 800715e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d022      	beq.n	80071cc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	f043 0204 	orr.w	r2, r3, #4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071cc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f96a 	bl	80074aa <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2210      	movs	r2, #16
 80071dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fcaa 	bl	8006b40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	ffff0000 	.word	0xffff0000

080071f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007208:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a6d      	ldr	r2, [pc, #436]	@ (80073cc <I2C_ITError+0x1d4>)
 8007216:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b28      	cmp	r3, #40	@ 0x28
 800722e:	d005      	beq.n	800723c <I2C_ITError+0x44>
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b29      	cmp	r3, #41	@ 0x29
 8007234:	d002      	beq.n	800723c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b2a      	cmp	r3, #42	@ 0x2a
 800723a:	d10b      	bne.n	8007254 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800723c:	2103      	movs	r1, #3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f933 	bl	80074aa <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2228      	movs	r2, #40	@ 0x28
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a60      	ldr	r2, [pc, #384]	@ (80073d0 <I2C_ITError+0x1d8>)
 8007250:	635a      	str	r2, [r3, #52]	@ 0x34
 8007252:	e030      	b.n	80072b6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007254:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f926 	bl	80074aa <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f8e1 	bl	8007426 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b60      	cmp	r3, #96	@ 0x60
 800726e:	d01f      	beq.n	80072b0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d114      	bne.n	80072b0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d109      	bne.n	80072a8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2210      	movs	r2, #16
 800729a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a0:	f043 0204 	orr.w	r2, r3, #4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2220      	movs	r2, #32
 80072ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d039      	beq.n	8007338 <I2C_ITError+0x140>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b11      	cmp	r3, #17
 80072c8:	d002      	beq.n	80072d0 <I2C_ITError+0xd8>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b21      	cmp	r3, #33	@ 0x21
 80072ce:	d133      	bne.n	8007338 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072de:	d107      	bne.n	80072f0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f93b 	bl	8006570 <HAL_DMA_GetState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d017      	beq.n	8007330 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	4a33      	ldr	r2, [pc, #204]	@ (80073d4 <I2C_ITError+0x1dc>)
 8007306:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff f83b 	bl	8006390 <HAL_DMA_Abort_IT>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d04d      	beq.n	80073bc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800732a:	4610      	mov	r0, r2
 800732c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800732e:	e045      	b.n	80073bc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f851 	bl	80073d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007336:	e041      	b.n	80073bc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d039      	beq.n	80073b4 <I2C_ITError+0x1bc>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b12      	cmp	r3, #18
 8007344:	d002      	beq.n	800734c <I2C_ITError+0x154>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b22      	cmp	r3, #34	@ 0x22
 800734a:	d133      	bne.n	80073b4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800735a:	d107      	bne.n	800736c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800736a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff f8fd 	bl	8006570 <HAL_DMA_GetState>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d017      	beq.n	80073ac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	4a14      	ldr	r2, [pc, #80]	@ (80073d4 <I2C_ITError+0x1dc>)
 8007382:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fffd 	bl	8006390 <HAL_DMA_Abort_IT>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d011      	beq.n	80073c0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073aa:	e009      	b.n	80073c0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f813 	bl	80073d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073b2:	e005      	b.n	80073c0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f80f 	bl	80073d8 <I2C_TreatErrorCallback>
  }
}
 80073ba:	e002      	b.n	80073c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073c0:	bf00      	nop
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	ffff0000 	.word	0xffff0000
 80073d0:	08006b7d 	.word	0x08006b7d
 80073d4:	0800746f 	.word	0x0800746f

080073d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b60      	cmp	r3, #96	@ 0x60
 80073ea:	d10e      	bne.n	800740a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fbb0 	bl	8006b68 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007408:	e009      	b.n	800741e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff fb9b 	bl	8006b54 <HAL_I2C_ErrorCallback>
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b02      	cmp	r3, #2
 800743a:	d103      	bne.n	8007444 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d007      	beq.n	8007462 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	619a      	str	r2, [r3, #24]
  }
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	2200      	movs	r2, #0
 800748a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007498:	2200      	movs	r2, #0
 800749a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff ff9b 	bl	80073d8 <I2C_TreatErrorCallback>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074ba:	887b      	ldrh	r3, [r7, #2]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00f      	beq.n	80074e4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80074ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80074d8:	2b28      	cmp	r3, #40	@ 0x28
 80074da:	d003      	beq.n	80074e4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80074e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074e4:	887b      	ldrh	r3, [r7, #2]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00f      	beq.n	800750e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80074f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007502:	2b28      	cmp	r3, #40	@ 0x28
 8007504:	d003      	beq.n	800750e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800750c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800750e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da03      	bge.n	800751e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800751c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	2b10      	cmp	r3, #16
 8007522:	d103      	bne.n	800752c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800752a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	2b20      	cmp	r3, #32
 8007530:	d103      	bne.n	800753a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f043 0320 	orr.w	r3, r3, #32
 8007538:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d103      	bne.n	8007548 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007546:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6819      	ldr	r1, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	43da      	mvns	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	400a      	ands	r2, r1
 8007558:	601a      	str	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b20      	cmp	r3, #32
 800757a:	d138      	bne.n	80075ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007586:	2302      	movs	r3, #2
 8007588:	e032      	b.n	80075f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2224      	movs	r2, #36	@ 0x24
 8007596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6819      	ldr	r1, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0201 	orr.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e000      	b.n	80075f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b20      	cmp	r3, #32
 8007610:	d139      	bne.n	8007686 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800761c:	2302      	movs	r3, #2
 800761e:	e033      	b.n	8007688 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	@ 0x24
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800764e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0201 	orr.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e08f      	b.n	80077c6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fa fd59 	bl	8002178 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d004      	beq.n	80076e8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076e6:	d103      	bne.n	80076f0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 031e 	bic.w	r3, r3, #30
 80076ee:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d005      	beq.n	8007708 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007702:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007706:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4b31      	ldr	r3, [pc, #196]	@ (80077d0 <HAL_LPTIM_Init+0x13c>)
 800770c:	4013      	ands	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007718:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800771e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007724:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800772a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007742:	4313      	orrs	r3, r2
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d004      	beq.n	800775c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800775a:	d107      	bne.n	800776c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007764:	4313      	orrs	r3, r2
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007774:	4293      	cmp	r3, r2
 8007776:	d00a      	beq.n	800778e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007780:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007786:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a0e      	ldr	r2, [pc, #56]	@ (80077d4 <HAL_LPTIM_Init+0x140>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	621a      	str	r2, [r3, #32]
 80077b0:	e004      	b.n	80077bc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80077ba:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	ff19f1fe 	.word	0xff19f1fe
 80077d4:	40007c00 	.word	0x40007c00

080077d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40007000 	.word	0x40007000

080077f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007802:	d130      	bne.n	8007866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007804:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800780c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007810:	d038      	beq.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800781a:	4a1e      	ldr	r2, [pc, #120]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800781c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007822:	4b1d      	ldr	r3, [pc, #116]	@ (8007898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2232      	movs	r2, #50	@ 0x32
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	4a1b      	ldr	r2, [pc, #108]	@ (800789c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007838:	e002      	b.n	8007840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b01      	subs	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007840:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800784c:	d102      	bne.n	8007854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f2      	bne.n	800783a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007854:	4b0f      	ldr	r3, [pc, #60]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007860:	d110      	bne.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e00f      	b.n	8007886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007866:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800786e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007872:	d007      	beq.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007874:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800787c:	4a05      	ldr	r2, [pc, #20]	@ (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800787e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40007000 	.word	0x40007000
 8007898:	20000000 	.word	0x20000000
 800789c:	431bde83 	.word	0x431bde83

080078a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f000 bc02 	b.w	80080b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078b4:	4b96      	ldr	r3, [pc, #600]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 030c 	and.w	r3, r3, #12
 80078bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078be:	4b94      	ldr	r3, [pc, #592]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80e4 	beq.w	8007a9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <HAL_RCC_OscConfig+0x4c>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b0c      	cmp	r3, #12
 80078e0:	f040 808b 	bne.w	80079fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	f040 8087 	bne.w	80079fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078ec:	4b88      	ldr	r3, [pc, #544]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_RCC_OscConfig+0x64>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e3d9      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	4b81      	ldr	r3, [pc, #516]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <HAL_RCC_OscConfig+0x7e>
 8007914:	4b7e      	ldr	r3, [pc, #504]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800791c:	e005      	b.n	800792a <HAL_RCC_OscConfig+0x8a>
 800791e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800792a:	4293      	cmp	r3, r2
 800792c:	d223      	bcs.n	8007976 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fdbe 	bl	80084b4 <RCC_SetFlashLatencyFromMSIRange>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e3ba      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007942:	4b73      	ldr	r3, [pc, #460]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a72      	ldr	r2, [pc, #456]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007948:	f043 0308 	orr.w	r3, r3, #8
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	4b70      	ldr	r3, [pc, #448]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	496d      	ldr	r1, [pc, #436]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 800795c:	4313      	orrs	r3, r2
 800795e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007960:	4b6b      	ldr	r3, [pc, #428]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	4968      	ldr	r1, [pc, #416]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007970:	4313      	orrs	r3, r2
 8007972:	604b      	str	r3, [r1, #4]
 8007974:	e025      	b.n	80079c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007976:	4b66      	ldr	r3, [pc, #408]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a65      	ldr	r2, [pc, #404]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 800797c:	f043 0308 	orr.w	r3, r3, #8
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	4b63      	ldr	r3, [pc, #396]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	4960      	ldr	r1, [pc, #384]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007990:	4313      	orrs	r3, r2
 8007992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007994:	4b5e      	ldr	r3, [pc, #376]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	495b      	ldr	r1, [pc, #364]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fd7e 	bl	80084b4 <RCC_SetFlashLatencyFromMSIRange>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e37a      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079c2:	f000 fc81 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b51      	ldr	r3, [pc, #324]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	4950      	ldr	r1, [pc, #320]	@ (8007b14 <HAL_RCC_OscConfig+0x274>)
 80079d4:	5ccb      	ldrb	r3, [r1, r3]
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	4a4e      	ldr	r2, [pc, #312]	@ (8007b18 <HAL_RCC_OscConfig+0x278>)
 80079e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80079e2:	4b4e      	ldr	r3, [pc, #312]	@ (8007b1c <HAL_RCC_OscConfig+0x27c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fa ffa6 	bl	8002938 <HAL_InitTick>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d052      	beq.n	8007a9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	e35e      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d032      	beq.n	8007a68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a02:	4b43      	ldr	r3, [pc, #268]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a42      	ldr	r2, [pc, #264]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a0e:	f7fe f8f7 	bl	8005c00 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a16:	f7fe f8f3 	bl	8005c00 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e347      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a28:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a34:	4b36      	ldr	r3, [pc, #216]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a35      	ldr	r2, [pc, #212]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a3a:	f043 0308 	orr.w	r3, r3, #8
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	4b33      	ldr	r3, [pc, #204]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	4930      	ldr	r1, [pc, #192]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a52:	4b2f      	ldr	r3, [pc, #188]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	492b      	ldr	r1, [pc, #172]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	604b      	str	r3, [r1, #4]
 8007a66:	e01a      	b.n	8007a9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a68:	4b29      	ldr	r3, [pc, #164]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a28      	ldr	r2, [pc, #160]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a6e:	f023 0301 	bic.w	r3, r3, #1
 8007a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a74:	f7fe f8c4 	bl	8005c00 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a7c:	f7fe f8c0 	bl	8005c00 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e314      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a8e:	4b20      	ldr	r3, [pc, #128]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f0      	bne.n	8007a7c <HAL_RCC_OscConfig+0x1dc>
 8007a9a:	e000      	b.n	8007a9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d073      	beq.n	8007b92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d005      	beq.n	8007abc <HAL_RCC_OscConfig+0x21c>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b0c      	cmp	r3, #12
 8007ab4:	d10e      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10b      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007abc:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d063      	beq.n	8007b90 <HAL_RCC_OscConfig+0x2f0>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d15f      	bne.n	8007b90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e2f1      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007adc:	d106      	bne.n	8007aec <HAL_RCC_OscConfig+0x24c>
 8007ade:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e025      	b.n	8007b38 <HAL_RCC_OscConfig+0x298>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007af4:	d114      	bne.n	8007b20 <HAL_RCC_OscConfig+0x280>
 8007af6:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a05      	ldr	r2, [pc, #20]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b03      	ldr	r3, [pc, #12]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a02      	ldr	r2, [pc, #8]	@ (8007b10 <HAL_RCC_OscConfig+0x270>)
 8007b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e013      	b.n	8007b38 <HAL_RCC_OscConfig+0x298>
 8007b10:	40021000 	.word	0x40021000
 8007b14:	08013250 	.word	0x08013250
 8007b18:	20000000 	.word	0x20000000
 8007b1c:	20000008 	.word	0x20000008
 8007b20:	4ba0      	ldr	r3, [pc, #640]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a9f      	ldr	r2, [pc, #636]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a9c      	ldr	r2, [pc, #624]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d013      	beq.n	8007b68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b40:	f7fe f85e 	bl	8005c00 <HAL_GetTick>
 8007b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b48:	f7fe f85a 	bl	8005c00 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b64      	cmp	r3, #100	@ 0x64
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e2ae      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b5a:	4b92      	ldr	r3, [pc, #584]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0f0      	beq.n	8007b48 <HAL_RCC_OscConfig+0x2a8>
 8007b66:	e014      	b.n	8007b92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fe f84a 	bl	8005c00 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b70:	f7fe f846 	bl	8005c00 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b64      	cmp	r3, #100	@ 0x64
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e29a      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b82:	4b88      	ldr	r3, [pc, #544]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x2d0>
 8007b8e:	e000      	b.n	8007b92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d060      	beq.n	8007c60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x310>
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b0c      	cmp	r3, #12
 8007ba8:	d119      	bne.n	8007bde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d116      	bne.n	8007bde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x328>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e277      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc8:	4b76      	ldr	r3, [pc, #472]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	4973      	ldr	r1, [pc, #460]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bdc:	e040      	b.n	8007c60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d023      	beq.n	8007c2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007be6:	4b6f      	ldr	r3, [pc, #444]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6e      	ldr	r2, [pc, #440]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf2:	f7fe f805 	bl	8005c00 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bfa:	f7fe f801 	bl	8005c00 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e255      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c0c:	4b65      	ldr	r3, [pc, #404]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c18:	4b62      	ldr	r3, [pc, #392]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	495f      	ldr	r1, [pc, #380]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	604b      	str	r3, [r1, #4]
 8007c2c:	e018      	b.n	8007c60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a5c      	ldr	r2, [pc, #368]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3a:	f7fd ffe1 	bl	8005c00 <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c42:	f7fd ffdd 	bl	8005c00 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e231      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c54:	4b53      	ldr	r3, [pc, #332]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d03c      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01c      	beq.n	8007cae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c74:	4b4b      	ldr	r3, [pc, #300]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c84:	f7fd ffbc 	bl	8005c00 <HAL_GetTick>
 8007c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c8c:	f7fd ffb8 	bl	8005c00 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e20c      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c9e:	4b41      	ldr	r3, [pc, #260]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0ef      	beq.n	8007c8c <HAL_RCC_OscConfig+0x3ec>
 8007cac:	e01b      	b.n	8007ce6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cae:	4b3d      	ldr	r3, [pc, #244]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cbe:	f7fd ff9f 	bl	8005c00 <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cc4:	e008      	b.n	8007cd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cc6:	f7fd ff9b 	bl	8005c00 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e1ef      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cd8:	4b32      	ldr	r3, [pc, #200]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1ef      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80a6 	beq.w	8007e40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d04:	4b27      	ldr	r3, [pc, #156]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d08:	4a26      	ldr	r2, [pc, #152]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d10:	4b24      	ldr	r3, [pc, #144]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d20:	4b21      	ldr	r3, [pc, #132]	@ (8007da8 <HAL_RCC_OscConfig+0x508>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d118      	bne.n	8007d5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8007da8 <HAL_RCC_OscConfig+0x508>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <HAL_RCC_OscConfig+0x508>)
 8007d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d38:	f7fd ff62 	bl	8005c00 <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d40:	f7fd ff5e 	bl	8005c00 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e1b2      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d52:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <HAL_RCC_OscConfig+0x508>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0f0      	beq.n	8007d40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d108      	bne.n	8007d78 <HAL_RCC_OscConfig+0x4d8>
 8007d66:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d76:	e029      	b.n	8007dcc <HAL_RCC_OscConfig+0x52c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	d115      	bne.n	8007dac <HAL_RCC_OscConfig+0x50c>
 8007d80:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d86:	4a07      	ldr	r2, [pc, #28]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d88:	f043 0304 	orr.w	r3, r3, #4
 8007d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d90:	4b04      	ldr	r3, [pc, #16]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d96:	4a03      	ldr	r2, [pc, #12]	@ (8007da4 <HAL_RCC_OscConfig+0x504>)
 8007d98:	f043 0301 	orr.w	r3, r3, #1
 8007d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007da0:	e014      	b.n	8007dcc <HAL_RCC_OscConfig+0x52c>
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
 8007da8:	40007000 	.word	0x40007000
 8007dac:	4b9a      	ldr	r3, [pc, #616]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db2:	4a99      	ldr	r2, [pc, #612]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007db4:	f023 0301 	bic.w	r3, r3, #1
 8007db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007dbc:	4b96      	ldr	r3, [pc, #600]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc2:	4a95      	ldr	r2, [pc, #596]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007dc4:	f023 0304 	bic.w	r3, r3, #4
 8007dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d016      	beq.n	8007e02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd4:	f7fd ff14 	bl	8005c00 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dda:	e00a      	b.n	8007df2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ddc:	f7fd ff10 	bl	8005c00 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e162      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007df2:	4b89      	ldr	r3, [pc, #548]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ed      	beq.n	8007ddc <HAL_RCC_OscConfig+0x53c>
 8007e00:	e015      	b.n	8007e2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e02:	f7fd fefd 	bl	8005c00 <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e08:	e00a      	b.n	8007e20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e0a:	f7fd fef9 	bl	8005c00 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e14b      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e20:	4b7d      	ldr	r3, [pc, #500]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1ed      	bne.n	8007e0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d105      	bne.n	8007e40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e34:	4b78      	ldr	r3, [pc, #480]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e38:	4a77      	ldr	r2, [pc, #476]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d03c      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01c      	beq.n	8007e8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e54:	4b70      	ldr	r3, [pc, #448]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e64:	f7fd fecc 	bl	8005c00 <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e6c:	f7fd fec8 	bl	8005c00 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e11c      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e7e:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0ef      	beq.n	8007e6c <HAL_RCC_OscConfig+0x5cc>
 8007e8c:	e01b      	b.n	8007ec6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e8e:	4b62      	ldr	r3, [pc, #392]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e94:	4a60      	ldr	r2, [pc, #384]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9e:	f7fd feaf 	bl	8005c00 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ea6:	f7fd feab 	bl	8005c00 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e0ff      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007eb8:	4b57      	ldr	r3, [pc, #348]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ef      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80f3 	beq.w	80080b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	f040 80c9 	bne.w	800806c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007eda:	4b4f      	ldr	r3, [pc, #316]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f003 0203 	and.w	r2, r3, #3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d12c      	bne.n	8007f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d123      	bne.n	8007f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d11b      	bne.n	8007f48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d113      	bne.n	8007f48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d109      	bne.n	8007f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	3b01      	subs	r3, #1
 8007f42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d06b      	beq.n	8008020 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b0c      	cmp	r3, #12
 8007f4c:	d062      	beq.n	8008014 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f4e:	4b32      	ldr	r3, [pc, #200]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0ac      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a2d      	ldr	r2, [pc, #180]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f6a:	f7fd fe49 	bl	8005c00 <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f72:	f7fd fe45 	bl	8005c00 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e099      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f84:	4b24      	ldr	r3, [pc, #144]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f0      	bne.n	8007f72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f90:	4b21      	ldr	r3, [pc, #132]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	4b21      	ldr	r3, [pc, #132]	@ (800801c <HAL_RCC_OscConfig+0x77c>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007fa0:	3a01      	subs	r2, #1
 8007fa2:	0112      	lsls	r2, r2, #4
 8007fa4:	4311      	orrs	r1, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007faa:	0212      	lsls	r2, r2, #8
 8007fac:	4311      	orrs	r1, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fb2:	0852      	lsrs	r2, r2, #1
 8007fb4:	3a01      	subs	r2, #1
 8007fb6:	0552      	lsls	r2, r2, #21
 8007fb8:	4311      	orrs	r1, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007fbe:	0852      	lsrs	r2, r2, #1
 8007fc0:	3a01      	subs	r2, #1
 8007fc2:	0652      	lsls	r2, r2, #25
 8007fc4:	4311      	orrs	r1, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007fca:	06d2      	lsls	r2, r2, #27
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	4912      	ldr	r1, [pc, #72]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8007fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fec:	f7fd fe08 	bl	8005c00 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fd fe04 	bl	8005c00 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e058      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008006:	4b04      	ldr	r3, [pc, #16]	@ (8008018 <HAL_RCC_OscConfig+0x778>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008012:	e050      	b.n	80080b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e04f      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
 8008018:	40021000 	.word	0x40021000
 800801c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008020:	4b27      	ldr	r3, [pc, #156]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d144      	bne.n	80080b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800802c:	4b24      	ldr	r3, [pc, #144]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 8008032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008036:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008038:	4b21      	ldr	r3, [pc, #132]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	4a20      	ldr	r2, [pc, #128]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 800803e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008042:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008044:	f7fd fddc 	bl	8005c00 <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800804c:	f7fd fdd8 	bl	8005c00 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e02c      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800805e:	4b18      	ldr	r3, [pc, #96]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HAL_RCC_OscConfig+0x7ac>
 800806a:	e024      	b.n	80080b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b0c      	cmp	r3, #12
 8008070:	d01f      	beq.n	80080b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008072:	4b13      	ldr	r3, [pc, #76]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a12      	ldr	r2, [pc, #72]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 8008078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800807c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807e:	f7fd fdbf 	bl	8005c00 <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008086:	f7fd fdbb 	bl	8005c00 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e00f      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008098:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1f0      	bne.n	8008086 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80080a4:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	4905      	ldr	r1, [pc, #20]	@ (80080c0 <HAL_RCC_OscConfig+0x820>)
 80080aa:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <HAL_RCC_OscConfig+0x824>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60cb      	str	r3, [r1, #12]
 80080b0:	e001      	b.n	80080b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3720      	adds	r7, #32
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40021000 	.word	0x40021000
 80080c4:	feeefffc 	.word	0xfeeefffc

080080c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e0e7      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080dc:	4b75      	ldr	r3, [pc, #468]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d910      	bls.n	800810c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ea:	4b72      	ldr	r3, [pc, #456]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 0207 	bic.w	r2, r3, #7
 80080f2:	4970      	ldr	r1, [pc, #448]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fa:	4b6e      	ldr	r3, [pc, #440]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d001      	beq.n	800810c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0cf      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d010      	beq.n	800813a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	4b66      	ldr	r3, [pc, #408]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008124:	429a      	cmp	r2, r3
 8008126:	d908      	bls.n	800813a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008128:	4b63      	ldr	r3, [pc, #396]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4960      	ldr	r1, [pc, #384]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008136:	4313      	orrs	r3, r2
 8008138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d04c      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	2b03      	cmp	r3, #3
 800814c:	d107      	bne.n	800815e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800814e:	4b5a      	ldr	r3, [pc, #360]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d121      	bne.n	800819e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e0a6      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d107      	bne.n	8008176 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008166:	4b54      	ldr	r3, [pc, #336]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d115      	bne.n	800819e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e09a      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800817e:	4b4e      	ldr	r3, [pc, #312]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e08e      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800818e:	4b4a      	ldr	r3, [pc, #296]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e086      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800819e:	4b46      	ldr	r3, [pc, #280]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 0203 	bic.w	r2, r3, #3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4943      	ldr	r1, [pc, #268]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b0:	f7fd fd26 	bl	8005c00 <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b6:	e00a      	b.n	80081ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b8:	f7fd fd22 	bl	8005c00 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e06e      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ce:	4b3a      	ldr	r3, [pc, #232]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 020c 	and.w	r2, r3, #12
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	429a      	cmp	r2, r3
 80081de:	d1eb      	bne.n	80081b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d010      	beq.n	800820e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	4b31      	ldr	r3, [pc, #196]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d208      	bcs.n	800820e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fc:	4b2e      	ldr	r3, [pc, #184]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	492b      	ldr	r1, [pc, #172]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 800820a:	4313      	orrs	r3, r2
 800820c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800820e:	4b29      	ldr	r3, [pc, #164]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d210      	bcs.n	800823e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800821c:	4b25      	ldr	r3, [pc, #148]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f023 0207 	bic.w	r2, r3, #7
 8008224:	4923      	ldr	r1, [pc, #140]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	4313      	orrs	r3, r2
 800822a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800822c:	4b21      	ldr	r3, [pc, #132]	@ (80082b4 <HAL_RCC_ClockConfig+0x1ec>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d001      	beq.n	800823e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e036      	b.n	80082ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d008      	beq.n	800825c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800824a:	4b1b      	ldr	r3, [pc, #108]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	4918      	ldr	r1, [pc, #96]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008258:	4313      	orrs	r3, r2
 800825a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008268:	4b13      	ldr	r3, [pc, #76]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4910      	ldr	r1, [pc, #64]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008278:	4313      	orrs	r3, r2
 800827a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800827c:	f000 f824 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008280:	4602      	mov	r2, r0
 8008282:	4b0d      	ldr	r3, [pc, #52]	@ (80082b8 <HAL_RCC_ClockConfig+0x1f0>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	490b      	ldr	r1, [pc, #44]	@ (80082bc <HAL_RCC_ClockConfig+0x1f4>)
 800828e:	5ccb      	ldrb	r3, [r1, r3]
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
 8008298:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <HAL_RCC_ClockConfig+0x1f8>)
 800829a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800829c:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <HAL_RCC_ClockConfig+0x1fc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fa fb49 	bl	8002938 <HAL_InitTick>
 80082a6:	4603      	mov	r3, r0
 80082a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40022000 	.word	0x40022000
 80082b8:	40021000 	.word	0x40021000
 80082bc:	08013250 	.word	0x08013250
 80082c0:	20000000 	.word	0x20000000
 80082c4:	20000008 	.word	0x20000008

080082c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	@ 0x24
 80082cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082d6:	4b3e      	ldr	r3, [pc, #248]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082e0:	4b3b      	ldr	r3, [pc, #236]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0x34>
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b0c      	cmp	r3, #12
 80082f4:	d121      	bne.n	800833a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d11e      	bne.n	800833a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80082fc:	4b34      	ldr	r3, [pc, #208]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008308:	4b31      	ldr	r3, [pc, #196]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800830a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e005      	b.n	8008324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008318:	4b2d      	ldr	r3, [pc, #180]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008324:	4a2b      	ldr	r2, [pc, #172]	@ (80083d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008338:	e00a      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d102      	bne.n	8008346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008340:	4b25      	ldr	r3, [pc, #148]	@ (80083d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008342:	61bb      	str	r3, [r7, #24]
 8008344:	e004      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d101      	bne.n	8008350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800834c:	4b23      	ldr	r3, [pc, #140]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x114>)
 800834e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b0c      	cmp	r3, #12
 8008354:	d134      	bne.n	80083c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008356:	4b1e      	ldr	r3, [pc, #120]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d003      	beq.n	800836e <HAL_RCC_GetSysClockFreq+0xa6>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b03      	cmp	r3, #3
 800836a:	d003      	beq.n	8008374 <HAL_RCC_GetSysClockFreq+0xac>
 800836c:	e005      	b.n	800837a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800836e:	4b1a      	ldr	r3, [pc, #104]	@ (80083d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008370:	617b      	str	r3, [r7, #20]
      break;
 8008372:	e005      	b.n	8008380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008374:	4b19      	ldr	r3, [pc, #100]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x114>)
 8008376:	617b      	str	r3, [r7, #20]
      break;
 8008378:	e002      	b.n	8008380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	617b      	str	r3, [r7, #20]
      break;
 800837e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008380:	4b13      	ldr	r3, [pc, #76]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	3301      	adds	r3, #1
 800838c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800838e:	4b10      	ldr	r3, [pc, #64]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	0a1b      	lsrs	r3, r3, #8
 8008394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	fb03 f202 	mul.w	r2, r3, r2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083a6:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	0e5b      	lsrs	r3, r3, #25
 80083ac:	f003 0303 	and.w	r3, r3, #3
 80083b0:	3301      	adds	r3, #1
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80083c0:	69bb      	ldr	r3, [r7, #24]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3724      	adds	r7, #36	@ 0x24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40021000 	.word	0x40021000
 80083d4:	08013268 	.word	0x08013268
 80083d8:	00f42400 	.word	0x00f42400
 80083dc:	007a1200 	.word	0x007a1200

080083e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083e4:	4b03      	ldr	r3, [pc, #12]	@ (80083f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083e6:	681b      	ldr	r3, [r3, #0]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20000000 	.word	0x20000000

080083f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80083fc:	f7ff fff0 	bl	80083e0 <HAL_RCC_GetHCLKFreq>
 8008400:	4602      	mov	r2, r0
 8008402:	4b06      	ldr	r3, [pc, #24]	@ (800841c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	0a1b      	lsrs	r3, r3, #8
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	4904      	ldr	r1, [pc, #16]	@ (8008420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800840e:	5ccb      	ldrb	r3, [r1, r3]
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40021000 	.word	0x40021000
 8008420:	08013260 	.word	0x08013260

08008424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008428:	f7ff ffda 	bl	80083e0 <HAL_RCC_GetHCLKFreq>
 800842c:	4602      	mov	r2, r0
 800842e:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	0adb      	lsrs	r3, r3, #11
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	4904      	ldr	r1, [pc, #16]	@ (800844c <HAL_RCC_GetPCLK2Freq+0x28>)
 800843a:	5ccb      	ldrb	r3, [r1, r3]
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008444:	4618      	mov	r0, r3
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40021000 	.word	0x40021000
 800844c:	08013260 	.word	0x08013260

08008450 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220f      	movs	r2, #15
 800845e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008460:	4b12      	ldr	r3, [pc, #72]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0203 	and.w	r2, r3, #3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008478:	4b0c      	ldr	r3, [pc, #48]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008484:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <HAL_RCC_GetClockConfig+0x60>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0207 	and.w	r2, r3, #7
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	601a      	str	r2, [r3, #0]
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40022000 	.word	0x40022000

080084b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80084bc:	2300      	movs	r3, #0
 80084be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80084c0:	4b2a      	ldr	r3, [pc, #168]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80084cc:	f7ff f984 	bl	80077d8 <HAL_PWREx_GetVoltageRange>
 80084d0:	6178      	str	r0, [r7, #20]
 80084d2:	e014      	b.n	80084fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d4:	4b25      	ldr	r3, [pc, #148]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	4a24      	ldr	r2, [pc, #144]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084de:	6593      	str	r3, [r2, #88]	@ 0x58
 80084e0:	4b22      	ldr	r3, [pc, #136]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80084ec:	f7ff f974 	bl	80077d8 <HAL_PWREx_GetVoltageRange>
 80084f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80084f2:	4b1e      	ldr	r3, [pc, #120]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f6:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	d10b      	bne.n	800851e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b80      	cmp	r3, #128	@ 0x80
 800850a:	d919      	bls.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008510:	d902      	bls.n	8008518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008512:	2302      	movs	r3, #2
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	e013      	b.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008518:	2301      	movs	r3, #1
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	e010      	b.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b80      	cmp	r3, #128	@ 0x80
 8008522:	d902      	bls.n	800852a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008524:	2303      	movs	r3, #3
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	e00a      	b.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b80      	cmp	r3, #128	@ 0x80
 800852e:	d102      	bne.n	8008536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008530:	2302      	movs	r3, #2
 8008532:	613b      	str	r3, [r7, #16]
 8008534:	e004      	b.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b70      	cmp	r3, #112	@ 0x70
 800853a:	d101      	bne.n	8008540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800853c:	2301      	movs	r3, #1
 800853e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008540:	4b0b      	ldr	r3, [pc, #44]	@ (8008570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f023 0207 	bic.w	r2, r3, #7
 8008548:	4909      	ldr	r1, [pc, #36]	@ (8008570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	d001      	beq.n	8008562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40021000 	.word	0x40021000
 8008570:	40022000 	.word	0x40022000

08008574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800857c:	2300      	movs	r3, #0
 800857e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008580:	2300      	movs	r3, #0
 8008582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800858c:	2b00      	cmp	r3, #0
 800858e:	d031      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008594:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008598:	d01a      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800859a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800859e:	d814      	bhi.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80085a8:	d10f      	bne.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80085aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4a5c      	ldr	r2, [pc, #368]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085b6:	e00c      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fe86 	bl	80092d0 <RCCEx_PLLSAI1_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085c8:	e003      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	74fb      	strb	r3, [r7, #19]
      break;
 80085ce:	e000      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80085d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d2:	7cfb      	ldrb	r3, [r7, #19]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10b      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085d8:	4b51      	ldr	r3, [pc, #324]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e6:	494e      	ldr	r1, [pc, #312]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80085ee:	e001      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	7cfb      	ldrb	r3, [r7, #19]
 80085f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 809e 	beq.w	800873e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008602:	2300      	movs	r3, #0
 8008604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008606:	4b46      	ldr	r3, [pc, #280]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800860a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800861c:	4b40      	ldr	r3, [pc, #256]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800861e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008620:	4a3f      	ldr	r2, [pc, #252]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008626:	6593      	str	r3, [r2, #88]	@ 0x58
 8008628:	4b3d      	ldr	r3, [pc, #244]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800862a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800862c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008634:	2301      	movs	r3, #1
 8008636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008638:	4b3a      	ldr	r3, [pc, #232]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a39      	ldr	r2, [pc, #228]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800863e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008644:	f7fd fadc 	bl	8005c00 <HAL_GetTick>
 8008648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800864a:	e009      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800864c:	f7fd fad8 	bl	8005c00 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d902      	bls.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	74fb      	strb	r3, [r7, #19]
        break;
 800865e:	e005      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008660:	4b30      	ldr	r3, [pc, #192]	@ (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0ef      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800866c:	7cfb      	ldrb	r3, [r7, #19]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d15a      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008672:	4b2b      	ldr	r3, [pc, #172]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800867c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01e      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	429a      	cmp	r2, r3
 800868c:	d019      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800868e:	4b24      	ldr	r3, [pc, #144]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008698:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800869a:	4b21      	ldr	r3, [pc, #132]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086ba:	4a19      	ldr	r2, [pc, #100]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d016      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086cc:	f7fd fa98 	bl	8005c00 <HAL_GetTick>
 80086d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086d2:	e00b      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d4:	f7fd fa94 	bl	8005c00 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d902      	bls.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	74fb      	strb	r3, [r7, #19]
            break;
 80086ea:	e006      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0ec      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80086fa:	7cfb      	ldrb	r3, [r7, #19]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008700:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008706:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800870e:	4904      	ldr	r1, [pc, #16]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008710:	4313      	orrs	r3, r2
 8008712:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008716:	e009      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008718:	7cfb      	ldrb	r3, [r7, #19]
 800871a:	74bb      	strb	r3, [r7, #18]
 800871c:	e006      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800871e:	bf00      	nop
 8008720:	40021000 	.word	0x40021000
 8008724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008728:	7cfb      	ldrb	r3, [r7, #19]
 800872a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800872c:	7c7b      	ldrb	r3, [r7, #17]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d105      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008732:	4b9b      	ldr	r3, [pc, #620]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008736:	4a9a      	ldr	r2, [pc, #616]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800873c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800874a:	4b95      	ldr	r3, [pc, #596]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800874c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008750:	f023 0203 	bic.w	r2, r3, #3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	4991      	ldr	r1, [pc, #580]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800876c:	4b8c      	ldr	r3, [pc, #560]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800876e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008772:	f023 020c 	bic.w	r2, r3, #12
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877a:	4989      	ldr	r1, [pc, #548]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800877c:	4313      	orrs	r3, r2
 800877e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800878e:	4b84      	ldr	r3, [pc, #528]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008794:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	4980      	ldr	r1, [pc, #512]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00a      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087b0:	4b7b      	ldr	r3, [pc, #492]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80087b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	4978      	ldr	r1, [pc, #480]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087d2:	4b73      	ldr	r3, [pc, #460]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e0:	496f      	ldr	r1, [pc, #444]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00a      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087f4:	4b6a      	ldr	r3, [pc, #424]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80087f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	4967      	ldr	r1, [pc, #412]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008816:	4b62      	ldr	r3, [pc, #392]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800881c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008824:	495e      	ldr	r1, [pc, #376]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008838:	4b59      	ldr	r3, [pc, #356]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800883a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800883e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008846:	4956      	ldr	r1, [pc, #344]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800885a:	4b51      	ldr	r3, [pc, #324]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800885c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008860:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	494d      	ldr	r1, [pc, #308]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d028      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800887c:	4b48      	ldr	r3, [pc, #288]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800887e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800888a:	4945      	ldr	r1, [pc, #276]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800888c:	4313      	orrs	r3, r2
 800888e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800889a:	d106      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800889c:	4b40      	ldr	r3, [pc, #256]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	4a3f      	ldr	r2, [pc, #252]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80088a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088a6:	60d3      	str	r3, [r2, #12]
 80088a8:	e011      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088b2:	d10c      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fd08 	bl	80092d0 <RCCEx_PLLSAI1_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088c4:	7cfb      	ldrb	r3, [r7, #19]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80088ca:	7cfb      	ldrb	r3, [r7, #19]
 80088cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d028      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088da:	4b31      	ldr	r3, [pc, #196]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e8:	492d      	ldr	r1, [pc, #180]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f8:	d106      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088fa:	4b29      	ldr	r3, [pc, #164]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	4a28      	ldr	r2, [pc, #160]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008904:	60d3      	str	r3, [r2, #12]
 8008906:	e011      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800890c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008910:	d10c      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	2101      	movs	r1, #1
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fcd9 	bl	80092d0 <RCCEx_PLLSAI1_Config>
 800891e:	4603      	mov	r3, r0
 8008920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008922:	7cfb      	ldrb	r3, [r7, #19]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008928:	7cfb      	ldrb	r3, [r7, #19]
 800892a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01c      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008938:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800893a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008946:	4916      	ldr	r1, [pc, #88]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008956:	d10c      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	2102      	movs	r1, #2
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fcb6 	bl	80092d0 <RCCEx_PLLSAI1_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008968:	7cfb      	ldrb	r3, [r7, #19]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800897e:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008984:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898c:	4904      	ldr	r1, [pc, #16]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008994:	7cbb      	ldrb	r3, [r7, #18]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40021000 	.word	0x40021000

080089a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b6:	d13e      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80089b8:	4bb0      	ldr	r3, [pc, #704]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80089ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ca:	d028      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089d2:	f200 846b 	bhi.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089dc:	d005      	beq.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e4:	d00e      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80089e6:	f000 bc61 	b.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089ea:	4ba4      	ldr	r3, [pc, #656]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	f040 845b 	bne.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        frequency = LSE_VALUE;
 80089fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089fe:	61fb      	str	r3, [r7, #28]
      break;
 8008a00:	f000 bc56 	b.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008a04:	4b9d      	ldr	r3, [pc, #628]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	f040 8450 	bne.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          frequency = LSI_VALUE;
 8008a14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a18:	61fb      	str	r3, [r7, #28]
      break;
 8008a1a:	f000 bc4b 	b.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a1e:	4b97      	ldr	r3, [pc, #604]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a2a:	f040 8445 	bne.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        frequency = HSE_VALUE / 32U;
 8008a2e:	4b94      	ldr	r3, [pc, #592]	@ (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008a30:	61fb      	str	r3, [r7, #28]
      break;
 8008a32:	f000 bc41 	b.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a36:	4b91      	ldr	r3, [pc, #580]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d036      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d840      	bhi.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d003      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d020      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008a58:	e039      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008a5a:	4b88      	ldr	r3, [pc, #544]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d116      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008a66:	4b85      	ldr	r3, [pc, #532]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008a72:	4b82      	ldr	r3, [pc, #520]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	e005      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a84:	0a1b      	lsrs	r3, r3, #8
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008a92:	e01f      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
      break;
 8008a98:	e01c      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a9a:	4b78      	ldr	r3, [pc, #480]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa6:	d102      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8008aa8:	4b77      	ldr	r3, [pc, #476]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008aaa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008aac:	e012      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
      break;
 8008ab2:	e00f      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ab4:	4b71      	ldr	r3, [pc, #452]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ac0:	d102      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8008ac2:	4b72      	ldr	r3, [pc, #456]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008ac4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008ac6:	e005      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	61bb      	str	r3, [r7, #24]
      break;
 8008acc:	e002      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61bb      	str	r3, [r7, #24]
      break;
 8008ad2:	bf00      	nop
    }

    switch(PeriphClk)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ada:	f000 80ad 	beq.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ae4:	f200 83ea 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008aee:	f000 80a3 	beq.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008af8:	f200 83e0 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b02:	f000 83b6 	beq.w	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b0c:	f200 83d6 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b16:	f000 824e 	beq.w	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b20:	f200 83cc 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b2a:	d07e      	beq.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b32:	f200 83c3 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b3c:	f000 834f 	beq.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b46:	f200 83b9 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b50:	f000 82f7 	beq.w	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b5a:	f200 83af 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b64:	f000 82c1 	beq.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b6e:	f200 83a5 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b80      	cmp	r3, #128	@ 0x80
 8008b76:	f000 828c 	beq.w	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b80      	cmp	r3, #128	@ 0x80
 8008b7e:	f200 839d 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d84b      	bhi.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8396 	beq.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	2b1f      	cmp	r3, #31
 8008b96:	f200 8391 	bhi.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08008da7 	.word	0x08008da7
 8008ba4:	08008e17 	.word	0x08008e17
 8008ba8:	080092bd 	.word	0x080092bd
 8008bac:	08008eab 	.word	0x08008eab
 8008bb0:	080092bd 	.word	0x080092bd
 8008bb4:	080092bd 	.word	0x080092bd
 8008bb8:	080092bd 	.word	0x080092bd
 8008bbc:	080092bd 	.word	0x080092bd
 8008bc0:	080092bd 	.word	0x080092bd
 8008bc4:	080092bd 	.word	0x080092bd
 8008bc8:	080092bd 	.word	0x080092bd
 8008bcc:	080092bd 	.word	0x080092bd
 8008bd0:	080092bd 	.word	0x080092bd
 8008bd4:	080092bd 	.word	0x080092bd
 8008bd8:	080092bd 	.word	0x080092bd
 8008bdc:	080092bd 	.word	0x080092bd
 8008be0:	080092bd 	.word	0x080092bd
 8008be4:	080092bd 	.word	0x080092bd
 8008be8:	080092bd 	.word	0x080092bd
 8008bec:	080092bd 	.word	0x080092bd
 8008bf0:	080092bd 	.word	0x080092bd
 8008bf4:	080092bd 	.word	0x080092bd
 8008bf8:	080092bd 	.word	0x080092bd
 8008bfc:	080092bd 	.word	0x080092bd
 8008c00:	080092bd 	.word	0x080092bd
 8008c04:	080092bd 	.word	0x080092bd
 8008c08:	080092bd 	.word	0x080092bd
 8008c0c:	080092bd 	.word	0x080092bd
 8008c10:	080092bd 	.word	0x080092bd
 8008c14:	080092bd 	.word	0x080092bd
 8008c18:	080092bd 	.word	0x080092bd
 8008c1c:	08008f35 	.word	0x08008f35
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b40      	cmp	r3, #64	@ 0x40
 8008c24:	f000 8209 	beq.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008c28:	e348      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008c2a:	69b9      	ldr	r1, [r7, #24]
 8008c2c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008c30:	f000 fc40 	bl	80094b4 <RCCEx_GetSAIxPeriphCLKFreq>
 8008c34:	61f8      	str	r0, [r7, #28]
      break;
 8008c36:	e342      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008c38:	4b10      	ldr	r3, [pc, #64]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c42:	613b      	str	r3, [r7, #16]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c4a:	d021      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c52:	f200 809e 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c5c:	d035      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c64:	f200 8095 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8087 	beq.w	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c76:	d055      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          break;
 8008c78:	e08b      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8008c7a:	bf00      	nop
 8008c7c:	40021000 	.word	0x40021000
 8008c80:	0003d090 	.word	0x0003d090
 8008c84:	08013268 	.word	0x08013268
 8008c88:	00f42400 	.word	0x00f42400
 8008c8c:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008c90:	4ba4      	ldr	r3, [pc, #656]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d17c      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0308 	and.w	r3, r3, #8
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8008ca8:	4b9e      	ldr	r3, [pc, #632]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	e005      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8008cb4:	4b9b      	ldr	r3, [pc, #620]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	4a99      	ldr	r2, [pc, #612]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc6:	61fb      	str	r3, [r7, #28]
          break;
 8008cc8:	e065      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008cca:	4b96      	ldr	r3, [pc, #600]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cd6:	d160      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008cd8:	4b92      	ldr	r3, [pc, #584]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ce4:	d159      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cf0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	fb03 f202 	mul.w	r2, r3, r2
 8008cfa:	4b8a      	ldr	r3, [pc, #552]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	091b      	lsrs	r3, r3, #4
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	3301      	adds	r3, #1
 8008d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008d0c:	4b85      	ldr	r3, [pc, #532]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	0d5b      	lsrs	r3, r3, #21
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	3301      	adds	r3, #1
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d20:	61fb      	str	r3, [r7, #28]
          break;
 8008d22:	e03a      	b.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008d24:	4b7f      	ldr	r3, [pc, #508]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d30:	d135      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008d32:	4b7c      	ldr	r3, [pc, #496]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d3e:	d12e      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008d40:	4b78      	ldr	r3, [pc, #480]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	0a1b      	lsrs	r3, r3, #8
 8008d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	fb03 f202 	mul.w	r2, r3, r2
 8008d54:	4b73      	ldr	r3, [pc, #460]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	3301      	adds	r3, #1
 8008d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d64:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008d66:	4b6f      	ldr	r3, [pc, #444]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	0d5b      	lsrs	r3, r3, #21
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	3301      	adds	r3, #1
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7a:	61fb      	str	r3, [r7, #28]
          break;
 8008d7c:	e00f      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008d7e:	4b69      	ldr	r3, [pc, #420]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d10a      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            frequency = HSI48_VALUE;
 8008d8c:	4b67      	ldr	r3, [pc, #412]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d8e:	61fb      	str	r3, [r7, #28]
          break;
 8008d90:	e007      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
          break;
 8008d92:	bf00      	nop
 8008d94:	e293      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008d96:	bf00      	nop
 8008d98:	e291      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008d9a:	bf00      	nop
 8008d9c:	e28f      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008d9e:	bf00      	nop
 8008da0:	e28d      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008da2:	bf00      	nop
        break;
 8008da4:	e28b      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008da6:	4b5f      	ldr	r3, [pc, #380]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d828      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008db8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd9 	.word	0x08008dd9
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008df5 	.word	0x08008df5
          frequency = HAL_RCC_GetPCLK2Freq();
 8008dd0:	f7ff fb28 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 8008dd4:	61f8      	str	r0, [r7, #28]
          break;
 8008dd6:	e01d      	b.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dd8:	f7ff fa76 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008ddc:	61f8      	str	r0, [r7, #28]
          break;
 8008dde:	e019      	b.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008de0:	4b50      	ldr	r3, [pc, #320]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dec:	d10f      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 8008dee:	4b50      	ldr	r3, [pc, #320]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008df0:	61fb      	str	r3, [r7, #28]
          break;
 8008df2:	e00c      	b.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008df4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d107      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 8008e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e06:	61fb      	str	r3, [r7, #28]
          break;
 8008e08:	e003      	b.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 8008e0a:	bf00      	nop
 8008e0c:	e257      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008e0e:	bf00      	nop
 8008e10:	e255      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008e12:	bf00      	nop
        break;
 8008e14:	e253      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e16:	4b43      	ldr	r3, [pc, #268]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e1c:	f003 030c 	and.w	r3, r3, #12
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d83a      	bhi.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008e9f 	.word	0x08008e9f
 8008e38:	08008e9f 	.word	0x08008e9f
 8008e3c:	08008e9f 	.word	0x08008e9f
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	08008e9f 	.word	0x08008e9f
 8008e48:	08008e9f 	.word	0x08008e9f
 8008e4c:	08008e9f 	.word	0x08008e9f
 8008e50:	08008e75 	.word	0x08008e75
 8008e54:	08008e9f 	.word	0x08008e9f
 8008e58:	08008e9f 	.word	0x08008e9f
 8008e5c:	08008e9f 	.word	0x08008e9f
 8008e60:	08008e89 	.word	0x08008e89
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e64:	f7ff fac8 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8008e68:	61f8      	str	r0, [r7, #28]
          break;
 8008e6a:	e01d      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e6c:	f7ff fa2c 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008e70:	61f8      	str	r0, [r7, #28]
          break;
 8008e72:	e019      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e74:	4b2b      	ldr	r3, [pc, #172]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e80:	d10f      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = HSI_VALUE;
 8008e82:	4b2b      	ldr	r3, [pc, #172]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e84:	61fb      	str	r3, [r7, #28]
          break;
 8008e86:	e00c      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e88:	4b26      	ldr	r3, [pc, #152]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d107      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = LSE_VALUE;
 8008e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e9a:	61fb      	str	r3, [r7, #28]
          break;
 8008e9c:	e003      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          break;
 8008e9e:	bf00      	nop
 8008ea0:	e20d      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008ea2:	bf00      	nop
 8008ea4:	e20b      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008ea6:	bf00      	nop
        break;
 8008ea8:	e209      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b30      	cmp	r3, #48	@ 0x30
 8008eba:	d021      	beq.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b30      	cmp	r3, #48	@ 0x30
 8008ec0:	d829      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	d011      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d823      	bhi.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d004      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 8008eda:	e01c      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008edc:	f7ff fa8c 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8008ee0:	61f8      	str	r0, [r7, #28]
          break;
 8008ee2:	e01d      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ee4:	f7ff f9f0 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008ee8:	61f8      	str	r0, [r7, #28]
          break;
 8008eea:	e019      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eec:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ef8:	d10f      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = HSI_VALUE;
 8008efa:	4b0d      	ldr	r3, [pc, #52]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008efc:	61fb      	str	r3, [r7, #28]
          break;
 8008efe:	e00c      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f00:	4b08      	ldr	r3, [pc, #32]	@ (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d107      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
            frequency = LSE_VALUE;
 8008f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f12:	61fb      	str	r3, [r7, #28]
          break;
 8008f14:	e003      	b.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
          break;
 8008f16:	bf00      	nop
 8008f18:	e1d1      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008f1a:	bf00      	nop
 8008f1c:	e1cf      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008f1e:	bf00      	nop
        break;
 8008f20:	e1cd      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8008f22:	bf00      	nop
 8008f24:	40021000 	.word	0x40021000
 8008f28:	08013268 	.word	0x08013268
 8008f2c:	02dc6c00 	.word	0x02dc6c00
 8008f30:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f34:	4b99      	ldr	r3, [pc, #612]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f46:	d025      	beq.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f4e:	d82c      	bhi.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f56:	d013      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f5e:	d824      	bhi.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f6c:	d004      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          break;
 8008f6e:	e01c      	b.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7ff fa42 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8008f74:	61f8      	str	r0, [r7, #28]
          break;
 8008f76:	e01d      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f78:	f7ff f9a6 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008f7c:	61f8      	str	r0, [r7, #28]
          break;
 8008f7e:	e019      	b.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f80:	4b86      	ldr	r3, [pc, #536]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f8c:	d10f      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8008f8e:	4b84      	ldr	r3, [pc, #528]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008f90:	61fb      	str	r3, [r7, #28]
          break;
 8008f92:	e00c      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f94:	4b81      	ldr	r3, [pc, #516]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d107      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 8008fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fa6:	61fb      	str	r3, [r7, #28]
          break;
 8008fa8:	e003      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 8008faa:	bf00      	nop
 8008fac:	e187      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008fae:	bf00      	nop
 8008fb0:	e185      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8008fb2:	bf00      	nop
        break;
 8008fb4:	e183      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008fb6:	4b79      	ldr	r3, [pc, #484]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fc0:	613b      	str	r3, [r7, #16]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fc8:	d007      	beq.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fd0:	d12f      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fd2:	f7ff f979 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008fd6:	61f8      	str	r0, [r7, #28]
          break;
 8008fd8:	e02e      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008fda:	4b70      	ldr	r3, [pc, #448]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fe6:	d126      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d020      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008ff4:	4b69      	ldr	r3, [pc, #420]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	0a1b      	lsrs	r3, r3, #8
 8008ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffe:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	fb03 f202 	mul.w	r2, r3, r2
 8009008:	4b64      	ldr	r3, [pc, #400]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	3301      	adds	r3, #1
 8009014:	fbb2 f3f3 	udiv	r3, r2, r3
 8009018:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800901a:	4b60      	ldr	r3, [pc, #384]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	0e5b      	lsrs	r3, r3, #25
 8009020:	f003 0303 	and.w	r3, r3, #3
 8009024:	3301      	adds	r3, #1
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	fbb2 f3f3 	udiv	r3, r2, r3
 800902e:	61fb      	str	r3, [r7, #28]
          break;
 8009030:	e001      	b.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          break;
 8009032:	bf00      	nop
 8009034:	e143      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8009036:	bf00      	nop
        break;
 8009038:	e141      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800903a:	4b58      	ldr	r3, [pc, #352]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800903c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009040:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904c:	d013      	beq.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009054:	d819      	bhi.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009062:	d004      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          break;
 8009064:	e011      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009066:	f7ff f9c7 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800906a:	61f8      	str	r0, [r7, #28]
          break;
 800906c:	e010      	b.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800906e:	f7ff f92b 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8009072:	61f8      	str	r0, [r7, #28]
          break;
 8009074:	e00c      	b.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009076:	4b49      	ldr	r3, [pc, #292]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800907e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009082:	d104      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            frequency = HSI_VALUE;
 8009084:	4b46      	ldr	r3, [pc, #280]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8009086:	61fb      	str	r3, [r7, #28]
          break;
 8009088:	e001      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          break;
 800908a:	bf00      	nop
 800908c:	e117      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800908e:	bf00      	nop
        break;
 8009090:	e115      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009092:	4b42      	ldr	r3, [pc, #264]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a4:	d013      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ac:	d819      	bhi.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ba:	d004      	beq.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80090bc:	e011      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090be:	f7ff f99b 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 80090c2:	61f8      	str	r0, [r7, #28]
          break;
 80090c4:	e010      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          frequency = HAL_RCC_GetSysClockFreq();
 80090c6:	f7ff f8ff 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 80090ca:	61f8      	str	r0, [r7, #28]
          break;
 80090cc:	e00c      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090ce:	4b33      	ldr	r3, [pc, #204]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090da:	d104      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            frequency = HSI_VALUE;
 80090dc:	4b30      	ldr	r3, [pc, #192]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80090de:	61fb      	str	r3, [r7, #28]
          break;
 80090e0:	e001      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          break;
 80090e2:	bf00      	nop
 80090e4:	e0eb      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80090e6:	bf00      	nop
        break;
 80090e8:	e0e9      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090ea:	4b2c      	ldr	r3, [pc, #176]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80090ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090f4:	613b      	str	r3, [r7, #16]
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090fc:	d013      	beq.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009104:	d819      	bhi.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009112:	d004      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8009114:	e011      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009116:	f7ff f96f 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800911a:	61f8      	str	r0, [r7, #28]
          break;
 800911c:	e010      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          frequency = HAL_RCC_GetSysClockFreq();
 800911e:	f7ff f8d3 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8009122:	61f8      	str	r0, [r7, #28]
          break;
 8009124:	e00c      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009126:	4b1d      	ldr	r3, [pc, #116]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009132:	d104      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8009134:	4b1a      	ldr	r3, [pc, #104]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8009136:	61fb      	str	r3, [r7, #28]
          break;
 8009138:	e001      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          break;
 800913a:	bf00      	nop
 800913c:	e0bf      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800913e:	bf00      	nop
        break;
 8009140:	e0bd      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009148:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009154:	d030      	beq.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800915c:	d837      	bhi.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009164:	d01e      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800916c:	d82f      	bhi.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800917a:	d004      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          break;
 800917c:	e027      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800917e:	f7ff f93b 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8009182:	61f8      	str	r0, [r7, #28]
          break;
 8009184:	e02a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009186:	4b05      	ldr	r3, [pc, #20]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b02      	cmp	r3, #2
 8009192:	d11e      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
              frequency = LSI_VALUE;
 8009194:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009198:	61fb      	str	r3, [r7, #28]
          break;
 800919a:	e01a      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 800919c:	40021000 	.word	0x40021000
 80091a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091a4:	4b48      	ldr	r3, [pc, #288]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b0:	d111      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = HSI_VALUE;
 80091b2:	4b46      	ldr	r3, [pc, #280]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80091b4:	61fb      	str	r3, [r7, #28]
          break;
 80091b6:	e00e      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091b8:	4b43      	ldr	r3, [pc, #268]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80091ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d109      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x836>
            frequency = LSE_VALUE;
 80091c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ca:	61fb      	str	r3, [r7, #28]
          break;
 80091cc:	e005      	b.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 80091ce:	bf00      	nop
 80091d0:	e075      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80091d2:	bf00      	nop
 80091d4:	e073      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80091d6:	bf00      	nop
 80091d8:	e071      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80091da:	bf00      	nop
        break;
 80091dc:	e06f      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80091de:	4b3a      	ldr	r3, [pc, #232]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091f0:	d02c      	beq.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091f8:	d833      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009200:	d01a      	beq.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009208:	d82b      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009216:	d004      	beq.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          break;
 8009218:	e023      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          frequency = HAL_RCC_GetPCLK1Freq();
 800921a:	f7ff f8ed 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800921e:	61f8      	str	r0, [r7, #28]
          break;
 8009220:	e026      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009222:	4b29      	ldr	r3, [pc, #164]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8009224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d11a      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
              frequency = LSI_VALUE;
 8009230:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009234:	61fb      	str	r3, [r7, #28]
          break;
 8009236:	e016      	b.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009238:	4b23      	ldr	r3, [pc, #140]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009244:	d111      	bne.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = HSI_VALUE;
 8009246:	4b21      	ldr	r3, [pc, #132]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8009248:	61fb      	str	r3, [r7, #28]
          break;
 800924a:	e00e      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800924c:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800924e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d109      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
            frequency = LSE_VALUE;
 800925a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800925e:	61fb      	str	r3, [r7, #28]
          break;
 8009260:	e005      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8009262:	bf00      	nop
 8009264:	e02b      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8009266:	bf00      	nop
 8009268:	e029      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800926a:	bf00      	nop
 800926c:	e027      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800926e:	bf00      	nop
        break;
 8009270:	e025      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009272:	4b15      	ldr	r3, [pc, #84]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009278:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928a:	d004      	beq.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 800928c:	e00d      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          frequency = HAL_RCC_GetPCLK1Freq();
 800928e:	f7ff f8b3 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8009292:	61f8      	str	r0, [r7, #28]
          break;
 8009294:	e009      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009296:	4b0c      	ldr	r3, [pc, #48]	@ (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a2:	d101      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
            frequency = HSI_VALUE;
 80092a4:	4b09      	ldr	r3, [pc, #36]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80092a6:	61fb      	str	r3, [r7, #28]
          break;
 80092a8:	bf00      	nop
        break;
 80092aa:	e008      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80092ac:	bf00      	nop
 80092ae:	e006      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80092b0:	bf00      	nop
 80092b2:	e004      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80092bc:	bf00      	nop
    }
  }

  return(frequency);
 80092be:	69fb      	ldr	r3, [r7, #28]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	40021000 	.word	0x40021000
 80092cc:	00f42400 	.word	0x00f42400

080092d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092de:	4b74      	ldr	r3, [pc, #464]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d018      	beq.n	800931c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80092ea:	4b71      	ldr	r3, [pc, #452]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f003 0203 	and.w	r2, r3, #3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d10d      	bne.n	8009316 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
       ||
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d009      	beq.n	8009316 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009302:	4b6b      	ldr	r3, [pc, #428]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
       ||
 8009312:	429a      	cmp	r2, r3
 8009314:	d047      	beq.n	80093a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	73fb      	strb	r3, [r7, #15]
 800931a:	e044      	b.n	80093a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d018      	beq.n	8009356 <RCCEx_PLLSAI1_Config+0x86>
 8009324:	2b03      	cmp	r3, #3
 8009326:	d825      	bhi.n	8009374 <RCCEx_PLLSAI1_Config+0xa4>
 8009328:	2b01      	cmp	r3, #1
 800932a:	d002      	beq.n	8009332 <RCCEx_PLLSAI1_Config+0x62>
 800932c:	2b02      	cmp	r3, #2
 800932e:	d009      	beq.n	8009344 <RCCEx_PLLSAI1_Config+0x74>
 8009330:	e020      	b.n	8009374 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009332:	4b5f      	ldr	r3, [pc, #380]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d11d      	bne.n	800937a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009342:	e01a      	b.n	800937a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009344:	4b5a      	ldr	r3, [pc, #360]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800934c:	2b00      	cmp	r3, #0
 800934e:	d116      	bne.n	800937e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009354:	e013      	b.n	800937e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009356:	4b56      	ldr	r3, [pc, #344]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10f      	bne.n	8009382 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009362:	4b53      	ldr	r3, [pc, #332]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009372:	e006      	b.n	8009382 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
      break;
 8009378:	e004      	b.n	8009384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800937a:	bf00      	nop
 800937c:	e002      	b.n	8009384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800937e:	bf00      	nop
 8009380:	e000      	b.n	8009384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009382:	bf00      	nop
    }

    if(status == HAL_OK)
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10d      	bne.n	80093a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800938a:	4b49      	ldr	r3, [pc, #292]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	3b01      	subs	r3, #1
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	430b      	orrs	r3, r1
 80093a0:	4943      	ldr	r1, [pc, #268]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d17c      	bne.n	80094a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80093ac:	4b40      	ldr	r3, [pc, #256]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a3f      	ldr	r2, [pc, #252]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093b8:	f7fc fc22 	bl	8005c00 <HAL_GetTick>
 80093bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093be:	e009      	b.n	80093d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093c0:	f7fc fc1e 	bl	8005c00 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d902      	bls.n	80093d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	73fb      	strb	r3, [r7, #15]
        break;
 80093d2:	e005      	b.n	80093e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093d4:	4b36      	ldr	r3, [pc, #216]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ef      	bne.n	80093c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d15f      	bne.n	80094a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d110      	bne.n	800940e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093ec:	4b30      	ldr	r3, [pc, #192]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80093f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6892      	ldr	r2, [r2, #8]
 80093fc:	0211      	lsls	r1, r2, #8
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	68d2      	ldr	r2, [r2, #12]
 8009402:	06d2      	lsls	r2, r2, #27
 8009404:	430a      	orrs	r2, r1
 8009406:	492a      	ldr	r1, [pc, #168]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009408:	4313      	orrs	r3, r2
 800940a:	610b      	str	r3, [r1, #16]
 800940c:	e027      	b.n	800945e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d112      	bne.n	800943a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009414:	4b26      	ldr	r3, [pc, #152]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800941c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6892      	ldr	r2, [r2, #8]
 8009424:	0211      	lsls	r1, r2, #8
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6912      	ldr	r2, [r2, #16]
 800942a:	0852      	lsrs	r2, r2, #1
 800942c:	3a01      	subs	r2, #1
 800942e:	0552      	lsls	r2, r2, #21
 8009430:	430a      	orrs	r2, r1
 8009432:	491f      	ldr	r1, [pc, #124]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009434:	4313      	orrs	r3, r2
 8009436:	610b      	str	r3, [r1, #16]
 8009438:	e011      	b.n	800945e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800943a:	4b1d      	ldr	r3, [pc, #116]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009442:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6892      	ldr	r2, [r2, #8]
 800944a:	0211      	lsls	r1, r2, #8
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6952      	ldr	r2, [r2, #20]
 8009450:	0852      	lsrs	r2, r2, #1
 8009452:	3a01      	subs	r2, #1
 8009454:	0652      	lsls	r2, r2, #25
 8009456:	430a      	orrs	r2, r1
 8009458:	4915      	ldr	r1, [pc, #84]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800945a:	4313      	orrs	r3, r2
 800945c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800945e:	4b14      	ldr	r3, [pc, #80]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009468:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946a:	f7fc fbc9 	bl	8005c00 <HAL_GetTick>
 800946e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009470:	e009      	b.n	8009486 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009472:	f7fc fbc5 	bl	8005c00 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d902      	bls.n	8009486 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	73fb      	strb	r3, [r7, #15]
          break;
 8009484:	e005      	b.n	8009492 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009486:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0ef      	beq.n	8009472 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009498:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	4903      	ldr	r1, [pc, #12]	@ (80094b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40021000 	.word	0x40021000

080094b4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b089      	sub	sp, #36	@ 0x24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d0:	d10b      	bne.n	80094ea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80094d2:	4b53      	ldr	r3, [pc, #332]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80094d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80094dc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80094e4:	d101      	bne.n	80094ea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009624 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 80094e8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 8090 	bne.w	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094fc:	d143      	bne.n	8009586 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 80094fe:	4b48      	ldr	r3, [pc, #288]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800950a:	d132      	bne.n	8009572 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 800950c:	4b44      	ldr	r3, [pc, #272]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d02c      	beq.n	8009572 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009518:	4b41      	ldr	r3, [pc, #260]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	091b      	lsrs	r3, r3, #4
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	3301      	adds	r3, #1
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800952c:	4b3c      	ldr	r3, [pc, #240]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	0a1b      	lsrs	r3, r3, #8
 8009532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009536:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009538:	4b39      	ldr	r3, [pc, #228]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	0edb      	lsrs	r3, r3, #27
 800953e:	f003 031f 	and.w	r3, r3, #31
 8009542:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800954a:	4b35      	ldr	r3, [pc, #212]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8009556:	2311      	movs	r3, #17
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e001      	b.n	8009560 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 800955c:	2307      	movs	r3, #7
 800955e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	fb03 f202 	mul.w	r2, r3, r2
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	fbb2 f3f3 	udiv	r3, r2, r3
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e04f      	b.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009572:	4b2b      	ldr	r3, [pc, #172]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800957a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800957e:	d148      	bne.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8009580:	4b29      	ldr	r3, [pc, #164]	@ (8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8009582:	61fb      	str	r3, [r7, #28]
 8009584:	e045      	b.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d142      	bne.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800958c:	4b24      	ldr	r3, [pc, #144]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009594:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009598:	d132      	bne.n	8009600 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 800959a:	4b21      	ldr	r3, [pc, #132]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d02c      	beq.n	8009600 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80095a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	091b      	lsrs	r3, r3, #4
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	3301      	adds	r3, #1
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80095ba:	4b19      	ldr	r3, [pc, #100]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80095c6:	4b16      	ldr	r3, [pc, #88]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	0edb      	lsrs	r3, r3, #27
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80095d8:	4b11      	ldr	r3, [pc, #68]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 80095e4:	2311      	movs	r3, #17
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e001      	b.n	80095ee <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 80095ea:	2307      	movs	r3, #7
 80095ec:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	fb03 f202 	mul.w	r2, r3, r2
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	e008      	b.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009600:	4b07      	ldr	r3, [pc, #28]	@ (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800960c:	d101      	bne.n	8009612 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 800960e:	4b06      	ldr	r3, [pc, #24]	@ (8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8009610:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009612:	69fb      	ldr	r3, [r7, #28]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3724      	adds	r7, #36	@ 0x24
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	40021000 	.word	0x40021000
 8009624:	001fff68 	.word	0x001fff68
 8009628:	00f42400 	.word	0x00f42400

0800962c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d079      	beq.n	8009732 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f8 fdea 	bl	800222c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0310 	and.w	r3, r3, #16
 800966a:	2b10      	cmp	r3, #16
 800966c:	d058      	beq.n	8009720 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	22ca      	movs	r2, #202	@ 0xca
 8009674:	625a      	str	r2, [r3, #36]	@ 0x24
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2253      	movs	r2, #83	@ 0x53
 800967c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fad2 	bl	8009c28 <RTC_EnterInitMode>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d127      	bne.n	80096de <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800969c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6899      	ldr	r1, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	68d2      	ldr	r2, [r2, #12]
 80096c8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6919      	ldr	r1, [r3, #16]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	041a      	lsls	r2, r3, #16
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fad6 	bl	8009c90 <RTC_ExitInitMode>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d113      	bne.n	8009716 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0203 	bic.w	r2, r2, #3
 80096fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69da      	ldr	r2, [r3, #28]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	22ff      	movs	r2, #255	@ 0xff
 800971c:	625a      	str	r2, [r3, #36]	@ 0x24
 800971e:	e001      	b.n	8009724 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d103      	bne.n	8009732 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800973c:	b590      	push	{r4, r7, lr}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_RTC_SetTime+0x1a>
 8009752:	2302      	movs	r3, #2
 8009754:	e08b      	b.n	800986e <HAL_RTC_SetTime+0x132>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	22ca      	movs	r2, #202	@ 0xca
 800976c:	625a      	str	r2, [r3, #36]	@ 0x24
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2253      	movs	r2, #83	@ 0x53
 8009774:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fa56 	bl	8009c28 <RTC_EnterInitMode>
 800977c:	4603      	mov	r3, r0
 800977e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009780:	7cfb      	ldrb	r3, [r7, #19]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d163      	bne.n	800984e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d126      	bne.n	80097da <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2200      	movs	r2, #0
 800979e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fab1 	bl	8009d0c <RTC_ByteToBcd2>
 80097aa:	4603      	mov	r3, r0
 80097ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 faaa 	bl	8009d0c <RTC_ByteToBcd2>
 80097b8:	4603      	mov	r3, r0
 80097ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 faa2 	bl	8009d0c <RTC_ByteToBcd2>
 80097c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	78db      	ldrb	r3, [r3, #3]
 80097d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e018      	b.n	800980c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009800:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	78db      	ldrb	r3, [r3, #3]
 8009806:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009816:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800981a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800982a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6899      	ldr	r1, [r3, #8]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	431a      	orrs	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fa23 	bl	8009c90 <RTC_ExitInitMode>
 800984a:	4603      	mov	r3, r0
 800984c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	22ff      	movs	r2, #255	@ 0xff
 8009854:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009856:	7cfb      	ldrb	r3, [r7, #19]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800986c:	7cfb      	ldrb	r3, [r7, #19]
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	bd90      	pop	{r4, r7, pc}

08009876 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009876:	b590      	push	{r4, r7, lr}
 8009878:	b087      	sub	sp, #28
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <HAL_RTC_SetDate+0x1a>
 800988c:	2302      	movs	r3, #2
 800988e:	e075      	b.n	800997c <HAL_RTC_SetDate+0x106>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10e      	bne.n	80098c4 <HAL_RTC_SetDate+0x4e>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	f023 0310 	bic.w	r3, r3, #16
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	330a      	adds	r3, #10
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d11c      	bne.n	8009904 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	78db      	ldrb	r3, [r3, #3]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fa1c 	bl	8009d0c <RTC_ByteToBcd2>
 80098d4:	4603      	mov	r3, r0
 80098d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	785b      	ldrb	r3, [r3, #1]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fa15 	bl	8009d0c <RTC_ByteToBcd2>
 80098e2:	4603      	mov	r3, r0
 80098e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	789b      	ldrb	r3, [r3, #2]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fa0d 	bl	8009d0c <RTC_ByteToBcd2>
 80098f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098fe:	4313      	orrs	r3, r2
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e00e      	b.n	8009922 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	78db      	ldrb	r3, [r3, #3]
 8009908:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009910:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009916:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	22ca      	movs	r2, #202	@ 0xca
 8009928:	625a      	str	r2, [r3, #36]	@ 0x24
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2253      	movs	r2, #83	@ 0x53
 8009930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f978 	bl	8009c28 <RTC_EnterInitMode>
 8009938:	4603      	mov	r3, r0
 800993a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800993c:	7cfb      	ldrb	r3, [r7, #19]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800994c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009950:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f99c 	bl	8009c90 <RTC_ExitInitMode>
 8009958:	4603      	mov	r3, r0
 800995a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	22ff      	movs	r2, #255	@ 0xff
 8009962:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009964:	7cfb      	ldrb	r3, [r7, #19]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800997a:	7cfb      	ldrb	r3, [r7, #19]
}
 800997c:	4618      	mov	r0, r3
 800997e:	371c      	adds	r7, #28
 8009980:	46bd      	mov	sp, r7
 8009982:	bd90      	pop	{r4, r7, pc}

08009984 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b089      	sub	sp, #36	@ 0x24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <HAL_RTC_SetAlarm+0x1a>
 800999a:	2302      	movs	r3, #2
 800999c:	e11b      	b.n	8009bd6 <HAL_RTC_SetAlarm+0x252>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d137      	bne.n	8009a24 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2200      	movs	r2, #0
 80099c6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 f99d 	bl	8009d0c <RTC_ByteToBcd2>
 80099d2:	4603      	mov	r3, r0
 80099d4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f996 	bl	8009d0c <RTC_ByteToBcd2>
 80099e0:	4603      	mov	r3, r0
 80099e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80099e4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f98e 	bl	8009d0c <RTC_ByteToBcd2>
 80099f0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80099f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80099fc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f980 	bl	8009d0c <RTC_ByteToBcd2>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	61fb      	str	r3, [r7, #28]
 8009a22:	e023      	b.n	8009a6c <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a44:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009a4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	78db      	ldrb	r3, [r3, #3]
 8009a50:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009a52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009a5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009a62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	22ca      	movs	r2, #202	@ 0xca
 8009a7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2253      	movs	r2, #83	@ 0x53
 8009a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a90:	d14a      	bne.n	8009b28 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009aa0:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009ab2:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ac2:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8009ac4:	f7fc f89c 	bl	8005c00 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009aca:	e015      	b.n	8009af8 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009acc:	f7fc f898 	bl	8005c00 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ada:	d90d      	bls.n	8009af8 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	22ff      	movs	r2, #255	@ 0xff
 8009ae2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e06e      	b.n	8009bd6 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0e2      	beq.n	8009acc <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b24:	609a      	str	r2, [r3, #8]
 8009b26:	e049      	b.n	8009bbc <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009b36:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009b48:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b58:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8009b5a:	f7fc f851 	bl	8005c00 <HAL_GetTick>
 8009b5e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b60:	e015      	b.n	8009b8e <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b62:	f7fc f84d 	bl	8005c00 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b70:	d90d      	bls.n	8009b8e <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	22ff      	movs	r2, #255	@ 0xff
 8009b78:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e023      	b.n	8009bd6 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0e2      	beq.n	8009b62 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bba:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	22ff      	movs	r2, #255	@ 0xff
 8009bc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3724      	adds	r7, #36	@ 0x24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd90      	pop	{r4, r7, pc}
	...

08009be0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a0d      	ldr	r2, [pc, #52]	@ (8009c24 <HAL_RTC_WaitForSynchro+0x44>)
 8009bee:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009bf0:	f7fc f806 	bl	8005c00 <HAL_GetTick>
 8009bf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009bf6:	e009      	b.n	8009c0c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009bf8:	f7fc f802 	bl	8005c00 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c06:	d901      	bls.n	8009c0c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e007      	b.n	8009c1c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0ee      	beq.n	8009bf8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0003ff5f 	.word	0x0003ff5f

08009c28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d120      	bne.n	8009c84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009c4c:	f7fb ffd8 	bl	8005c00 <HAL_GetTick>
 8009c50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c52:	e00d      	b.n	8009c70 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009c54:	f7fb ffd4 	bl	8005c00 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c62:	d905      	bls.n	8009c70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <RTC_EnterInitMode+0x5c>
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d1e7      	bne.n	8009c54 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4a19      	ldr	r2, [pc, #100]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ca6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ca8:	4b17      	ldr	r3, [pc, #92]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0320 	and.w	r3, r3, #32
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10c      	bne.n	8009cce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff ff93 	bl	8009be0 <HAL_RTC_WaitForSynchro>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01e      	beq.n	8009cfe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	73fb      	strb	r3, [r7, #15]
 8009ccc:	e017      	b.n	8009cfe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009cce:	4b0e      	ldr	r3, [pc, #56]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009cd4:	f023 0320 	bic.w	r3, r3, #32
 8009cd8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff ff80 	bl	8009be0 <HAL_RTC_WaitForSynchro>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2203      	movs	r2, #3
 8009cea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009cf2:	4b05      	ldr	r3, [pc, #20]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	4a04      	ldr	r2, [pc, #16]	@ (8009d08 <RTC_ExitInitMode+0x78>)
 8009cf8:	f043 0320 	orr.w	r3, r3, #32
 8009cfc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40002800 	.word	0x40002800

08009d0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009d1e:	e005      	b.n	8009d2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	3b0a      	subs	r3, #10
 8009d2a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d8f6      	bhi.n	8009d20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	7afb      	ldrb	r3, [r7, #11]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	b2db      	uxtb	r3, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e022      	b.n	8009da4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7f8 fa8b 	bl	800228c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2203      	movs	r2, #3
 8009d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f814 	bl	8009dac <HAL_SD_InitCard>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e00a      	b.n	8009da4 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dac:	b5b0      	push	{r4, r5, r7, lr}
 8009dae:	b08e      	sub	sp, #56	@ 0x38
 8009db0:	af04      	add	r7, sp, #16
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009dc8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009dcc:	f7fe fdea 	bl	80089a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dd0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009de6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e07b      	b.n	8009ee4 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8009dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dee:	09db      	lsrs	r3, r3, #7
 8009df0:	4a3e      	ldr	r2, [pc, #248]	@ (8009eec <HAL_SD_InitCard+0x140>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	091b      	lsrs	r3, r3, #4
 8009df8:	3b02      	subs	r3, #2
 8009dfa:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681d      	ldr	r5, [r3, #0]
 8009e00:	466c      	mov	r4, sp
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e14:	4628      	mov	r0, r5
 8009e16:	f004 fab3 	bl	800e380 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e28:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f004 faf1 	bl	800e416 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e42:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	3302      	adds	r3, #2
 8009e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009e50:	4a27      	ldr	r2, [pc, #156]	@ (8009ef0 <HAL_SD_InitCard+0x144>)
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e58:	3301      	adds	r3, #1
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f7 fd58 	bl	8001910 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 ff23 	bl	800acac <SD_PowerON>
 8009e66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e02e      	b.n	8009ee4 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fe42 	bl	800ab10 <SD_InitCard>
 8009e8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e01b      	b.n	8009ee4 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f004 fb41 	bl	800e53c <SDMMC_CmdBlockLength>
 8009eba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00f      	beq.n	8009ee2 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8009ef4 <HAL_SD_InitCard+0x148>)
 8009ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3728      	adds	r7, #40	@ 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bdb0      	pop	{r4, r5, r7, pc}
 8009eec:	014f8b59 	.word	0x014f8b59
 8009ef0:	00012110 	.word	0x00012110
 8009ef4:	004005ff 	.word	0x004005ff

08009ef8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08c      	sub	sp, #48	@ 0x30
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d107      	bne.n	8009f20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f14:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0a9      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	f040 80a2 	bne.w	800a072 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	441a      	add	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d907      	bls.n	8009f52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f46:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e090      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2203      	movs	r2, #3
 8009f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f66:	4a45      	ldr	r2, [pc, #276]	@ (800a07c <HAL_SD_ReadBlocks_DMA+0x184>)
 8009f68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6e:	4a44      	ldr	r2, [pc, #272]	@ (800a080 <HAL_SD_ReadBlocks_DMA+0x188>)
 8009f70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	2200      	movs	r2, #0
 8009f78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3380      	adds	r3, #128	@ 0x80
 8009f84:	4619      	mov	r1, r3
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	025b      	lsls	r3, r3, #9
 8009f8c:	089b      	lsrs	r3, r3, #2
 8009f8e:	f7fc f961 	bl	8006254 <HAL_DMA_Start_IT>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00f      	beq.n	8009fb8 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a39      	ldr	r2, [pc, #228]	@ (800a084 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009f9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e05d      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f042 0208 	orr.w	r2, r2, #8
 8009fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d002      	beq.n	8009fd6 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	025b      	lsls	r3, r3, #9
 8009fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009fda:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	025b      	lsls	r3, r3, #9
 8009fe0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009fe2:	2390      	movs	r3, #144	@ 0x90
 8009fe4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f107 0210 	add.w	r2, r7, #16
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f004 fa71 	bl	800e4e4 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d90a      	bls.n	800a01e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2282      	movs	r2, #130	@ 0x82
 800a00c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a014:	4618      	mov	r0, r3
 800a016:	f004 fad5 	bl	800e5c4 <SDMMC_CmdReadMultiBlock>
 800a01a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a01c:	e009      	b.n	800a032 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2281      	movs	r2, #129	@ 0x81
 800a022:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a02a:	4618      	mov	r0, r3
 800a02c:	f004 faa8 	bl	800e580 <SDMMC_CmdReadSingleBlock>
 800a030:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d012      	beq.n	800a05e <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a11      	ldr	r2, [pc, #68]	@ (800a084 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a03e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a046:	431a      	orrs	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e00a      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a06c:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	e000      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800a072:	2302      	movs	r3, #2
  }
}
 800a074:	4618      	mov	r0, r3
 800a076:	3730      	adds	r7, #48	@ 0x30
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	0800a92b 	.word	0x0800a92b
 800a080:	0800a99d 	.word	0x0800a99d
 800a084:	004005ff 	.word	0x004005ff

0800a088 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	@ 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d107      	bne.n	800a0b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0ac      	b.n	800a20a <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	f040 80a5 	bne.w	800a208 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	441a      	add	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d907      	bls.n	800a0e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e093      	b.n	800a20a <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f6:	4a47      	ldr	r2, [pc, #284]	@ (800a214 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a0f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0fe:	4a46      	ldr	r2, [pc, #280]	@ (800a218 <HAL_SD_WriteBlocks_DMA+0x190>)
 800a100:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a106:	2200      	movs	r2, #0
 800a108:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d002      	beq.n	800a118 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800a112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a114:	025b      	lsls	r3, r3, #9
 800a116:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d90a      	bls.n	800a134 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	22a0      	movs	r2, #160	@ 0xa0
 800a122:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a12a:	4618      	mov	r0, r3
 800a12c:	f004 fa8e 	bl	800e64c <SDMMC_CmdWriteMultiBlock>
 800a130:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a132:	e009      	b.n	800a148 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2290      	movs	r2, #144	@ 0x90
 800a138:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a140:	4618      	mov	r0, r3
 800a142:	f004 fa61 	bl	800e608 <SDMMC_CmdWriteSingleBlock>
 800a146:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d012      	beq.n	800a174 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a32      	ldr	r2, [pc, #200]	@ (800a21c <HAL_SD_WriteBlocks_DMA+0x194>)
 800a154:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	431a      	orrs	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e04a      	b.n	800a20a <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0208 	orr.w	r2, r2, #8
 800a182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3380      	adds	r3, #128	@ 0x80
 800a190:	461a      	mov	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	025b      	lsls	r3, r3, #9
 800a196:	089b      	lsrs	r3, r3, #2
 800a198:	f7fc f85c 	bl	8006254 <HAL_DMA_Start_IT>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d012      	beq.n	800a1c8 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a1d      	ldr	r2, [pc, #116]	@ (800a21c <HAL_SD_WriteBlocks_DMA+0x194>)
 800a1a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e020      	b.n	800a20a <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	025b      	lsls	r3, r3, #9
 800a1d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a1d4:	2390      	movs	r3, #144	@ 0x90
 800a1d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f107 0210 	add.w	r2, r7, #16
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f004 f978 	bl	800e4e4 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 021a 	orr.w	r2, r2, #26
 800a202:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	e000      	b.n	800a20a <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800a208:	2302      	movs	r3, #2
  }
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3730      	adds	r7, #48	@ 0x30
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	0800a901 	.word	0x0800a901
 800a218:	0800a99d 	.word	0x0800a99d
 800a21c:	004005ff 	.word	0x004005ff

0800a220 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d008      	beq.n	800a24e <HAL_SD_IRQHandler+0x2e>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0308 	and.w	r3, r3, #8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fde6 	bl	800ae18 <SD_Read_IT>
 800a24c:	e155      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 808f 	beq.w	800a37c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a266:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6812      	ldr	r2, [r2, #0]
 800a272:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800a276:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800a27a:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0201 	bic.w	r2, r2, #1
 800a28a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f003 0308 	and.w	r3, r3, #8
 800a292:	2b00      	cmp	r3, #0
 800a294:	d039      	beq.n	800a30a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <HAL_SD_IRQHandler+0x8a>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d011      	beq.n	800a2ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f004 f9ee 	bl	800e690 <SDMMC_CmdStopTransfer>
 800a2b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f91f 	bl	800a50c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a2d6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d104      	bne.n	800a2fa <HAL_SD_IRQHandler+0xda>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f004 fdd0 	bl	800eea0 <HAL_SD_RxCpltCallback>
 800a300:	e0fb      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f004 fdc2 	bl	800ee8c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800a308:	e0f7      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80f2 	beq.w	800a4fa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f003 0320 	and.w	r3, r3, #32
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d011      	beq.n	800a344 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f004 f9b3 	bl	800e690 <SDMMC_CmdStopTransfer>
 800a32a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f8e4 	bl	800a50c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 80d5 	bne.w	800a4fa <HAL_SD_IRQHandler+0x2da>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	f040 80cf 	bne.w	800a4fa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0208 	bic.w	r2, r2, #8
 800a36a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f004 fd89 	bl	800ee8c <HAL_SD_TxCpltCallback>
}
 800a37a:	e0be      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <HAL_SD_IRQHandler+0x17c>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fd90 	bl	800aeba <SD_Write_IT>
 800a39a:	e0ae      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80a7 	beq.w	800a4fa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3be:	f043 0202 	orr.w	r2, r3, #2
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3cc:	f003 0308 	and.w	r3, r3, #8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d8:	f043 0208 	orr.w	r2, r3, #8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f2:	f043 0220 	orr.w	r2, r3, #32
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b00      	cmp	r3, #0
 800a406:	d005      	beq.n	800a414 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40c:	f043 0210 	orr.w	r2, r3, #16
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a41c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a42c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4618      	mov	r0, r3
 800a434:	f004 f92c 	bl	800e690 <SDMMC_CmdStopTransfer>
 800a438:	4602      	mov	r2, r0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f855 	bl	800a50c <HAL_SD_ErrorCallback>
}
 800a462:	e04a      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d045      	beq.n	800a4fa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d104      	bne.n	800a482 <HAL_SD_IRQHandler+0x262>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d011      	beq.n	800a4a6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a486:	4a1f      	ldr	r2, [pc, #124]	@ (800a504 <HAL_SD_IRQHandler+0x2e4>)
 800a488:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fb ff7e 	bl	8006390 <HAL_DMA_Abort_IT>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d02f      	beq.n	800a4fa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fac8 	bl	800aa34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a4a4:	e029      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <HAL_SD_IRQHandler+0x29a>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d011      	beq.n	800a4de <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4be:	4a12      	ldr	r2, [pc, #72]	@ (800a508 <HAL_SD_IRQHandler+0x2e8>)
 800a4c0:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fb ff62 	bl	8006390 <HAL_DMA_Abort_IT>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d013      	beq.n	800a4fa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fae3 	bl	800aaa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4dc:	e00d      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f004 fcc0 	bl	800ee78 <HAL_SD_AbortCallback>
}
 800a4f8:	e7ff      	b.n	800a4fa <HAL_SD_IRQHandler+0x2da>
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	0800aa35 	.word	0x0800aa35
 800a508:	0800aaa3 	.word	0x0800aaa3

0800a50c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52e:	0f9b      	lsrs	r3, r3, #30
 800a530:	b2da      	uxtb	r2, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a53a:	0e9b      	lsrs	r3, r3, #26
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	b2da      	uxtb	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54c:	0e1b      	lsrs	r3, r3, #24
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	b2da      	uxtb	r2, r3
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	b2da      	uxtb	r2, r3
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a576:	b2da      	uxtb	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a580:	0d1b      	lsrs	r3, r3, #20
 800a582:	b29a      	uxth	r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a58c:	0c1b      	lsrs	r3, r3, #16
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	b2da      	uxtb	r2, r3
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a59e:	0bdb      	lsrs	r3, r3, #15
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5b0:	0b9b      	lsrs	r3, r3, #14
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c2:	0b5b      	lsrs	r3, r3, #13
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5d4:	0b1b      	lsrs	r3, r3, #12
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d163      	bne.n	800a6b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5f4:	009a      	lsls	r2, r3, #2
 800a5f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a600:	0f92      	lsrs	r2, r2, #30
 800a602:	431a      	orrs	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60c:	0edb      	lsrs	r3, r3, #27
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	b2da      	uxtb	r2, r3
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61e:	0e1b      	lsrs	r3, r3, #24
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	b2da      	uxtb	r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a630:	0d5b      	lsrs	r3, r3, #21
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0307 	and.w	r3, r3, #7
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a642:	0c9b      	lsrs	r3, r3, #18
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a654:	0bdb      	lsrs	r3, r3, #15
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	7e1b      	ldrb	r3, [r3, #24]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	3302      	adds	r3, #2
 800a678:	2201      	movs	r2, #1
 800a67a:	fa02 f303 	lsl.w	r3, r2, r3
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a682:	fb03 f202 	mul.w	r2, r3, r2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	7a1b      	ldrb	r3, [r3, #8]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	2201      	movs	r2, #1
 800a696:	409a      	lsls	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a6a4:	0a52      	lsrs	r2, r2, #9
 800a6a6:	fb03 f202 	mul.w	r2, r3, r2
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6b4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6b6:	e031      	b.n	800a71c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d11d      	bne.n	800a6fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	029a      	lsls	r2, r3, #10
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6fa:	e00f      	b.n	800a71c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a58      	ldr	r2, [pc, #352]	@ (800a864 <HAL_SD_GetCardCSD+0x344>)
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e09d      	b.n	800a858 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a720:	0b9b      	lsrs	r3, r3, #14
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a732:	09db      	lsrs	r3, r3, #7
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a754:	0fdb      	lsrs	r3, r3, #31
 800a756:	b2da      	uxtb	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a760:	0f5b      	lsrs	r3, r3, #29
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a772:	0e9b      	lsrs	r3, r3, #26
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a784:	0d9b      	lsrs	r3, r3, #22
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 030f 	and.w	r3, r3, #15
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a796:	0d5b      	lsrs	r3, r3, #21
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c6:	0bdb      	lsrs	r3, r3, #15
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7da:	0b9b      	lsrs	r3, r3, #14
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ee:	0b5b      	lsrs	r3, r3, #13
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a802:	0b1b      	lsrs	r3, r3, #12
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a816:	0a9b      	lsrs	r3, r3, #10
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	b2da      	uxtb	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a83e:	085b      	lsrs	r3, r3, #1
 800a840:	b2db      	uxtb	r3, r3
 800a842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a846:	b2da      	uxtb	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	004005ff 	.word	0x004005ff

0800a868 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8cc:	f107 030c 	add.w	r3, r7, #12
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa78 	bl	800adc8 <SD_SendStatus>
 800a8d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a8f6:	693b      	ldr	r3, [r7, #16]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a91c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a936:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93c:	2b82      	cmp	r3, #130	@ 0x82
 800a93e:	d111      	bne.n	800a964 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f003 fea3 	bl	800e690 <SDMMC_CmdStopTransfer>
 800a94a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d008      	beq.n	800a964 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	431a      	orrs	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fdd4 	bl	800a50c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0208 	bic.w	r2, r2, #8
 800a972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a97c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f004 fa87 	bl	800eea0 <HAL_SD_RxCpltCallback>
#endif
}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b0:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b8:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d002      	beq.n	800a9c6 <SD_DMAError+0x2a>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d12d      	bne.n	800aa22 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a19      	ldr	r2, [pc, #100]	@ (800aa30 <SD_DMAError+0x94>)
 800a9cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a9dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800a9ea:	6978      	ldr	r0, [r7, #20]
 800a9ec:	f7ff ff68 	bl	800a8c0 <HAL_SD_GetCardState>
 800a9f0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b06      	cmp	r3, #6
 800a9f6:	d002      	beq.n	800a9fe <SD_DMAError+0x62>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d10a      	bne.n	800aa14 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f003 fe44 	bl	800e690 <SDMMC_CmdStopTransfer>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f7ff fd72 	bl	800a50c <HAL_SD_ErrorCallback>
#endif
}
 800aa28:	bf00      	nop
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	004005ff 	.word	0x004005ff

0800aa34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f240 523a 	movw	r2, #1338	@ 0x53a
 800aa4a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7ff ff37 	bl	800a8c0 <HAL_SD_GetCardState>
 800aa52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b06      	cmp	r3, #6
 800aa66:	d002      	beq.n	800aa6e <SD_DMATxAbort+0x3a>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	d10a      	bne.n	800aa84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f003 fe0c 	bl	800e690 <SDMMC_CmdStopTransfer>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d103      	bne.n	800aa94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f004 f9f3 	bl	800ee78 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800aa92:	e002      	b.n	800aa9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff fd39 	bl	800a50c <HAL_SD_ErrorCallback>
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800aab8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7ff ff00 	bl	800a8c0 <HAL_SD_GetCardState>
 800aac0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b06      	cmp	r3, #6
 800aad4:	d002      	beq.n	800aadc <SD_DMARxAbort+0x3a>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b05      	cmp	r3, #5
 800aada:	d10a      	bne.n	800aaf2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f003 fdd5 	bl	800e690 <SDMMC_CmdStopTransfer>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaec:	431a      	orrs	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d103      	bne.n	800ab02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f004 f9bc 	bl	800ee78 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ab00:	e002      	b.n	800ab08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fd02 	bl	800a50c <HAL_SD_ErrorCallback>
}
 800ab08:	bf00      	nop
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab10:	b5b0      	push	{r4, r5, r7, lr}
 800ab12:	b094      	sub	sp, #80	@ 0x50
 800ab14:	af04      	add	r7, sp, #16
 800ab16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f003 fc87 	bl	800e434 <SDMMC_GetPowerState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ab30:	e0b8      	b.n	800aca4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d02f      	beq.n	800ab9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f003 fe6d 	bl	800e81e <SDMMC_CmdSendCID>
 800ab44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <SD_InitCard+0x40>
    {
      return errorstate;
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4e:	e0a9      	b.n	800aca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f003 fcb1 	bl	800e4be <SDMMC_GetResponse>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2104      	movs	r1, #4
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f003 fca8 	bl	800e4be <SDMMC_GetResponse>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2108      	movs	r1, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f003 fc9f 	bl	800e4be <SDMMC_GetResponse>
 800ab80:	4602      	mov	r2, r0
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	210c      	movs	r1, #12
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f003 fc96 	bl	800e4be <SDMMC_GetResponse>
 800ab92:	4602      	mov	r2, r0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d00d      	beq.n	800abbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f107 020e 	add.w	r2, r7, #14
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f003 fe73 	bl	800e898 <SDMMC_CmdSetRelAdd>
 800abb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <SD_InitCard+0xae>
    {
      return errorstate;
 800abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abbc:	e072      	b.n	800aca4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d036      	beq.n	800ac34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800abc6:	89fb      	ldrh	r3, [r7, #14]
 800abc8:	461a      	mov	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f003 fe3d 	bl	800e85a <SDMMC_CmdSendCSD>
 800abe0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <SD_InitCard+0xdc>
    {
      return errorstate;
 800abe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abea:	e05b      	b.n	800aca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2100      	movs	r1, #0
 800abf2:	4618      	mov	r0, r3
 800abf4:	f003 fc63 	bl	800e4be <SDMMC_GetResponse>
 800abf8:	4602      	mov	r2, r0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2104      	movs	r1, #4
 800ac04:	4618      	mov	r0, r3
 800ac06:	f003 fc5a 	bl	800e4be <SDMMC_GetResponse>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2108      	movs	r1, #8
 800ac16:	4618      	mov	r0, r3
 800ac18:	f003 fc51 	bl	800e4be <SDMMC_GetResponse>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	210c      	movs	r1, #12
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f003 fc48 	bl	800e4be <SDMMC_GetResponse>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2104      	movs	r1, #4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f003 fc3f 	bl	800e4be <SDMMC_GetResponse>
 800ac40:	4603      	mov	r3, r0
 800ac42:	0d1a      	lsrs	r2, r3, #20
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac48:	f107 0310 	add.w	r3, r7, #16
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fc66 	bl	800a520 <HAL_SD_GetCardCSD>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac5e:	e021      	b.n	800aca4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac68:	041b      	lsls	r3, r3, #16
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	461c      	mov	r4, r3
 800ac6e:	4615      	mov	r5, r2
 800ac70:	4622      	mov	r2, r4
 800ac72:	462b      	mov	r3, r5
 800ac74:	4608      	mov	r0, r1
 800ac76:	f003 fd2d 	bl	800e6d4 <SDMMC_CmdSelDesel>
 800ac7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <SD_InitCard+0x176>
  {
    return errorstate;
 800ac82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac84:	e00e      	b.n	800aca4 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681d      	ldr	r5, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	466c      	mov	r4, sp
 800ac8e:	f103 0210 	add.w	r2, r3, #16
 800ac92:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac98:	3304      	adds	r3, #4
 800ac9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f003 fb6f 	bl	800e380 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3740      	adds	r7, #64	@ 0x40
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bdb0      	pop	{r4, r5, r7, pc}

0800acac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	2300      	movs	r3, #0
 800acbe:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f003 fd28 	bl	800e71a <SDMMC_CmdGoIdleState>
 800acca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	e072      	b.n	800adbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4618      	mov	r0, r3
 800acdc:	f003 fd3b 	bl	800e756 <SDMMC_CmdOperCond>
 800ace0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00d      	beq.n	800ad04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f003 fd11 	bl	800e71a <SDMMC_CmdGoIdleState>
 800acf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	e05b      	b.n	800adbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d137      	bne.n	800ad82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f003 fd3b 	bl	800e794 <SDMMC_CmdAppCommand>
 800ad1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d02d      	beq.n	800ad82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ad2a:	e047      	b.n	800adbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f003 fd2e 	bl	800e794 <SDMMC_CmdAppCommand>
 800ad38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <SD_PowerON+0x98>
    {
      return errorstate;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	e03b      	b.n	800adbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	491e      	ldr	r1, [pc, #120]	@ (800adc4 <SD_PowerON+0x118>)
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f003 fd44 	bl	800e7d8 <SDMMC_CmdAppOperCommand>
 800ad50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ad5c:	e02e      	b.n	800adbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2100      	movs	r1, #0
 800ad64:	4618      	mov	r0, r3
 800ad66:	f003 fbaa 	bl	800e4be <SDMMC_GetResponse>
 800ad6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	0fdb      	lsrs	r3, r3, #31
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <SD_PowerON+0xcc>
 800ad74:	2301      	movs	r3, #1
 800ad76:	e000      	b.n	800ad7a <SD_PowerON+0xce>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]

    count++;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d802      	bhi.n	800ad92 <SD_PowerON+0xe6>
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0cc      	beq.n	800ad2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d902      	bls.n	800ada2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ada0:	e00c      	b.n	800adbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	645a      	str	r2, [r3, #68]	@ 0x44
 800adb2:	e002      	b.n	800adba <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	c1100000 	.word	0xc1100000

0800adc8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800add8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800addc:	e018      	b.n	800ae10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade6:	041b      	lsls	r3, r3, #16
 800ade8:	4619      	mov	r1, r3
 800adea:	4610      	mov	r0, r2
 800adec:	f003 fd75 	bl	800e8da <SDMMC_CmdSendStatus>
 800adf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <SD_SendStatus+0x34>
  {
    return errorstate;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	e009      	b.n	800ae10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2100      	movs	r1, #0
 800ae02:	4618      	mov	r0, r3
 800ae04:	f003 fb5b 	bl	800e4be <SDMMC_GetResponse>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d03f      	beq.n	800aeb2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e033      	b.n	800aea0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f003 facc 	bl	800e3da <SDMMC_ReadFIFO>
 800ae42:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3301      	adds	r3, #1
 800ae66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	0c1b      	lsrs	r3, r3, #16
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	0e1b      	lsrs	r3, r3, #24
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	d9c8      	bls.n	800ae38 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b086      	sub	sp, #24
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aecc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d043      	beq.n	800af5c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	e037      	b.n	800af4a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	021a      	lsls	r2, r3, #8
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	3b01      	subs	r3, #1
 800af02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	041a      	lsls	r2, r3, #16
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	3301      	adds	r3, #1
 800af14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	3b01      	subs	r3, #1
 800af1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	061a      	lsls	r2, r3, #24
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4313      	orrs	r3, r2
 800af26:	60bb      	str	r3, [r7, #8]
      tmp++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	3b01      	subs	r3, #1
 800af32:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f107 0208 	add.w	r2, r7, #8
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f003 fa58 	bl	800e3f4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3301      	adds	r3, #1
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b07      	cmp	r3, #7
 800af4e:	d9c4      	bls.n	800aeda <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800af5c:	bf00      	nop
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e095      	b.n	800b0a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d108      	bne.n	800af90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af86:	d009      	beq.n	800af9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	61da      	str	r2, [r3, #28]
 800af8e:	e005      	b.n	800af9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7f7 fa24 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2202      	movs	r2, #2
 800afc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800afdc:	d902      	bls.n	800afe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e002      	b.n	800afea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800afe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aff2:	d007      	beq.n	800b004 <HAL_SPI_Init+0xa0>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800affc:	d002      	beq.n	800b004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	431a      	orrs	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	431a      	orrs	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b032:	431a      	orrs	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b03c:	431a      	orrs	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b046:	ea42 0103 	orr.w	r1, r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	0c1b      	lsrs	r3, r3, #16
 800b060:	f003 0204 	and.w	r2, r3, #4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b080:	ea42 0103 	orr.w	r1, r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	603b      	str	r3, [r7, #0]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <HAL_SPI_Transmit+0x22>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e15f      	b.n	800b38c <HAL_SPI_Transmit+0x2e2>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0d4:	f7fa fd94 	bl	8005c00 <HAL_GetTick>
 800b0d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b0da:	88fb      	ldrh	r3, [r7, #6]
 800b0dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d002      	beq.n	800b0f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b0ee:	e148      	b.n	800b382 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_SPI_Transmit+0x52>
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b100:	e13f      	b.n	800b382 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2203      	movs	r2, #3
 800b106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	88fa      	ldrh	r2, [r7, #6]
 800b11a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b14c:	d10f      	bne.n	800b16e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b15c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b16c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b178:	2b40      	cmp	r3, #64	@ 0x40
 800b17a:	d007      	beq.n	800b18c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b18a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b194:	d94f      	bls.n	800b236 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_SPI_Transmit+0xfa>
 800b19e:	8afb      	ldrh	r3, [r7, #22]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d142      	bne.n	800b22a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a8:	881a      	ldrh	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b4:	1c9a      	adds	r2, r3, #2
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1c8:	e02f      	b.n	800b22a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d112      	bne.n	800b1fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1dc:	881a      	ldrh	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e8:	1c9a      	adds	r2, r3, #2
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b1fc:	e015      	b.n	800b22a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1fe:	f7fa fcff 	bl	8005c00 <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d803      	bhi.n	800b216 <HAL_SPI_Transmit+0x16c>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b214:	d102      	bne.n	800b21c <HAL_SPI_Transmit+0x172>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d106      	bne.n	800b22a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800b228:	e0ab      	b.n	800b382 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b22e:	b29b      	uxth	r3, r3
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1ca      	bne.n	800b1ca <HAL_SPI_Transmit+0x120>
 800b234:	e080      	b.n	800b338 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <HAL_SPI_Transmit+0x19a>
 800b23e:	8afb      	ldrh	r3, [r7, #22]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d174      	bne.n	800b32e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b248:	b29b      	uxth	r3, r3
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d912      	bls.n	800b274 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b252:	881a      	ldrh	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25e:	1c9a      	adds	r2, r3, #2
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b02      	subs	r3, #2
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b272:	e05c      	b.n	800b32e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	330c      	adds	r3, #12
 800b27e:	7812      	ldrb	r2, [r2, #0]
 800b280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	b29a      	uxth	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b29a:	e048      	b.n	800b32e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d12b      	bne.n	800b302 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d912      	bls.n	800b2da <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b8:	881a      	ldrh	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c4:	1c9a      	adds	r2, r3, #2
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	3b02      	subs	r3, #2
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b2d8:	e029      	b.n	800b32e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	7812      	ldrb	r2, [r2, #0]
 800b2e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b300:	e015      	b.n	800b32e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b302:	f7fa fc7d 	bl	8005c00 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d803      	bhi.n	800b31a <HAL_SPI_Transmit+0x270>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b318:	d102      	bne.n	800b320 <HAL_SPI_Transmit+0x276>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800b32c:	e029      	b.n	800b382 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1b1      	bne.n	800b29c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 fb69 	bl	800ba14 <SPI_EndRxTxTransaction>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2220      	movs	r2, #32
 800b34c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	613b      	str	r3, [r7, #16]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	613b      	str	r3, [r7, #16]
 800b36a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	77fb      	strb	r3, [r7, #31]
 800b378:	e003      	b.n	800b382 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800b38a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	@ 0x28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d101      	bne.n	800b3ba <HAL_SPI_TransmitReceive+0x26>
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e20a      	b.n	800b7d0 <HAL_SPI_TransmitReceive+0x43c>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3c2:	f7fa fc1d 	bl	8005c00 <HAL_GetTick>
 800b3c6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b3ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b3d6:	887b      	ldrh	r3, [r7, #2]
 800b3d8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b3da:	887b      	ldrh	r3, [r7, #2]
 800b3dc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b3de:	7efb      	ldrb	r3, [r7, #27]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d00e      	beq.n	800b402 <HAL_SPI_TransmitReceive+0x6e>
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b3ea:	d106      	bne.n	800b3fa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <HAL_SPI_TransmitReceive+0x66>
 800b3f4:	7efb      	ldrb	r3, [r7, #27]
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d003      	beq.n	800b402 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800b400:	e1e0      	b.n	800b7c4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_SPI_TransmitReceive+0x80>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <HAL_SPI_TransmitReceive+0x80>
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800b41a:	e1d3      	b.n	800b7c4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b04      	cmp	r3, #4
 800b426:	d003      	beq.n	800b430 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2205      	movs	r2, #5
 800b42c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	887a      	ldrh	r2, [r7, #2]
 800b440:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	887a      	ldrh	r2, [r7, #2]
 800b448:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	887a      	ldrh	r2, [r7, #2]
 800b456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	887a      	ldrh	r2, [r7, #2]
 800b45c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b472:	d802      	bhi.n	800b47a <HAL_SPI_TransmitReceive+0xe6>
 800b474:	8a3b      	ldrh	r3, [r7, #16]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d908      	bls.n	800b48c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	e007      	b.n	800b49c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b49a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a6:	2b40      	cmp	r3, #64	@ 0x40
 800b4a8:	d007      	beq.n	800b4ba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b4c2:	f240 8081 	bls.w	800b5c8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <HAL_SPI_TransmitReceive+0x140>
 800b4ce:	8a7b      	ldrh	r3, [r7, #18]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d16d      	bne.n	800b5b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d8:	881a      	ldrh	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e4:	1c9a      	adds	r2, r3, #2
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4f8:	e05a      	b.n	800b5b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b02      	cmp	r3, #2
 800b506:	d11b      	bne.n	800b540 <HAL_SPI_TransmitReceive+0x1ac>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d016      	beq.n	800b540 <HAL_SPI_TransmitReceive+0x1ac>
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b514:	2b01      	cmp	r3, #1
 800b516:	d113      	bne.n	800b540 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51c:	881a      	ldrh	r2, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b528:	1c9a      	adds	r2, r3, #2
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b532:	b29b      	uxth	r3, r3
 800b534:	3b01      	subs	r3, #1
 800b536:	b29a      	uxth	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d11c      	bne.n	800b588 <HAL_SPI_TransmitReceive+0x1f4>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b554:	b29b      	uxth	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d016      	beq.n	800b588 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b564:	b292      	uxth	r2, r2
 800b566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56c:	1c9a      	adds	r2, r3, #2
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b578:	b29b      	uxth	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b584:	2301      	movs	r3, #1
 800b586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b588:	f7fa fb3a 	bl	8005c00 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b594:	429a      	cmp	r2, r3
 800b596:	d80b      	bhi.n	800b5b0 <HAL_SPI_TransmitReceive+0x21c>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b59e:	d007      	beq.n	800b5b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800b5ae:	e109      	b.n	800b7c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d19f      	bne.n	800b4fa <HAL_SPI_TransmitReceive+0x166>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d199      	bne.n	800b4fa <HAL_SPI_TransmitReceive+0x166>
 800b5c6:	e0e3      	b.n	800b790 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <HAL_SPI_TransmitReceive+0x244>
 800b5d0:	8a7b      	ldrh	r3, [r7, #18]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	f040 80cf 	bne.w	800b776 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d912      	bls.n	800b608 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e6:	881a      	ldrh	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f2:	1c9a      	adds	r2, r3, #2
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b02      	subs	r3, #2
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b606:	e0b6      	b.n	800b776 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	330c      	adds	r3, #12
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b624:	b29b      	uxth	r3, r3
 800b626:	3b01      	subs	r3, #1
 800b628:	b29a      	uxth	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b62e:	e0a2      	b.n	800b776 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d134      	bne.n	800b6a8 <HAL_SPI_TransmitReceive+0x314>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d02f      	beq.n	800b6a8 <HAL_SPI_TransmitReceive+0x314>
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d12c      	bne.n	800b6a8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b652:	b29b      	uxth	r3, r3
 800b654:	2b01      	cmp	r3, #1
 800b656:	d912      	bls.n	800b67e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65c:	881a      	ldrh	r2, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b668:	1c9a      	adds	r2, r3, #2
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b672:	b29b      	uxth	r3, r3
 800b674:	3b02      	subs	r3, #2
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b67c:	e012      	b.n	800b6a4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	330c      	adds	r3, #12
 800b688:	7812      	ldrb	r2, [r2, #0]
 800b68a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	3b01      	subs	r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d148      	bne.n	800b748 <HAL_SPI_TransmitReceive+0x3b4>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d042      	beq.n	800b748 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d923      	bls.n	800b716 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e0:	1c9a      	adds	r2, r3, #2
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b02      	subs	r3, #2
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b01      	cmp	r3, #1
 800b702:	d81f      	bhi.n	800b744 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b712:	605a      	str	r2, [r3, #4]
 800b714:	e016      	b.n	800b744 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f103 020c 	add.w	r2, r3, #12
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b738:	b29b      	uxth	r3, r3
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b744:	2301      	movs	r3, #1
 800b746:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b748:	f7fa fa5a 	bl	8005c00 <HAL_GetTick>
 800b74c:	4602      	mov	r2, r0
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b754:	429a      	cmp	r2, r3
 800b756:	d803      	bhi.n	800b760 <HAL_SPI_TransmitReceive+0x3cc>
 800b758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b75e:	d102      	bne.n	800b766 <HAL_SPI_TransmitReceive+0x3d2>
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	2b00      	cmp	r3, #0
 800b764:	d107      	bne.n	800b776 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800b774:	e026      	b.n	800b7c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f47f af57 	bne.w	800b630 <HAL_SPI_TransmitReceive+0x29c>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f47f af50 	bne.w	800b630 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b790:	69fa      	ldr	r2, [r7, #28]
 800b792:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 f93d 	bl	800ba14 <SPI_EndRxTxTransaction>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b7ba:	e003      	b.n	800b7c4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800b7cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3728      	adds	r7, #40	@ 0x28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b7e8:	f7fa fa0a 	bl	8005c00 <HAL_GetTick>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	1a9b      	subs	r3, r3, r2
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b7f8:	f7fa fa02 	bl	8005c00 <HAL_GetTick>
 800b7fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b7fe:	4b39      	ldr	r3, [pc, #228]	@ (800b8e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	015b      	lsls	r3, r3, #5
 800b804:	0d1b      	lsrs	r3, r3, #20
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	fb02 f303 	mul.w	r3, r2, r3
 800b80c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b80e:	e054      	b.n	800b8ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b816:	d050      	beq.n	800b8ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b818:	f7fa f9f2 	bl	8005c00 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	429a      	cmp	r2, r3
 800b826:	d902      	bls.n	800b82e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d13d      	bne.n	800b8aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b83c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b846:	d111      	bne.n	800b86c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b850:	d004      	beq.n	800b85c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b85a:	d107      	bne.n	800b86c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b86a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b874:	d10f      	bne.n	800b896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e017      	b.n	800b8da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	689a      	ldr	r2, [r3, #8]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	2300      	movne	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d19b      	bne.n	800b810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3720      	adds	r7, #32
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000000 	.word	0x20000000

0800b8e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	@ 0x28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b8fa:	f7fa f981 	bl	8005c00 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	4413      	add	r3, r2
 800b908:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b90a:	f7fa f979 	bl	8005c00 <HAL_GetTick>
 800b90e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	330c      	adds	r3, #12
 800b916:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b918:	4b3d      	ldr	r3, [pc, #244]	@ (800ba10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	00da      	lsls	r2, r3, #3
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	0d1b      	lsrs	r3, r3, #20
 800b928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b92a:	fb02 f303 	mul.w	r3, r2, r3
 800b92e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b930:	e060      	b.n	800b9f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b938:	d107      	bne.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x62>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d104      	bne.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	b2db      	uxtb	r3, r3
 800b946:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b948:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b950:	d050      	beq.n	800b9f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b952:	f7fa f955 	bl	8005c00 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b95e:	429a      	cmp	r2, r3
 800b960:	d902      	bls.n	800b968 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	d13d      	bne.n	800b9e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b976:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b980:	d111      	bne.n	800b9a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b98a:	d004      	beq.n	800b996 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b994:	d107      	bne.n	800b9a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ae:	d10f      	bne.n	800b9d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b9ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e010      	b.n	800ba06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d196      	bne.n	800b932 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3728      	adds	r7, #40	@ 0x28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	20000000 	.word	0x20000000

0800ba14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f7ff ff5b 	bl	800b8e8 <SPI_WaitFifoStateUntilTimeout>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d007      	beq.n	800ba48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba3c:	f043 0220 	orr.w	r2, r3, #32
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e027      	b.n	800ba98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2180      	movs	r1, #128	@ 0x80
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fec0 	bl	800b7d8 <SPI_WaitFlagStateUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d007      	beq.n	800ba6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba62:	f043 0220 	orr.w	r2, r3, #32
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e014      	b.n	800ba98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f7ff ff34 	bl	800b8e8 <SPI_WaitFifoStateUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d007      	beq.n	800ba96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba8a:	f043 0220 	orr.w	r2, r3, #32
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e000      	b.n	800ba98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e049      	b.n	800bb46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7f6 fd2e 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2202      	movs	r2, #2
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f000 fc46 	bl	800c370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d001      	beq.n	800bb68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	e03b      	b.n	800bbe0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0201 	orr.w	r2, r2, #1
 800bb7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a19      	ldr	r2, [pc, #100]	@ (800bbec <HAL_TIM_Base_Start_IT+0x9c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d009      	beq.n	800bb9e <HAL_TIM_Base_Start_IT+0x4e>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb92:	d004      	beq.n	800bb9e <HAL_TIM_Base_Start_IT+0x4e>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a15      	ldr	r2, [pc, #84]	@ (800bbf0 <HAL_TIM_Base_Start_IT+0xa0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d115      	bne.n	800bbca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	4b13      	ldr	r3, [pc, #76]	@ (800bbf4 <HAL_TIM_Base_Start_IT+0xa4>)
 800bba6:	4013      	ands	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b06      	cmp	r3, #6
 800bbae:	d015      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x8c>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbb6:	d011      	beq.n	800bbdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0201 	orr.w	r2, r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc8:	e008      	b.n	800bbdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f042 0201 	orr.w	r2, r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e000      	b.n	800bbde <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	40012c00 	.word	0x40012c00
 800bbf0:	40014000 	.word	0x40014000
 800bbf4:	00010007 	.word	0x00010007

0800bbf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e049      	b.n	800bc9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f841 	bl	800bca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f000 fb9a 	bl	800c370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f003 0302 	and.w	r3, r3, #2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d020      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01b      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f06f 0202 	mvn.w	r2, #2
 800bcee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	f003 0303 	and.w	r3, r3, #3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fac2 	bl	800c28e <HAL_TIM_IC_CaptureCallback>
 800bd0a:	e005      	b.n	800bd18 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fab4 	bl	800c27a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fac5 	bl	800c2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d020      	beq.n	800bd6a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d01b      	beq.n	800bd6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f06f 0204 	mvn.w	r2, #4
 800bd3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fa9c 	bl	800c28e <HAL_TIM_IC_CaptureCallback>
 800bd56:	e005      	b.n	800bd64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fa8e 	bl	800c27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa9f 	bl	800c2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f003 0308 	and.w	r3, r3, #8
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d020      	beq.n	800bdb6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d01b      	beq.n	800bdb6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f06f 0208 	mvn.w	r2, #8
 800bd86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2204      	movs	r2, #4
 800bd8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa76 	bl	800c28e <HAL_TIM_IC_CaptureCallback>
 800bda2:	e005      	b.n	800bdb0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fa68 	bl	800c27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fa79 	bl	800c2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f003 0310 	and.w	r3, r3, #16
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d020      	beq.n	800be02 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f003 0310 	and.w	r3, r3, #16
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01b      	beq.n	800be02 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f06f 0210 	mvn.w	r2, #16
 800bdd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2208      	movs	r2, #8
 800bdd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d003      	beq.n	800bdf0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fa50 	bl	800c28e <HAL_TIM_IC_CaptureCallback>
 800bdee:	e005      	b.n	800bdfc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fa42 	bl	800c27a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fa53 	bl	800c2a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00c      	beq.n	800be26 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d007      	beq.n	800be26 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f06f 0201 	mvn.w	r2, #1
 800be1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7f6 f801 	bl	8001e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00c      	beq.n	800be4a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be36:	2b00      	cmp	r3, #0
 800be38:	d007      	beq.n	800be4a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800be42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 ff1d 	bl	800cc84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00c      	beq.n	800be6e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d007      	beq.n	800be6e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800be66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 ff15 	bl	800cc98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00c      	beq.n	800be92 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d007      	beq.n	800be92 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa12 	bl	800c2b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f003 0320 	and.w	r3, r3, #32
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00c      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f003 0320 	and.w	r3, r3, #32
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d007      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f06f 0220 	mvn.w	r2, #32
 800beae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fedd 	bl	800cc70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <HAL_TIM_PWM_ConfigChannel+0x1e>
 800beda:	2302      	movs	r3, #2
 800bedc:	e0ff      	b.n	800c0de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b14      	cmp	r3, #20
 800beea:	f200 80f0 	bhi.w	800c0ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800beee:	a201      	add	r2, pc, #4	@ (adr r2, 800bef4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef4:	0800bf49 	.word	0x0800bf49
 800bef8:	0800c0cf 	.word	0x0800c0cf
 800befc:	0800c0cf 	.word	0x0800c0cf
 800bf00:	0800c0cf 	.word	0x0800c0cf
 800bf04:	0800bf89 	.word	0x0800bf89
 800bf08:	0800c0cf 	.word	0x0800c0cf
 800bf0c:	0800c0cf 	.word	0x0800c0cf
 800bf10:	0800c0cf 	.word	0x0800c0cf
 800bf14:	0800bfcb 	.word	0x0800bfcb
 800bf18:	0800c0cf 	.word	0x0800c0cf
 800bf1c:	0800c0cf 	.word	0x0800c0cf
 800bf20:	0800c0cf 	.word	0x0800c0cf
 800bf24:	0800c00b 	.word	0x0800c00b
 800bf28:	0800c0cf 	.word	0x0800c0cf
 800bf2c:	0800c0cf 	.word	0x0800c0cf
 800bf30:	0800c0cf 	.word	0x0800c0cf
 800bf34:	0800c04d 	.word	0x0800c04d
 800bf38:	0800c0cf 	.word	0x0800c0cf
 800bf3c:	0800c0cf 	.word	0x0800c0cf
 800bf40:	0800c0cf 	.word	0x0800c0cf
 800bf44:	0800c08d 	.word	0x0800c08d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68b9      	ldr	r1, [r7, #8]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 fa72 	bl	800c438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	699a      	ldr	r2, [r3, #24]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0208 	orr.w	r2, r2, #8
 800bf62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	699a      	ldr	r2, [r3, #24]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0204 	bic.w	r2, r2, #4
 800bf72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6999      	ldr	r1, [r3, #24]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	691a      	ldr	r2, [r3, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	619a      	str	r2, [r3, #24]
      break;
 800bf86:	e0a5      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68b9      	ldr	r1, [r7, #8]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 face 	bl	800c530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	699a      	ldr	r2, [r3, #24]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6999      	ldr	r1, [r3, #24]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	021a      	lsls	r2, r3, #8
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	619a      	str	r2, [r3, #24]
      break;
 800bfc8:	e084      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 fb27 	bl	800c624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69da      	ldr	r2, [r3, #28]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f042 0208 	orr.w	r2, r2, #8
 800bfe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	69da      	ldr	r2, [r3, #28]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f022 0204 	bic.w	r2, r2, #4
 800bff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69d9      	ldr	r1, [r3, #28]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	691a      	ldr	r2, [r3, #16]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	430a      	orrs	r2, r1
 800c006:	61da      	str	r2, [r3, #28]
      break;
 800c008:	e064      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fb7f 	bl	800c714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	69da      	ldr	r2, [r3, #28]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	69da      	ldr	r2, [r3, #28]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	69d9      	ldr	r1, [r3, #28]
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	021a      	lsls	r2, r3, #8
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	61da      	str	r2, [r3, #28]
      break;
 800c04a:	e043      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fbbc 	bl	800c7d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0208 	orr.w	r2, r2, #8
 800c066:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0204 	bic.w	r2, r2, #4
 800c076:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	691a      	ldr	r2, [r3, #16]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c08a:	e023      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68b9      	ldr	r1, [r7, #8]
 800c092:	4618      	mov	r0, r3
 800c094:	f000 fbf4 	bl	800c880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	021a      	lsls	r2, r3, #8
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c0cc:	e002      	b.n	800c0d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d101      	bne.n	800c104 <HAL_TIM_ConfigClockSource+0x1c>
 800c100:	2302      	movs	r3, #2
 800c102:	e0b6      	b.n	800c272 <HAL_TIM_ConfigClockSource+0x18a>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c122:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c12e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c140:	d03e      	beq.n	800c1c0 <HAL_TIM_ConfigClockSource+0xd8>
 800c142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c146:	f200 8087 	bhi.w	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c14a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c14e:	f000 8086 	beq.w	800c25e <HAL_TIM_ConfigClockSource+0x176>
 800c152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c156:	d87f      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c158:	2b70      	cmp	r3, #112	@ 0x70
 800c15a:	d01a      	beq.n	800c192 <HAL_TIM_ConfigClockSource+0xaa>
 800c15c:	2b70      	cmp	r3, #112	@ 0x70
 800c15e:	d87b      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c160:	2b60      	cmp	r3, #96	@ 0x60
 800c162:	d050      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x11e>
 800c164:	2b60      	cmp	r3, #96	@ 0x60
 800c166:	d877      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c168:	2b50      	cmp	r3, #80	@ 0x50
 800c16a:	d03c      	beq.n	800c1e6 <HAL_TIM_ConfigClockSource+0xfe>
 800c16c:	2b50      	cmp	r3, #80	@ 0x50
 800c16e:	d873      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c170:	2b40      	cmp	r3, #64	@ 0x40
 800c172:	d058      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x13e>
 800c174:	2b40      	cmp	r3, #64	@ 0x40
 800c176:	d86f      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c178:	2b30      	cmp	r3, #48	@ 0x30
 800c17a:	d064      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0x15e>
 800c17c:	2b30      	cmp	r3, #48	@ 0x30
 800c17e:	d86b      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c180:	2b20      	cmp	r3, #32
 800c182:	d060      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0x15e>
 800c184:	2b20      	cmp	r3, #32
 800c186:	d867      	bhi.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d05c      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0x15e>
 800c18c:	2b10      	cmp	r3, #16
 800c18e:	d05a      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0x15e>
 800c190:	e062      	b.n	800c258 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1a2:	f000 fc41 	bl	800ca28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c1b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	609a      	str	r2, [r3, #8]
      break;
 800c1be:	e04f      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1d0:	f000 fc2a 	bl	800ca28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	689a      	ldr	r2, [r3, #8]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c1e2:	609a      	str	r2, [r3, #8]
      break;
 800c1e4:	e03c      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f000 fb9e 	bl	800c934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2150      	movs	r1, #80	@ 0x50
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fbf7 	bl	800c9f2 <TIM_ITRx_SetConfig>
      break;
 800c204:	e02c      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c212:	461a      	mov	r2, r3
 800c214:	f000 fbbd 	bl	800c992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2160      	movs	r1, #96	@ 0x60
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 fbe7 	bl	800c9f2 <TIM_ITRx_SetConfig>
      break;
 800c224:	e01c      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c232:	461a      	mov	r2, r3
 800c234:	f000 fb7e 	bl	800c934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2140      	movs	r1, #64	@ 0x40
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fbd7 	bl	800c9f2 <TIM_ITRx_SetConfig>
      break;
 800c244:	e00c      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4619      	mov	r1, r3
 800c250:	4610      	mov	r0, r2
 800c252:	f000 fbce 	bl	800c9f2 <TIM_ITRx_SetConfig>
      break;
 800c256:	e003      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
      break;
 800c25c:	e000      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c25e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c270:	7bfb      	ldrb	r3, [r7, #15]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c282:	bf00      	nop
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d107      	bne.n	800c306 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c304:	e02a      	b.n	800c35c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d107      	bne.n	800c320 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2202      	movs	r2, #2
 800c314:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c31e:	e01d      	b.n	800c35c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d107      	bne.n	800c33a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2204      	movs	r2, #4
 800c32e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c338:	e010      	b.n	800c35c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	429a      	cmp	r2, r3
 800c342:	d107      	bne.n	800c354 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2208      	movs	r2, #8
 800c348:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c352:	e003      	b.n	800c35c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff ffb4 	bl	800c2ca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	771a      	strb	r2, [r3, #28]
}
 800c368:	bf00      	nop
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a2a      	ldr	r2, [pc, #168]	@ (800c42c <TIM_Base_SetConfig+0xbc>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d003      	beq.n	800c390 <TIM_Base_SetConfig+0x20>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38e:	d108      	bne.n	800c3a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a21      	ldr	r2, [pc, #132]	@ (800c42c <TIM_Base_SetConfig+0xbc>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d00b      	beq.n	800c3c2 <TIM_Base_SetConfig+0x52>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3b0:	d007      	beq.n	800c3c2 <TIM_Base_SetConfig+0x52>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a1e      	ldr	r2, [pc, #120]	@ (800c430 <TIM_Base_SetConfig+0xc0>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d003      	beq.n	800c3c2 <TIM_Base_SetConfig+0x52>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c434 <TIM_Base_SetConfig+0xc4>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d108      	bne.n	800c3d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	689a      	ldr	r2, [r3, #8]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c42c <TIM_Base_SetConfig+0xbc>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d007      	beq.n	800c410 <TIM_Base_SetConfig+0xa0>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a0b      	ldr	r2, [pc, #44]	@ (800c430 <TIM_Base_SetConfig+0xc0>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d003      	beq.n	800c410 <TIM_Base_SetConfig+0xa0>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a0a      	ldr	r2, [pc, #40]	@ (800c434 <TIM_Base_SetConfig+0xc4>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d103      	bne.n	800c418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	615a      	str	r2, [r3, #20]
}
 800c41e:	bf00      	nop
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	40012c00 	.word	0x40012c00
 800c430:	40014000 	.word	0x40014000
 800c434:	40014400 	.word	0x40014400

0800c438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	f023 0201 	bic.w	r2, r3, #1
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f023 0303 	bic.w	r3, r3, #3
 800c472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f023 0302 	bic.w	r3, r3, #2
 800c484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a24      	ldr	r2, [pc, #144]	@ (800c524 <TIM_OC1_SetConfig+0xec>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d007      	beq.n	800c4a8 <TIM_OC1_SetConfig+0x70>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a23      	ldr	r2, [pc, #140]	@ (800c528 <TIM_OC1_SetConfig+0xf0>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d003      	beq.n	800c4a8 <TIM_OC1_SetConfig+0x70>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a22      	ldr	r2, [pc, #136]	@ (800c52c <TIM_OC1_SetConfig+0xf4>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d10c      	bne.n	800c4c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	f023 0308 	bic.w	r3, r3, #8
 800c4ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f023 0304 	bic.w	r3, r3, #4
 800c4c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a17      	ldr	r2, [pc, #92]	@ (800c524 <TIM_OC1_SetConfig+0xec>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d007      	beq.n	800c4da <TIM_OC1_SetConfig+0xa2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a16      	ldr	r2, [pc, #88]	@ (800c528 <TIM_OC1_SetConfig+0xf0>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d003      	beq.n	800c4da <TIM_OC1_SetConfig+0xa2>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a15      	ldr	r2, [pc, #84]	@ (800c52c <TIM_OC1_SetConfig+0xf4>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d111      	bne.n	800c4fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	621a      	str	r2, [r3, #32]
}
 800c518:	bf00      	nop
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	40012c00 	.word	0x40012c00
 800c528:	40014000 	.word	0x40014000
 800c52c:	40014400 	.word	0x40014400

0800c530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a1b      	ldr	r3, [r3, #32]
 800c544:	f023 0210 	bic.w	r2, r3, #16
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	4313      	orrs	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f023 0320 	bic.w	r3, r3, #32
 800c57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a22      	ldr	r2, [pc, #136]	@ (800c618 <TIM_OC2_SetConfig+0xe8>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d10d      	bne.n	800c5b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a19      	ldr	r2, [pc, #100]	@ (800c618 <TIM_OC2_SetConfig+0xe8>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d007      	beq.n	800c5c8 <TIM_OC2_SetConfig+0x98>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a18      	ldr	r2, [pc, #96]	@ (800c61c <TIM_OC2_SetConfig+0xec>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d003      	beq.n	800c5c8 <TIM_OC2_SetConfig+0x98>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a17      	ldr	r2, [pc, #92]	@ (800c620 <TIM_OC2_SetConfig+0xf0>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d113      	bne.n	800c5f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	621a      	str	r2, [r3, #32]
}
 800c60a:	bf00      	nop
 800c60c:	371c      	adds	r7, #28
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	40012c00 	.word	0x40012c00
 800c61c:	40014000 	.word	0x40014000
 800c620:	40014400 	.word	0x40014400

0800c624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a1b      	ldr	r3, [r3, #32]
 800c638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0303 	bic.w	r3, r3, #3
 800c65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	021b      	lsls	r3, r3, #8
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a21      	ldr	r2, [pc, #132]	@ (800c708 <TIM_OC3_SetConfig+0xe4>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d10d      	bne.n	800c6a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c68c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	021b      	lsls	r3, r3, #8
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	4313      	orrs	r3, r2
 800c698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a18      	ldr	r2, [pc, #96]	@ (800c708 <TIM_OC3_SetConfig+0xe4>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d007      	beq.n	800c6ba <TIM_OC3_SetConfig+0x96>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a17      	ldr	r2, [pc, #92]	@ (800c70c <TIM_OC3_SetConfig+0xe8>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d003      	beq.n	800c6ba <TIM_OC3_SetConfig+0x96>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a16      	ldr	r2, [pc, #88]	@ (800c710 <TIM_OC3_SetConfig+0xec>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d113      	bne.n	800c6e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	693a      	ldr	r2, [r7, #16]
 800c6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	621a      	str	r2, [r3, #32]
}
 800c6fc:	bf00      	nop
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	40012c00 	.word	0x40012c00
 800c70c:	40014000 	.word	0x40014000
 800c710:	40014400 	.word	0x40014400

0800c714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a1b      	ldr	r3, [r3, #32]
 800c728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	021b      	lsls	r3, r3, #8
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	031b      	lsls	r3, r3, #12
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a14      	ldr	r2, [pc, #80]	@ (800c7c4 <TIM_OC4_SetConfig+0xb0>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d007      	beq.n	800c788 <TIM_OC4_SetConfig+0x74>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a13      	ldr	r2, [pc, #76]	@ (800c7c8 <TIM_OC4_SetConfig+0xb4>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d003      	beq.n	800c788 <TIM_OC4_SetConfig+0x74>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a12      	ldr	r2, [pc, #72]	@ (800c7cc <TIM_OC4_SetConfig+0xb8>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d109      	bne.n	800c79c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c78e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	019b      	lsls	r3, r3, #6
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	4313      	orrs	r3, r2
 800c79a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	621a      	str	r2, [r3, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	40012c00 	.word	0x40012c00
 800c7c8:	40014000 	.word	0x40014000
 800c7cc:	40014400 	.word	0x40014400

0800c7d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	041b      	lsls	r3, r3, #16
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	4313      	orrs	r3, r2
 800c820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a13      	ldr	r2, [pc, #76]	@ (800c874 <TIM_OC5_SetConfig+0xa4>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d007      	beq.n	800c83a <TIM_OC5_SetConfig+0x6a>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a12      	ldr	r2, [pc, #72]	@ (800c878 <TIM_OC5_SetConfig+0xa8>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC5_SetConfig+0x6a>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a11      	ldr	r2, [pc, #68]	@ (800c87c <TIM_OC5_SetConfig+0xac>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d109      	bne.n	800c84e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	021b      	lsls	r3, r3, #8
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	621a      	str	r2, [r3, #32]
}
 800c868:	bf00      	nop
 800c86a:	371c      	adds	r7, #28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	40012c00 	.word	0x40012c00
 800c878:	40014000 	.word	0x40014000
 800c87c:	40014400 	.word	0x40014400

0800c880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	021b      	lsls	r3, r3, #8
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	051b      	lsls	r3, r3, #20
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a14      	ldr	r2, [pc, #80]	@ (800c928 <TIM_OC6_SetConfig+0xa8>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d007      	beq.n	800c8ec <TIM_OC6_SetConfig+0x6c>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a13      	ldr	r2, [pc, #76]	@ (800c92c <TIM_OC6_SetConfig+0xac>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d003      	beq.n	800c8ec <TIM_OC6_SetConfig+0x6c>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a12      	ldr	r2, [pc, #72]	@ (800c930 <TIM_OC6_SetConfig+0xb0>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d109      	bne.n	800c900 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	029b      	lsls	r3, r3, #10
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	621a      	str	r2, [r3, #32]
}
 800c91a:	bf00      	nop
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	40012c00 	.word	0x40012c00
 800c92c:	40014000 	.word	0x40014000
 800c930:	40014400 	.word	0x40014400

0800c934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c934:	b480      	push	{r7}
 800c936:	b087      	sub	sp, #28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6a1b      	ldr	r3, [r3, #32]
 800c944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	f023 0201 	bic.w	r2, r3, #1
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c95e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	4313      	orrs	r3, r2
 800c968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f023 030a 	bic.w	r3, r3, #10
 800c970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	697a      	ldr	r2, [r7, #20]
 800c984:	621a      	str	r2, [r3, #32]
}
 800c986:	bf00      	nop
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c992:	b480      	push	{r7}
 800c994:	b087      	sub	sp, #28
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f023 0210 	bic.w	r2, r3, #16
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	031b      	lsls	r3, r3, #12
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	621a      	str	r2, [r3, #32]
}
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	f043 0307 	orr.w	r3, r3, #7
 800ca14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	609a      	str	r2, [r3, #8]
}
 800ca1c:	bf00      	nop
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	021a      	lsls	r2, r3, #8
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	609a      	str	r2, [r3, #8]
}
 800ca5c:	bf00      	nop
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f003 031f 	and.w	r3, r3, #31
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6a1a      	ldr	r2, [r3, #32]
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	43db      	mvns	r3, r3
 800ca8a:	401a      	ands	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6a1a      	ldr	r2, [r3, #32]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f003 031f 	and.w	r3, r3, #31
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	fa01 f303 	lsl.w	r3, r1, r3
 800caa0:	431a      	orrs	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	621a      	str	r2, [r3, #32]
}
 800caa6:	bf00      	nop
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d101      	bne.n	800cacc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cac8:	2302      	movs	r3, #2
 800caca:	e04f      	b.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a21      	ldr	r2, [pc, #132]	@ (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d108      	bne.n	800cb08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cafc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a14      	ldr	r2, [pc, #80]	@ (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d009      	beq.n	800cb40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb34:	d004      	beq.n	800cb40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a10      	ldr	r2, [pc, #64]	@ (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d10c      	bne.n	800cb5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	40012c00 	.word	0x40012c00
 800cb7c:	40014000 	.word	0x40014000

0800cb80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d101      	bne.n	800cb9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e060      	b.n	800cc5e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc02:	4313      	orrs	r3, r2
 800cc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	041b      	lsls	r3, r3, #16
 800cc12:	4313      	orrs	r3, r2
 800cc14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a14      	ldr	r2, [pc, #80]	@ (800cc6c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d115      	bne.n	800cc4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2a:	051b      	lsls	r3, r3, #20
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	40012c00 	.word	0x40012c00

0800cc70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e040      	b.n	800cd40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7f5 fcae 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2224      	movs	r2, #36	@ 0x24
 800ccd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f022 0201 	bic.w	r2, r2, #1
 800cce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fe62 	bl	800d9bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fc05 	bl	800d508 <UART_SetConfig>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d101      	bne.n	800cd08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e01b      	b.n	800cd40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f042 0201 	orr.w	r2, r2, #1
 800cd36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fee1 	bl	800db00 <UART_CheckIdleState>
 800cd3e:	4603      	mov	r3, r0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	@ 0x28
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	4613      	mov	r3, r2
 800cd56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd5c:	2b20      	cmp	r3, #32
 800cd5e:	d177      	bne.n	800ce50 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d002      	beq.n	800cd6c <HAL_UART_Transmit+0x24>
 800cd66:	88fb      	ldrh	r3, [r7, #6]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e070      	b.n	800ce52 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2221      	movs	r2, #33	@ 0x21
 800cd7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd7e:	f7f8 ff3f 	bl	8005c00 <HAL_GetTick>
 800cd82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	88fa      	ldrh	r2, [r7, #6]
 800cd88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	88fa      	ldrh	r2, [r7, #6]
 800cd90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd9c:	d108      	bne.n	800cdb0 <HAL_UART_Transmit+0x68>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d104      	bne.n	800cdb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	61bb      	str	r3, [r7, #24]
 800cdae:	e003      	b.n	800cdb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cdb8:	e02f      	b.n	800ce1a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2180      	movs	r1, #128	@ 0x80
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 ff43 	bl	800dc50 <UART_WaitOnFlagUntilTimeout>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e03b      	b.n	800ce52 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10b      	bne.n	800cdf8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	881a      	ldrh	r2, [r3, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdec:	b292      	uxth	r2, r2
 800cdee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	3302      	adds	r3, #2
 800cdf4:	61bb      	str	r3, [r7, #24]
 800cdf6:	e007      	b.n	800ce08 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	781a      	ldrb	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	3301      	adds	r3, #1
 800ce06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	3b01      	subs	r3, #1
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1c9      	bne.n	800cdba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2140      	movs	r1, #64	@ 0x40
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 ff0d 	bl	800dc50 <UART_WaitOnFlagUntilTimeout>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2220      	movs	r2, #32
 800ce40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ce42:	2303      	movs	r3, #3
 800ce44:	e005      	b.n	800ce52 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	e000      	b.n	800ce52 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ce50:	2302      	movs	r3, #2
  }
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3720      	adds	r7, #32
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	@ 0x28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	4613      	mov	r3, r2
 800ce68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce70:	2b20      	cmp	r3, #32
 800ce72:	d137      	bne.n	800cee4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d002      	beq.n	800ce80 <HAL_UART_Receive_IT+0x24>
 800ce7a:	88fb      	ldrh	r3, [r7, #6]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d101      	bne.n	800ce84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e030      	b.n	800cee6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a18      	ldr	r2, [pc, #96]	@ (800cef0 <HAL_UART_Receive_IT+0x94>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d01f      	beq.n	800ced4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d018      	beq.n	800ced4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	613b      	str	r3, [r7, #16]
   return(result);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ceb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	623b      	str	r3, [r7, #32]
 800cec2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e6      	bne.n	800cea2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ced4:	88fb      	ldrh	r3, [r7, #6]
 800ced6:	461a      	mov	r2, r3
 800ced8:	68b9      	ldr	r1, [r7, #8]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 ff20 	bl	800dd20 <UART_Start_Receive_IT>
 800cee0:	4603      	mov	r3, r0
 800cee2:	e000      	b.n	800cee6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cee4:	2302      	movs	r3, #2
  }
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3728      	adds	r7, #40	@ 0x28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	40008000 	.word	0x40008000

0800cef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b0ba      	sub	sp, #232	@ 0xe8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cf1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cf1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cf22:	4013      	ands	r3, r2
 800cf24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cf28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d115      	bne.n	800cf5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00f      	beq.n	800cf5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf40:	f003 0320 	and.w	r3, r3, #32
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d009      	beq.n	800cf5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 82ae 	beq.w	800d4ae <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	4798      	blx	r3
      }
      return;
 800cf5a:	e2a8      	b.n	800d4ae <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cf5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 8117 	beq.w	800d194 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cf66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cf72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cf76:	4b85      	ldr	r3, [pc, #532]	@ (800d18c <HAL_UART_IRQHandler+0x298>)
 800cf78:	4013      	ands	r3, r2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 810a 	beq.w	800d194 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d011      	beq.n	800cfb0 <HAL_UART_IRQHandler+0xbc>
 800cf8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfa6:	f043 0201 	orr.w	r2, r3, #1
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfb4:	f003 0302 	and.w	r3, r3, #2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d011      	beq.n	800cfe0 <HAL_UART_IRQHandler+0xec>
 800cfbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00b      	beq.n	800cfe0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2202      	movs	r2, #2
 800cfce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfd6:	f043 0204 	orr.w	r2, r3, #4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d011      	beq.n	800d010 <HAL_UART_IRQHandler+0x11c>
 800cfec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00b      	beq.n	800d010 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2204      	movs	r2, #4
 800cffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d006:	f043 0202 	orr.w	r2, r3, #2
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d017      	beq.n	800d04c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d020:	f003 0320 	and.w	r3, r3, #32
 800d024:	2b00      	cmp	r3, #0
 800d026:	d105      	bne.n	800d034 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d02c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2208      	movs	r2, #8
 800d03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d042:	f043 0208 	orr.w	r2, r3, #8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d054:	2b00      	cmp	r3, #0
 800d056:	d012      	beq.n	800d07e <HAL_UART_IRQHandler+0x18a>
 800d058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d05c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d06c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d074:	f043 0220 	orr.w	r2, r3, #32
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 8214 	beq.w	800d4b2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d08e:	f003 0320 	and.w	r3, r3, #32
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00d      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d09a:	f003 0320 	and.w	r3, r3, #32
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0c6:	2b40      	cmp	r3, #64	@ 0x40
 800d0c8:	d005      	beq.n	800d0d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d04f      	beq.n	800d176 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fee8 	bl	800deac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0e6:	2b40      	cmp	r3, #64	@ 0x40
 800d0e8:	d141      	bne.n	800d16e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0f8:	e853 3f00 	ldrex	r3, [r3]
 800d0fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3308      	adds	r3, #8
 800d112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d11a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1d9      	bne.n	800d0ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d013      	beq.n	800d166 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d142:	4a13      	ldr	r2, [pc, #76]	@ (800d190 <HAL_UART_IRQHandler+0x29c>)
 800d144:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f9 f920 	bl	8006390 <HAL_DMA_Abort_IT>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d017      	beq.n	800d186 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d160:	4610      	mov	r0, r2
 800d162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d164:	e00f      	b.n	800d186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f9b8 	bl	800d4dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d16c:	e00b      	b.n	800d186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f9b4 	bl	800d4dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d174:	e007      	b.n	800d186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f9b0 	bl	800d4dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800d184:	e195      	b.n	800d4b2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d186:	bf00      	nop
    return;
 800d188:	e193      	b.n	800d4b2 <HAL_UART_IRQHandler+0x5be>
 800d18a:	bf00      	nop
 800d18c:	04000120 	.word	0x04000120
 800d190:	0800df75 	.word	0x0800df75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d198:	2b01      	cmp	r3, #1
 800d19a:	f040 814e 	bne.w	800d43a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a2:	f003 0310 	and.w	r3, r3, #16
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 8147 	beq.w	800d43a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1b0:	f003 0310 	and.w	r3, r3, #16
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 8140 	beq.w	800d43a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2210      	movs	r2, #16
 800d1c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1cc:	2b40      	cmp	r3, #64	@ 0x40
 800d1ce:	f040 80b8 	bne.w	800d342 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f000 8167 	beq.w	800d4b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f080 815f 	bcs.w	800d4b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 0320 	and.w	r3, r3, #32
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f040 8086 	bne.w	800d320 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d220:	e853 3f00 	ldrex	r3, [r3]
 800d224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	461a      	mov	r2, r3
 800d23a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d23e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d242:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d24a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1da      	bne.n	800d214 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3308      	adds	r3, #8
 800d264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d268:	e853 3f00 	ldrex	r3, [r3]
 800d26c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d26e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d270:	f023 0301 	bic.w	r3, r3, #1
 800d274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d28a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d28e:	e841 2300 	strex	r3, r2, [r1]
 800d292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1e1      	bne.n	800d25e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3308      	adds	r3, #8
 800d2a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2a4:	e853 3f00 	ldrex	r3, [r3]
 800d2a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d2aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d2be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d2c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d2c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d2cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e3      	bne.n	800d29a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e8:	e853 3f00 	ldrex	r3, [r3]
 800d2ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d2ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2f0:	f023 0310 	bic.w	r3, r3, #16
 800d2f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d302:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d30a:	e841 2300 	strex	r3, r2, [r1]
 800d30e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e4      	bne.n	800d2e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7f8 fffa 	bl	8006314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2202      	movs	r2, #2
 800d324:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d332:	b29b      	uxth	r3, r3
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	b29b      	uxth	r3, r3
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f8d8 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d340:	e0b9      	b.n	800d4b6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d34e:	b29b      	uxth	r3, r3
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 80ab 	beq.w	800d4ba <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800d364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 80a6 	beq.w	800d4ba <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	e853 3f00 	ldrex	r3, [r3]
 800d37a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d390:	647b      	str	r3, [r7, #68]	@ 0x44
 800d392:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d398:	e841 2300 	strex	r3, r2, [r1]
 800d39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e4      	bne.n	800d36e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	f023 0301 	bic.w	r3, r3, #1
 800d3ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3308      	adds	r3, #8
 800d3c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d3c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3d0:	e841 2300 	strex	r3, r2, [r1]
 800d3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e3      	bne.n	800d3a4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2220      	movs	r2, #32
 800d3e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	e853 3f00 	ldrex	r3, [r3]
 800d3fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f023 0310 	bic.w	r3, r3, #16
 800d404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	461a      	mov	r2, r3
 800d40e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d412:	61fb      	str	r3, [r7, #28]
 800d414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	617b      	str	r3, [r7, #20]
   return(result);
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e4      	bne.n	800d3f0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2202      	movs	r2, #2
 800d42a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d42c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f85c 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d438:	e03f      	b.n	800d4ba <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d43e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00e      	beq.n	800d464 <HAL_UART_IRQHandler+0x570>
 800d446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d44a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d008      	beq.n	800d464 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d45a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 ff85 	bl	800e36c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d462:	e02d      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00e      	beq.n	800d48e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d008      	beq.n	800d48e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d01c      	beq.n	800d4be <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	4798      	blx	r3
    }
    return;
 800d48c:	e017      	b.n	800d4be <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d012      	beq.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
 800d49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00c      	beq.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fd7a 	bl	800dfa0 <UART_EndTransmit_IT>
    return;
 800d4ac:	e008      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d4ae:	bf00      	nop
 800d4b0:	e006      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800d4b2:	bf00      	nop
 800d4b4:	e004      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d4b6:	bf00      	nop
 800d4b8:	e002      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d4ba:	bf00      	nop
 800d4bc:	e000      	b.n	800d4c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800d4be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d4c0:	37e8      	adds	r7, #232	@ 0xe8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop

0800d4c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d50c:	b08a      	sub	sp, #40	@ 0x28
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	689a      	ldr	r2, [r3, #8]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	431a      	orrs	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	431a      	orrs	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b9e      	ldr	r3, [pc, #632]	@ (800d7b0 <UART_SetConfig+0x2a8>)
 800d538:	4013      	ands	r3, r2
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d540:	430b      	orrs	r3, r1
 800d542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a93      	ldr	r2, [pc, #588]	@ (800d7b4 <UART_SetConfig+0x2ac>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d004      	beq.n	800d574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d570:	4313      	orrs	r3, r2
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d584:	430a      	orrs	r2, r1
 800d586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a8a      	ldr	r2, [pc, #552]	@ (800d7b8 <UART_SetConfig+0x2b0>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d126      	bne.n	800d5e0 <UART_SetConfig+0xd8>
 800d592:	4b8a      	ldr	r3, [pc, #552]	@ (800d7bc <UART_SetConfig+0x2b4>)
 800d594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d598:	f003 0303 	and.w	r3, r3, #3
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d81b      	bhi.n	800d5d8 <UART_SetConfig+0xd0>
 800d5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a8 <UART_SetConfig+0xa0>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d5b9 	.word	0x0800d5b9
 800d5ac:	0800d5c9 	.word	0x0800d5c9
 800d5b0:	0800d5c1 	.word	0x0800d5c1
 800d5b4:	0800d5d1 	.word	0x0800d5d1
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5be:	e0ab      	b.n	800d718 <UART_SetConfig+0x210>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5c6:	e0a7      	b.n	800d718 <UART_SetConfig+0x210>
 800d5c8:	2304      	movs	r3, #4
 800d5ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5ce:	e0a3      	b.n	800d718 <UART_SetConfig+0x210>
 800d5d0:	2308      	movs	r3, #8
 800d5d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5d6:	e09f      	b.n	800d718 <UART_SetConfig+0x210>
 800d5d8:	2310      	movs	r3, #16
 800d5da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5de:	e09b      	b.n	800d718 <UART_SetConfig+0x210>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a76      	ldr	r2, [pc, #472]	@ (800d7c0 <UART_SetConfig+0x2b8>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d138      	bne.n	800d65c <UART_SetConfig+0x154>
 800d5ea:	4b74      	ldr	r3, [pc, #464]	@ (800d7bc <UART_SetConfig+0x2b4>)
 800d5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5f0:	f003 030c 	and.w	r3, r3, #12
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d82d      	bhi.n	800d654 <UART_SetConfig+0x14c>
 800d5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d600 <UART_SetConfig+0xf8>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d635 	.word	0x0800d635
 800d604:	0800d655 	.word	0x0800d655
 800d608:	0800d655 	.word	0x0800d655
 800d60c:	0800d655 	.word	0x0800d655
 800d610:	0800d645 	.word	0x0800d645
 800d614:	0800d655 	.word	0x0800d655
 800d618:	0800d655 	.word	0x0800d655
 800d61c:	0800d655 	.word	0x0800d655
 800d620:	0800d63d 	.word	0x0800d63d
 800d624:	0800d655 	.word	0x0800d655
 800d628:	0800d655 	.word	0x0800d655
 800d62c:	0800d655 	.word	0x0800d655
 800d630:	0800d64d 	.word	0x0800d64d
 800d634:	2300      	movs	r3, #0
 800d636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d63a:	e06d      	b.n	800d718 <UART_SetConfig+0x210>
 800d63c:	2302      	movs	r3, #2
 800d63e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d642:	e069      	b.n	800d718 <UART_SetConfig+0x210>
 800d644:	2304      	movs	r3, #4
 800d646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d64a:	e065      	b.n	800d718 <UART_SetConfig+0x210>
 800d64c:	2308      	movs	r3, #8
 800d64e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d652:	e061      	b.n	800d718 <UART_SetConfig+0x210>
 800d654:	2310      	movs	r3, #16
 800d656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d65a:	e05d      	b.n	800d718 <UART_SetConfig+0x210>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a58      	ldr	r2, [pc, #352]	@ (800d7c4 <UART_SetConfig+0x2bc>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d125      	bne.n	800d6b2 <UART_SetConfig+0x1aa>
 800d666:	4b55      	ldr	r3, [pc, #340]	@ (800d7bc <UART_SetConfig+0x2b4>)
 800d668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d66c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d670:	2b30      	cmp	r3, #48	@ 0x30
 800d672:	d016      	beq.n	800d6a2 <UART_SetConfig+0x19a>
 800d674:	2b30      	cmp	r3, #48	@ 0x30
 800d676:	d818      	bhi.n	800d6aa <UART_SetConfig+0x1a2>
 800d678:	2b20      	cmp	r3, #32
 800d67a:	d00a      	beq.n	800d692 <UART_SetConfig+0x18a>
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	d814      	bhi.n	800d6aa <UART_SetConfig+0x1a2>
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <UART_SetConfig+0x182>
 800d684:	2b10      	cmp	r3, #16
 800d686:	d008      	beq.n	800d69a <UART_SetConfig+0x192>
 800d688:	e00f      	b.n	800d6aa <UART_SetConfig+0x1a2>
 800d68a:	2300      	movs	r3, #0
 800d68c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d690:	e042      	b.n	800d718 <UART_SetConfig+0x210>
 800d692:	2302      	movs	r3, #2
 800d694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d698:	e03e      	b.n	800d718 <UART_SetConfig+0x210>
 800d69a:	2304      	movs	r3, #4
 800d69c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d6a0:	e03a      	b.n	800d718 <UART_SetConfig+0x210>
 800d6a2:	2308      	movs	r3, #8
 800d6a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d6a8:	e036      	b.n	800d718 <UART_SetConfig+0x210>
 800d6aa:	2310      	movs	r3, #16
 800d6ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d6b0:	e032      	b.n	800d718 <UART_SetConfig+0x210>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a3f      	ldr	r2, [pc, #252]	@ (800d7b4 <UART_SetConfig+0x2ac>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d12a      	bne.n	800d712 <UART_SetConfig+0x20a>
 800d6bc:	4b3f      	ldr	r3, [pc, #252]	@ (800d7bc <UART_SetConfig+0x2b4>)
 800d6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d6c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d6ca:	d01a      	beq.n	800d702 <UART_SetConfig+0x1fa>
 800d6cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d6d0:	d81b      	bhi.n	800d70a <UART_SetConfig+0x202>
 800d6d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6d6:	d00c      	beq.n	800d6f2 <UART_SetConfig+0x1ea>
 800d6d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6dc:	d815      	bhi.n	800d70a <UART_SetConfig+0x202>
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <UART_SetConfig+0x1e2>
 800d6e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6e6:	d008      	beq.n	800d6fa <UART_SetConfig+0x1f2>
 800d6e8:	e00f      	b.n	800d70a <UART_SetConfig+0x202>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d6f0:	e012      	b.n	800d718 <UART_SetConfig+0x210>
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d6f8:	e00e      	b.n	800d718 <UART_SetConfig+0x210>
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d700:	e00a      	b.n	800d718 <UART_SetConfig+0x210>
 800d702:	2308      	movs	r3, #8
 800d704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d708:	e006      	b.n	800d718 <UART_SetConfig+0x210>
 800d70a:	2310      	movs	r3, #16
 800d70c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d710:	e002      	b.n	800d718 <UART_SetConfig+0x210>
 800d712:	2310      	movs	r3, #16
 800d714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a25      	ldr	r2, [pc, #148]	@ (800d7b4 <UART_SetConfig+0x2ac>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	f040 808a 	bne.w	800d838 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d728:	2b08      	cmp	r3, #8
 800d72a:	d824      	bhi.n	800d776 <UART_SetConfig+0x26e>
 800d72c:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <UART_SetConfig+0x22c>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d759 	.word	0x0800d759
 800d738:	0800d777 	.word	0x0800d777
 800d73c:	0800d761 	.word	0x0800d761
 800d740:	0800d777 	.word	0x0800d777
 800d744:	0800d767 	.word	0x0800d767
 800d748:	0800d777 	.word	0x0800d777
 800d74c:	0800d777 	.word	0x0800d777
 800d750:	0800d777 	.word	0x0800d777
 800d754:	0800d76f 	.word	0x0800d76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d758:	f7fa fe4e 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800d75c:	61f8      	str	r0, [r7, #28]
        break;
 800d75e:	e010      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d760:	4b19      	ldr	r3, [pc, #100]	@ (800d7c8 <UART_SetConfig+0x2c0>)
 800d762:	61fb      	str	r3, [r7, #28]
        break;
 800d764:	e00d      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d766:	f7fa fdaf 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800d76a:	61f8      	str	r0, [r7, #28]
        break;
 800d76c:	e009      	b.n	800d782 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d772:	61fb      	str	r3, [r7, #28]
        break;
 800d774:	e005      	b.n	800d782 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 8109 	beq.w	800d99c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685a      	ldr	r2, [r3, #4]
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	69fa      	ldr	r2, [r7, #28]
 800d796:	429a      	cmp	r2, r3
 800d798:	d305      	bcc.n	800d7a6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d7a0:	69fa      	ldr	r2, [r7, #28]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d912      	bls.n	800d7cc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d7ac:	e0f6      	b.n	800d99c <UART_SetConfig+0x494>
 800d7ae:	bf00      	nop
 800d7b0:	efff69f3 	.word	0xefff69f3
 800d7b4:	40008000 	.word	0x40008000
 800d7b8:	40013800 	.word	0x40013800
 800d7bc:	40021000 	.word	0x40021000
 800d7c0:	40004400 	.word	0x40004400
 800d7c4:	40004800 	.word	0x40004800
 800d7c8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	4615      	mov	r5, r2
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	022b      	lsls	r3, r5, #8
 800d7de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d7e2:	0222      	lsls	r2, r4, #8
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	6849      	ldr	r1, [r1, #4]
 800d7e8:	0849      	lsrs	r1, r1, #1
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	4688      	mov	r8, r1
 800d7ee:	4681      	mov	r9, r0
 800d7f0:	eb12 0a08 	adds.w	sl, r2, r8
 800d7f4:	eb43 0b09 	adc.w	fp, r3, r9
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	607a      	str	r2, [r7, #4]
 800d802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d806:	4650      	mov	r0, sl
 800d808:	4659      	mov	r1, fp
 800d80a:	f7f3 f92f 	bl	8000a6c <__aeabi_uldivmod>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4613      	mov	r3, r2
 800d814:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d81c:	d308      	bcc.n	800d830 <UART_SetConfig+0x328>
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d824:	d204      	bcs.n	800d830 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69ba      	ldr	r2, [r7, #24]
 800d82c:	60da      	str	r2, [r3, #12]
 800d82e:	e0b5      	b.n	800d99c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d836:	e0b1      	b.n	800d99c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d840:	d15d      	bne.n	800d8fe <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800d842:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d846:	2b08      	cmp	r3, #8
 800d848:	d827      	bhi.n	800d89a <UART_SetConfig+0x392>
 800d84a:	a201      	add	r2, pc, #4	@ (adr r2, 800d850 <UART_SetConfig+0x348>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d875 	.word	0x0800d875
 800d854:	0800d87d 	.word	0x0800d87d
 800d858:	0800d885 	.word	0x0800d885
 800d85c:	0800d89b 	.word	0x0800d89b
 800d860:	0800d88b 	.word	0x0800d88b
 800d864:	0800d89b 	.word	0x0800d89b
 800d868:	0800d89b 	.word	0x0800d89b
 800d86c:	0800d89b 	.word	0x0800d89b
 800d870:	0800d893 	.word	0x0800d893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d874:	f7fa fdc0 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800d878:	61f8      	str	r0, [r7, #28]
        break;
 800d87a:	e014      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d87c:	f7fa fdd2 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 800d880:	61f8      	str	r0, [r7, #28]
        break;
 800d882:	e010      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d884:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b8 <UART_SetConfig+0x4b0>)
 800d886:	61fb      	str	r3, [r7, #28]
        break;
 800d888:	e00d      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d88a:	f7fa fd1d 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800d88e:	61f8      	str	r0, [r7, #28]
        break;
 800d890:	e009      	b.n	800d8a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d896:	61fb      	str	r3, [r7, #28]
        break;
 800d898:	e005      	b.n	800d8a6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800d89a:	2300      	movs	r3, #0
 800d89c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d8a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d077      	beq.n	800d99c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	005a      	lsls	r2, r3, #1
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	085b      	lsrs	r3, r3, #1
 800d8b6:	441a      	add	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	2b0f      	cmp	r3, #15
 800d8c6:	d916      	bls.n	800d8f6 <UART_SetConfig+0x3ee>
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8ce:	d212      	bcs.n	800d8f6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	f023 030f 	bic.w	r3, r3, #15
 800d8d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f003 0307 	and.w	r3, r3, #7
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	8afb      	ldrh	r3, [r7, #22]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	8afa      	ldrh	r2, [r7, #22]
 800d8f2:	60da      	str	r2, [r3, #12]
 800d8f4:	e052      	b.n	800d99c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d8fc:	e04e      	b.n	800d99c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d902:	2b08      	cmp	r3, #8
 800d904:	d827      	bhi.n	800d956 <UART_SetConfig+0x44e>
 800d906:	a201      	add	r2, pc, #4	@ (adr r2, 800d90c <UART_SetConfig+0x404>)
 800d908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	0800d957 	.word	0x0800d957
 800d91c:	0800d947 	.word	0x0800d947
 800d920:	0800d957 	.word	0x0800d957
 800d924:	0800d957 	.word	0x0800d957
 800d928:	0800d957 	.word	0x0800d957
 800d92c:	0800d94f 	.word	0x0800d94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d930:	f7fa fd62 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800d934:	61f8      	str	r0, [r7, #28]
        break;
 800d936:	e014      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d938:	f7fa fd74 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 800d93c:	61f8      	str	r0, [r7, #28]
        break;
 800d93e:	e010      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d940:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b8 <UART_SetConfig+0x4b0>)
 800d942:	61fb      	str	r3, [r7, #28]
        break;
 800d944:	e00d      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d946:	f7fa fcbf 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 800d94a:	61f8      	str	r0, [r7, #28]
        break;
 800d94c:	e009      	b.n	800d962 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d952:	61fb      	str	r3, [r7, #28]
        break;
 800d954:	e005      	b.n	800d962 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d960:	bf00      	nop
    }

    if (pclk != 0U)
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d019      	beq.n	800d99c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	085a      	lsrs	r2, r3, #1
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	441a      	add	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	2b0f      	cmp	r3, #15
 800d980:	d909      	bls.n	800d996 <UART_SetConfig+0x48e>
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d988:	d205      	bcs.n	800d996 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	60da      	str	r2, [r3, #12]
 800d994:	e002      	b.n	800d99c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d9a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3728      	adds	r7, #40	@ 0x28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9b6:	bf00      	nop
 800d9b8:	00f42400 	.word	0x00f42400

0800d9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c8:	f003 0308 	and.w	r3, r3, #8
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00a      	beq.n	800d9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da0c:	f003 0302 	and.w	r3, r3, #2
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00a      	beq.n	800da2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	430a      	orrs	r2, r1
 800da28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2e:	f003 0304 	and.w	r3, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00a      	beq.n	800da4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	430a      	orrs	r2, r1
 800da4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da50:	f003 0310 	and.w	r3, r3, #16
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00a      	beq.n	800da6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da72:	f003 0320 	and.w	r3, r3, #32
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	430a      	orrs	r2, r1
 800da8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01a      	beq.n	800dad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	430a      	orrs	r2, r1
 800dab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800daba:	d10a      	bne.n	800dad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	430a      	orrs	r2, r1
 800dad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00a      	beq.n	800daf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	430a      	orrs	r2, r1
 800daf2:	605a      	str	r2, [r3, #4]
  }
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b098      	sub	sp, #96	@ 0x60
 800db04:	af02      	add	r7, sp, #8
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db10:	f7f8 f876 	bl	8005c00 <HAL_GetTick>
 800db14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 0308 	and.w	r3, r3, #8
 800db20:	2b08      	cmp	r3, #8
 800db22:	d12e      	bne.n	800db82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db2c:	2200      	movs	r2, #0
 800db2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f88c 	bl	800dc50 <UART_WaitOnFlagUntilTimeout>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d021      	beq.n	800db82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db52:	653b      	str	r3, [r7, #80]	@ 0x50
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	461a      	mov	r2, r3
 800db5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800db5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db64:	e841 2300 	strex	r3, r2, [r1]
 800db68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e6      	bne.n	800db3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2220      	movs	r2, #32
 800db74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db7e:	2303      	movs	r3, #3
 800db80:	e062      	b.n	800dc48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d149      	bne.n	800dc24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db98:	2200      	movs	r2, #0
 800db9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f856 	bl	800dc50 <UART_WaitOnFlagUntilTimeout>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d03c      	beq.n	800dc24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	e853 3f00 	ldrex	r3, [r3]
 800dbb6:	623b      	str	r3, [r7, #32]
   return(result);
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbc8:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbd0:	e841 2300 	strex	r3, r2, [r1]
 800dbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1e6      	bne.n	800dbaa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	e853 3f00 	ldrex	r3, [r3]
 800dbea:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f023 0301 	bic.w	r3, r3, #1
 800dbf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3308      	adds	r3, #8
 800dbfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbfc:	61fa      	str	r2, [r7, #28]
 800dbfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc00:	69b9      	ldr	r1, [r7, #24]
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	e841 2300 	strex	r3, r2, [r1]
 800dc08:	617b      	str	r3, [r7, #20]
   return(result);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1e5      	bne.n	800dbdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2220      	movs	r2, #32
 800dc14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc20:	2303      	movs	r3, #3
 800dc22:	e011      	b.n	800dc48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2220      	movs	r2, #32
 800dc28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3758      	adds	r7, #88	@ 0x58
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	603b      	str	r3, [r7, #0]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc60:	e049      	b.n	800dcf6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc68:	d045      	beq.n	800dcf6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc6a:	f7f7 ffc9 	bl	8005c00 <HAL_GetTick>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	1ad3      	subs	r3, r2, r3
 800dc74:	69ba      	ldr	r2, [r7, #24]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d302      	bcc.n	800dc80 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc80:	2303      	movs	r3, #3
 800dc82:	e048      	b.n	800dd16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 0304 	and.w	r3, r3, #4
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d031      	beq.n	800dcf6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	f003 0308 	and.w	r3, r3, #8
 800dc9c:	2b08      	cmp	r3, #8
 800dc9e:	d110      	bne.n	800dcc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2208      	movs	r2, #8
 800dca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f000 f8ff 	bl	800deac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2208      	movs	r2, #8
 800dcb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e029      	b.n	800dd16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcd0:	d111      	bne.n	800dcf6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 f8e5 	bl	800deac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2220      	movs	r2, #32
 800dce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e00f      	b.n	800dd16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	69da      	ldr	r2, [r3, #28]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	4013      	ands	r3, r2
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	bf0c      	ite	eq
 800dd06:	2301      	moveq	r3, #1
 800dd08:	2300      	movne	r3, #0
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d0a6      	beq.n	800dc62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b097      	sub	sp, #92	@ 0x5c
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	88fa      	ldrh	r2, [r7, #6]
 800dd38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	88fa      	ldrh	r2, [r7, #6]
 800dd40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd52:	d10e      	bne.n	800dd72 <UART_Start_Receive_IT+0x52>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d105      	bne.n	800dd68 <UART_Start_Receive_IT+0x48>
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dd62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd66:	e02d      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	22ff      	movs	r2, #255	@ 0xff
 800dd6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd70:	e028      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10d      	bne.n	800dd96 <UART_Start_Receive_IT+0x76>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d104      	bne.n	800dd8c <UART_Start_Receive_IT+0x6c>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	22ff      	movs	r2, #255	@ 0xff
 800dd86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd8a:	e01b      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	227f      	movs	r2, #127	@ 0x7f
 800dd90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd94:	e016      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd9e:	d10d      	bne.n	800ddbc <UART_Start_Receive_IT+0x9c>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d104      	bne.n	800ddb2 <UART_Start_Receive_IT+0x92>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	227f      	movs	r2, #127	@ 0x7f
 800ddac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ddb0:	e008      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	223f      	movs	r2, #63	@ 0x3f
 800ddb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ddba:	e003      	b.n	800ddc4 <UART_Start_Receive_IT+0xa4>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2222      	movs	r2, #34	@ 0x22
 800ddd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	3308      	adds	r3, #8
 800ddda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddde:	e853 3f00 	ldrex	r3, [r3]
 800dde2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde6:	f043 0301 	orr.w	r3, r3, #1
 800ddea:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3308      	adds	r3, #8
 800ddf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ddf4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ddf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ddfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddfc:	e841 2300 	strex	r3, r2, [r1]
 800de00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800de02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1e5      	bne.n	800ddd4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de10:	d107      	bne.n	800de22 <UART_Start_Receive_IT+0x102>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d103      	bne.n	800de22 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	4a21      	ldr	r2, [pc, #132]	@ (800dea4 <UART_Start_Receive_IT+0x184>)
 800de1e:	669a      	str	r2, [r3, #104]	@ 0x68
 800de20:	e002      	b.n	800de28 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4a20      	ldr	r2, [pc, #128]	@ (800dea8 <UART_Start_Receive_IT+0x188>)
 800de26:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d019      	beq.n	800de64 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de38:	e853 3f00 	ldrex	r3, [r3]
 800de3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de40:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800de44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	461a      	mov	r2, r3
 800de4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de50:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de56:	e841 2300 	strex	r3, r2, [r1]
 800de5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800de5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1e6      	bne.n	800de30 <UART_Start_Receive_IT+0x110>
 800de62:	e018      	b.n	800de96 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	613b      	str	r3, [r7, #16]
   return(result);
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	f043 0320 	orr.w	r3, r3, #32
 800de78:	653b      	str	r3, [r7, #80]	@ 0x50
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de82:	623b      	str	r3, [r7, #32]
 800de84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de86:	69f9      	ldr	r1, [r7, #28]
 800de88:	6a3a      	ldr	r2, [r7, #32]
 800de8a:	e841 2300 	strex	r3, r2, [r1]
 800de8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e6      	bne.n	800de64 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	375c      	adds	r7, #92	@ 0x5c
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	0800e1b1 	.word	0x0800e1b1
 800dea8:	0800dff5 	.word	0x0800dff5

0800deac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800deac:	b480      	push	{r7}
 800deae:	b095      	sub	sp, #84	@ 0x54
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ded4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ded8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800deda:	e841 2300 	strex	r3, r2, [r1]
 800dede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1e6      	bne.n	800deb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3308      	adds	r3, #8
 800deec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deee:	6a3b      	ldr	r3, [r7, #32]
 800def0:	e853 3f00 	ldrex	r3, [r3]
 800def4:	61fb      	str	r3, [r7, #28]
   return(result);
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	f023 0301 	bic.w	r3, r3, #1
 800defc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	3308      	adds	r3, #8
 800df04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df0e:	e841 2300 	strex	r3, r2, [r1]
 800df12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1e5      	bne.n	800dee6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d118      	bne.n	800df54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	e853 3f00 	ldrex	r3, [r3]
 800df2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f023 0310 	bic.w	r3, r3, #16
 800df36:	647b      	str	r3, [r7, #68]	@ 0x44
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df40:	61bb      	str	r3, [r7, #24]
 800df42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6979      	ldr	r1, [r7, #20]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	613b      	str	r3, [r7, #16]
   return(result);
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e6      	bne.n	800df22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2220      	movs	r2, #32
 800df58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800df68:	bf00      	nop
 800df6a:	3754      	adds	r7, #84	@ 0x54
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f7ff faa2 	bl	800d4dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfbc:	61fb      	str	r3, [r7, #28]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	61bb      	str	r3, [r7, #24]
 800dfc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfca:	6979      	ldr	r1, [r7, #20]
 800dfcc:	69ba      	ldr	r2, [r7, #24]
 800dfce:	e841 2300 	strex	r3, r2, [r1]
 800dfd2:	613b      	str	r3, [r7, #16]
   return(result);
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1e6      	bne.n	800dfa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff fa6e 	bl	800d4c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfec:	bf00      	nop
 800dfee:	3720      	adds	r7, #32
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b09c      	sub	sp, #112	@ 0x70
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e002:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e00c:	2b22      	cmp	r3, #34	@ 0x22
 800e00e:	f040 80be 	bne.w	800e18e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e018:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e01c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e020:	b2d9      	uxtb	r1, r3
 800e022:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e026:	b2da      	uxtb	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e02c:	400a      	ands	r2, r1
 800e02e:	b2d2      	uxtb	r2, r2
 800e030:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e042:	b29b      	uxth	r3, r3
 800e044:	3b01      	subs	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e054:	b29b      	uxth	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	f040 80a3 	bne.w	800e1a2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e064:	e853 3f00 	ldrex	r3, [r3]
 800e068:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e06a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e06c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e070:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e07a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e07c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e080:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e082:	e841 2300 	strex	r3, r2, [r1]
 800e086:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1e6      	bne.n	800e05c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3308      	adds	r3, #8
 800e094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e098:	e853 3f00 	ldrex	r3, [r3]
 800e09c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0a0:	f023 0301 	bic.w	r3, r3, #1
 800e0a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e0ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800e0b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e0b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0b6:	e841 2300 	strex	r3, r2, [r1]
 800e0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1e5      	bne.n	800e08e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2220      	movs	r2, #32
 800e0c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a34      	ldr	r2, [pc, #208]	@ (800e1ac <UART_RxISR_8BIT+0x1b8>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d01f      	beq.n	800e120 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d018      	beq.n	800e120 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f6:	e853 3f00 	ldrex	r3, [r3]
 800e0fa:	623b      	str	r3, [r7, #32]
   return(result);
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e102:	663b      	str	r3, [r7, #96]	@ 0x60
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e10c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e10e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e114:	e841 2300 	strex	r3, r2, [r1]
 800e118:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1e6      	bne.n	800e0ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e124:	2b01      	cmp	r3, #1
 800e126:	d12e      	bne.n	800e186 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	e853 3f00 	ldrex	r3, [r3]
 800e13a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f023 0310 	bic.w	r3, r3, #16
 800e142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	461a      	mov	r2, r3
 800e14a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e14c:	61fb      	str	r3, [r7, #28]
 800e14e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e150:	69b9      	ldr	r1, [r7, #24]
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	e841 2300 	strex	r3, r2, [r1]
 800e158:	617b      	str	r3, [r7, #20]
   return(result);
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1e6      	bne.n	800e12e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	f003 0310 	and.w	r3, r3, #16
 800e16a:	2b10      	cmp	r3, #16
 800e16c:	d103      	bne.n	800e176 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2210      	movs	r2, #16
 800e174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e17c:	4619      	mov	r1, r3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff f9b6 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e184:	e00d      	b.n	800e1a2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7f3 fbce 	bl	8001928 <HAL_UART_RxCpltCallback>
}
 800e18c:	e009      	b.n	800e1a2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	8b1b      	ldrh	r3, [r3, #24]
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f042 0208 	orr.w	r2, r2, #8
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	831a      	strh	r2, [r3, #24]
}
 800e1a2:	bf00      	nop
 800e1a4:	3770      	adds	r7, #112	@ 0x70
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	40008000 	.word	0x40008000

0800e1b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b09c      	sub	sp, #112	@ 0x70
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1c8:	2b22      	cmp	r3, #34	@ 0x22
 800e1ca:	f040 80be 	bne.w	800e34a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e1d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e1de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e1e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1f2:	1c9a      	adds	r2, r3, #2
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	3b01      	subs	r3, #1
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e210:	b29b      	uxth	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	f040 80a3 	bne.w	800e35e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e22c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e236:	657b      	str	r3, [r7, #84]	@ 0x54
 800e238:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e23c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3308      	adds	r3, #8
 800e250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e254:	e853 3f00 	ldrex	r3, [r3]
 800e258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	f023 0301 	bic.w	r3, r3, #1
 800e260:	663b      	str	r3, [r7, #96]	@ 0x60
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3308      	adds	r3, #8
 800e268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e26a:	643a      	str	r2, [r7, #64]	@ 0x40
 800e26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e5      	bne.n	800e24a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2220      	movs	r2, #32
 800e282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a34      	ldr	r2, [pc, #208]	@ (800e368 <UART_RxISR_16BIT+0x1b8>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d01f      	beq.n	800e2dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	685b      	ldr	r3, [r3, #4]
 800e2a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d018      	beq.n	800e2dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	e853 3f00 	ldrex	r3, [r3]
 800e2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2d0:	e841 2300 	strex	r3, r2, [r1]
 800e2d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1e6      	bne.n	800e2aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d12e      	bne.n	800e342 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	e853 3f00 	ldrex	r3, [r3]
 800e2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	f023 0310 	bic.w	r3, r3, #16
 800e2fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	461a      	mov	r2, r3
 800e306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e308:	61bb      	str	r3, [r7, #24]
 800e30a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30c:	6979      	ldr	r1, [r7, #20]
 800e30e:	69ba      	ldr	r2, [r7, #24]
 800e310:	e841 2300 	strex	r3, r2, [r1]
 800e314:	613b      	str	r3, [r7, #16]
   return(result);
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1e6      	bne.n	800e2ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	69db      	ldr	r3, [r3, #28]
 800e322:	f003 0310 	and.w	r3, r3, #16
 800e326:	2b10      	cmp	r3, #16
 800e328:	d103      	bne.n	800e332 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2210      	movs	r2, #16
 800e330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff f8d8 	bl	800d4f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e340:	e00d      	b.n	800e35e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7f3 faf0 	bl	8001928 <HAL_UART_RxCpltCallback>
}
 800e348:	e009      	b.n	800e35e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	8b1b      	ldrh	r3, [r3, #24]
 800e350:	b29a      	uxth	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f042 0208 	orr.w	r2, r2, #8
 800e35a:	b292      	uxth	r2, r2
 800e35c:	831a      	strh	r2, [r3, #24]
}
 800e35e:	bf00      	nop
 800e360:	3770      	adds	r7, #112	@ 0x70
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	40008000 	.word	0x40008000

0800e36c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e380:	b084      	sub	sp, #16
 800e382:	b480      	push	{r7}
 800e384:	b085      	sub	sp, #20
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	f107 001c 	add.w	r0, r7, #28
 800e38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800e39e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800e3a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e3a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e3aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e3ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800e3be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	431a      	orrs	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	b004      	add	sp, #16
 800e3d8:	4770      	bx	lr

0800e3da <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e3da:	b480      	push	{r7}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2203      	movs	r2, #3
 800e422:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e424:	2002      	movs	r0, #2
 800e426:	f7f3 fa73 	bl	8001910 <HAL_Delay>

  return HAL_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f003 0303 	and.w	r3, r3, #3
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e46e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e474:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e47a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	4313      	orrs	r3, r2
 800e480:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e48a:	f023 030f 	bic.w	r3, r3, #15
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	431a      	orrs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	b2db      	uxtb	r3, r3
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	370c      	adds	r7, #12
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr

0800e4be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e4be:	b480      	push	{r7}
 800e4c0:	b085      	sub	sp, #20
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3314      	adds	r3, #20
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e50a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e510:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e516:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e522:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	431a      	orrs	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e52e:	2300      	movs	r3, #0

}
 800e530:	4618      	mov	r0, r3
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b088      	sub	sp, #32
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e54a:	2310      	movs	r3, #16
 800e54c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e54e:	2340      	movs	r3, #64	@ 0x40
 800e550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e55a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e55c:	f107 0308 	add.w	r3, r7, #8
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ff74 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e56c:	2110      	movs	r1, #16
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f9d6 	bl	800e920 <SDMMC_GetCmdResp1>
 800e574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e576:	69fb      	ldr	r3, [r7, #28]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e58e:	2311      	movs	r3, #17
 800e590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e592:	2340      	movs	r3, #64	@ 0x40
 800e594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e596:	2300      	movs	r3, #0
 800e598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e59a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e59e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5a0:	f107 0308 	add.w	r3, r7, #8
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff ff52 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5b0:	2111      	movs	r1, #17
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f9b4 	bl	800e920 <SDMMC_GetCmdResp1>
 800e5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ba:	69fb      	ldr	r3, [r7, #28]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3720      	adds	r7, #32
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e5d2:	2312      	movs	r3, #18
 800e5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5d6:	2340      	movs	r3, #64	@ 0x40
 800e5d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5e4:	f107 0308 	add.w	r3, r7, #8
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff ff30 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e5f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5f4:	2112      	movs	r1, #18
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f992 	bl	800e920 <SDMMC_GetCmdResp1>
 800e5fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5fe:	69fb      	ldr	r3, [r7, #28]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3720      	adds	r7, #32
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e616:	2318      	movs	r3, #24
 800e618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e61a:	2340      	movs	r3, #64	@ 0x40
 800e61c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e626:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e628:	f107 0308 	add.w	r3, r7, #8
 800e62c:	4619      	mov	r1, r3
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff ff0e 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e634:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e638:	2118      	movs	r1, #24
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f970 	bl	800e920 <SDMMC_GetCmdResp1>
 800e640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e642:	69fb      	ldr	r3, [r7, #28]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3720      	adds	r7, #32
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b088      	sub	sp, #32
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e65a:	2319      	movs	r3, #25
 800e65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e65e:	2340      	movs	r3, #64	@ 0x40
 800e660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e66a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e66c:	f107 0308 	add.w	r3, r7, #8
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7ff feec 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e67c:	2119      	movs	r1, #25
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f94e 	bl	800e920 <SDMMC_GetCmdResp1>
 800e684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e686:	69fb      	ldr	r3, [r7, #28]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e69c:	230c      	movs	r3, #12
 800e69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6a0:	2340      	movs	r3, #64	@ 0x40
 800e6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6ac:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ae:	f107 0308 	add.w	r3, r7, #8
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fecb 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e6ba:	4a05      	ldr	r2, [pc, #20]	@ (800e6d0 <SDMMC_CmdStopTransfer+0x40>)
 800e6bc:	210c      	movs	r1, #12
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f92e 	bl	800e920 <SDMMC_GetCmdResp1>
 800e6c4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3720      	adds	r7, #32
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	05f5e100 	.word	0x05f5e100

0800e6d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08a      	sub	sp, #40	@ 0x28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e6e4:	2307      	movs	r3, #7
 800e6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6e8:	2340      	movs	r3, #64	@ 0x40
 800e6ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6f6:	f107 0310 	add.w	r3, r7, #16
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff fea7 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e702:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e706:	2107      	movs	r1, #7
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f000 f909 	bl	800e920 <SDMMC_GetCmdResp1>
 800e70e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e712:	4618      	mov	r0, r3
 800e714:	3728      	adds	r7, #40	@ 0x28
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b088      	sub	sp, #32
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e722:	2300      	movs	r3, #0
 800e724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e726:	2300      	movs	r3, #0
 800e728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e72a:	2300      	movs	r3, #0
 800e72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e72e:	2300      	movs	r3, #0
 800e730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e738:	f107 0308 	add.w	r3, r7, #8
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7ff fe86 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 fb23 	bl	800ed90 <SDMMC_GetCmdError>
 800e74a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e74c:	69fb      	ldr	r3, [r7, #28]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e75e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e764:	2308      	movs	r3, #8
 800e766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e768:	2340      	movs	r3, #64	@ 0x40
 800e76a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e76c:	2300      	movs	r3, #0
 800e76e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e776:	f107 0308 	add.w	r3, r7, #8
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff fe67 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fab6 	bl	800ecf4 <SDMMC_GetCmdResp7>
 800e788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e78a:	69fb      	ldr	r3, [r7, #28]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3720      	adds	r7, #32
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e7a2:	2337      	movs	r3, #55	@ 0x37
 800e7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7a6:	2340      	movs	r3, #64	@ 0x40
 800e7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7b4:	f107 0308 	add.w	r3, r7, #8
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7ff fe48 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e7c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7c4:	2137      	movs	r1, #55	@ 0x37
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f8aa 	bl	800e920 <SDMMC_GetCmdResp1>
 800e7cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7ce:	69fb      	ldr	r3, [r7, #28]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3720      	adds	r7, #32
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e7e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7ec:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e7ee:	2329      	movs	r3, #41	@ 0x29
 800e7f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7f2:	2340      	movs	r3, #64	@ 0x40
 800e7f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e800:	f107 0308 	add.w	r3, r7, #8
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff fe22 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f9bd 	bl	800eb8c <SDMMC_GetCmdResp3>
 800e812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e814:	69fb      	ldr	r3, [r7, #28]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3720      	adds	r7, #32
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b088      	sub	sp, #32
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e82a:	2302      	movs	r3, #2
 800e82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e82e:	23c0      	movs	r3, #192	@ 0xc0
 800e830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e832:	2300      	movs	r3, #0
 800e834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e83a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e83c:	f107 0308 	add.w	r3, r7, #8
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fe04 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f957 	bl	800eafc <SDMMC_GetCmdResp2>
 800e84e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e850:	69fb      	ldr	r3, [r7, #28]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b088      	sub	sp, #32
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e868:	2309      	movs	r3, #9
 800e86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e86c:	23c0      	movs	r3, #192	@ 0xc0
 800e86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e87a:	f107 0308 	add.w	r3, r7, #8
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7ff fde5 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f938 	bl	800eafc <SDMMC_GetCmdResp2>
 800e88c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e88e:	69fb      	ldr	r3, [r7, #28]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3720      	adds	r7, #32
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8aa:	2340      	movs	r3, #64	@ 0x40
 800e8ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8b8:	f107 0308 	add.w	r3, r7, #8
 800e8bc:	4619      	mov	r1, r3
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7ff fdc6 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	2103      	movs	r1, #3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f99d 	bl	800ec08 <SDMMC_GetCmdResp6>
 800e8ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d0:	69fb      	ldr	r3, [r7, #28]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3720      	adds	r7, #32
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b088      	sub	sp, #32
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e8e8:	230d      	movs	r3, #13
 800e8ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8ec:	2340      	movs	r3, #64	@ 0x40
 800e8ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8fa:	f107 0308 	add.w	r3, r7, #8
 800e8fe:	4619      	mov	r1, r3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7ff fda5 	bl	800e450 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e90a:	210d      	movs	r1, #13
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 f807 	bl	800e920 <SDMMC_GetCmdResp1>
 800e912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e914:	69fb      	ldr	r3, [r7, #28]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	460b      	mov	r3, r1
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e92e:	4b70      	ldr	r3, [pc, #448]	@ (800eaf0 <SDMMC_GetCmdResp1+0x1d0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a70      	ldr	r2, [pc, #448]	@ (800eaf4 <SDMMC_GetCmdResp1+0x1d4>)
 800e934:	fba2 2303 	umull	r2, r3, r2, r3
 800e938:	0a5a      	lsrs	r2, r3, #9
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	fb02 f303 	mul.w	r3, r2, r3
 800e940:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	1e5a      	subs	r2, r3, #1
 800e946:	61fa      	str	r2, [r7, #28]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d102      	bne.n	800e952 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e94c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e950:	e0c9      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e956:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0ef      	beq.n	800e942 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1ea      	bne.n	800e942 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e970:	f003 0304 	and.w	r3, r3, #4
 800e974:	2b00      	cmp	r3, #0
 800e976:	d004      	beq.n	800e982 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2204      	movs	r2, #4
 800e97c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e97e:	2304      	movs	r3, #4
 800e980:	e0b1      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e986:	f003 0301 	and.w	r3, r3, #1
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d004      	beq.n	800e998 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2201      	movs	r2, #1
 800e992:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e994:	2301      	movs	r3, #1
 800e996:	e0a6      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	22c5      	movs	r2, #197	@ 0xc5
 800e99c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7ff fd80 	bl	800e4a4 <SDMMC_GetCommandResponse>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	7afb      	ldrb	r3, [r7, #11]
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d001      	beq.n	800e9b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e099      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f7ff fd82 	bl	800e4be <SDMMC_GetResponse>
 800e9ba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	4b4e      	ldr	r3, [pc, #312]	@ (800eaf8 <SDMMC_GetCmdResp1+0x1d8>)
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e08d      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	da02      	bge.n	800e9d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e9d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9d4:	e087      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d001      	beq.n	800e9e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e9e0:	2340      	movs	r3, #64	@ 0x40
 800e9e2:	e080      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d001      	beq.n	800e9f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e9ee:	2380      	movs	r3, #128	@ 0x80
 800e9f0:	e079      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d002      	beq.n	800ea02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e9fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea00:	e071      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea10:	e069      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea20:	e061      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea30:	e059      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea40:	e051      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea50:	e049      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ea60:	e041      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ea6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea70:	e039      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ea80:	e031      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ea90:	e029      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d002      	beq.n	800eaa2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ea9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eaa0:	e021      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eaac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eab0:	e019      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eabc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800eac0:	e011      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d002      	beq.n	800ead2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eacc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ead0:	e009      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f003 0308 	and.w	r3, r3, #8
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eadc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eae0:	e001      	b.n	800eae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3720      	adds	r7, #32
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000000 	.word	0x20000000
 800eaf4:	10624dd3 	.word	0x10624dd3
 800eaf8:	fdffe008 	.word	0xfdffe008

0800eafc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb04:	4b1f      	ldr	r3, [pc, #124]	@ (800eb84 <SDMMC_GetCmdResp2+0x88>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a1f      	ldr	r2, [pc, #124]	@ (800eb88 <SDMMC_GetCmdResp2+0x8c>)
 800eb0a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb0e:	0a5b      	lsrs	r3, r3, #9
 800eb10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb14:	fb02 f303 	mul.w	r3, r2, r3
 800eb18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	1e5a      	subs	r2, r3, #1
 800eb1e:	60fa      	str	r2, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d102      	bne.n	800eb2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb28:	e026      	b.n	800eb78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0ef      	beq.n	800eb1a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ea      	bne.n	800eb1a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2204      	movs	r2, #4
 800eb54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb56:	2304      	movs	r3, #4
 800eb58:	e00e      	b.n	800eb78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d004      	beq.n	800eb70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e003      	b.n	800eb78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	22c5      	movs	r2, #197	@ 0xc5
 800eb74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3714      	adds	r7, #20
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	20000000 	.word	0x20000000
 800eb88:	10624dd3 	.word	0x10624dd3

0800eb8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb94:	4b1a      	ldr	r3, [pc, #104]	@ (800ec00 <SDMMC_GetCmdResp3+0x74>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a1a      	ldr	r2, [pc, #104]	@ (800ec04 <SDMMC_GetCmdResp3+0x78>)
 800eb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9e:	0a5b      	lsrs	r3, r3, #9
 800eba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eba4:	fb02 f303 	mul.w	r3, r2, r3
 800eba8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	60fa      	str	r2, [r7, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d102      	bne.n	800ebba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ebb8:	e01b      	b.n	800ebf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d0ef      	beq.n	800ebaa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1ea      	bne.n	800ebaa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebd8:	f003 0304 	and.w	r3, r3, #4
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d004      	beq.n	800ebea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2204      	movs	r2, #4
 800ebe4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebe6:	2304      	movs	r3, #4
 800ebe8:	e003      	b.n	800ebf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	22c5      	movs	r2, #197	@ 0xc5
 800ebee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	20000000 	.word	0x20000000
 800ec04:	10624dd3 	.word	0x10624dd3

0800ec08 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	460b      	mov	r3, r1
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec16:	4b35      	ldr	r3, [pc, #212]	@ (800ecec <SDMMC_GetCmdResp6+0xe4>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a35      	ldr	r2, [pc, #212]	@ (800ecf0 <SDMMC_GetCmdResp6+0xe8>)
 800ec1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec20:	0a5b      	lsrs	r3, r3, #9
 800ec22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec26:	fb02 f303 	mul.w	r3, r2, r3
 800ec2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	1e5a      	subs	r2, r3, #1
 800ec30:	61fa      	str	r2, [r7, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d102      	bne.n	800ec3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec3a:	e052      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d0ef      	beq.n	800ec2c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1ea      	bne.n	800ec2c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec5a:	f003 0304 	and.w	r3, r3, #4
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d004      	beq.n	800ec6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2204      	movs	r2, #4
 800ec66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec68:	2304      	movs	r3, #4
 800ec6a:	e03a      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d004      	beq.n	800ec82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e02f      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7ff fc0e 	bl	800e4a4 <SDMMC_GetCommandResponse>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	7afb      	ldrb	r3, [r7, #11]
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d001      	beq.n	800ec96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec92:	2301      	movs	r3, #1
 800ec94:	e025      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	22c5      	movs	r2, #197	@ 0xc5
 800ec9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff fc0d 	bl	800e4be <SDMMC_GetResponse>
 800eca4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d106      	bne.n	800ecbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	0c1b      	lsrs	r3, r3, #16
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	e011      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ecc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eccc:	e009      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ecd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecdc:	e001      	b.n	800ece2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3720      	adds	r7, #32
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20000000 	.word	0x20000000
 800ecf0:	10624dd3 	.word	0x10624dd3

0800ecf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ecfc:	4b22      	ldr	r3, [pc, #136]	@ (800ed88 <SDMMC_GetCmdResp7+0x94>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a22      	ldr	r2, [pc, #136]	@ (800ed8c <SDMMC_GetCmdResp7+0x98>)
 800ed02:	fba2 2303 	umull	r2, r3, r2, r3
 800ed06:	0a5b      	lsrs	r3, r3, #9
 800ed08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed0c:	fb02 f303 	mul.w	r3, r2, r3
 800ed10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	1e5a      	subs	r2, r3, #1
 800ed16:	60fa      	str	r2, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed20:	e02c      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0ef      	beq.n	800ed12 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1ea      	bne.n	800ed12 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed40:	f003 0304 	and.w	r3, r3, #4
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed4e:	2304      	movs	r3, #4
 800ed50:	e014      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d004      	beq.n	800ed68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed64:	2301      	movs	r3, #1
 800ed66:	e009      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2240      	movs	r2, #64	@ 0x40
 800ed78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed7a:	2300      	movs	r3, #0

}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3714      	adds	r7, #20
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	20000000 	.word	0x20000000
 800ed8c:	10624dd3 	.word	0x10624dd3

0800ed90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed98:	4b11      	ldr	r3, [pc, #68]	@ (800ede0 <SDMMC_GetCmdError+0x50>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a11      	ldr	r2, [pc, #68]	@ (800ede4 <SDMMC_GetCmdError+0x54>)
 800ed9e:	fba2 2303 	umull	r2, r3, r2, r3
 800eda2:	0a5b      	lsrs	r3, r3, #9
 800eda4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eda8:	fb02 f303 	mul.w	r3, r2, r3
 800edac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	1e5a      	subs	r2, r3, #1
 800edb2:	60fa      	str	r2, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800edbc:	e009      	b.n	800edd2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0f1      	beq.n	800edae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	22c5      	movs	r2, #197	@ 0xc5
 800edce:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20000000 	.word	0x20000000
 800ede4:	10624dd3 	.word	0x10624dd3

0800ede8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800edec:	4904      	ldr	r1, [pc, #16]	@ (800ee00 <MX_FATFS_Init+0x18>)
 800edee:	4805      	ldr	r0, [pc, #20]	@ (800ee04 <MX_FATFS_Init+0x1c>)
 800edf0:	f000 fa42 	bl	800f278 <FATFS_LinkDriver>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	4b03      	ldr	r3, [pc, #12]	@ (800ee08 <MX_FATFS_Init+0x20>)
 800edfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800edfc:	bf00      	nop
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20000b68 	.word	0x20000b68
 800ee04:	08013298 	.word	0x08013298
 800ee08:	20000b64 	.word	0x20000b64

0800ee0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee16:	f000 f854 	bl	800eec2 <BSP_SD_IsDetected>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d001      	beq.n	800ee24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ee20:	2302      	movs	r3, #2
 800ee22:	e005      	b.n	800ee30 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ee24:	4804      	ldr	r0, [pc, #16]	@ (800ee38 <BSP_SD_Init+0x2c>)
 800ee26:	f7fa ff91 	bl	8009d4c <HAL_SD_Init>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ee2e:	79fb      	ldrb	r3, [r7, #7]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20000298 	.word	0x20000298

0800ee3c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ee40:	4805      	ldr	r0, [pc, #20]	@ (800ee58 <BSP_SD_GetCardState+0x1c>)
 800ee42:	f7fb fd3d 	bl	800a8c0 <HAL_SD_GetCardState>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20000298 	.word	0x20000298

0800ee5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	4803      	ldr	r0, [pc, #12]	@ (800ee74 <BSP_SD_GetCardInfo+0x18>)
 800ee68:	f7fb fcfe 	bl	800a868 <HAL_SD_GetCardInfo>
}
 800ee6c:	bf00      	nop
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	20000298 	.word	0x20000298

0800ee78 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ee80:	f000 f818 	bl	800eeb4 <BSP_SD_AbortCallback>
}
 800ee84:	bf00      	nop
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ee94:	f000 f98c 	bl	800f1b0 <BSP_SD_WriteCpltCallback>
}
 800ee98:	bf00      	nop
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eea8:	f000 f98e 	bl	800f1c8 <BSP_SD_ReadCpltCallback>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	af00      	add	r7, sp, #0

}
 800eeb8:	bf00      	nop
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eec8:	2301      	movs	r3, #1
 800eeca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800eecc:	79fb      	ldrb	r3, [r7, #7]
 800eece:	b2db      	uxtb	r3, r3
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eee4:	f7f6 fe8c 	bl	8005c00 <HAL_GetTick>
 800eee8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eeea:	e006      	b.n	800eefa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eeec:	f7ff ffa6 	bl	800ee3c <BSP_SD_GetCardState>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d101      	bne.n	800eefa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	e009      	b.n	800ef0e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eefa:	f7f6 fe81 	bl	8005c00 <HAL_GetTick>
 800eefe:	4602      	mov	r2, r0
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d8f0      	bhi.n	800eeec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ef0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef22:	4b0b      	ldr	r3, [pc, #44]	@ (800ef50 <SD_CheckStatus+0x38>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ef28:	f7ff ff88 	bl	800ee3c <BSP_SD_GetCardState>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d107      	bne.n	800ef42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef32:	4b07      	ldr	r3, [pc, #28]	@ (800ef50 <SD_CheckStatus+0x38>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	f023 0301 	bic.w	r3, r3, #1
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	4b04      	ldr	r3, [pc, #16]	@ (800ef50 <SD_CheckStatus+0x38>)
 800ef40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef42:	4b03      	ldr	r3, [pc, #12]	@ (800ef50 <SD_CheckStatus+0x38>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	b2db      	uxtb	r3, r3
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	2000000d 	.word	0x2000000d

0800ef54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ef5e:	f7ff ff55 	bl	800ee0c <BSP_SD_Init>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d107      	bne.n	800ef78 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff ffd4 	bl	800ef18 <SD_CheckStatus>
 800ef70:	4603      	mov	r3, r0
 800ef72:	461a      	mov	r2, r3
 800ef74:	4b04      	ldr	r3, [pc, #16]	@ (800ef88 <SD_initialize+0x34>)
 800ef76:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ef78:	4b03      	ldr	r3, [pc, #12]	@ (800ef88 <SD_initialize+0x34>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	b2db      	uxtb	r3, r3
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	2000000d 	.word	0x2000000d

0800ef8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ef96:	79fb      	ldrb	r3, [r7, #7]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff ffbd 	bl	800ef18 <SD_CheckStatus>
 800ef9e:	4603      	mov	r3, r0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60b9      	str	r1, [r7, #8]
 800efb0:	607a      	str	r2, [r7, #4]
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	4603      	mov	r3, r0
 800efb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800efbc:	f247 5030 	movw	r0, #30000	@ 0x7530
 800efc0:	f7ff ff8c 	bl	800eedc <SD_CheckStatusWithTimeout>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da01      	bge.n	800efce <SD_read+0x26>
  {
    return res;
 800efca:	7dfb      	ldrb	r3, [r7, #23]
 800efcc:	e03b      	b.n	800f046 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	68b8      	ldr	r0, [r7, #8]
 800efd4:	f7f2 fd0c 	bl	80019f0 <BSP_SD_ReadBlocks_DMA>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d132      	bne.n	800f044 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800efde:	4b1c      	ldr	r3, [pc, #112]	@ (800f050 <SD_read+0xa8>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800efe4:	f7f6 fe0c 	bl	8005c00 <HAL_GetTick>
 800efe8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800efea:	bf00      	nop
 800efec:	4b18      	ldr	r3, [pc, #96]	@ (800f050 <SD_read+0xa8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d108      	bne.n	800f006 <SD_read+0x5e>
 800eff4:	f7f6 fe04 	bl	8005c00 <HAL_GetTick>
 800eff8:	4602      	mov	r2, r0
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f002:	4293      	cmp	r3, r2
 800f004:	d9f2      	bls.n	800efec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800f006:	4b12      	ldr	r3, [pc, #72]	@ (800f050 <SD_read+0xa8>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d102      	bne.n	800f014 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	75fb      	strb	r3, [r7, #23]
 800f012:	e017      	b.n	800f044 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f014:	4b0e      	ldr	r3, [pc, #56]	@ (800f050 <SD_read+0xa8>)
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f01a:	f7f6 fdf1 	bl	8005c00 <HAL_GetTick>
 800f01e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f020:	e007      	b.n	800f032 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f022:	f7ff ff0b 	bl	800ee3c <BSP_SD_GetCardState>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d102      	bne.n	800f032 <SD_read+0x8a>
          {
            res = RES_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f030:	e008      	b.n	800f044 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f032:	f7f6 fde5 	bl	8005c00 <HAL_GetTick>
 800f036:	4602      	mov	r2, r0
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f040:	4293      	cmp	r3, r2
 800f042:	d9ee      	bls.n	800f022 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f044:	7dfb      	ldrb	r3, [r7, #23]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000b70 	.word	0x20000b70

0800f054 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60b9      	str	r1, [r7, #8]
 800f05c:	607a      	str	r2, [r7, #4]
 800f05e:	603b      	str	r3, [r7, #0]
 800f060:	4603      	mov	r3, r0
 800f062:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f068:	4b24      	ldr	r3, [pc, #144]	@ (800f0fc <SD_write+0xa8>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f06e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f072:	f7ff ff33 	bl	800eedc <SD_CheckStatusWithTimeout>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da01      	bge.n	800f080 <SD_write+0x2c>
  {
    return res;
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	e038      	b.n	800f0f2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	6879      	ldr	r1, [r7, #4]
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f7f2 fcdf 	bl	8001a48 <BSP_SD_WriteBlocks_DMA>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d12f      	bne.n	800f0f0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f090:	f7f6 fdb6 	bl	8005c00 <HAL_GetTick>
 800f094:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f096:	bf00      	nop
 800f098:	4b18      	ldr	r3, [pc, #96]	@ (800f0fc <SD_write+0xa8>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d108      	bne.n	800f0b2 <SD_write+0x5e>
 800f0a0:	f7f6 fdae 	bl	8005c00 <HAL_GetTick>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d9f2      	bls.n	800f098 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800f0b2:	4b12      	ldr	r3, [pc, #72]	@ (800f0fc <SD_write+0xa8>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
 800f0be:	e017      	b.n	800f0f0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800f0fc <SD_write+0xa8>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f0c6:	f7f6 fd9b 	bl	8005c00 <HAL_GetTick>
 800f0ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f0cc:	e007      	b.n	800f0de <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0ce:	f7ff feb5 	bl	800ee3c <BSP_SD_GetCardState>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d102      	bne.n	800f0de <SD_write+0x8a>
          {
            res = RES_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	75fb      	strb	r3, [r7, #23]
            break;
 800f0dc:	e008      	b.n	800f0f0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f0de:	f7f6 fd8f 	bl	8005c00 <HAL_GetTick>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d9ee      	bls.n	800f0ce <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20000b6c 	.word	0x20000b6c

0800f100 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b08c      	sub	sp, #48	@ 0x30
 800f104:	af00      	add	r7, sp, #0
 800f106:	4603      	mov	r3, r0
 800f108:	603a      	str	r2, [r7, #0]
 800f10a:	71fb      	strb	r3, [r7, #7]
 800f10c:	460b      	mov	r3, r1
 800f10e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f116:	4b25      	ldr	r3, [pc, #148]	@ (800f1ac <SD_ioctl+0xac>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f003 0301 	and.w	r3, r3, #1
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <SD_ioctl+0x28>
 800f124:	2303      	movs	r3, #3
 800f126:	e03c      	b.n	800f1a2 <SD_ioctl+0xa2>

  switch (cmd)
 800f128:	79bb      	ldrb	r3, [r7, #6]
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d834      	bhi.n	800f198 <SD_ioctl+0x98>
 800f12e:	a201      	add	r2, pc, #4	@ (adr r2, 800f134 <SD_ioctl+0x34>)
 800f130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f134:	0800f145 	.word	0x0800f145
 800f138:	0800f14d 	.word	0x0800f14d
 800f13c:	0800f165 	.word	0x0800f165
 800f140:	0800f17f 	.word	0x0800f17f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f14a:	e028      	b.n	800f19e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f14c:	f107 030c 	add.w	r3, r7, #12
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff fe83 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f162:	e01c      	b.n	800f19e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f164:	f107 030c 	add.w	r3, r7, #12
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff fe77 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f170:	b29a      	uxth	r2, r3
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f17c:	e00f      	b.n	800f19e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f17e:	f107 030c 	add.w	r3, r7, #12
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fe6a 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18a:	0a5a      	lsrs	r2, r3, #9
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f190:	2300      	movs	r3, #0
 800f192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f196:	e002      	b.n	800f19e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f198:	2304      	movs	r3, #4
 800f19a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f19e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3730      	adds	r7, #48	@ 0x30
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000000d 	.word	0x2000000d

0800f1b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f1b4:	4b03      	ldr	r3, [pc, #12]	@ (800f1c4 <BSP_SD_WriteCpltCallback+0x14>)
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	601a      	str	r2, [r3, #0]
}
 800f1ba:	bf00      	nop
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20000b6c 	.word	0x20000b6c

0800f1c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f1cc:	4b03      	ldr	r3, [pc, #12]	@ (800f1dc <BSP_SD_ReadCpltCallback+0x14>)
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	601a      	str	r2, [r3, #0]
}
 800f1d2:	bf00      	nop
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	20000b70 	.word	0x20000b70

0800f1e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b087      	sub	sp, #28
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1f6:	4b1f      	ldr	r3, [pc, #124]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f1f8:	7a5b      	ldrb	r3, [r3, #9]
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d131      	bne.n	800f264 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f200:	4b1c      	ldr	r3, [pc, #112]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f202:	7a5b      	ldrb	r3, [r3, #9]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	461a      	mov	r2, r3
 800f208:	4b1a      	ldr	r3, [pc, #104]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f20a:	2100      	movs	r1, #0
 800f20c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f20e:	4b19      	ldr	r3, [pc, #100]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f210:	7a5b      	ldrb	r3, [r3, #9]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	4a17      	ldr	r2, [pc, #92]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f21e:	4b15      	ldr	r3, [pc, #84]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f220:	7a5b      	ldrb	r3, [r3, #9]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	461a      	mov	r2, r3
 800f226:	4b13      	ldr	r3, [pc, #76]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f228:	4413      	add	r3, r2
 800f22a:	79fa      	ldrb	r2, [r7, #7]
 800f22c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f22e:	4b11      	ldr	r3, [pc, #68]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f230:	7a5b      	ldrb	r3, [r3, #9]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	b2d1      	uxtb	r1, r2
 800f238:	4a0e      	ldr	r2, [pc, #56]	@ (800f274 <FATFS_LinkDriverEx+0x94>)
 800f23a:	7251      	strb	r1, [r2, #9]
 800f23c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f23e:	7dbb      	ldrb	r3, [r7, #22]
 800f240:	3330      	adds	r3, #48	@ 0x30
 800f242:	b2da      	uxtb	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3301      	adds	r3, #1
 800f24c:	223a      	movs	r2, #58	@ 0x3a
 800f24e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	3302      	adds	r3, #2
 800f254:	222f      	movs	r2, #47	@ 0x2f
 800f256:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	3303      	adds	r3, #3
 800f25c:	2200      	movs	r2, #0
 800f25e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f264:	7dfb      	ldrb	r3, [r7, #23]
}
 800f266:	4618      	mov	r0, r3
 800f268:	371c      	adds	r7, #28
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20000b74 	.word	0x20000b74

0800f278 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f282:	2200      	movs	r2, #0
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff ffaa 	bl	800f1e0 <FATFS_LinkDriverEx>
 800f28c:	4603      	mov	r3, r0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
	...

0800f298 <__NVIC_SetPriority>:
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	6039      	str	r1, [r7, #0]
 800f2a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	db0a      	blt.n	800f2c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	490c      	ldr	r1, [pc, #48]	@ (800f2e4 <__NVIC_SetPriority+0x4c>)
 800f2b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2b6:	0112      	lsls	r2, r2, #4
 800f2b8:	b2d2      	uxtb	r2, r2
 800f2ba:	440b      	add	r3, r1
 800f2bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f2c0:	e00a      	b.n	800f2d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	4908      	ldr	r1, [pc, #32]	@ (800f2e8 <__NVIC_SetPriority+0x50>)
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	f003 030f 	and.w	r3, r3, #15
 800f2ce:	3b04      	subs	r3, #4
 800f2d0:	0112      	lsls	r2, r2, #4
 800f2d2:	b2d2      	uxtb	r2, r2
 800f2d4:	440b      	add	r3, r1
 800f2d6:	761a      	strb	r2, [r3, #24]
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	e000e100 	.word	0xe000e100
 800f2e8:	e000ed00 	.word	0xe000ed00

0800f2ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f2f0:	4b05      	ldr	r3, [pc, #20]	@ (800f308 <SysTick_Handler+0x1c>)
 800f2f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f2f4:	f001 fe38 	bl	8010f68 <xTaskGetSchedulerState>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d001      	beq.n	800f302 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f2fe:	f002 fc33 	bl	8011b68 <xPortSysTickHandler>
  }
}
 800f302:	bf00      	nop
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	e000e010 	.word	0xe000e010

0800f30c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f30c:	b580      	push	{r7, lr}
 800f30e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f310:	2100      	movs	r1, #0
 800f312:	f06f 0004 	mvn.w	r0, #4
 800f316:	f7ff ffbf 	bl	800f298 <__NVIC_SetPriority>
#endif
}
 800f31a:	bf00      	nop
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f326:	f3ef 8305 	mrs	r3, IPSR
 800f32a:	603b      	str	r3, [r7, #0]
  return(result);
 800f32c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d003      	beq.n	800f33a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f332:	f06f 0305 	mvn.w	r3, #5
 800f336:	607b      	str	r3, [r7, #4]
 800f338:	e00c      	b.n	800f354 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f33a:	4b0a      	ldr	r3, [pc, #40]	@ (800f364 <osKernelInitialize+0x44>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d105      	bne.n	800f34e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f342:	4b08      	ldr	r3, [pc, #32]	@ (800f364 <osKernelInitialize+0x44>)
 800f344:	2201      	movs	r2, #1
 800f346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f348:	2300      	movs	r3, #0
 800f34a:	607b      	str	r3, [r7, #4]
 800f34c:	e002      	b.n	800f354 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f34e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f354:	687b      	ldr	r3, [r7, #4]
}
 800f356:	4618      	mov	r0, r3
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	20000b80 	.word	0x20000b80

0800f368 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f36e:	f3ef 8305 	mrs	r3, IPSR
 800f372:	603b      	str	r3, [r7, #0]
  return(result);
 800f374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f37a:	f06f 0305 	mvn.w	r3, #5
 800f37e:	607b      	str	r3, [r7, #4]
 800f380:	e010      	b.n	800f3a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f382:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b0 <osKernelStart+0x48>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d109      	bne.n	800f39e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f38a:	f7ff ffbf 	bl	800f30c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f38e:	4b08      	ldr	r3, [pc, #32]	@ (800f3b0 <osKernelStart+0x48>)
 800f390:	2202      	movs	r2, #2
 800f392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f394:	f001 f960 	bl	8010658 <vTaskStartScheduler>
      stat = osOK;
 800f398:	2300      	movs	r3, #0
 800f39a:	607b      	str	r3, [r7, #4]
 800f39c:	e002      	b.n	800f3a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f39e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f3a4:	687b      	ldr	r3, [r7, #4]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20000b80 	.word	0x20000b80

0800f3b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08e      	sub	sp, #56	@ 0x38
 800f3b8:	af04      	add	r7, sp, #16
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3c4:	f3ef 8305 	mrs	r3, IPSR
 800f3c8:	617b      	str	r3, [r7, #20]
  return(result);
 800f3ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d17e      	bne.n	800f4ce <osThreadNew+0x11a>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d07b      	beq.n	800f4ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f3d6:	2380      	movs	r3, #128	@ 0x80
 800f3d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f3da:	2318      	movs	r3, #24
 800f3dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f3e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d045      	beq.n	800f47a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <osThreadNew+0x48>
        name = attr->name;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	699b      	ldr	r3, [r3, #24]
 800f408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d008      	beq.n	800f422 <osThreadNew+0x6e>
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	2b38      	cmp	r3, #56	@ 0x38
 800f414:	d805      	bhi.n	800f422 <osThreadNew+0x6e>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	f003 0301 	and.w	r3, r3, #1
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <osThreadNew+0x72>
        return (NULL);
 800f422:	2300      	movs	r3, #0
 800f424:	e054      	b.n	800f4d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	089b      	lsrs	r3, r3, #2
 800f434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00e      	beq.n	800f45c <osThreadNew+0xa8>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	2ba7      	cmp	r3, #167	@ 0xa7
 800f444:	d90a      	bls.n	800f45c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d006      	beq.n	800f45c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	695b      	ldr	r3, [r3, #20]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <osThreadNew+0xa8>
        mem = 1;
 800f456:	2301      	movs	r3, #1
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	e010      	b.n	800f47e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10c      	bne.n	800f47e <osThreadNew+0xca>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d108      	bne.n	800f47e <osThreadNew+0xca>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d104      	bne.n	800f47e <osThreadNew+0xca>
          mem = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	61bb      	str	r3, [r7, #24]
 800f478:	e001      	b.n	800f47e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d110      	bne.n	800f4a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f48c:	9202      	str	r2, [sp, #8]
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	6a3a      	ldr	r2, [r7, #32]
 800f498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 fee8 	bl	8010270 <xTaskCreateStatic>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	613b      	str	r3, [r7, #16]
 800f4a4:	e013      	b.n	800f4ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d110      	bne.n	800f4ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4ac:	6a3b      	ldr	r3, [r7, #32]
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	f107 0310 	add.w	r3, r7, #16
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f000 ff36 	bl	8010330 <xTaskCreate>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d001      	beq.n	800f4ce <osThreadNew+0x11a>
            hTask = NULL;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4ce:	693b      	ldr	r3, [r7, #16]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3728      	adds	r7, #40	@ 0x28
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4e0:	f3ef 8305 	mrs	r3, IPSR
 800f4e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f4e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d003      	beq.n	800f4f4 <osDelay+0x1c>
    stat = osErrorISR;
 800f4ec:	f06f 0305 	mvn.w	r3, #5
 800f4f0:	60fb      	str	r3, [r7, #12]
 800f4f2:	e007      	b.n	800f504 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f001 f874 	bl	80105ec <vTaskDelay>
    }
  }

  return (stat);
 800f504:	68fb      	ldr	r3, [r7, #12]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f50e:	b580      	push	{r7, lr}
 800f510:	b08a      	sub	sp, #40	@ 0x28
 800f512:	af02      	add	r7, sp, #8
 800f514:	60f8      	str	r0, [r7, #12]
 800f516:	60b9      	str	r1, [r7, #8]
 800f518:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f51a:	2300      	movs	r3, #0
 800f51c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f51e:	f3ef 8305 	mrs	r3, IPSR
 800f522:	613b      	str	r3, [r7, #16]
  return(result);
 800f524:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f526:	2b00      	cmp	r3, #0
 800f528:	d15f      	bne.n	800f5ea <osMessageQueueNew+0xdc>
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d05c      	beq.n	800f5ea <osMessageQueueNew+0xdc>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d059      	beq.n	800f5ea <osMessageQueueNew+0xdc>
    mem = -1;
 800f536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f53a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d029      	beq.n	800f596 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d012      	beq.n	800f570 <osMessageQueueNew+0x62>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b4f      	cmp	r3, #79	@ 0x4f
 800f550:	d90e      	bls.n	800f570 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00a      	beq.n	800f570 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	695a      	ldr	r2, [r3, #20]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	68b9      	ldr	r1, [r7, #8]
 800f562:	fb01 f303 	mul.w	r3, r1, r3
 800f566:	429a      	cmp	r2, r3
 800f568:	d302      	bcc.n	800f570 <osMessageQueueNew+0x62>
        mem = 1;
 800f56a:	2301      	movs	r3, #1
 800f56c:	61bb      	str	r3, [r7, #24]
 800f56e:	e014      	b.n	800f59a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d110      	bne.n	800f59a <osMessageQueueNew+0x8c>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10c      	bne.n	800f59a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f584:	2b00      	cmp	r3, #0
 800f586:	d108      	bne.n	800f59a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d104      	bne.n	800f59a <osMessageQueueNew+0x8c>
          mem = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	61bb      	str	r3, [r7, #24]
 800f594:	e001      	b.n	800f59a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d10b      	bne.n	800f5b8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	691a      	ldr	r2, [r3, #16]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	9100      	str	r1, [sp, #0]
 800f5ac:	68b9      	ldr	r1, [r7, #8]
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f000 f972 	bl	800f898 <xQueueGenericCreateStatic>
 800f5b4:	61f8      	str	r0, [r7, #28]
 800f5b6:	e008      	b.n	800f5ca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d105      	bne.n	800f5ca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f5be:	2200      	movs	r2, #0
 800f5c0:	68b9      	ldr	r1, [r7, #8]
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f000 f9e5 	bl	800f992 <xQueueGenericCreate>
 800f5c8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00c      	beq.n	800f5ea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d003      	beq.n	800f5de <osMessageQueueNew+0xd0>
        name = attr->name;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	617b      	str	r3, [r7, #20]
 800f5dc:	e001      	b.n	800f5e2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f5e2:	6979      	ldr	r1, [r7, #20]
 800f5e4:	69f8      	ldr	r0, [r7, #28]
 800f5e6:	f000 fde5 	bl	80101b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f5ea:	69fb      	ldr	r3, [r7, #28]
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	4a07      	ldr	r2, [pc, #28]	@ (800f620 <vApplicationGetIdleTaskMemory+0x2c>)
 800f604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	4a06      	ldr	r2, [pc, #24]	@ (800f624 <vApplicationGetIdleTaskMemory+0x30>)
 800f60a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2280      	movs	r2, #128	@ 0x80
 800f610:	601a      	str	r2, [r3, #0]
}
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	20000b84 	.word	0x20000b84
 800f624:	20000c2c 	.word	0x20000c2c

0800f628 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	4a07      	ldr	r2, [pc, #28]	@ (800f654 <vApplicationGetTimerTaskMemory+0x2c>)
 800f638:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	4a06      	ldr	r2, [pc, #24]	@ (800f658 <vApplicationGetTimerTaskMemory+0x30>)
 800f63e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f646:	601a      	str	r2, [r3, #0]
}
 800f648:	bf00      	nop
 800f64a:	3714      	adds	r7, #20
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	20000e2c 	.word	0x20000e2c
 800f658:	20000ed4 	.word	0x20000ed4

0800f65c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f103 0208 	add.w	r2, r3, #8
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f103 0208 	add.w	r2, r3, #8
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f103 0208 	add.w	r2, r3, #8
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f690:	bf00      	nop
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6aa:	bf00      	nop
 800f6ac:	370c      	adds	r7, #12
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b085      	sub	sp, #20
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	689a      	ldr	r2, [r3, #8]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	683a      	ldr	r2, [r7, #0]
 800f6da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	1c5a      	adds	r2, r3, #1
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	601a      	str	r2, [r3, #0]
}
 800f6f2:	bf00      	nop
 800f6f4:	3714      	adds	r7, #20
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr

0800f6fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6fe:	b480      	push	{r7}
 800f700:	b085      	sub	sp, #20
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f714:	d103      	bne.n	800f71e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	e00c      	b.n	800f738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	3308      	adds	r3, #8
 800f722:	60fb      	str	r3, [r7, #12]
 800f724:	e002      	b.n	800f72c <vListInsert+0x2e>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	60fb      	str	r3, [r7, #12]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68ba      	ldr	r2, [r7, #8]
 800f734:	429a      	cmp	r2, r3
 800f736:	d2f6      	bcs.n	800f726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	601a      	str	r2, [r3, #0]
}
 800f764:	bf00      	nop
 800f766:	3714      	adds	r7, #20
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f770:	b480      	push	{r7}
 800f772:	b085      	sub	sp, #20
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	6892      	ldr	r2, [r2, #8]
 800f786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	6852      	ldr	r2, [r2, #4]
 800f790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d103      	bne.n	800f7a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	689a      	ldr	r2, [r3, #8]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	1e5a      	subs	r2, r3, #1
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3714      	adds	r7, #20
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10b      	bne.n	800f7f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f7ea:	bf00      	nop
 800f7ec:	bf00      	nop
 800f7ee:	e7fd      	b.n	800f7ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f7f0:	f002 f92a 	bl	8011a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7fc:	68f9      	ldr	r1, [r7, #12]
 800f7fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f800:	fb01 f303 	mul.w	r3, r1, r3
 800f804:	441a      	add	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f820:	3b01      	subs	r3, #1
 800f822:	68f9      	ldr	r1, [r7, #12]
 800f824:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f826:	fb01 f303 	mul.w	r3, r1, r3
 800f82a:	441a      	add	r2, r3
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	22ff      	movs	r2, #255	@ 0xff
 800f834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	22ff      	movs	r2, #255	@ 0xff
 800f83c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d114      	bne.n	800f870 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d01a      	beq.n	800f884 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3310      	adds	r3, #16
 800f852:	4618      	mov	r0, r3
 800f854:	f001 f9c2 	bl	8010bdc <xTaskRemoveFromEventList>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d012      	beq.n	800f884 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f85e:	4b0d      	ldr	r3, [pc, #52]	@ (800f894 <xQueueGenericReset+0xd0>)
 800f860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	e009      	b.n	800f884 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3310      	adds	r3, #16
 800f874:	4618      	mov	r0, r3
 800f876:	f7ff fef1 	bl	800f65c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	3324      	adds	r3, #36	@ 0x24
 800f87e:	4618      	mov	r0, r3
 800f880:	f7ff feec 	bl	800f65c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f884:	f002 f912 	bl	8011aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f888:	2301      	movs	r3, #1
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	e000ed04 	.word	0xe000ed04

0800f898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b08e      	sub	sp, #56	@ 0x38
 800f89c:	af02      	add	r7, sp, #8
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10b      	bne.n	800f8c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f8be:	bf00      	nop
 800f8c0:	bf00      	nop
 800f8c2:	e7fd      	b.n	800f8c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10b      	bne.n	800f8e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f8dc:	bf00      	nop
 800f8de:	bf00      	nop
 800f8e0:	e7fd      	b.n	800f8de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <xQueueGenericCreateStatic+0x56>
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <xQueueGenericCreateStatic+0x5a>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e000      	b.n	800f8f4 <xQueueGenericCreateStatic+0x5c>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10b      	bne.n	800f910 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	623b      	str	r3, [r7, #32]
}
 800f90a:	bf00      	nop
 800f90c:	bf00      	nop
 800f90e:	e7fd      	b.n	800f90c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d102      	bne.n	800f91c <xQueueGenericCreateStatic+0x84>
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <xQueueGenericCreateStatic+0x88>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <xQueueGenericCreateStatic+0x8a>
 800f920:	2300      	movs	r3, #0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10b      	bne.n	800f93e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92a:	f383 8811 	msr	BASEPRI, r3
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	61fb      	str	r3, [r7, #28]
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	e7fd      	b.n	800f93a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f93e:	2350      	movs	r3, #80	@ 0x50
 800f940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	2b50      	cmp	r3, #80	@ 0x50
 800f946:	d00b      	beq.n	800f960 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	61bb      	str	r3, [r7, #24]
}
 800f95a:	bf00      	nop
 800f95c:	bf00      	nop
 800f95e:	e7fd      	b.n	800f95c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f960:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00d      	beq.n	800f988 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f974:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	4613      	mov	r3, r2
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	68b9      	ldr	r1, [r7, #8]
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f000 f840 	bl	800fa08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3730      	adds	r7, #48	@ 0x30
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f992:	b580      	push	{r7, lr}
 800f994:	b08a      	sub	sp, #40	@ 0x28
 800f996:	af02      	add	r7, sp, #8
 800f998:	60f8      	str	r0, [r7, #12]
 800f99a:	60b9      	str	r1, [r7, #8]
 800f99c:	4613      	mov	r3, r2
 800f99e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10b      	bne.n	800f9be <xQueueGenericCreate+0x2c>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	613b      	str	r3, [r7, #16]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	fb02 f303 	mul.w	r3, r2, r3
 800f9c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	3350      	adds	r3, #80	@ 0x50
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f002 f95d 	bl	8011c8c <pvPortMalloc>
 800f9d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d011      	beq.n	800f9fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	3350      	adds	r3, #80	@ 0x50
 800f9e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f9ec:	79fa      	ldrb	r2, [r7, #7]
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	68b9      	ldr	r1, [r7, #8]
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f000 f805 	bl	800fa08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9fe:	69bb      	ldr	r3, [r7, #24]
	}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3720      	adds	r7, #32
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
 800fa14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d103      	bne.n	800fa24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	69ba      	ldr	r2, [r7, #24]
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	e002      	b.n	800fa2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa36:	2101      	movs	r1, #1
 800fa38:	69b8      	ldr	r0, [r7, #24]
 800fa3a:	f7ff fec3 	bl	800f7c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	78fa      	ldrb	r2, [r7, #3]
 800fa42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa46:	bf00      	nop
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08e      	sub	sp, #56	@ 0x38
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
 800fa5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10b      	bne.n	800fa84 <xQueueGenericSend+0x34>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	e7fd      	b.n	800fa80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d103      	bne.n	800fa92 <xQueueGenericSend+0x42>
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d101      	bne.n	800fa96 <xQueueGenericSend+0x46>
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <xQueueGenericSend+0x48>
 800fa96:	2300      	movs	r3, #0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <xQueueGenericSend+0x64>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800faae:	bf00      	nop
 800fab0:	bf00      	nop
 800fab2:	e7fd      	b.n	800fab0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d103      	bne.n	800fac2 <xQueueGenericSend+0x72>
 800faba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d101      	bne.n	800fac6 <xQueueGenericSend+0x76>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e000      	b.n	800fac8 <xQueueGenericSend+0x78>
 800fac6:	2300      	movs	r3, #0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10b      	bne.n	800fae4 <xQueueGenericSend+0x94>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	623b      	str	r3, [r7, #32]
}
 800fade:	bf00      	nop
 800fae0:	bf00      	nop
 800fae2:	e7fd      	b.n	800fae0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fae4:	f001 fa40 	bl	8010f68 <xTaskGetSchedulerState>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d102      	bne.n	800faf4 <xQueueGenericSend+0xa4>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <xQueueGenericSend+0xa8>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e000      	b.n	800fafa <xQueueGenericSend+0xaa>
 800faf8:	2300      	movs	r3, #0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10b      	bne.n	800fb16 <xQueueGenericSend+0xc6>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	61fb      	str	r3, [r7, #28]
}
 800fb10:	bf00      	nop
 800fb12:	bf00      	nop
 800fb14:	e7fd      	b.n	800fb12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb16:	f001 ff97 	bl	8011a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d302      	bcc.n	800fb2c <xQueueGenericSend+0xdc>
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d129      	bne.n	800fb80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	68b9      	ldr	r1, [r7, #8]
 800fb30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb32:	f000 fa2e 	bl	800ff92 <prvCopyDataToQueue>
 800fb36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d010      	beq.n	800fb62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb42:	3324      	adds	r3, #36	@ 0x24
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 f849 	bl	8010bdc <xTaskRemoveFromEventList>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d013      	beq.n	800fb78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb50:	4b3f      	ldr	r3, [pc, #252]	@ (800fc50 <xQueueGenericSend+0x200>)
 800fb52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	e00a      	b.n	800fb78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d007      	beq.n	800fb78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb68:	4b39      	ldr	r3, [pc, #228]	@ (800fc50 <xQueueGenericSend+0x200>)
 800fb6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb78:	f001 ff98 	bl	8011aac <vPortExitCritical>
				return pdPASS;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e063      	b.n	800fc48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d103      	bne.n	800fb8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb86:	f001 ff91 	bl	8011aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e05c      	b.n	800fc48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d106      	bne.n	800fba2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb94:	f107 0314 	add.w	r3, r7, #20
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f001 f883 	bl	8010ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fba2:	f001 ff83 	bl	8011aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fba6:	f000 fdc7 	bl	8010738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbaa:	f001 ff4d 	bl	8011a48 <vPortEnterCritical>
 800fbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fbba:	d103      	bne.n	800fbc4 <xQueueGenericSend+0x174>
 800fbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbca:	b25b      	sxtb	r3, r3
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fbd0:	d103      	bne.n	800fbda <xQueueGenericSend+0x18a>
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbda:	f001 ff67 	bl	8011aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbde:	1d3a      	adds	r2, r7, #4
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f001 f872 	bl	8010cd0 <xTaskCheckForTimeOut>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d124      	bne.n	800fc3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fbf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbf4:	f000 fac5 	bl	8010182 <prvIsQueueFull>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d018      	beq.n	800fc30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc00:	3310      	adds	r3, #16
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f000 ff96 	bl	8010b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc0e:	f000 fa50 	bl	80100b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc12:	f000 fd9f 	bl	8010754 <xTaskResumeAll>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f47f af7c 	bne.w	800fb16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800fc50 <xQueueGenericSend+0x200>)
 800fc20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	f3bf 8f6f 	isb	sy
 800fc2e:	e772      	b.n	800fb16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc32:	f000 fa3e 	bl	80100b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc36:	f000 fd8d 	bl	8010754 <xTaskResumeAll>
 800fc3a:	e76c      	b.n	800fb16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc3e:	f000 fa38 	bl	80100b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc42:	f000 fd87 	bl	8010754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3738      	adds	r7, #56	@ 0x38
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	e000ed04 	.word	0xe000ed04

0800fc54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b090      	sub	sp, #64	@ 0x40
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fc66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10b      	bne.n	800fc84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fc7e:	bf00      	nop
 800fc80:	bf00      	nop
 800fc82:	e7fd      	b.n	800fc80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d103      	bne.n	800fc92 <xQueueGenericSendFromISR+0x3e>
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <xQueueGenericSendFromISR+0x42>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <xQueueGenericSendFromISR+0x44>
 800fc96:	2300      	movs	r3, #0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10b      	bne.n	800fcb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	e7fd      	b.n	800fcb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d103      	bne.n	800fcc2 <xQueueGenericSendFromISR+0x6e>
 800fcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d101      	bne.n	800fcc6 <xQueueGenericSendFromISR+0x72>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	e000      	b.n	800fcc8 <xQueueGenericSendFromISR+0x74>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10b      	bne.n	800fce4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd0:	f383 8811 	msr	BASEPRI, r3
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	623b      	str	r3, [r7, #32]
}
 800fcde:	bf00      	nop
 800fce0:	bf00      	nop
 800fce2:	e7fd      	b.n	800fce0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fce4:	f001 ff90 	bl	8011c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fce8:	f3ef 8211 	mrs	r2, BASEPRI
 800fcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	61fa      	str	r2, [r7, #28]
 800fcfe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d302      	bcc.n	800fd16 <xQueueGenericSendFromISR+0xc2>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d12f      	bne.n	800fd76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	68b9      	ldr	r1, [r7, #8]
 800fd2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd2c:	f000 f931 	bl	800ff92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fd34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd38:	d112      	bne.n	800fd60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d016      	beq.n	800fd70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd44:	3324      	adds	r3, #36	@ 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f000 ff48 	bl	8010bdc <xTaskRemoveFromEventList>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00e      	beq.n	800fd70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00b      	beq.n	800fd70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	e007      	b.n	800fd70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fd64:	3301      	adds	r3, #1
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	b25a      	sxtb	r2, r3
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fd70:	2301      	movs	r3, #1
 800fd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fd74:	e001      	b.n	800fd7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd76:	2300      	movs	r3, #0
 800fd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fd84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3740      	adds	r7, #64	@ 0x40
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b08c      	sub	sp, #48	@ 0x30
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10b      	bne.n	800fdc2 <xQueueReceive+0x32>
	__asm volatile
 800fdaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdae:	f383 8811 	msr	BASEPRI, r3
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	f3bf 8f4f 	dsb	sy
 800fdba:	623b      	str	r3, [r7, #32]
}
 800fdbc:	bf00      	nop
 800fdbe:	bf00      	nop
 800fdc0:	e7fd      	b.n	800fdbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <xQueueReceive+0x40>
 800fdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <xQueueReceive+0x44>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e000      	b.n	800fdd6 <xQueueReceive+0x46>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d10b      	bne.n	800fdf2 <xQueueReceive+0x62>
	__asm volatile
 800fdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdde:	f383 8811 	msr	BASEPRI, r3
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	f3bf 8f4f 	dsb	sy
 800fdea:	61fb      	str	r3, [r7, #28]
}
 800fdec:	bf00      	nop
 800fdee:	bf00      	nop
 800fdf0:	e7fd      	b.n	800fdee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdf2:	f001 f8b9 	bl	8010f68 <xTaskGetSchedulerState>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d102      	bne.n	800fe02 <xQueueReceive+0x72>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <xQueueReceive+0x76>
 800fe02:	2301      	movs	r3, #1
 800fe04:	e000      	b.n	800fe08 <xQueueReceive+0x78>
 800fe06:	2300      	movs	r3, #0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10b      	bne.n	800fe24 <xQueueReceive+0x94>
	__asm volatile
 800fe0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	61bb      	str	r3, [r7, #24]
}
 800fe1e:	bf00      	nop
 800fe20:	bf00      	nop
 800fe22:	e7fd      	b.n	800fe20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe24:	f001 fe10 	bl	8011a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d01f      	beq.n	800fe74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe34:	68b9      	ldr	r1, [r7, #8]
 800fe36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe38:	f000 f915 	bl	8010066 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3e:	1e5a      	subs	r2, r3, #1
 800fe40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00f      	beq.n	800fe6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4e:	3310      	adds	r3, #16
 800fe50:	4618      	mov	r0, r3
 800fe52:	f000 fec3 	bl	8010bdc <xTaskRemoveFromEventList>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d007      	beq.n	800fe6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe5c:	4b3c      	ldr	r3, [pc, #240]	@ (800ff50 <xQueueReceive+0x1c0>)
 800fe5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	f3bf 8f4f 	dsb	sy
 800fe68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe6c:	f001 fe1e 	bl	8011aac <vPortExitCritical>
				return pdPASS;
 800fe70:	2301      	movs	r3, #1
 800fe72:	e069      	b.n	800ff48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d103      	bne.n	800fe82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe7a:	f001 fe17 	bl	8011aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	e062      	b.n	800ff48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d106      	bne.n	800fe96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe88:	f107 0310 	add.w	r3, r7, #16
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 ff09 	bl	8010ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe92:	2301      	movs	r3, #1
 800fe94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe96:	f001 fe09 	bl	8011aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe9a:	f000 fc4d 	bl	8010738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe9e:	f001 fdd3 	bl	8011a48 <vPortEnterCritical>
 800fea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fea8:	b25b      	sxtb	r3, r3
 800feaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800feae:	d103      	bne.n	800feb8 <xQueueReceive+0x128>
 800feb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb2:	2200      	movs	r2, #0
 800feb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800feb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800febe:	b25b      	sxtb	r3, r3
 800fec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fec4:	d103      	bne.n	800fece <xQueueReceive+0x13e>
 800fec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fece:	f001 fded 	bl	8011aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fed2:	1d3a      	adds	r2, r7, #4
 800fed4:	f107 0310 	add.w	r3, r7, #16
 800fed8:	4611      	mov	r1, r2
 800feda:	4618      	mov	r0, r3
 800fedc:	f000 fef8 	bl	8010cd0 <xTaskCheckForTimeOut>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d123      	bne.n	800ff2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fee8:	f000 f935 	bl	8010156 <prvIsQueueEmpty>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d017      	beq.n	800ff22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef4:	3324      	adds	r3, #36	@ 0x24
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 fe1c 	bl	8010b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff02:	f000 f8d6 	bl	80100b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff06:	f000 fc25 	bl	8010754 <xTaskResumeAll>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d189      	bne.n	800fe24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ff10:	4b0f      	ldr	r3, [pc, #60]	@ (800ff50 <xQueueReceive+0x1c0>)
 800ff12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	f3bf 8f4f 	dsb	sy
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	e780      	b.n	800fe24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ff22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff24:	f000 f8c5 	bl	80100b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff28:	f000 fc14 	bl	8010754 <xTaskResumeAll>
 800ff2c:	e77a      	b.n	800fe24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ff2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff30:	f000 f8bf 	bl	80100b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff34:	f000 fc0e 	bl	8010754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff3a:	f000 f90c 	bl	8010156 <prvIsQueueEmpty>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f43f af6f 	beq.w	800fe24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3730      	adds	r7, #48	@ 0x30
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	e000ed04 	.word	0xe000ed04

0800ff54 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d10b      	bne.n	800ff7a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800ff62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	60bb      	str	r3, [r7, #8]
}
 800ff74:	bf00      	nop
 800ff76:	bf00      	nop
 800ff78:	e7fd      	b.n	800ff76 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ff7a:	f001 fd65 	bl	8011a48 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff82:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ff84:	f001 fd92 	bl	8011aac <vPortExitCritical>

	return uxReturn;
 800ff88:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b086      	sub	sp, #24
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10d      	bne.n	800ffcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d14d      	bne.n	8010054 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 fff1 	bl	8010fa4 <xTaskPriorityDisinherit>
 800ffc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	609a      	str	r2, [r3, #8]
 800ffca:	e043      	b.n	8010054 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d119      	bne.n	8010006 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6858      	ldr	r0, [r3, #4]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffda:	461a      	mov	r2, r3
 800ffdc:	68b9      	ldr	r1, [r7, #8]
 800ffde:	f002 f910 	bl	8012202 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffea:	441a      	add	r2, r3
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d32b      	bcc.n	8010054 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	605a      	str	r2, [r3, #4]
 8010004:	e026      	b.n	8010054 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	68d8      	ldr	r0, [r3, #12]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801000e:	461a      	mov	r2, r3
 8010010:	68b9      	ldr	r1, [r7, #8]
 8010012:	f002 f8f6 	bl	8012202 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	68da      	ldr	r2, [r3, #12]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801001e:	425b      	negs	r3, r3
 8010020:	441a      	add	r2, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	429a      	cmp	r2, r3
 8010030:	d207      	bcs.n	8010042 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689a      	ldr	r2, [r3, #8]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801003a:	425b      	negs	r3, r3
 801003c:	441a      	add	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d105      	bne.n	8010054 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	3b01      	subs	r3, #1
 8010052:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	1c5a      	adds	r2, r3, #1
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801005c:	697b      	ldr	r3, [r7, #20]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3718      	adds	r7, #24
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b082      	sub	sp, #8
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
 801006e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010074:	2b00      	cmp	r3, #0
 8010076:	d018      	beq.n	80100aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68da      	ldr	r2, [r3, #12]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010080:	441a      	add	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	429a      	cmp	r2, r3
 8010090:	d303      	bcc.n	801009a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	68d9      	ldr	r1, [r3, #12]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a2:	461a      	mov	r2, r3
 80100a4:	6838      	ldr	r0, [r7, #0]
 80100a6:	f002 f8ac 	bl	8012202 <memcpy>
	}
}
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b084      	sub	sp, #16
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100ba:	f001 fcc5 	bl	8011a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100c6:	e011      	b.n	80100ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d012      	beq.n	80100f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3324      	adds	r3, #36	@ 0x24
 80100d4:	4618      	mov	r0, r3
 80100d6:	f000 fd81 	bl	8010bdc <xTaskRemoveFromEventList>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d001      	beq.n	80100e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80100e0:	f000 fe5a 	bl	8010d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	3b01      	subs	r3, #1
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dce9      	bgt.n	80100c8 <prvUnlockQueue+0x16>
 80100f4:	e000      	b.n	80100f8 <prvUnlockQueue+0x46>
					break;
 80100f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	22ff      	movs	r2, #255	@ 0xff
 80100fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010100:	f001 fcd4 	bl	8011aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010104:	f001 fca0 	bl	8011a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801010e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010110:	e011      	b.n	8010136 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d012      	beq.n	8010140 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3310      	adds	r3, #16
 801011e:	4618      	mov	r0, r3
 8010120:	f000 fd5c 	bl	8010bdc <xTaskRemoveFromEventList>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801012a:	f000 fe35 	bl	8010d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801012e:	7bbb      	ldrb	r3, [r7, #14]
 8010130:	3b01      	subs	r3, #1
 8010132:	b2db      	uxtb	r3, r3
 8010134:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801013a:	2b00      	cmp	r3, #0
 801013c:	dce9      	bgt.n	8010112 <prvUnlockQueue+0x60>
 801013e:	e000      	b.n	8010142 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010140:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	22ff      	movs	r2, #255	@ 0xff
 8010146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801014a:	f001 fcaf 	bl	8011aac <vPortExitCritical>
}
 801014e:	bf00      	nop
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b084      	sub	sp, #16
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801015e:	f001 fc73 	bl	8011a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010166:	2b00      	cmp	r3, #0
 8010168:	d102      	bne.n	8010170 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801016a:	2301      	movs	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	e001      	b.n	8010174 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010174:	f001 fc9a 	bl	8011aac <vPortExitCritical>

	return xReturn;
 8010178:	68fb      	ldr	r3, [r7, #12]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801018a:	f001 fc5d 	bl	8011a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010196:	429a      	cmp	r2, r3
 8010198:	d102      	bne.n	80101a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801019a:	2301      	movs	r3, #1
 801019c:	60fb      	str	r3, [r7, #12]
 801019e:	e001      	b.n	80101a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101a4:	f001 fc82 	bl	8011aac <vPortExitCritical>

	return xReturn;
 80101a8:	68fb      	ldr	r3, [r7, #12]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101be:	2300      	movs	r3, #0
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	e014      	b.n	80101ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80101c4:	4a0f      	ldr	r2, [pc, #60]	@ (8010204 <vQueueAddToRegistry+0x50>)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10b      	bne.n	80101e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80101d0:	490c      	ldr	r1, [pc, #48]	@ (8010204 <vQueueAddToRegistry+0x50>)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80101da:	4a0a      	ldr	r2, [pc, #40]	@ (8010204 <vQueueAddToRegistry+0x50>)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	4413      	add	r3, r2
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80101e6:	e006      	b.n	80101f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	3301      	adds	r3, #1
 80101ec:	60fb      	str	r3, [r7, #12]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2b07      	cmp	r3, #7
 80101f2:	d9e7      	bls.n	80101c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80101f4:	bf00      	nop
 80101f6:	bf00      	nop
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	200012d4 	.word	0x200012d4

08010208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010218:	f001 fc16 	bl	8011a48 <vPortEnterCritical>
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010222:	b25b      	sxtb	r3, r3
 8010224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010228:	d103      	bne.n	8010232 <vQueueWaitForMessageRestricted+0x2a>
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010238:	b25b      	sxtb	r3, r3
 801023a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801023e:	d103      	bne.n	8010248 <vQueueWaitForMessageRestricted+0x40>
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	2200      	movs	r2, #0
 8010244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010248:	f001 fc30 	bl	8011aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010250:	2b00      	cmp	r3, #0
 8010252:	d106      	bne.n	8010262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	3324      	adds	r3, #36	@ 0x24
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	68b9      	ldr	r1, [r7, #8]
 801025c:	4618      	mov	r0, r3
 801025e:	f000 fc91 	bl	8010b84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010262:	6978      	ldr	r0, [r7, #20]
 8010264:	f7ff ff25 	bl	80100b2 <prvUnlockQueue>
	}
 8010268:	bf00      	nop
 801026a:	3718      	adds	r7, #24
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010270:	b580      	push	{r7, lr}
 8010272:	b08e      	sub	sp, #56	@ 0x38
 8010274:	af04      	add	r7, sp, #16
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]
 801027c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801027e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010280:	2b00      	cmp	r3, #0
 8010282:	d10b      	bne.n	801029c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010288:	f383 8811 	msr	BASEPRI, r3
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	623b      	str	r3, [r7, #32]
}
 8010296:	bf00      	nop
 8010298:	bf00      	nop
 801029a:	e7fd      	b.n	8010298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801029c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10b      	bne.n	80102ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	61fb      	str	r3, [r7, #28]
}
 80102b4:	bf00      	nop
 80102b6:	bf00      	nop
 80102b8:	e7fd      	b.n	80102b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80102ba:	23a8      	movs	r3, #168	@ 0xa8
 80102bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80102c2:	d00b      	beq.n	80102dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	61bb      	str	r3, [r7, #24]
}
 80102d6:	bf00      	nop
 80102d8:	bf00      	nop
 80102da:	e7fd      	b.n	80102d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80102dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80102de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d01e      	beq.n	8010322 <xTaskCreateStatic+0xb2>
 80102e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d01b      	beq.n	8010322 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80102ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80102ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	2202      	movs	r2, #2
 80102f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80102fc:	2300      	movs	r3, #0
 80102fe:	9303      	str	r3, [sp, #12]
 8010300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010302:	9302      	str	r3, [sp, #8]
 8010304:	f107 0314 	add.w	r3, r7, #20
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	68b9      	ldr	r1, [r7, #8]
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f000 f851 	bl	80103bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801031a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801031c:	f000 f8f6 	bl	801050c <prvAddNewTaskToReadyList>
 8010320:	e001      	b.n	8010326 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010326:	697b      	ldr	r3, [r7, #20]
	}
 8010328:	4618      	mov	r0, r3
 801032a:	3728      	adds	r7, #40	@ 0x28
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08c      	sub	sp, #48	@ 0x30
 8010334:	af04      	add	r7, sp, #16
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	4613      	mov	r3, r2
 801033e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010340:	88fb      	ldrh	r3, [r7, #6]
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	4618      	mov	r0, r3
 8010346:	f001 fca1 	bl	8011c8c <pvPortMalloc>
 801034a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00e      	beq.n	8010370 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010352:	20a8      	movs	r0, #168	@ 0xa8
 8010354:	f001 fc9a 	bl	8011c8c <pvPortMalloc>
 8010358:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d003      	beq.n	8010368 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	631a      	str	r2, [r3, #48]	@ 0x30
 8010366:	e005      	b.n	8010374 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010368:	6978      	ldr	r0, [r7, #20]
 801036a:	f001 fcd9 	bl	8011d20 <vPortFree>
 801036e:	e001      	b.n	8010374 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d017      	beq.n	80103aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	2200      	movs	r2, #0
 801037e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010382:	88fa      	ldrh	r2, [r7, #6]
 8010384:	2300      	movs	r3, #0
 8010386:	9303      	str	r3, [sp, #12]
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	9302      	str	r3, [sp, #8]
 801038c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	68b9      	ldr	r1, [r7, #8]
 8010398:	68f8      	ldr	r0, [r7, #12]
 801039a:	f000 f80f 	bl	80103bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801039e:	69f8      	ldr	r0, [r7, #28]
 80103a0:	f000 f8b4 	bl	801050c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80103a4:	2301      	movs	r3, #1
 80103a6:	61bb      	str	r3, [r7, #24]
 80103a8:	e002      	b.n	80103b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80103aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80103ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80103b0:	69bb      	ldr	r3, [r7, #24]
	}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3720      	adds	r7, #32
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
	...

080103bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b088      	sub	sp, #32
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
 80103c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	461a      	mov	r2, r3
 80103d4:	21a5      	movs	r1, #165	@ 0xa5
 80103d6:	f001 fe89 	bl	80120ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80103da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80103e4:	3b01      	subs	r3, #1
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	f023 0307 	bic.w	r3, r3, #7
 80103f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	f003 0307 	and.w	r3, r3, #7
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00b      	beq.n	8010416 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80103fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010402:	f383 8811 	msr	BASEPRI, r3
 8010406:	f3bf 8f6f 	isb	sy
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	617b      	str	r3, [r7, #20]
}
 8010410:	bf00      	nop
 8010412:	bf00      	nop
 8010414:	e7fd      	b.n	8010412 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d01f      	beq.n	801045c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801041c:	2300      	movs	r3, #0
 801041e:	61fb      	str	r3, [r7, #28]
 8010420:	e012      	b.n	8010448 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	4413      	add	r3, r2
 8010428:	7819      	ldrb	r1, [r3, #0]
 801042a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	4413      	add	r3, r2
 8010430:	3334      	adds	r3, #52	@ 0x34
 8010432:	460a      	mov	r2, r1
 8010434:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	4413      	add	r3, r2
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d006      	beq.n	8010450 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	3301      	adds	r3, #1
 8010446:	61fb      	str	r3, [r7, #28]
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	2b0f      	cmp	r3, #15
 801044c:	d9e9      	bls.n	8010422 <prvInitialiseNewTask+0x66>
 801044e:	e000      	b.n	8010452 <prvInitialiseNewTask+0x96>
			{
				break;
 8010450:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801045a:	e003      	b.n	8010464 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801045c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045e:	2200      	movs	r2, #0
 8010460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010466:	2b37      	cmp	r3, #55	@ 0x37
 8010468:	d901      	bls.n	801046e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801046a:	2337      	movs	r3, #55	@ 0x37
 801046c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801046e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010472:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010478:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801047a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801047c:	2200      	movs	r2, #0
 801047e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010482:	3304      	adds	r3, #4
 8010484:	4618      	mov	r0, r3
 8010486:	f7ff f909 	bl	800f69c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801048a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048c:	3318      	adds	r3, #24
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff f904 	bl	800f69c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801049a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80104a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80104aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ac:	2200      	movs	r2, #0
 80104ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	2200      	movs	r2, #0
 80104b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80104ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104bc:	3354      	adds	r3, #84	@ 0x54
 80104be:	224c      	movs	r2, #76	@ 0x4c
 80104c0:	2100      	movs	r1, #0
 80104c2:	4618      	mov	r0, r3
 80104c4:	f001 fe12 	bl	80120ec <memset>
 80104c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ca:	4a0d      	ldr	r2, [pc, #52]	@ (8010500 <prvInitialiseNewTask+0x144>)
 80104cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80104ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d0:	4a0c      	ldr	r2, [pc, #48]	@ (8010504 <prvInitialiseNewTask+0x148>)
 80104d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80104d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d6:	4a0c      	ldr	r2, [pc, #48]	@ (8010508 <prvInitialiseNewTask+0x14c>)
 80104d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	68f9      	ldr	r1, [r7, #12]
 80104de:	69b8      	ldr	r0, [r7, #24]
 80104e0:	f001 f97e 	bl	80117e0 <pxPortInitialiseStack>
 80104e4:	4602      	mov	r2, r0
 80104e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80104ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80104f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104f6:	bf00      	nop
 80104f8:	3720      	adds	r7, #32
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	20003950 	.word	0x20003950
 8010504:	200039b8 	.word	0x200039b8
 8010508:	20003a20 	.word	0x20003a20

0801050c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010514:	f001 fa98 	bl	8011a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010518:	4b2d      	ldr	r3, [pc, #180]	@ (80105d0 <prvAddNewTaskToReadyList+0xc4>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3301      	adds	r3, #1
 801051e:	4a2c      	ldr	r2, [pc, #176]	@ (80105d0 <prvAddNewTaskToReadyList+0xc4>)
 8010520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010522:	4b2c      	ldr	r3, [pc, #176]	@ (80105d4 <prvAddNewTaskToReadyList+0xc8>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d109      	bne.n	801053e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801052a:	4a2a      	ldr	r2, [pc, #168]	@ (80105d4 <prvAddNewTaskToReadyList+0xc8>)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010530:	4b27      	ldr	r3, [pc, #156]	@ (80105d0 <prvAddNewTaskToReadyList+0xc4>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d110      	bne.n	801055a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010538:	f000 fc52 	bl	8010de0 <prvInitialiseTaskLists>
 801053c:	e00d      	b.n	801055a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801053e:	4b26      	ldr	r3, [pc, #152]	@ (80105d8 <prvAddNewTaskToReadyList+0xcc>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d109      	bne.n	801055a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010546:	4b23      	ldr	r3, [pc, #140]	@ (80105d4 <prvAddNewTaskToReadyList+0xc8>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010550:	429a      	cmp	r2, r3
 8010552:	d802      	bhi.n	801055a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010554:	4a1f      	ldr	r2, [pc, #124]	@ (80105d4 <prvAddNewTaskToReadyList+0xc8>)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801055a:	4b20      	ldr	r3, [pc, #128]	@ (80105dc <prvAddNewTaskToReadyList+0xd0>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	3301      	adds	r3, #1
 8010560:	4a1e      	ldr	r2, [pc, #120]	@ (80105dc <prvAddNewTaskToReadyList+0xd0>)
 8010562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010564:	4b1d      	ldr	r3, [pc, #116]	@ (80105dc <prvAddNewTaskToReadyList+0xd0>)
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010570:	4b1b      	ldr	r3, [pc, #108]	@ (80105e0 <prvAddNewTaskToReadyList+0xd4>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	429a      	cmp	r2, r3
 8010576:	d903      	bls.n	8010580 <prvAddNewTaskToReadyList+0x74>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057c:	4a18      	ldr	r2, [pc, #96]	@ (80105e0 <prvAddNewTaskToReadyList+0xd4>)
 801057e:	6013      	str	r3, [r2, #0]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010584:	4613      	mov	r3, r2
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4a15      	ldr	r2, [pc, #84]	@ (80105e4 <prvAddNewTaskToReadyList+0xd8>)
 801058e:	441a      	add	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3304      	adds	r3, #4
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	f7ff f88d 	bl	800f6b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801059c:	f001 fa86 	bl	8011aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80105a0:	4b0d      	ldr	r3, [pc, #52]	@ (80105d8 <prvAddNewTaskToReadyList+0xcc>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00e      	beq.n	80105c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80105a8:	4b0a      	ldr	r3, [pc, #40]	@ (80105d4 <prvAddNewTaskToReadyList+0xc8>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d207      	bcs.n	80105c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80105b6:	4b0c      	ldr	r3, [pc, #48]	@ (80105e8 <prvAddNewTaskToReadyList+0xdc>)
 80105b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105c6:	bf00      	nop
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	200017e8 	.word	0x200017e8
 80105d4:	20001314 	.word	0x20001314
 80105d8:	200017f4 	.word	0x200017f4
 80105dc:	20001804 	.word	0x20001804
 80105e0:	200017f0 	.word	0x200017f0
 80105e4:	20001318 	.word	0x20001318
 80105e8:	e000ed04 	.word	0xe000ed04

080105ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80105f4:	2300      	movs	r3, #0
 80105f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d018      	beq.n	8010630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80105fe:	4b14      	ldr	r3, [pc, #80]	@ (8010650 <vTaskDelay+0x64>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00b      	beq.n	801061e <vTaskDelay+0x32>
	__asm volatile
 8010606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801060a:	f383 8811 	msr	BASEPRI, r3
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	60bb      	str	r3, [r7, #8]
}
 8010618:	bf00      	nop
 801061a:	bf00      	nop
 801061c:	e7fd      	b.n	801061a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801061e:	f000 f88b 	bl	8010738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010622:	2100      	movs	r1, #0
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 fd2d 	bl	8011084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801062a:	f000 f893 	bl	8010754 <xTaskResumeAll>
 801062e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d107      	bne.n	8010646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010636:	4b07      	ldr	r3, [pc, #28]	@ (8010654 <vTaskDelay+0x68>)
 8010638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010646:	bf00      	nop
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	20001810 	.word	0x20001810
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	@ 0x28
 801065c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801065e:	2300      	movs	r3, #0
 8010660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010666:	463a      	mov	r2, r7
 8010668:	1d39      	adds	r1, r7, #4
 801066a:	f107 0308 	add.w	r3, r7, #8
 801066e:	4618      	mov	r0, r3
 8010670:	f7fe ffc0 	bl	800f5f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	68ba      	ldr	r2, [r7, #8]
 801067a:	9202      	str	r2, [sp, #8]
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	2300      	movs	r3, #0
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	2300      	movs	r3, #0
 8010684:	460a      	mov	r2, r1
 8010686:	4924      	ldr	r1, [pc, #144]	@ (8010718 <vTaskStartScheduler+0xc0>)
 8010688:	4824      	ldr	r0, [pc, #144]	@ (801071c <vTaskStartScheduler+0xc4>)
 801068a:	f7ff fdf1 	bl	8010270 <xTaskCreateStatic>
 801068e:	4603      	mov	r3, r0
 8010690:	4a23      	ldr	r2, [pc, #140]	@ (8010720 <vTaskStartScheduler+0xc8>)
 8010692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010694:	4b22      	ldr	r3, [pc, #136]	@ (8010720 <vTaskStartScheduler+0xc8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801069c:	2301      	movs	r3, #1
 801069e:	617b      	str	r3, [r7, #20]
 80106a0:	e001      	b.n	80106a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d102      	bne.n	80106b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80106ac:	f000 fd3e 	bl	801112c <xTimerCreateTimerTask>
 80106b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d11b      	bne.n	80106f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80106b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	613b      	str	r3, [r7, #16]
}
 80106ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106cc:	4b15      	ldr	r3, [pc, #84]	@ (8010724 <vTaskStartScheduler+0xcc>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3354      	adds	r3, #84	@ 0x54
 80106d2:	4a15      	ldr	r2, [pc, #84]	@ (8010728 <vTaskStartScheduler+0xd0>)
 80106d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80106d6:	4b15      	ldr	r3, [pc, #84]	@ (801072c <vTaskStartScheduler+0xd4>)
 80106d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80106de:	4b14      	ldr	r3, [pc, #80]	@ (8010730 <vTaskStartScheduler+0xd8>)
 80106e0:	2201      	movs	r2, #1
 80106e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80106e4:	4b13      	ldr	r3, [pc, #76]	@ (8010734 <vTaskStartScheduler+0xdc>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80106ea:	f001 f909 	bl	8011900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80106ee:	e00f      	b.n	8010710 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106f6:	d10b      	bne.n	8010710 <vTaskStartScheduler+0xb8>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	60fb      	str	r3, [r7, #12]
}
 801070a:	bf00      	nop
 801070c:	bf00      	nop
 801070e:	e7fd      	b.n	801070c <vTaskStartScheduler+0xb4>
}
 8010710:	bf00      	nop
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	08013184 	.word	0x08013184
 801071c:	08010db1 	.word	0x08010db1
 8010720:	2000180c 	.word	0x2000180c
 8010724:	20001314 	.word	0x20001314
 8010728:	20000020 	.word	0x20000020
 801072c:	20001808 	.word	0x20001808
 8010730:	200017f4 	.word	0x200017f4
 8010734:	200017ec 	.word	0x200017ec

08010738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010738:	b480      	push	{r7}
 801073a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801073c:	4b04      	ldr	r3, [pc, #16]	@ (8010750 <vTaskSuspendAll+0x18>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	3301      	adds	r3, #1
 8010742:	4a03      	ldr	r2, [pc, #12]	@ (8010750 <vTaskSuspendAll+0x18>)
 8010744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010746:	bf00      	nop
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	20001810 	.word	0x20001810

08010754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801075e:	2300      	movs	r3, #0
 8010760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010762:	4b42      	ldr	r3, [pc, #264]	@ (801086c <xTaskResumeAll+0x118>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10b      	bne.n	8010782 <xTaskResumeAll+0x2e>
	__asm volatile
 801076a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	603b      	str	r3, [r7, #0]
}
 801077c:	bf00      	nop
 801077e:	bf00      	nop
 8010780:	e7fd      	b.n	801077e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010782:	f001 f961 	bl	8011a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010786:	4b39      	ldr	r3, [pc, #228]	@ (801086c <xTaskResumeAll+0x118>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3b01      	subs	r3, #1
 801078c:	4a37      	ldr	r2, [pc, #220]	@ (801086c <xTaskResumeAll+0x118>)
 801078e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010790:	4b36      	ldr	r3, [pc, #216]	@ (801086c <xTaskResumeAll+0x118>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d162      	bne.n	801085e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010798:	4b35      	ldr	r3, [pc, #212]	@ (8010870 <xTaskResumeAll+0x11c>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d05e      	beq.n	801085e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107a0:	e02f      	b.n	8010802 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107a2:	4b34      	ldr	r3, [pc, #208]	@ (8010874 <xTaskResumeAll+0x120>)
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	3318      	adds	r3, #24
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe ffde 	bl	800f770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	3304      	adds	r3, #4
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fe ffd9 	bl	800f770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c2:	4b2d      	ldr	r3, [pc, #180]	@ (8010878 <xTaskResumeAll+0x124>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d903      	bls.n	80107d2 <xTaskResumeAll+0x7e>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ce:	4a2a      	ldr	r2, [pc, #168]	@ (8010878 <xTaskResumeAll+0x124>)
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107d6:	4613      	mov	r3, r2
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	4a27      	ldr	r2, [pc, #156]	@ (801087c <xTaskResumeAll+0x128>)
 80107e0:	441a      	add	r2, r3
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	3304      	adds	r3, #4
 80107e6:	4619      	mov	r1, r3
 80107e8:	4610      	mov	r0, r2
 80107ea:	f7fe ff64 	bl	800f6b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107f2:	4b23      	ldr	r3, [pc, #140]	@ (8010880 <xTaskResumeAll+0x12c>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d302      	bcc.n	8010802 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80107fc:	4b21      	ldr	r3, [pc, #132]	@ (8010884 <xTaskResumeAll+0x130>)
 80107fe:	2201      	movs	r2, #1
 8010800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010802:	4b1c      	ldr	r3, [pc, #112]	@ (8010874 <xTaskResumeAll+0x120>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1cb      	bne.n	80107a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d001      	beq.n	8010814 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010810:	f000 fb8a 	bl	8010f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010814:	4b1c      	ldr	r3, [pc, #112]	@ (8010888 <xTaskResumeAll+0x134>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d010      	beq.n	8010842 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010820:	f000 f846 	bl	80108b0 <xTaskIncrementTick>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d002      	beq.n	8010830 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801082a:	4b16      	ldr	r3, [pc, #88]	@ (8010884 <xTaskResumeAll+0x130>)
 801082c:	2201      	movs	r2, #1
 801082e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	3b01      	subs	r3, #1
 8010834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1f1      	bne.n	8010820 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801083c:	4b12      	ldr	r3, [pc, #72]	@ (8010888 <xTaskResumeAll+0x134>)
 801083e:	2200      	movs	r2, #0
 8010840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010842:	4b10      	ldr	r3, [pc, #64]	@ (8010884 <xTaskResumeAll+0x130>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d009      	beq.n	801085e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801084a:	2301      	movs	r3, #1
 801084c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801084e:	4b0f      	ldr	r3, [pc, #60]	@ (801088c <xTaskResumeAll+0x138>)
 8010850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801085e:	f001 f925 	bl	8011aac <vPortExitCritical>

	return xAlreadyYielded;
 8010862:	68bb      	ldr	r3, [r7, #8]
}
 8010864:	4618      	mov	r0, r3
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	20001810 	.word	0x20001810
 8010870:	200017e8 	.word	0x200017e8
 8010874:	200017a8 	.word	0x200017a8
 8010878:	200017f0 	.word	0x200017f0
 801087c:	20001318 	.word	0x20001318
 8010880:	20001314 	.word	0x20001314
 8010884:	200017fc 	.word	0x200017fc
 8010888:	200017f8 	.word	0x200017f8
 801088c:	e000ed04 	.word	0xe000ed04

08010890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010896:	4b05      	ldr	r3, [pc, #20]	@ (80108ac <xTaskGetTickCount+0x1c>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801089c:	687b      	ldr	r3, [r7, #4]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	200017ec 	.word	0x200017ec

080108b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80108b6:	2300      	movs	r3, #0
 80108b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108ba:	4b4f      	ldr	r3, [pc, #316]	@ (80109f8 <xTaskIncrementTick+0x148>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f040 8090 	bne.w	80109e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80108c4:	4b4d      	ldr	r3, [pc, #308]	@ (80109fc <xTaskIncrementTick+0x14c>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	3301      	adds	r3, #1
 80108ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108cc:	4a4b      	ldr	r2, [pc, #300]	@ (80109fc <xTaskIncrementTick+0x14c>)
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d121      	bne.n	801091c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80108d8:	4b49      	ldr	r3, [pc, #292]	@ (8010a00 <xTaskIncrementTick+0x150>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00b      	beq.n	80108fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	603b      	str	r3, [r7, #0]
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	e7fd      	b.n	80108f6 <xTaskIncrementTick+0x46>
 80108fa:	4b41      	ldr	r3, [pc, #260]	@ (8010a00 <xTaskIncrementTick+0x150>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	4b40      	ldr	r3, [pc, #256]	@ (8010a04 <xTaskIncrementTick+0x154>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a3e      	ldr	r2, [pc, #248]	@ (8010a00 <xTaskIncrementTick+0x150>)
 8010906:	6013      	str	r3, [r2, #0]
 8010908:	4a3e      	ldr	r2, [pc, #248]	@ (8010a04 <xTaskIncrementTick+0x154>)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6013      	str	r3, [r2, #0]
 801090e:	4b3e      	ldr	r3, [pc, #248]	@ (8010a08 <xTaskIncrementTick+0x158>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3301      	adds	r3, #1
 8010914:	4a3c      	ldr	r2, [pc, #240]	@ (8010a08 <xTaskIncrementTick+0x158>)
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	f000 fb06 	bl	8010f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801091c:	4b3b      	ldr	r3, [pc, #236]	@ (8010a0c <xTaskIncrementTick+0x15c>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	693a      	ldr	r2, [r7, #16]
 8010922:	429a      	cmp	r2, r3
 8010924:	d349      	bcc.n	80109ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010926:	4b36      	ldr	r3, [pc, #216]	@ (8010a00 <xTaskIncrementTick+0x150>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d104      	bne.n	801093a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010930:	4b36      	ldr	r3, [pc, #216]	@ (8010a0c <xTaskIncrementTick+0x15c>)
 8010932:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010936:	601a      	str	r2, [r3, #0]
					break;
 8010938:	e03f      	b.n	80109ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801093a:	4b31      	ldr	r3, [pc, #196]	@ (8010a00 <xTaskIncrementTick+0x150>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	429a      	cmp	r2, r3
 8010950:	d203      	bcs.n	801095a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010952:	4a2e      	ldr	r2, [pc, #184]	@ (8010a0c <xTaskIncrementTick+0x15c>)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010958:	e02f      	b.n	80109ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	3304      	adds	r3, #4
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe ff06 	bl	800f770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010968:	2b00      	cmp	r3, #0
 801096a:	d004      	beq.n	8010976 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	3318      	adds	r3, #24
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fefd 	bl	800f770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801097a:	4b25      	ldr	r3, [pc, #148]	@ (8010a10 <xTaskIncrementTick+0x160>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d903      	bls.n	801098a <xTaskIncrementTick+0xda>
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010986:	4a22      	ldr	r2, [pc, #136]	@ (8010a10 <xTaskIncrementTick+0x160>)
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801098e:	4613      	mov	r3, r2
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4413      	add	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4a1f      	ldr	r2, [pc, #124]	@ (8010a14 <xTaskIncrementTick+0x164>)
 8010998:	441a      	add	r2, r3
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	3304      	adds	r3, #4
 801099e:	4619      	mov	r1, r3
 80109a0:	4610      	mov	r0, r2
 80109a2:	f7fe fe88 	bl	800f6b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109aa:	4b1b      	ldr	r3, [pc, #108]	@ (8010a18 <xTaskIncrementTick+0x168>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d3b8      	bcc.n	8010926 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80109b4:	2301      	movs	r3, #1
 80109b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109b8:	e7b5      	b.n	8010926 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109ba:	4b17      	ldr	r3, [pc, #92]	@ (8010a18 <xTaskIncrementTick+0x168>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c0:	4914      	ldr	r1, [pc, #80]	@ (8010a14 <xTaskIncrementTick+0x164>)
 80109c2:	4613      	mov	r3, r2
 80109c4:	009b      	lsls	r3, r3, #2
 80109c6:	4413      	add	r3, r2
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	440b      	add	r3, r1
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d901      	bls.n	80109d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80109d2:	2301      	movs	r3, #1
 80109d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80109d6:	4b11      	ldr	r3, [pc, #68]	@ (8010a1c <xTaskIncrementTick+0x16c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d007      	beq.n	80109ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80109de:	2301      	movs	r3, #1
 80109e0:	617b      	str	r3, [r7, #20]
 80109e2:	e004      	b.n	80109ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80109e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010a20 <xTaskIncrementTick+0x170>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3301      	adds	r3, #1
 80109ea:	4a0d      	ldr	r2, [pc, #52]	@ (8010a20 <xTaskIncrementTick+0x170>)
 80109ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80109ee:	697b      	ldr	r3, [r7, #20]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20001810 	.word	0x20001810
 80109fc:	200017ec 	.word	0x200017ec
 8010a00:	200017a0 	.word	0x200017a0
 8010a04:	200017a4 	.word	0x200017a4
 8010a08:	20001800 	.word	0x20001800
 8010a0c:	20001808 	.word	0x20001808
 8010a10:	200017f0 	.word	0x200017f0
 8010a14:	20001318 	.word	0x20001318
 8010a18:	20001314 	.word	0x20001314
 8010a1c:	200017fc 	.word	0x200017fc
 8010a20:	200017f8 	.word	0x200017f8

08010a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b086      	sub	sp, #24
 8010a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8010b20 <vTaskSwitchContext+0xfc>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a32:	4b3c      	ldr	r3, [pc, #240]	@ (8010b24 <vTaskSwitchContext+0x100>)
 8010a34:	2201      	movs	r2, #1
 8010a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a38:	e06e      	b.n	8010b18 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8010a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8010b24 <vTaskSwitchContext+0x100>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010a40:	4b39      	ldr	r3, [pc, #228]	@ (8010b28 <vTaskSwitchContext+0x104>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a46:	613b      	str	r3, [r7, #16]
 8010a48:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010a4c:	60fb      	str	r3, [r7, #12]
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d111      	bne.n	8010a7c <vTaskSwitchContext+0x58>
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	3304      	adds	r3, #4
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d10b      	bne.n	8010a7c <vTaskSwitchContext+0x58>
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	3308      	adds	r3, #8
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d105      	bne.n	8010a7c <vTaskSwitchContext+0x58>
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	330c      	adds	r3, #12
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d008      	beq.n	8010a8e <vTaskSwitchContext+0x6a>
 8010a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8010b28 <vTaskSwitchContext+0x104>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	4b29      	ldr	r3, [pc, #164]	@ (8010b28 <vTaskSwitchContext+0x104>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3334      	adds	r3, #52	@ 0x34
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f7f0 f967 	bl	8000d5c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a8e:	4b27      	ldr	r3, [pc, #156]	@ (8010b2c <vTaskSwitchContext+0x108>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	617b      	str	r3, [r7, #20]
 8010a94:	e011      	b.n	8010aba <vTaskSwitchContext+0x96>
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10b      	bne.n	8010ab4 <vTaskSwitchContext+0x90>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	607b      	str	r3, [r7, #4]
}
 8010aae:	bf00      	nop
 8010ab0:	bf00      	nop
 8010ab2:	e7fd      	b.n	8010ab0 <vTaskSwitchContext+0x8c>
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	617b      	str	r3, [r7, #20]
 8010aba:	491d      	ldr	r1, [pc, #116]	@ (8010b30 <vTaskSwitchContext+0x10c>)
 8010abc:	697a      	ldr	r2, [r7, #20]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	440b      	add	r3, r1
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d0e3      	beq.n	8010a96 <vTaskSwitchContext+0x72>
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	4a15      	ldr	r2, [pc, #84]	@ (8010b30 <vTaskSwitchContext+0x10c>)
 8010ada:	4413      	add	r3, r2
 8010adc:	60bb      	str	r3, [r7, #8]
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	685a      	ldr	r2, [r3, #4]
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	605a      	str	r2, [r3, #4]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	685a      	ldr	r2, [r3, #4]
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	3308      	adds	r3, #8
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d104      	bne.n	8010afe <vTaskSwitchContext+0xda>
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	685a      	ldr	r2, [r3, #4]
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	605a      	str	r2, [r3, #4]
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	4a08      	ldr	r2, [pc, #32]	@ (8010b28 <vTaskSwitchContext+0x104>)
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	4a08      	ldr	r2, [pc, #32]	@ (8010b2c <vTaskSwitchContext+0x108>)
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b0e:	4b06      	ldr	r3, [pc, #24]	@ (8010b28 <vTaskSwitchContext+0x104>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3354      	adds	r3, #84	@ 0x54
 8010b14:	4a07      	ldr	r2, [pc, #28]	@ (8010b34 <vTaskSwitchContext+0x110>)
 8010b16:	6013      	str	r3, [r2, #0]
}
 8010b18:	bf00      	nop
 8010b1a:	3718      	adds	r7, #24
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20001810 	.word	0x20001810
 8010b24:	200017fc 	.word	0x200017fc
 8010b28:	20001314 	.word	0x20001314
 8010b2c:	200017f0 	.word	0x200017f0
 8010b30:	20001318 	.word	0x20001318
 8010b34:	20000020 	.word	0x20000020

08010b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10b      	bne.n	8010b60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	60fb      	str	r3, [r7, #12]
}
 8010b5a:	bf00      	nop
 8010b5c:	bf00      	nop
 8010b5e:	e7fd      	b.n	8010b5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b60:	4b07      	ldr	r3, [pc, #28]	@ (8010b80 <vTaskPlaceOnEventList+0x48>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	3318      	adds	r3, #24
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fe fdc8 	bl	800f6fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b6e:	2101      	movs	r1, #1
 8010b70:	6838      	ldr	r0, [r7, #0]
 8010b72:	f000 fa87 	bl	8011084 <prvAddCurrentTaskToDelayedList>
}
 8010b76:	bf00      	nop
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20001314 	.word	0x20001314

08010b84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10b      	bne.n	8010bae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b9a:	f383 8811 	msr	BASEPRI, r3
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	617b      	str	r3, [r7, #20]
}
 8010ba8:	bf00      	nop
 8010baa:	bf00      	nop
 8010bac:	e7fd      	b.n	8010baa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bae:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	3318      	adds	r3, #24
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f7fe fd7d 	bl	800f6b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d002      	beq.n	8010bc8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010bc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010bc8:	6879      	ldr	r1, [r7, #4]
 8010bca:	68b8      	ldr	r0, [r7, #8]
 8010bcc:	f000 fa5a 	bl	8011084 <prvAddCurrentTaskToDelayedList>
	}
 8010bd0:	bf00      	nop
 8010bd2:	3718      	adds	r7, #24
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20001314 	.word	0x20001314

08010bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10b      	bne.n	8010c0a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf6:	f383 8811 	msr	BASEPRI, r3
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	60fb      	str	r3, [r7, #12]
}
 8010c04:	bf00      	nop
 8010c06:	bf00      	nop
 8010c08:	e7fd      	b.n	8010c06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	3318      	adds	r3, #24
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe fdae 	bl	800f770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c14:	4b1d      	ldr	r3, [pc, #116]	@ (8010c8c <xTaskRemoveFromEventList+0xb0>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d11d      	bne.n	8010c58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fe fda5 	bl	800f770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c2a:	4b19      	ldr	r3, [pc, #100]	@ (8010c90 <xTaskRemoveFromEventList+0xb4>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d903      	bls.n	8010c3a <xTaskRemoveFromEventList+0x5e>
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c36:	4a16      	ldr	r2, [pc, #88]	@ (8010c90 <xTaskRemoveFromEventList+0xb4>)
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4a13      	ldr	r2, [pc, #76]	@ (8010c94 <xTaskRemoveFromEventList+0xb8>)
 8010c48:	441a      	add	r2, r3
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	4619      	mov	r1, r3
 8010c50:	4610      	mov	r0, r2
 8010c52:	f7fe fd30 	bl	800f6b6 <vListInsertEnd>
 8010c56:	e005      	b.n	8010c64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	3318      	adds	r3, #24
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	480e      	ldr	r0, [pc, #56]	@ (8010c98 <xTaskRemoveFromEventList+0xbc>)
 8010c60:	f7fe fd29 	bl	800f6b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c68:	4b0c      	ldr	r3, [pc, #48]	@ (8010c9c <xTaskRemoveFromEventList+0xc0>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d905      	bls.n	8010c7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c72:	2301      	movs	r3, #1
 8010c74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c76:	4b0a      	ldr	r3, [pc, #40]	@ (8010ca0 <xTaskRemoveFromEventList+0xc4>)
 8010c78:	2201      	movs	r2, #1
 8010c7a:	601a      	str	r2, [r3, #0]
 8010c7c:	e001      	b.n	8010c82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c82:	697b      	ldr	r3, [r7, #20]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20001810 	.word	0x20001810
 8010c90:	200017f0 	.word	0x200017f0
 8010c94:	20001318 	.word	0x20001318
 8010c98:	200017a8 	.word	0x200017a8
 8010c9c:	20001314 	.word	0x20001314
 8010ca0:	200017fc 	.word	0x200017fc

08010ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010cac:	4b06      	ldr	r3, [pc, #24]	@ (8010cc8 <vTaskInternalSetTimeOutState+0x24>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010cb4:	4b05      	ldr	r3, [pc, #20]	@ (8010ccc <vTaskInternalSetTimeOutState+0x28>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	605a      	str	r2, [r3, #4]
}
 8010cbc:	bf00      	nop
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr
 8010cc8:	20001800 	.word	0x20001800
 8010ccc:	200017ec 	.word	0x200017ec

08010cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10b      	bne.n	8010cf8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	613b      	str	r3, [r7, #16]
}
 8010cf2:	bf00      	nop
 8010cf4:	bf00      	nop
 8010cf6:	e7fd      	b.n	8010cf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10b      	bne.n	8010d16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	60fb      	str	r3, [r7, #12]
}
 8010d10:	bf00      	nop
 8010d12:	bf00      	nop
 8010d14:	e7fd      	b.n	8010d12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010d16:	f000 fe97 	bl	8011a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8010d90 <xTaskCheckForTimeOut+0xc0>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	69ba      	ldr	r2, [r7, #24]
 8010d26:	1ad3      	subs	r3, r2, r3
 8010d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d32:	d102      	bne.n	8010d3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010d34:	2300      	movs	r3, #0
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	e023      	b.n	8010d82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	4b15      	ldr	r3, [pc, #84]	@ (8010d94 <xTaskCheckForTimeOut+0xc4>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d007      	beq.n	8010d56 <xTaskCheckForTimeOut+0x86>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	69ba      	ldr	r2, [r7, #24]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d302      	bcc.n	8010d56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d50:	2301      	movs	r3, #1
 8010d52:	61fb      	str	r3, [r7, #28]
 8010d54:	e015      	b.n	8010d82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d20b      	bcs.n	8010d78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	1ad2      	subs	r2, r2, r3
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7ff ff99 	bl	8010ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010d72:	2300      	movs	r3, #0
 8010d74:	61fb      	str	r3, [r7, #28]
 8010d76:	e004      	b.n	8010d82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010d82:	f000 fe93 	bl	8011aac <vPortExitCritical>

	return xReturn;
 8010d86:	69fb      	ldr	r3, [r7, #28]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3720      	adds	r7, #32
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	200017ec 	.word	0x200017ec
 8010d94:	20001800 	.word	0x20001800

08010d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d98:	b480      	push	{r7}
 8010d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d9c:	4b03      	ldr	r3, [pc, #12]	@ (8010dac <vTaskMissedYield+0x14>)
 8010d9e:	2201      	movs	r2, #1
 8010da0:	601a      	str	r2, [r3, #0]
}
 8010da2:	bf00      	nop
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	200017fc 	.word	0x200017fc

08010db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010db8:	f000 f852 	bl	8010e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010dbc:	4b06      	ldr	r3, [pc, #24]	@ (8010dd8 <prvIdleTask+0x28>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d9f9      	bls.n	8010db8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010dc4:	4b05      	ldr	r3, [pc, #20]	@ (8010ddc <prvIdleTask+0x2c>)
 8010dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dca:	601a      	str	r2, [r3, #0]
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010dd4:	e7f0      	b.n	8010db8 <prvIdleTask+0x8>
 8010dd6:	bf00      	nop
 8010dd8:	20001318 	.word	0x20001318
 8010ddc:	e000ed04 	.word	0xe000ed04

08010de0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010de6:	2300      	movs	r3, #0
 8010de8:	607b      	str	r3, [r7, #4]
 8010dea:	e00c      	b.n	8010e06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	4a12      	ldr	r2, [pc, #72]	@ (8010e40 <prvInitialiseTaskLists+0x60>)
 8010df8:	4413      	add	r3, r2
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe fc2e 	bl	800f65c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	3301      	adds	r3, #1
 8010e04:	607b      	str	r3, [r7, #4]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b37      	cmp	r3, #55	@ 0x37
 8010e0a:	d9ef      	bls.n	8010dec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010e0c:	480d      	ldr	r0, [pc, #52]	@ (8010e44 <prvInitialiseTaskLists+0x64>)
 8010e0e:	f7fe fc25 	bl	800f65c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010e12:	480d      	ldr	r0, [pc, #52]	@ (8010e48 <prvInitialiseTaskLists+0x68>)
 8010e14:	f7fe fc22 	bl	800f65c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010e18:	480c      	ldr	r0, [pc, #48]	@ (8010e4c <prvInitialiseTaskLists+0x6c>)
 8010e1a:	f7fe fc1f 	bl	800f65c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e1e:	480c      	ldr	r0, [pc, #48]	@ (8010e50 <prvInitialiseTaskLists+0x70>)
 8010e20:	f7fe fc1c 	bl	800f65c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e24:	480b      	ldr	r0, [pc, #44]	@ (8010e54 <prvInitialiseTaskLists+0x74>)
 8010e26:	f7fe fc19 	bl	800f65c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e58 <prvInitialiseTaskLists+0x78>)
 8010e2c:	4a05      	ldr	r2, [pc, #20]	@ (8010e44 <prvInitialiseTaskLists+0x64>)
 8010e2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e30:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <prvInitialiseTaskLists+0x7c>)
 8010e32:	4a05      	ldr	r2, [pc, #20]	@ (8010e48 <prvInitialiseTaskLists+0x68>)
 8010e34:	601a      	str	r2, [r3, #0]
}
 8010e36:	bf00      	nop
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	20001318 	.word	0x20001318
 8010e44:	20001778 	.word	0x20001778
 8010e48:	2000178c 	.word	0x2000178c
 8010e4c:	200017a8 	.word	0x200017a8
 8010e50:	200017bc 	.word	0x200017bc
 8010e54:	200017d4 	.word	0x200017d4
 8010e58:	200017a0 	.word	0x200017a0
 8010e5c:	200017a4 	.word	0x200017a4

08010e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e66:	e019      	b.n	8010e9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e68:	f000 fdee 	bl	8011a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e6c:	4b10      	ldr	r3, [pc, #64]	@ (8010eb0 <prvCheckTasksWaitingTermination+0x50>)
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3304      	adds	r3, #4
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fe fc79 	bl	800f770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb4 <prvCheckTasksWaitingTermination+0x54>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	3b01      	subs	r3, #1
 8010e84:	4a0b      	ldr	r2, [pc, #44]	@ (8010eb4 <prvCheckTasksWaitingTermination+0x54>)
 8010e86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e88:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb8 <prvCheckTasksWaitingTermination+0x58>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8010eb8 <prvCheckTasksWaitingTermination+0x58>)
 8010e90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e92:	f000 fe0b 	bl	8011aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 f810 	bl	8010ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e9c:	4b06      	ldr	r3, [pc, #24]	@ (8010eb8 <prvCheckTasksWaitingTermination+0x58>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e1      	bne.n	8010e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	200017bc 	.word	0x200017bc
 8010eb4:	200017e8 	.word	0x200017e8
 8010eb8:	200017d0 	.word	0x200017d0

08010ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3354      	adds	r3, #84	@ 0x54
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f001 f917 	bl	80120fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d108      	bne.n	8010eea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010edc:	4618      	mov	r0, r3
 8010ede:	f000 ff1f 	bl	8011d20 <vPortFree>
				vPortFree( pxTCB );
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 ff1c 	bl	8011d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ee8:	e019      	b.n	8010f1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d103      	bne.n	8010efc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 ff13 	bl	8011d20 <vPortFree>
	}
 8010efa:	e010      	b.n	8010f1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	d00b      	beq.n	8010f1e <prvDeleteTCB+0x62>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	60fb      	str	r3, [r7, #12]
}
 8010f18:	bf00      	nop
 8010f1a:	bf00      	nop
 8010f1c:	e7fd      	b.n	8010f1a <prvDeleteTCB+0x5e>
	}
 8010f1e:	bf00      	nop
 8010f20:	3710      	adds	r7, #16
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
	...

08010f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8010f60 <prvResetNextTaskUnblockTime+0x38>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d104      	bne.n	8010f42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f38:	4b0a      	ldr	r3, [pc, #40]	@ (8010f64 <prvResetNextTaskUnblockTime+0x3c>)
 8010f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010f3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010f40:	e008      	b.n	8010f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f42:	4b07      	ldr	r3, [pc, #28]	@ (8010f60 <prvResetNextTaskUnblockTime+0x38>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	4a04      	ldr	r2, [pc, #16]	@ (8010f64 <prvResetNextTaskUnblockTime+0x3c>)
 8010f52:	6013      	str	r3, [r2, #0]
}
 8010f54:	bf00      	nop
 8010f56:	370c      	adds	r7, #12
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	200017a0 	.word	0x200017a0
 8010f64:	20001808 	.word	0x20001808

08010f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f68:	b480      	push	{r7}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f9c <xTaskGetSchedulerState+0x34>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f76:	2301      	movs	r3, #1
 8010f78:	607b      	str	r3, [r7, #4]
 8010f7a:	e008      	b.n	8010f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f7c:	4b08      	ldr	r3, [pc, #32]	@ (8010fa0 <xTaskGetSchedulerState+0x38>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d102      	bne.n	8010f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f84:	2302      	movs	r3, #2
 8010f86:	607b      	str	r3, [r7, #4]
 8010f88:	e001      	b.n	8010f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f8e:	687b      	ldr	r3, [r7, #4]
	}
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	200017f4 	.word	0x200017f4
 8010fa0:	20001810 	.word	0x20001810

08010fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d058      	beq.n	801106c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010fba:	4b2f      	ldr	r3, [pc, #188]	@ (8011078 <xTaskPriorityDisinherit+0xd4>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	693a      	ldr	r2, [r7, #16]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d00b      	beq.n	8010fdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	60fb      	str	r3, [r7, #12]
}
 8010fd6:	bf00      	nop
 8010fd8:	bf00      	nop
 8010fda:	e7fd      	b.n	8010fd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d10b      	bne.n	8010ffc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	60bb      	str	r3, [r7, #8]
}
 8010ff6:	bf00      	nop
 8010ff8:	bf00      	nop
 8010ffa:	e7fd      	b.n	8010ff8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011000:	1e5a      	subs	r2, r3, #1
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801100e:	429a      	cmp	r2, r3
 8011010:	d02c      	beq.n	801106c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011016:	2b00      	cmp	r3, #0
 8011018:	d128      	bne.n	801106c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	3304      	adds	r3, #4
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe fba6 	bl	800f770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801103c:	4b0f      	ldr	r3, [pc, #60]	@ (801107c <xTaskPriorityDisinherit+0xd8>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	429a      	cmp	r2, r3
 8011042:	d903      	bls.n	801104c <xTaskPriorityDisinherit+0xa8>
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011048:	4a0c      	ldr	r2, [pc, #48]	@ (801107c <xTaskPriorityDisinherit+0xd8>)
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011050:	4613      	mov	r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	4413      	add	r3, r2
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	4a09      	ldr	r2, [pc, #36]	@ (8011080 <xTaskPriorityDisinherit+0xdc>)
 801105a:	441a      	add	r2, r3
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	3304      	adds	r3, #4
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f7fe fb27 	bl	800f6b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011068:	2301      	movs	r3, #1
 801106a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801106c:	697b      	ldr	r3, [r7, #20]
	}
 801106e:	4618      	mov	r0, r3
 8011070:	3718      	adds	r7, #24
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	20001314 	.word	0x20001314
 801107c:	200017f0 	.word	0x200017f0
 8011080:	20001318 	.word	0x20001318

08011084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801108e:	4b21      	ldr	r3, [pc, #132]	@ (8011114 <prvAddCurrentTaskToDelayedList+0x90>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011094:	4b20      	ldr	r3, [pc, #128]	@ (8011118 <prvAddCurrentTaskToDelayedList+0x94>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	3304      	adds	r3, #4
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fb68 	bl	800f770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80110a6:	d10a      	bne.n	80110be <prvAddCurrentTaskToDelayedList+0x3a>
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d007      	beq.n	80110be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011118 <prvAddCurrentTaskToDelayedList+0x94>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3304      	adds	r3, #4
 80110b4:	4619      	mov	r1, r3
 80110b6:	4819      	ldr	r0, [pc, #100]	@ (801111c <prvAddCurrentTaskToDelayedList+0x98>)
 80110b8:	f7fe fafd 	bl	800f6b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110bc:	e026      	b.n	801110c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110c6:	4b14      	ldr	r3, [pc, #80]	@ (8011118 <prvAddCurrentTaskToDelayedList+0x94>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d209      	bcs.n	80110ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110d6:	4b12      	ldr	r3, [pc, #72]	@ (8011120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	4b0f      	ldr	r3, [pc, #60]	@ (8011118 <prvAddCurrentTaskToDelayedList+0x94>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	3304      	adds	r3, #4
 80110e0:	4619      	mov	r1, r3
 80110e2:	4610      	mov	r0, r2
 80110e4:	f7fe fb0b 	bl	800f6fe <vListInsert>
}
 80110e8:	e010      	b.n	801110c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110ea:	4b0e      	ldr	r3, [pc, #56]	@ (8011124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	4b0a      	ldr	r3, [pc, #40]	@ (8011118 <prvAddCurrentTaskToDelayedList+0x94>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	3304      	adds	r3, #4
 80110f4:	4619      	mov	r1, r3
 80110f6:	4610      	mov	r0, r2
 80110f8:	f7fe fb01 	bl	800f6fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80110fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	429a      	cmp	r2, r3
 8011104:	d202      	bcs.n	801110c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011106:	4a08      	ldr	r2, [pc, #32]	@ (8011128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	6013      	str	r3, [r2, #0]
}
 801110c:	bf00      	nop
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	200017ec 	.word	0x200017ec
 8011118:	20001314 	.word	0x20001314
 801111c:	200017d4 	.word	0x200017d4
 8011120:	200017a4 	.word	0x200017a4
 8011124:	200017a0 	.word	0x200017a0
 8011128:	20001808 	.word	0x20001808

0801112c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08a      	sub	sp, #40	@ 0x28
 8011130:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011132:	2300      	movs	r3, #0
 8011134:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011136:	f000 fb13 	bl	8011760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801113a:	4b1d      	ldr	r3, [pc, #116]	@ (80111b0 <xTimerCreateTimerTask+0x84>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d021      	beq.n	8011186 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011142:	2300      	movs	r3, #0
 8011144:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011146:	2300      	movs	r3, #0
 8011148:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801114a:	1d3a      	adds	r2, r7, #4
 801114c:	f107 0108 	add.w	r1, r7, #8
 8011150:	f107 030c 	add.w	r3, r7, #12
 8011154:	4618      	mov	r0, r3
 8011156:	f7fe fa67 	bl	800f628 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801115a:	6879      	ldr	r1, [r7, #4]
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	9202      	str	r2, [sp, #8]
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	2302      	movs	r3, #2
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	2300      	movs	r3, #0
 801116a:	460a      	mov	r2, r1
 801116c:	4911      	ldr	r1, [pc, #68]	@ (80111b4 <xTimerCreateTimerTask+0x88>)
 801116e:	4812      	ldr	r0, [pc, #72]	@ (80111b8 <xTimerCreateTimerTask+0x8c>)
 8011170:	f7ff f87e 	bl	8010270 <xTaskCreateStatic>
 8011174:	4603      	mov	r3, r0
 8011176:	4a11      	ldr	r2, [pc, #68]	@ (80111bc <xTimerCreateTimerTask+0x90>)
 8011178:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801117a:	4b10      	ldr	r3, [pc, #64]	@ (80111bc <xTimerCreateTimerTask+0x90>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011182:	2301      	movs	r3, #1
 8011184:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d10b      	bne.n	80111a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801118c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011190:	f383 8811 	msr	BASEPRI, r3
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	613b      	str	r3, [r7, #16]
}
 801119e:	bf00      	nop
 80111a0:	bf00      	nop
 80111a2:	e7fd      	b.n	80111a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80111a4:	697b      	ldr	r3, [r7, #20]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	20001844 	.word	0x20001844
 80111b4:	0801318c 	.word	0x0801318c
 80111b8:	080112f9 	.word	0x080112f9
 80111bc:	20001848 	.word	0x20001848

080111c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b08a      	sub	sp, #40	@ 0x28
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
 80111cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80111ce:	2300      	movs	r3, #0
 80111d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d10b      	bne.n	80111f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80111d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111dc:	f383 8811 	msr	BASEPRI, r3
 80111e0:	f3bf 8f6f 	isb	sy
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	623b      	str	r3, [r7, #32]
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	e7fd      	b.n	80111ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80111f0:	4b19      	ldr	r3, [pc, #100]	@ (8011258 <xTimerGenericCommand+0x98>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d02a      	beq.n	801124e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	2b05      	cmp	r3, #5
 8011208:	dc18      	bgt.n	801123c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801120a:	f7ff fead 	bl	8010f68 <xTaskGetSchedulerState>
 801120e:	4603      	mov	r3, r0
 8011210:	2b02      	cmp	r3, #2
 8011212:	d109      	bne.n	8011228 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011214:	4b10      	ldr	r3, [pc, #64]	@ (8011258 <xTimerGenericCommand+0x98>)
 8011216:	6818      	ldr	r0, [r3, #0]
 8011218:	f107 0110 	add.w	r1, r7, #16
 801121c:	2300      	movs	r3, #0
 801121e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011220:	f7fe fc16 	bl	800fa50 <xQueueGenericSend>
 8011224:	6278      	str	r0, [r7, #36]	@ 0x24
 8011226:	e012      	b.n	801124e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011228:	4b0b      	ldr	r3, [pc, #44]	@ (8011258 <xTimerGenericCommand+0x98>)
 801122a:	6818      	ldr	r0, [r3, #0]
 801122c:	f107 0110 	add.w	r1, r7, #16
 8011230:	2300      	movs	r3, #0
 8011232:	2200      	movs	r2, #0
 8011234:	f7fe fc0c 	bl	800fa50 <xQueueGenericSend>
 8011238:	6278      	str	r0, [r7, #36]	@ 0x24
 801123a:	e008      	b.n	801124e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801123c:	4b06      	ldr	r3, [pc, #24]	@ (8011258 <xTimerGenericCommand+0x98>)
 801123e:	6818      	ldr	r0, [r3, #0]
 8011240:	f107 0110 	add.w	r1, r7, #16
 8011244:	2300      	movs	r3, #0
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	f7fe fd04 	bl	800fc54 <xQueueGenericSendFromISR>
 801124c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011250:	4618      	mov	r0, r3
 8011252:	3728      	adds	r7, #40	@ 0x28
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20001844 	.word	0x20001844

0801125c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b088      	sub	sp, #32
 8011260:	af02      	add	r7, sp, #8
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011266:	4b23      	ldr	r3, [pc, #140]	@ (80112f4 <prvProcessExpiredTimer+0x98>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	3304      	adds	r3, #4
 8011274:	4618      	mov	r0, r3
 8011276:	f7fe fa7b 	bl	800f770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011280:	f003 0304 	and.w	r3, r3, #4
 8011284:	2b00      	cmp	r3, #0
 8011286:	d023      	beq.n	80112d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	699a      	ldr	r2, [r3, #24]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	18d1      	adds	r1, r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	6978      	ldr	r0, [r7, #20]
 8011296:	f000 f8d5 	bl	8011444 <prvInsertTimerInActiveList>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	d020      	beq.n	80112e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112a0:	2300      	movs	r3, #0
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	2300      	movs	r3, #0
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	2100      	movs	r1, #0
 80112aa:	6978      	ldr	r0, [r7, #20]
 80112ac:	f7ff ff88 	bl	80111c0 <xTimerGenericCommand>
 80112b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d114      	bne.n	80112e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80112b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	60fb      	str	r3, [r7, #12]
}
 80112ca:	bf00      	nop
 80112cc:	bf00      	nop
 80112ce:	e7fd      	b.n	80112cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112d6:	f023 0301 	bic.w	r3, r3, #1
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	6978      	ldr	r0, [r7, #20]
 80112e8:	4798      	blx	r3
}
 80112ea:	bf00      	nop
 80112ec:	3718      	adds	r7, #24
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	2000183c 	.word	0x2000183c

080112f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011300:	f107 0308 	add.w	r3, r7, #8
 8011304:	4618      	mov	r0, r3
 8011306:	f000 f859 	bl	80113bc <prvGetNextExpireTime>
 801130a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	4619      	mov	r1, r3
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f000 f805 	bl	8011320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011316:	f000 f8d7 	bl	80114c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801131a:	bf00      	nop
 801131c:	e7f0      	b.n	8011300 <prvTimerTask+0x8>
	...

08011320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801132a:	f7ff fa05 	bl	8010738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801132e:	f107 0308 	add.w	r3, r7, #8
 8011332:	4618      	mov	r0, r3
 8011334:	f000 f866 	bl	8011404 <prvSampleTimeNow>
 8011338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d130      	bne.n	80113a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10a      	bne.n	801135c <prvProcessTimerOrBlockTask+0x3c>
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	429a      	cmp	r2, r3
 801134c:	d806      	bhi.n	801135c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801134e:	f7ff fa01 	bl	8010754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011352:	68f9      	ldr	r1, [r7, #12]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7ff ff81 	bl	801125c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801135a:	e024      	b.n	80113a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d008      	beq.n	8011374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011362:	4b13      	ldr	r3, [pc, #76]	@ (80113b0 <prvProcessTimerOrBlockTask+0x90>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d101      	bne.n	8011370 <prvProcessTimerOrBlockTask+0x50>
 801136c:	2301      	movs	r3, #1
 801136e:	e000      	b.n	8011372 <prvProcessTimerOrBlockTask+0x52>
 8011370:	2300      	movs	r3, #0
 8011372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011374:	4b0f      	ldr	r3, [pc, #60]	@ (80113b4 <prvProcessTimerOrBlockTask+0x94>)
 8011376:	6818      	ldr	r0, [r3, #0]
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	683a      	ldr	r2, [r7, #0]
 8011380:	4619      	mov	r1, r3
 8011382:	f7fe ff41 	bl	8010208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011386:	f7ff f9e5 	bl	8010754 <xTaskResumeAll>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10a      	bne.n	80113a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011390:	4b09      	ldr	r3, [pc, #36]	@ (80113b8 <prvProcessTimerOrBlockTask+0x98>)
 8011392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011396:	601a      	str	r2, [r3, #0]
 8011398:	f3bf 8f4f 	dsb	sy
 801139c:	f3bf 8f6f 	isb	sy
}
 80113a0:	e001      	b.n	80113a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80113a2:	f7ff f9d7 	bl	8010754 <xTaskResumeAll>
}
 80113a6:	bf00      	nop
 80113a8:	3710      	adds	r7, #16
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	20001840 	.word	0x20001840
 80113b4:	20001844 	.word	0x20001844
 80113b8:	e000ed04 	.word	0xe000ed04

080113bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80113c4:	4b0e      	ldr	r3, [pc, #56]	@ (8011400 <prvGetNextExpireTime+0x44>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <prvGetNextExpireTime+0x16>
 80113ce:	2201      	movs	r2, #1
 80113d0:	e000      	b.n	80113d4 <prvGetNextExpireTime+0x18>
 80113d2:	2200      	movs	r2, #0
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d105      	bne.n	80113ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113e0:	4b07      	ldr	r3, [pc, #28]	@ (8011400 <prvGetNextExpireTime+0x44>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	60fb      	str	r3, [r7, #12]
 80113ea:	e001      	b.n	80113f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80113f0:	68fb      	ldr	r3, [r7, #12]
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	2000183c 	.word	0x2000183c

08011404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801140c:	f7ff fa40 	bl	8010890 <xTaskGetTickCount>
 8011410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011412:	4b0b      	ldr	r3, [pc, #44]	@ (8011440 <prvSampleTimeNow+0x3c>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	429a      	cmp	r2, r3
 801141a:	d205      	bcs.n	8011428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801141c:	f000 f93a 	bl	8011694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2201      	movs	r2, #1
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	e002      	b.n	801142e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801142e:	4a04      	ldr	r2, [pc, #16]	@ (8011440 <prvSampleTimeNow+0x3c>)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011434:	68fb      	ldr	r3, [r7, #12]
}
 8011436:	4618      	mov	r0, r3
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	2000184c 	.word	0x2000184c

08011444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b086      	sub	sp, #24
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
 8011450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011452:	2300      	movs	r3, #0
 8011454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	429a      	cmp	r2, r3
 8011468:	d812      	bhi.n	8011490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	429a      	cmp	r2, r3
 8011476:	d302      	bcc.n	801147e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011478:	2301      	movs	r3, #1
 801147a:	617b      	str	r3, [r7, #20]
 801147c:	e01b      	b.n	80114b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801147e:	4b10      	ldr	r3, [pc, #64]	@ (80114c0 <prvInsertTimerInActiveList+0x7c>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	3304      	adds	r3, #4
 8011486:	4619      	mov	r1, r3
 8011488:	4610      	mov	r0, r2
 801148a:	f7fe f938 	bl	800f6fe <vListInsert>
 801148e:	e012      	b.n	80114b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	429a      	cmp	r2, r3
 8011496:	d206      	bcs.n	80114a6 <prvInsertTimerInActiveList+0x62>
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	429a      	cmp	r2, r3
 801149e:	d302      	bcc.n	80114a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80114a0:	2301      	movs	r3, #1
 80114a2:	617b      	str	r3, [r7, #20]
 80114a4:	e007      	b.n	80114b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114a6:	4b07      	ldr	r3, [pc, #28]	@ (80114c4 <prvInsertTimerInActiveList+0x80>)
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3304      	adds	r3, #4
 80114ae:	4619      	mov	r1, r3
 80114b0:	4610      	mov	r0, r2
 80114b2:	f7fe f924 	bl	800f6fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80114b6:	697b      	ldr	r3, [r7, #20]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3718      	adds	r7, #24
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20001840 	.word	0x20001840
 80114c4:	2000183c 	.word	0x2000183c

080114c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08e      	sub	sp, #56	@ 0x38
 80114cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80114ce:	e0ce      	b.n	801166e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	da19      	bge.n	801150a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80114d6:	1d3b      	adds	r3, r7, #4
 80114d8:	3304      	adds	r3, #4
 80114da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80114dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10b      	bne.n	80114fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	61fb      	str	r3, [r7, #28]
}
 80114f4:	bf00      	nop
 80114f6:	bf00      	nop
 80114f8:	e7fd      	b.n	80114f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80114fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011500:	6850      	ldr	r0, [r2, #4]
 8011502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011504:	6892      	ldr	r2, [r2, #8]
 8011506:	4611      	mov	r1, r2
 8011508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2b00      	cmp	r3, #0
 801150e:	f2c0 80ae 	blt.w	801166e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d004      	beq.n	8011528 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011520:	3304      	adds	r3, #4
 8011522:	4618      	mov	r0, r3
 8011524:	f7fe f924 	bl	800f770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011528:	463b      	mov	r3, r7
 801152a:	4618      	mov	r0, r3
 801152c:	f7ff ff6a 	bl	8011404 <prvSampleTimeNow>
 8011530:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b09      	cmp	r3, #9
 8011536:	f200 8097 	bhi.w	8011668 <prvProcessReceivedCommands+0x1a0>
 801153a:	a201      	add	r2, pc, #4	@ (adr r2, 8011540 <prvProcessReceivedCommands+0x78>)
 801153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011540:	08011569 	.word	0x08011569
 8011544:	08011569 	.word	0x08011569
 8011548:	08011569 	.word	0x08011569
 801154c:	080115df 	.word	0x080115df
 8011550:	080115f3 	.word	0x080115f3
 8011554:	0801163f 	.word	0x0801163f
 8011558:	08011569 	.word	0x08011569
 801155c:	08011569 	.word	0x08011569
 8011560:	080115df 	.word	0x080115df
 8011564:	080115f3 	.word	0x080115f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801156a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801156e:	f043 0301 	orr.w	r3, r3, #1
 8011572:	b2da      	uxtb	r2, r3
 8011574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	18d1      	adds	r1, r2, r3
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011588:	f7ff ff5c 	bl	8011444 <prvInsertTimerInActiveList>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d06c      	beq.n	801166c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011598:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801159a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801159c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80115a0:	f003 0304 	and.w	r3, r3, #4
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d061      	beq.n	801166c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80115a8:	68ba      	ldr	r2, [r7, #8]
 80115aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ac:	699b      	ldr	r3, [r3, #24]
 80115ae:	441a      	add	r2, r3
 80115b0:	2300      	movs	r3, #0
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	2300      	movs	r3, #0
 80115b6:	2100      	movs	r1, #0
 80115b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80115ba:	f7ff fe01 	bl	80111c0 <xTimerGenericCommand>
 80115be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80115c0:	6a3b      	ldr	r3, [r7, #32]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d152      	bne.n	801166c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80115c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	61bb      	str	r3, [r7, #24]
}
 80115d8:	bf00      	nop
 80115da:	bf00      	nop
 80115dc:	e7fd      	b.n	80115da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80115e4:	f023 0301 	bic.w	r3, r3, #1
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80115f0:	e03d      	b.n	801166e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80115f8:	f043 0301 	orr.w	r3, r3, #1
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011608:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801160c:	699b      	ldr	r3, [r3, #24]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d10b      	bne.n	801162a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011616:	f383 8811 	msr	BASEPRI, r3
 801161a:	f3bf 8f6f 	isb	sy
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	617b      	str	r3, [r7, #20]
}
 8011624:	bf00      	nop
 8011626:	bf00      	nop
 8011628:	e7fd      	b.n	8011626 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801162c:	699a      	ldr	r2, [r3, #24]
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	18d1      	adds	r1, r2, r3
 8011632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011638:	f7ff ff04 	bl	8011444 <prvInsertTimerInActiveList>
					break;
 801163c:	e017      	b.n	801166e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011644:	f003 0302 	and.w	r3, r3, #2
 8011648:	2b00      	cmp	r3, #0
 801164a:	d103      	bne.n	8011654 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801164c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801164e:	f000 fb67 	bl	8011d20 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011652:	e00c      	b.n	801166e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801165a:	f023 0301 	bic.w	r3, r3, #1
 801165e:	b2da      	uxtb	r2, r3
 8011660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011666:	e002      	b.n	801166e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011668:	bf00      	nop
 801166a:	e000      	b.n	801166e <prvProcessReceivedCommands+0x1a6>
					break;
 801166c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801166e:	4b08      	ldr	r3, [pc, #32]	@ (8011690 <prvProcessReceivedCommands+0x1c8>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	1d39      	adds	r1, r7, #4
 8011674:	2200      	movs	r2, #0
 8011676:	4618      	mov	r0, r3
 8011678:	f7fe fb8a 	bl	800fd90 <xQueueReceive>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	f47f af26 	bne.w	80114d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011684:	bf00      	nop
 8011686:	bf00      	nop
 8011688:	3730      	adds	r7, #48	@ 0x30
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	20001844 	.word	0x20001844

08011694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801169a:	e049      	b.n	8011730 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801169c:	4b2e      	ldr	r3, [pc, #184]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116a6:	4b2c      	ldr	r3, [pc, #176]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	3304      	adds	r3, #4
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe f85b 	bl	800f770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	6a1b      	ldr	r3, [r3, #32]
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116c8:	f003 0304 	and.w	r3, r3, #4
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d02f      	beq.n	8011730 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	699b      	ldr	r3, [r3, #24]
 80116d4:	693a      	ldr	r2, [r7, #16]
 80116d6:	4413      	add	r3, r2
 80116d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d90e      	bls.n	8011700 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80116ee:	4b1a      	ldr	r3, [pc, #104]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	3304      	adds	r3, #4
 80116f6:	4619      	mov	r1, r3
 80116f8:	4610      	mov	r0, r2
 80116fa:	f7fe f800 	bl	800f6fe <vListInsert>
 80116fe:	e017      	b.n	8011730 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011700:	2300      	movs	r3, #0
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	2300      	movs	r3, #0
 8011706:	693a      	ldr	r2, [r7, #16]
 8011708:	2100      	movs	r1, #0
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f7ff fd58 	bl	80111c0 <xTimerGenericCommand>
 8011710:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d10b      	bne.n	8011730 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801171c:	f383 8811 	msr	BASEPRI, r3
 8011720:	f3bf 8f6f 	isb	sy
 8011724:	f3bf 8f4f 	dsb	sy
 8011728:	603b      	str	r3, [r7, #0]
}
 801172a:	bf00      	nop
 801172c:	bf00      	nop
 801172e:	e7fd      	b.n	801172c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011730:	4b09      	ldr	r3, [pc, #36]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d1b0      	bne.n	801169c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801173a:	4b07      	ldr	r3, [pc, #28]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011740:	4b06      	ldr	r3, [pc, #24]	@ (801175c <prvSwitchTimerLists+0xc8>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4a04      	ldr	r2, [pc, #16]	@ (8011758 <prvSwitchTimerLists+0xc4>)
 8011746:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011748:	4a04      	ldr	r2, [pc, #16]	@ (801175c <prvSwitchTimerLists+0xc8>)
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	6013      	str	r3, [r2, #0]
}
 801174e:	bf00      	nop
 8011750:	3718      	adds	r7, #24
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	2000183c 	.word	0x2000183c
 801175c:	20001840 	.word	0x20001840

08011760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011766:	f000 f96f 	bl	8011a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801176a:	4b15      	ldr	r3, [pc, #84]	@ (80117c0 <prvCheckForValidListAndQueue+0x60>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d120      	bne.n	80117b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011772:	4814      	ldr	r0, [pc, #80]	@ (80117c4 <prvCheckForValidListAndQueue+0x64>)
 8011774:	f7fd ff72 	bl	800f65c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011778:	4813      	ldr	r0, [pc, #76]	@ (80117c8 <prvCheckForValidListAndQueue+0x68>)
 801177a:	f7fd ff6f 	bl	800f65c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801177e:	4b13      	ldr	r3, [pc, #76]	@ (80117cc <prvCheckForValidListAndQueue+0x6c>)
 8011780:	4a10      	ldr	r2, [pc, #64]	@ (80117c4 <prvCheckForValidListAndQueue+0x64>)
 8011782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011784:	4b12      	ldr	r3, [pc, #72]	@ (80117d0 <prvCheckForValidListAndQueue+0x70>)
 8011786:	4a10      	ldr	r2, [pc, #64]	@ (80117c8 <prvCheckForValidListAndQueue+0x68>)
 8011788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801178a:	2300      	movs	r3, #0
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	4b11      	ldr	r3, [pc, #68]	@ (80117d4 <prvCheckForValidListAndQueue+0x74>)
 8011790:	4a11      	ldr	r2, [pc, #68]	@ (80117d8 <prvCheckForValidListAndQueue+0x78>)
 8011792:	2110      	movs	r1, #16
 8011794:	200a      	movs	r0, #10
 8011796:	f7fe f87f 	bl	800f898 <xQueueGenericCreateStatic>
 801179a:	4603      	mov	r3, r0
 801179c:	4a08      	ldr	r2, [pc, #32]	@ (80117c0 <prvCheckForValidListAndQueue+0x60>)
 801179e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80117a0:	4b07      	ldr	r3, [pc, #28]	@ (80117c0 <prvCheckForValidListAndQueue+0x60>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d005      	beq.n	80117b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80117a8:	4b05      	ldr	r3, [pc, #20]	@ (80117c0 <prvCheckForValidListAndQueue+0x60>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	490b      	ldr	r1, [pc, #44]	@ (80117dc <prvCheckForValidListAndQueue+0x7c>)
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe fd00 	bl	80101b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117b4:	f000 f97a 	bl	8011aac <vPortExitCritical>
}
 80117b8:	bf00      	nop
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	20001844 	.word	0x20001844
 80117c4:	20001814 	.word	0x20001814
 80117c8:	20001828 	.word	0x20001828
 80117cc:	2000183c 	.word	0x2000183c
 80117d0:	20001840 	.word	0x20001840
 80117d4:	200018f0 	.word	0x200018f0
 80117d8:	20001850 	.word	0x20001850
 80117dc:	08013194 	.word	0x08013194

080117e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	3b04      	subs	r3, #4
 80117f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80117f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	3b04      	subs	r3, #4
 80117fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	f023 0201 	bic.w	r2, r3, #1
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3b04      	subs	r3, #4
 801180e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011810:	4a0c      	ldr	r2, [pc, #48]	@ (8011844 <pxPortInitialiseStack+0x64>)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	3b14      	subs	r3, #20
 801181a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	3b04      	subs	r3, #4
 8011826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f06f 0202 	mvn.w	r2, #2
 801182e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	3b20      	subs	r3, #32
 8011834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011836:	68fb      	ldr	r3, [r7, #12]
}
 8011838:	4618      	mov	r0, r3
 801183a:	3714      	adds	r7, #20
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr
 8011844:	08011849 	.word	0x08011849

08011848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011852:	4b13      	ldr	r3, [pc, #76]	@ (80118a0 <prvTaskExitError+0x58>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801185a:	d00b      	beq.n	8011874 <prvTaskExitError+0x2c>
	__asm volatile
 801185c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011860:	f383 8811 	msr	BASEPRI, r3
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	f3bf 8f4f 	dsb	sy
 801186c:	60fb      	str	r3, [r7, #12]
}
 801186e:	bf00      	nop
 8011870:	bf00      	nop
 8011872:	e7fd      	b.n	8011870 <prvTaskExitError+0x28>
	__asm volatile
 8011874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	60bb      	str	r3, [r7, #8]
}
 8011886:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011888:	bf00      	nop
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d0fc      	beq.n	801188a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011890:	bf00      	nop
 8011892:	bf00      	nop
 8011894:	3714      	adds	r7, #20
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	20000010 	.word	0x20000010
	...

080118b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118b0:	4b07      	ldr	r3, [pc, #28]	@ (80118d0 <pxCurrentTCBConst2>)
 80118b2:	6819      	ldr	r1, [r3, #0]
 80118b4:	6808      	ldr	r0, [r1, #0]
 80118b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ba:	f380 8809 	msr	PSP, r0
 80118be:	f3bf 8f6f 	isb	sy
 80118c2:	f04f 0000 	mov.w	r0, #0
 80118c6:	f380 8811 	msr	BASEPRI, r0
 80118ca:	4770      	bx	lr
 80118cc:	f3af 8000 	nop.w

080118d0 <pxCurrentTCBConst2>:
 80118d0:	20001314 	.word	0x20001314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118d4:	bf00      	nop
 80118d6:	bf00      	nop

080118d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118d8:	4808      	ldr	r0, [pc, #32]	@ (80118fc <prvPortStartFirstTask+0x24>)
 80118da:	6800      	ldr	r0, [r0, #0]
 80118dc:	6800      	ldr	r0, [r0, #0]
 80118de:	f380 8808 	msr	MSP, r0
 80118e2:	f04f 0000 	mov.w	r0, #0
 80118e6:	f380 8814 	msr	CONTROL, r0
 80118ea:	b662      	cpsie	i
 80118ec:	b661      	cpsie	f
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	df00      	svc	0
 80118f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118fa:	bf00      	nop
 80118fc:	e000ed08 	.word	0xe000ed08

08011900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011906:	4b47      	ldr	r3, [pc, #284]	@ (8011a24 <xPortStartScheduler+0x124>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	4a47      	ldr	r2, [pc, #284]	@ (8011a28 <xPortStartScheduler+0x128>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d10b      	bne.n	8011928 <xPortStartScheduler+0x28>
	__asm volatile
 8011910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	613b      	str	r3, [r7, #16]
}
 8011922:	bf00      	nop
 8011924:	bf00      	nop
 8011926:	e7fd      	b.n	8011924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011928:	4b3e      	ldr	r3, [pc, #248]	@ (8011a24 <xPortStartScheduler+0x124>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	4a3f      	ldr	r2, [pc, #252]	@ (8011a2c <xPortStartScheduler+0x12c>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d10b      	bne.n	801194a <xPortStartScheduler+0x4a>
	__asm volatile
 8011932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011936:	f383 8811 	msr	BASEPRI, r3
 801193a:	f3bf 8f6f 	isb	sy
 801193e:	f3bf 8f4f 	dsb	sy
 8011942:	60fb      	str	r3, [r7, #12]
}
 8011944:	bf00      	nop
 8011946:	bf00      	nop
 8011948:	e7fd      	b.n	8011946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801194a:	4b39      	ldr	r3, [pc, #228]	@ (8011a30 <xPortStartScheduler+0x130>)
 801194c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	22ff      	movs	r2, #255	@ 0xff
 801195a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	b2db      	uxtb	r3, r3
 8011962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011964:	78fb      	ldrb	r3, [r7, #3]
 8011966:	b2db      	uxtb	r3, r3
 8011968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801196c:	b2da      	uxtb	r2, r3
 801196e:	4b31      	ldr	r3, [pc, #196]	@ (8011a34 <xPortStartScheduler+0x134>)
 8011970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011972:	4b31      	ldr	r3, [pc, #196]	@ (8011a38 <xPortStartScheduler+0x138>)
 8011974:	2207      	movs	r2, #7
 8011976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011978:	e009      	b.n	801198e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801197a:	4b2f      	ldr	r3, [pc, #188]	@ (8011a38 <xPortStartScheduler+0x138>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3b01      	subs	r3, #1
 8011980:	4a2d      	ldr	r2, [pc, #180]	@ (8011a38 <xPortStartScheduler+0x138>)
 8011982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	b2db      	uxtb	r3, r3
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	b2db      	uxtb	r3, r3
 801198c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801198e:	78fb      	ldrb	r3, [r7, #3]
 8011990:	b2db      	uxtb	r3, r3
 8011992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011996:	2b80      	cmp	r3, #128	@ 0x80
 8011998:	d0ef      	beq.n	801197a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801199a:	4b27      	ldr	r3, [pc, #156]	@ (8011a38 <xPortStartScheduler+0x138>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f1c3 0307 	rsb	r3, r3, #7
 80119a2:	2b04      	cmp	r3, #4
 80119a4:	d00b      	beq.n	80119be <xPortStartScheduler+0xbe>
	__asm volatile
 80119a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	60bb      	str	r3, [r7, #8]
}
 80119b8:	bf00      	nop
 80119ba:	bf00      	nop
 80119bc:	e7fd      	b.n	80119ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80119be:	4b1e      	ldr	r3, [pc, #120]	@ (8011a38 <xPortStartScheduler+0x138>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	021b      	lsls	r3, r3, #8
 80119c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011a38 <xPortStartScheduler+0x138>)
 80119c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80119c8:	4b1b      	ldr	r3, [pc, #108]	@ (8011a38 <xPortStartScheduler+0x138>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80119d0:	4a19      	ldr	r2, [pc, #100]	@ (8011a38 <xPortStartScheduler+0x138>)
 80119d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	b2da      	uxtb	r2, r3
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119dc:	4b17      	ldr	r3, [pc, #92]	@ (8011a3c <xPortStartScheduler+0x13c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4a16      	ldr	r2, [pc, #88]	@ (8011a3c <xPortStartScheduler+0x13c>)
 80119e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80119e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119e8:	4b14      	ldr	r3, [pc, #80]	@ (8011a3c <xPortStartScheduler+0x13c>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4a13      	ldr	r2, [pc, #76]	@ (8011a3c <xPortStartScheduler+0x13c>)
 80119ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80119f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119f4:	f000 f8da 	bl	8011bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119f8:	4b11      	ldr	r3, [pc, #68]	@ (8011a40 <xPortStartScheduler+0x140>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119fe:	f000 f8f9 	bl	8011bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a02:	4b10      	ldr	r3, [pc, #64]	@ (8011a44 <xPortStartScheduler+0x144>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a0f      	ldr	r2, [pc, #60]	@ (8011a44 <xPortStartScheduler+0x144>)
 8011a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a0e:	f7ff ff63 	bl	80118d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a12:	f7ff f807 	bl	8010a24 <vTaskSwitchContext>
	prvTaskExitError();
 8011a16:	f7ff ff17 	bl	8011848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3718      	adds	r7, #24
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	e000ed00 	.word	0xe000ed00
 8011a28:	410fc271 	.word	0x410fc271
 8011a2c:	410fc270 	.word	0x410fc270
 8011a30:	e000e400 	.word	0xe000e400
 8011a34:	20001940 	.word	0x20001940
 8011a38:	20001944 	.word	0x20001944
 8011a3c:	e000ed20 	.word	0xe000ed20
 8011a40:	20000010 	.word	0x20000010
 8011a44:	e000ef34 	.word	0xe000ef34

08011a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	607b      	str	r3, [r7, #4]
}
 8011a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a62:	4b10      	ldr	r3, [pc, #64]	@ (8011aa4 <vPortEnterCritical+0x5c>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	3301      	adds	r3, #1
 8011a68:	4a0e      	ldr	r2, [pc, #56]	@ (8011aa4 <vPortEnterCritical+0x5c>)
 8011a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa4 <vPortEnterCritical+0x5c>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d110      	bne.n	8011a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a74:	4b0c      	ldr	r3, [pc, #48]	@ (8011aa8 <vPortEnterCritical+0x60>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d00b      	beq.n	8011a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8011a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a82:	f383 8811 	msr	BASEPRI, r3
 8011a86:	f3bf 8f6f 	isb	sy
 8011a8a:	f3bf 8f4f 	dsb	sy
 8011a8e:	603b      	str	r3, [r7, #0]
}
 8011a90:	bf00      	nop
 8011a92:	bf00      	nop
 8011a94:	e7fd      	b.n	8011a92 <vPortEnterCritical+0x4a>
	}
}
 8011a96:	bf00      	nop
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	20000010 	.word	0x20000010
 8011aa8:	e000ed04 	.word	0xe000ed04

08011aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011ab2:	4b12      	ldr	r3, [pc, #72]	@ (8011afc <vPortExitCritical+0x50>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d10b      	bne.n	8011ad2 <vPortExitCritical+0x26>
	__asm volatile
 8011aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	607b      	str	r3, [r7, #4]
}
 8011acc:	bf00      	nop
 8011ace:	bf00      	nop
 8011ad0:	e7fd      	b.n	8011ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8011afc <vPortExitCritical+0x50>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	4a08      	ldr	r2, [pc, #32]	@ (8011afc <vPortExitCritical+0x50>)
 8011ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011adc:	4b07      	ldr	r3, [pc, #28]	@ (8011afc <vPortExitCritical+0x50>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d105      	bne.n	8011af0 <vPortExitCritical+0x44>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	f383 8811 	msr	BASEPRI, r3
}
 8011aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	20000010 	.word	0x20000010

08011b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b00:	f3ef 8009 	mrs	r0, PSP
 8011b04:	f3bf 8f6f 	isb	sy
 8011b08:	4b15      	ldr	r3, [pc, #84]	@ (8011b60 <pxCurrentTCBConst>)
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	f01e 0f10 	tst.w	lr, #16
 8011b10:	bf08      	it	eq
 8011b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1a:	6010      	str	r0, [r2, #0]
 8011b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011b24:	f380 8811 	msr	BASEPRI, r0
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f7fe ff78 	bl	8010a24 <vTaskSwitchContext>
 8011b34:	f04f 0000 	mov.w	r0, #0
 8011b38:	f380 8811 	msr	BASEPRI, r0
 8011b3c:	bc09      	pop	{r0, r3}
 8011b3e:	6819      	ldr	r1, [r3, #0]
 8011b40:	6808      	ldr	r0, [r1, #0]
 8011b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b46:	f01e 0f10 	tst.w	lr, #16
 8011b4a:	bf08      	it	eq
 8011b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b50:	f380 8809 	msr	PSP, r0
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	f3af 8000 	nop.w

08011b60 <pxCurrentTCBConst>:
 8011b60:	20001314 	.word	0x20001314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b64:	bf00      	nop
 8011b66:	bf00      	nop

08011b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	607b      	str	r3, [r7, #4]
}
 8011b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b82:	f7fe fe95 	bl	80108b0 <xTaskIncrementTick>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d003      	beq.n	8011b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b8c:	4b06      	ldr	r3, [pc, #24]	@ (8011ba8 <xPortSysTickHandler+0x40>)
 8011b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	2300      	movs	r3, #0
 8011b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	f383 8811 	msr	BASEPRI, r3
}
 8011b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ba0:	bf00      	nop
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	e000ed04 	.word	0xe000ed04

08011bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011bac:	b480      	push	{r7}
 8011bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8011be0 <vPortSetupTimerInterrupt+0x34>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8011be4 <vPortSetupTimerInterrupt+0x38>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8011be8 <vPortSetupTimerInterrupt+0x3c>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8011bec <vPortSetupTimerInterrupt+0x40>)
 8011bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc6:	099b      	lsrs	r3, r3, #6
 8011bc8:	4a09      	ldr	r2, [pc, #36]	@ (8011bf0 <vPortSetupTimerInterrupt+0x44>)
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011bce:	4b04      	ldr	r3, [pc, #16]	@ (8011be0 <vPortSetupTimerInterrupt+0x34>)
 8011bd0:	2207      	movs	r2, #7
 8011bd2:	601a      	str	r2, [r3, #0]
}
 8011bd4:	bf00      	nop
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop
 8011be0:	e000e010 	.word	0xe000e010
 8011be4:	e000e018 	.word	0xe000e018
 8011be8:	20000000 	.word	0x20000000
 8011bec:	10624dd3 	.word	0x10624dd3
 8011bf0:	e000e014 	.word	0xe000e014

08011bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011c04 <vPortEnableVFP+0x10>
 8011bf8:	6801      	ldr	r1, [r0, #0]
 8011bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011bfe:	6001      	str	r1, [r0, #0]
 8011c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c02:	bf00      	nop
 8011c04:	e000ed88 	.word	0xe000ed88

08011c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c08:	b480      	push	{r7}
 8011c0a:	b085      	sub	sp, #20
 8011c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c0e:	f3ef 8305 	mrs	r3, IPSR
 8011c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b0f      	cmp	r3, #15
 8011c18:	d915      	bls.n	8011c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c1a:	4a18      	ldr	r2, [pc, #96]	@ (8011c7c <vPortValidateInterruptPriority+0x74>)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	4413      	add	r3, r2
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c24:	4b16      	ldr	r3, [pc, #88]	@ (8011c80 <vPortValidateInterruptPriority+0x78>)
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	7afa      	ldrb	r2, [r7, #11]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d20b      	bcs.n	8011c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	607b      	str	r3, [r7, #4]
}
 8011c40:	bf00      	nop
 8011c42:	bf00      	nop
 8011c44:	e7fd      	b.n	8011c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c46:	4b0f      	ldr	r3, [pc, #60]	@ (8011c84 <vPortValidateInterruptPriority+0x7c>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c88 <vPortValidateInterruptPriority+0x80>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d90b      	bls.n	8011c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c5a:	f383 8811 	msr	BASEPRI, r3
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	f3bf 8f4f 	dsb	sy
 8011c66:	603b      	str	r3, [r7, #0]
}
 8011c68:	bf00      	nop
 8011c6a:	bf00      	nop
 8011c6c:	e7fd      	b.n	8011c6a <vPortValidateInterruptPriority+0x62>
	}
 8011c6e:	bf00      	nop
 8011c70:	3714      	adds	r7, #20
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	e000e3f0 	.word	0xe000e3f0
 8011c80:	20001940 	.word	0x20001940
 8011c84:	e000ed0c 	.word	0xe000ed0c
 8011c88:	20001944 	.word	0x20001944

08011c8c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8011c94:	2300      	movs	r3, #0
 8011c96:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f003 0307 	and.w	r3, r3, #7
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d004      	beq.n	8011cac <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f023 0307 	bic.w	r3, r3, #7
 8011ca8:	3308      	adds	r3, #8
 8011caa:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8011cac:	f7fe fd44 	bl	8010738 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8011cb0:	4b18      	ldr	r3, [pc, #96]	@ (8011d14 <pvPortMalloc+0x88>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d105      	bne.n	8011cc4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8011cb8:	4b17      	ldr	r3, [pc, #92]	@ (8011d18 <pvPortMalloc+0x8c>)
 8011cba:	f023 0307 	bic.w	r3, r3, #7
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	4b14      	ldr	r3, [pc, #80]	@ (8011d14 <pvPortMalloc+0x88>)
 8011cc2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8011cc4:	4b15      	ldr	r3, [pc, #84]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	4413      	add	r3, r2
 8011ccc:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d813      	bhi.n	8011cfc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8011cd4:	4b11      	ldr	r3, [pc, #68]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	441a      	add	r2, r3
 8011cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cde:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d90b      	bls.n	8011cfc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8011d14 <pvPortMalloc+0x88>)
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4413      	add	r3, r2
 8011cee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8011cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	4a08      	ldr	r2, [pc, #32]	@ (8011d1c <pvPortMalloc+0x90>)
 8011cfa:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011cfc:	f7fe fd2a 	bl	8010754 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d101      	bne.n	8011d0a <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011d06:	f7ef f834 	bl	8000d72 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3710      	adds	r7, #16
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	2000394c 	.word	0x2000394c
 8011d18:	20001950 	.word	0x20001950
 8011d1c:	20003948 	.word	0x20003948

08011d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00b      	beq.n	8011d46 <vPortFree+0x26>
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	60fb      	str	r3, [r7, #12]
}
 8011d40:	bf00      	nop
 8011d42:	bf00      	nop
 8011d44:	e7fd      	b.n	8011d42 <vPortFree+0x22>
}
 8011d46:	bf00      	nop
 8011d48:	3714      	adds	r7, #20
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr
	...

08011d54 <siprintf>:
 8011d54:	b40e      	push	{r1, r2, r3}
 8011d56:	b500      	push	{lr}
 8011d58:	b09c      	sub	sp, #112	@ 0x70
 8011d5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d5c:	9002      	str	r0, [sp, #8]
 8011d5e:	9006      	str	r0, [sp, #24]
 8011d60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d64:	4809      	ldr	r0, [pc, #36]	@ (8011d8c <siprintf+0x38>)
 8011d66:	9107      	str	r1, [sp, #28]
 8011d68:	9104      	str	r1, [sp, #16]
 8011d6a:	4909      	ldr	r1, [pc, #36]	@ (8011d90 <siprintf+0x3c>)
 8011d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d70:	9105      	str	r1, [sp, #20]
 8011d72:	6800      	ldr	r0, [r0, #0]
 8011d74:	9301      	str	r3, [sp, #4]
 8011d76:	a902      	add	r1, sp, #8
 8011d78:	f000 faf8 	bl	801236c <_svfiprintf_r>
 8011d7c:	9b02      	ldr	r3, [sp, #8]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	701a      	strb	r2, [r3, #0]
 8011d82:	b01c      	add	sp, #112	@ 0x70
 8011d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d88:	b003      	add	sp, #12
 8011d8a:	4770      	bx	lr
 8011d8c:	20000020 	.word	0x20000020
 8011d90:	ffff0208 	.word	0xffff0208

08011d94 <std>:
 8011d94:	2300      	movs	r3, #0
 8011d96:	b510      	push	{r4, lr}
 8011d98:	4604      	mov	r4, r0
 8011d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8011d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011da2:	6083      	str	r3, [r0, #8]
 8011da4:	8181      	strh	r1, [r0, #12]
 8011da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011da8:	81c2      	strh	r2, [r0, #14]
 8011daa:	6183      	str	r3, [r0, #24]
 8011dac:	4619      	mov	r1, r3
 8011dae:	2208      	movs	r2, #8
 8011db0:	305c      	adds	r0, #92	@ 0x5c
 8011db2:	f000 f99b 	bl	80120ec <memset>
 8011db6:	4b0d      	ldr	r3, [pc, #52]	@ (8011dec <std+0x58>)
 8011db8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011dba:	4b0d      	ldr	r3, [pc, #52]	@ (8011df0 <std+0x5c>)
 8011dbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011df4 <std+0x60>)
 8011dc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8011df8 <std+0x64>)
 8011dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8011dfc <std+0x68>)
 8011dc8:	6224      	str	r4, [r4, #32]
 8011dca:	429c      	cmp	r4, r3
 8011dcc:	d006      	beq.n	8011ddc <std+0x48>
 8011dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011dd2:	4294      	cmp	r4, r2
 8011dd4:	d002      	beq.n	8011ddc <std+0x48>
 8011dd6:	33d0      	adds	r3, #208	@ 0xd0
 8011dd8:	429c      	cmp	r4, r3
 8011dda:	d105      	bne.n	8011de8 <std+0x54>
 8011ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de4:	f000 ba0a 	b.w	80121fc <__retarget_lock_init_recursive>
 8011de8:	bd10      	pop	{r4, pc}
 8011dea:	bf00      	nop
 8011dec:	08012b35 	.word	0x08012b35
 8011df0:	08012b57 	.word	0x08012b57
 8011df4:	08012b8f 	.word	0x08012b8f
 8011df8:	08012bb3 	.word	0x08012bb3
 8011dfc:	20003950 	.word	0x20003950

08011e00 <stdio_exit_handler>:
 8011e00:	4a02      	ldr	r2, [pc, #8]	@ (8011e0c <stdio_exit_handler+0xc>)
 8011e02:	4903      	ldr	r1, [pc, #12]	@ (8011e10 <stdio_exit_handler+0x10>)
 8011e04:	4803      	ldr	r0, [pc, #12]	@ (8011e14 <stdio_exit_handler+0x14>)
 8011e06:	f000 b8ed 	b.w	8011fe4 <_fwalk_sglue>
 8011e0a:	bf00      	nop
 8011e0c:	20000014 	.word	0x20000014
 8011e10:	08012acd 	.word	0x08012acd
 8011e14:	20000024 	.word	0x20000024

08011e18 <cleanup_stdio>:
 8011e18:	6841      	ldr	r1, [r0, #4]
 8011e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8011e4c <cleanup_stdio+0x34>)
 8011e1c:	4299      	cmp	r1, r3
 8011e1e:	b510      	push	{r4, lr}
 8011e20:	4604      	mov	r4, r0
 8011e22:	d001      	beq.n	8011e28 <cleanup_stdio+0x10>
 8011e24:	f000 fe52 	bl	8012acc <_fflush_r>
 8011e28:	68a1      	ldr	r1, [r4, #8]
 8011e2a:	4b09      	ldr	r3, [pc, #36]	@ (8011e50 <cleanup_stdio+0x38>)
 8011e2c:	4299      	cmp	r1, r3
 8011e2e:	d002      	beq.n	8011e36 <cleanup_stdio+0x1e>
 8011e30:	4620      	mov	r0, r4
 8011e32:	f000 fe4b 	bl	8012acc <_fflush_r>
 8011e36:	68e1      	ldr	r1, [r4, #12]
 8011e38:	4b06      	ldr	r3, [pc, #24]	@ (8011e54 <cleanup_stdio+0x3c>)
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	d004      	beq.n	8011e48 <cleanup_stdio+0x30>
 8011e3e:	4620      	mov	r0, r4
 8011e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e44:	f000 be42 	b.w	8012acc <_fflush_r>
 8011e48:	bd10      	pop	{r4, pc}
 8011e4a:	bf00      	nop
 8011e4c:	20003950 	.word	0x20003950
 8011e50:	200039b8 	.word	0x200039b8
 8011e54:	20003a20 	.word	0x20003a20

08011e58 <global_stdio_init.part.0>:
 8011e58:	b510      	push	{r4, lr}
 8011e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8011e88 <global_stdio_init.part.0+0x30>)
 8011e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8011e8c <global_stdio_init.part.0+0x34>)
 8011e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8011e90 <global_stdio_init.part.0+0x38>)
 8011e60:	601a      	str	r2, [r3, #0]
 8011e62:	4620      	mov	r0, r4
 8011e64:	2200      	movs	r2, #0
 8011e66:	2104      	movs	r1, #4
 8011e68:	f7ff ff94 	bl	8011d94 <std>
 8011e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e70:	2201      	movs	r2, #1
 8011e72:	2109      	movs	r1, #9
 8011e74:	f7ff ff8e 	bl	8011d94 <std>
 8011e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e82:	2112      	movs	r1, #18
 8011e84:	f7ff bf86 	b.w	8011d94 <std>
 8011e88:	20003a88 	.word	0x20003a88
 8011e8c:	20003950 	.word	0x20003950
 8011e90:	08011e01 	.word	0x08011e01

08011e94 <__sfp_lock_acquire>:
 8011e94:	4801      	ldr	r0, [pc, #4]	@ (8011e9c <__sfp_lock_acquire+0x8>)
 8011e96:	f000 b9b2 	b.w	80121fe <__retarget_lock_acquire_recursive>
 8011e9a:	bf00      	nop
 8011e9c:	20003a91 	.word	0x20003a91

08011ea0 <__sfp_lock_release>:
 8011ea0:	4801      	ldr	r0, [pc, #4]	@ (8011ea8 <__sfp_lock_release+0x8>)
 8011ea2:	f000 b9ad 	b.w	8012200 <__retarget_lock_release_recursive>
 8011ea6:	bf00      	nop
 8011ea8:	20003a91 	.word	0x20003a91

08011eac <__sinit>:
 8011eac:	b510      	push	{r4, lr}
 8011eae:	4604      	mov	r4, r0
 8011eb0:	f7ff fff0 	bl	8011e94 <__sfp_lock_acquire>
 8011eb4:	6a23      	ldr	r3, [r4, #32]
 8011eb6:	b11b      	cbz	r3, 8011ec0 <__sinit+0x14>
 8011eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ebc:	f7ff bff0 	b.w	8011ea0 <__sfp_lock_release>
 8011ec0:	4b04      	ldr	r3, [pc, #16]	@ (8011ed4 <__sinit+0x28>)
 8011ec2:	6223      	str	r3, [r4, #32]
 8011ec4:	4b04      	ldr	r3, [pc, #16]	@ (8011ed8 <__sinit+0x2c>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1f5      	bne.n	8011eb8 <__sinit+0xc>
 8011ecc:	f7ff ffc4 	bl	8011e58 <global_stdio_init.part.0>
 8011ed0:	e7f2      	b.n	8011eb8 <__sinit+0xc>
 8011ed2:	bf00      	nop
 8011ed4:	08011e19 	.word	0x08011e19
 8011ed8:	20003a88 	.word	0x20003a88

08011edc <_strtol_l.constprop.0>:
 8011edc:	2b24      	cmp	r3, #36	@ 0x24
 8011ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee2:	4686      	mov	lr, r0
 8011ee4:	4690      	mov	r8, r2
 8011ee6:	d801      	bhi.n	8011eec <_strtol_l.constprop.0+0x10>
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d106      	bne.n	8011efa <_strtol_l.constprop.0+0x1e>
 8011eec:	f000 f95c 	bl	80121a8 <__errno>
 8011ef0:	2316      	movs	r3, #22
 8011ef2:	6003      	str	r3, [r0, #0]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efa:	4834      	ldr	r0, [pc, #208]	@ (8011fcc <_strtol_l.constprop.0+0xf0>)
 8011efc:	460d      	mov	r5, r1
 8011efe:	462a      	mov	r2, r5
 8011f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f04:	5d06      	ldrb	r6, [r0, r4]
 8011f06:	f016 0608 	ands.w	r6, r6, #8
 8011f0a:	d1f8      	bne.n	8011efe <_strtol_l.constprop.0+0x22>
 8011f0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011f0e:	d12d      	bne.n	8011f6c <_strtol_l.constprop.0+0x90>
 8011f10:	782c      	ldrb	r4, [r5, #0]
 8011f12:	2601      	movs	r6, #1
 8011f14:	1c95      	adds	r5, r2, #2
 8011f16:	f033 0210 	bics.w	r2, r3, #16
 8011f1a:	d109      	bne.n	8011f30 <_strtol_l.constprop.0+0x54>
 8011f1c:	2c30      	cmp	r4, #48	@ 0x30
 8011f1e:	d12a      	bne.n	8011f76 <_strtol_l.constprop.0+0x9a>
 8011f20:	782a      	ldrb	r2, [r5, #0]
 8011f22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011f26:	2a58      	cmp	r2, #88	@ 0x58
 8011f28:	d125      	bne.n	8011f76 <_strtol_l.constprop.0+0x9a>
 8011f2a:	786c      	ldrb	r4, [r5, #1]
 8011f2c:	2310      	movs	r3, #16
 8011f2e:	3502      	adds	r5, #2
 8011f30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011f34:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011f38:	2200      	movs	r2, #0
 8011f3a:	fbbc f9f3 	udiv	r9, ip, r3
 8011f3e:	4610      	mov	r0, r2
 8011f40:	fb03 ca19 	mls	sl, r3, r9, ip
 8011f44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011f48:	2f09      	cmp	r7, #9
 8011f4a:	d81b      	bhi.n	8011f84 <_strtol_l.constprop.0+0xa8>
 8011f4c:	463c      	mov	r4, r7
 8011f4e:	42a3      	cmp	r3, r4
 8011f50:	dd27      	ble.n	8011fa2 <_strtol_l.constprop.0+0xc6>
 8011f52:	1c57      	adds	r7, r2, #1
 8011f54:	d007      	beq.n	8011f66 <_strtol_l.constprop.0+0x8a>
 8011f56:	4581      	cmp	r9, r0
 8011f58:	d320      	bcc.n	8011f9c <_strtol_l.constprop.0+0xc0>
 8011f5a:	d101      	bne.n	8011f60 <_strtol_l.constprop.0+0x84>
 8011f5c:	45a2      	cmp	sl, r4
 8011f5e:	db1d      	blt.n	8011f9c <_strtol_l.constprop.0+0xc0>
 8011f60:	fb00 4003 	mla	r0, r0, r3, r4
 8011f64:	2201      	movs	r2, #1
 8011f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f6a:	e7eb      	b.n	8011f44 <_strtol_l.constprop.0+0x68>
 8011f6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011f6e:	bf04      	itt	eq
 8011f70:	782c      	ldrbeq	r4, [r5, #0]
 8011f72:	1c95      	addeq	r5, r2, #2
 8011f74:	e7cf      	b.n	8011f16 <_strtol_l.constprop.0+0x3a>
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1da      	bne.n	8011f30 <_strtol_l.constprop.0+0x54>
 8011f7a:	2c30      	cmp	r4, #48	@ 0x30
 8011f7c:	bf0c      	ite	eq
 8011f7e:	2308      	moveq	r3, #8
 8011f80:	230a      	movne	r3, #10
 8011f82:	e7d5      	b.n	8011f30 <_strtol_l.constprop.0+0x54>
 8011f84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011f88:	2f19      	cmp	r7, #25
 8011f8a:	d801      	bhi.n	8011f90 <_strtol_l.constprop.0+0xb4>
 8011f8c:	3c37      	subs	r4, #55	@ 0x37
 8011f8e:	e7de      	b.n	8011f4e <_strtol_l.constprop.0+0x72>
 8011f90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011f94:	2f19      	cmp	r7, #25
 8011f96:	d804      	bhi.n	8011fa2 <_strtol_l.constprop.0+0xc6>
 8011f98:	3c57      	subs	r4, #87	@ 0x57
 8011f9a:	e7d8      	b.n	8011f4e <_strtol_l.constprop.0+0x72>
 8011f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011fa0:	e7e1      	b.n	8011f66 <_strtol_l.constprop.0+0x8a>
 8011fa2:	1c53      	adds	r3, r2, #1
 8011fa4:	d108      	bne.n	8011fb8 <_strtol_l.constprop.0+0xdc>
 8011fa6:	2322      	movs	r3, #34	@ 0x22
 8011fa8:	f8ce 3000 	str.w	r3, [lr]
 8011fac:	4660      	mov	r0, ip
 8011fae:	f1b8 0f00 	cmp.w	r8, #0
 8011fb2:	d0a0      	beq.n	8011ef6 <_strtol_l.constprop.0+0x1a>
 8011fb4:	1e69      	subs	r1, r5, #1
 8011fb6:	e006      	b.n	8011fc6 <_strtol_l.constprop.0+0xea>
 8011fb8:	b106      	cbz	r6, 8011fbc <_strtol_l.constprop.0+0xe0>
 8011fba:	4240      	negs	r0, r0
 8011fbc:	f1b8 0f00 	cmp.w	r8, #0
 8011fc0:	d099      	beq.n	8011ef6 <_strtol_l.constprop.0+0x1a>
 8011fc2:	2a00      	cmp	r2, #0
 8011fc4:	d1f6      	bne.n	8011fb4 <_strtol_l.constprop.0+0xd8>
 8011fc6:	f8c8 1000 	str.w	r1, [r8]
 8011fca:	e794      	b.n	8011ef6 <_strtol_l.constprop.0+0x1a>
 8011fcc:	080132ad 	.word	0x080132ad

08011fd0 <strtol>:
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	460a      	mov	r2, r1
 8011fd4:	4601      	mov	r1, r0
 8011fd6:	4802      	ldr	r0, [pc, #8]	@ (8011fe0 <strtol+0x10>)
 8011fd8:	6800      	ldr	r0, [r0, #0]
 8011fda:	f7ff bf7f 	b.w	8011edc <_strtol_l.constprop.0>
 8011fde:	bf00      	nop
 8011fe0:	20000020 	.word	0x20000020

08011fe4 <_fwalk_sglue>:
 8011fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe8:	4607      	mov	r7, r0
 8011fea:	4688      	mov	r8, r1
 8011fec:	4614      	mov	r4, r2
 8011fee:	2600      	movs	r6, #0
 8011ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8011ff8:	d505      	bpl.n	8012006 <_fwalk_sglue+0x22>
 8011ffa:	6824      	ldr	r4, [r4, #0]
 8011ffc:	2c00      	cmp	r4, #0
 8011ffe:	d1f7      	bne.n	8011ff0 <_fwalk_sglue+0xc>
 8012000:	4630      	mov	r0, r6
 8012002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012006:	89ab      	ldrh	r3, [r5, #12]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d907      	bls.n	801201c <_fwalk_sglue+0x38>
 801200c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012010:	3301      	adds	r3, #1
 8012012:	d003      	beq.n	801201c <_fwalk_sglue+0x38>
 8012014:	4629      	mov	r1, r5
 8012016:	4638      	mov	r0, r7
 8012018:	47c0      	blx	r8
 801201a:	4306      	orrs	r6, r0
 801201c:	3568      	adds	r5, #104	@ 0x68
 801201e:	e7e9      	b.n	8011ff4 <_fwalk_sglue+0x10>

08012020 <putchar>:
 8012020:	4b02      	ldr	r3, [pc, #8]	@ (801202c <putchar+0xc>)
 8012022:	4601      	mov	r1, r0
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	6882      	ldr	r2, [r0, #8]
 8012028:	f000 beec 	b.w	8012e04 <_putc_r>
 801202c:	20000020 	.word	0x20000020

08012030 <_puts_r>:
 8012030:	6a03      	ldr	r3, [r0, #32]
 8012032:	b570      	push	{r4, r5, r6, lr}
 8012034:	6884      	ldr	r4, [r0, #8]
 8012036:	4605      	mov	r5, r0
 8012038:	460e      	mov	r6, r1
 801203a:	b90b      	cbnz	r3, 8012040 <_puts_r+0x10>
 801203c:	f7ff ff36 	bl	8011eac <__sinit>
 8012040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012042:	07db      	lsls	r3, r3, #31
 8012044:	d405      	bmi.n	8012052 <_puts_r+0x22>
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	0598      	lsls	r0, r3, #22
 801204a:	d402      	bmi.n	8012052 <_puts_r+0x22>
 801204c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801204e:	f000 f8d6 	bl	80121fe <__retarget_lock_acquire_recursive>
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	0719      	lsls	r1, r3, #28
 8012056:	d502      	bpl.n	801205e <_puts_r+0x2e>
 8012058:	6923      	ldr	r3, [r4, #16]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d135      	bne.n	80120ca <_puts_r+0x9a>
 801205e:	4621      	mov	r1, r4
 8012060:	4628      	mov	r0, r5
 8012062:	f000 fe17 	bl	8012c94 <__swsetup_r>
 8012066:	b380      	cbz	r0, 80120ca <_puts_r+0x9a>
 8012068:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801206c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801206e:	07da      	lsls	r2, r3, #31
 8012070:	d405      	bmi.n	801207e <_puts_r+0x4e>
 8012072:	89a3      	ldrh	r3, [r4, #12]
 8012074:	059b      	lsls	r3, r3, #22
 8012076:	d402      	bmi.n	801207e <_puts_r+0x4e>
 8012078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801207a:	f000 f8c1 	bl	8012200 <__retarget_lock_release_recursive>
 801207e:	4628      	mov	r0, r5
 8012080:	bd70      	pop	{r4, r5, r6, pc}
 8012082:	2b00      	cmp	r3, #0
 8012084:	da04      	bge.n	8012090 <_puts_r+0x60>
 8012086:	69a2      	ldr	r2, [r4, #24]
 8012088:	429a      	cmp	r2, r3
 801208a:	dc17      	bgt.n	80120bc <_puts_r+0x8c>
 801208c:	290a      	cmp	r1, #10
 801208e:	d015      	beq.n	80120bc <_puts_r+0x8c>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	1c5a      	adds	r2, r3, #1
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	7019      	strb	r1, [r3, #0]
 8012098:	68a3      	ldr	r3, [r4, #8]
 801209a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801209e:	3b01      	subs	r3, #1
 80120a0:	60a3      	str	r3, [r4, #8]
 80120a2:	2900      	cmp	r1, #0
 80120a4:	d1ed      	bne.n	8012082 <_puts_r+0x52>
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	da11      	bge.n	80120ce <_puts_r+0x9e>
 80120aa:	4622      	mov	r2, r4
 80120ac:	210a      	movs	r1, #10
 80120ae:	4628      	mov	r0, r5
 80120b0:	f000 fdb1 	bl	8012c16 <__swbuf_r>
 80120b4:	3001      	adds	r0, #1
 80120b6:	d0d7      	beq.n	8012068 <_puts_r+0x38>
 80120b8:	250a      	movs	r5, #10
 80120ba:	e7d7      	b.n	801206c <_puts_r+0x3c>
 80120bc:	4622      	mov	r2, r4
 80120be:	4628      	mov	r0, r5
 80120c0:	f000 fda9 	bl	8012c16 <__swbuf_r>
 80120c4:	3001      	adds	r0, #1
 80120c6:	d1e7      	bne.n	8012098 <_puts_r+0x68>
 80120c8:	e7ce      	b.n	8012068 <_puts_r+0x38>
 80120ca:	3e01      	subs	r6, #1
 80120cc:	e7e4      	b.n	8012098 <_puts_r+0x68>
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	1c5a      	adds	r2, r3, #1
 80120d2:	6022      	str	r2, [r4, #0]
 80120d4:	220a      	movs	r2, #10
 80120d6:	701a      	strb	r2, [r3, #0]
 80120d8:	e7ee      	b.n	80120b8 <_puts_r+0x88>
	...

080120dc <puts>:
 80120dc:	4b02      	ldr	r3, [pc, #8]	@ (80120e8 <puts+0xc>)
 80120de:	4601      	mov	r1, r0
 80120e0:	6818      	ldr	r0, [r3, #0]
 80120e2:	f7ff bfa5 	b.w	8012030 <_puts_r>
 80120e6:	bf00      	nop
 80120e8:	20000020 	.word	0x20000020

080120ec <memset>:
 80120ec:	4402      	add	r2, r0
 80120ee:	4603      	mov	r3, r0
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d100      	bne.n	80120f6 <memset+0xa>
 80120f4:	4770      	bx	lr
 80120f6:	f803 1b01 	strb.w	r1, [r3], #1
 80120fa:	e7f9      	b.n	80120f0 <memset+0x4>

080120fc <_reclaim_reent>:
 80120fc:	4b29      	ldr	r3, [pc, #164]	@ (80121a4 <_reclaim_reent+0xa8>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4283      	cmp	r3, r0
 8012102:	b570      	push	{r4, r5, r6, lr}
 8012104:	4604      	mov	r4, r0
 8012106:	d04b      	beq.n	80121a0 <_reclaim_reent+0xa4>
 8012108:	69c3      	ldr	r3, [r0, #28]
 801210a:	b1ab      	cbz	r3, 8012138 <_reclaim_reent+0x3c>
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	b16b      	cbz	r3, 801212c <_reclaim_reent+0x30>
 8012110:	2500      	movs	r5, #0
 8012112:	69e3      	ldr	r3, [r4, #28]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	5959      	ldr	r1, [r3, r5]
 8012118:	2900      	cmp	r1, #0
 801211a:	d13b      	bne.n	8012194 <_reclaim_reent+0x98>
 801211c:	3504      	adds	r5, #4
 801211e:	2d80      	cmp	r5, #128	@ 0x80
 8012120:	d1f7      	bne.n	8012112 <_reclaim_reent+0x16>
 8012122:	69e3      	ldr	r3, [r4, #28]
 8012124:	4620      	mov	r0, r4
 8012126:	68d9      	ldr	r1, [r3, #12]
 8012128:	f000 f87a 	bl	8012220 <_free_r>
 801212c:	69e3      	ldr	r3, [r4, #28]
 801212e:	6819      	ldr	r1, [r3, #0]
 8012130:	b111      	cbz	r1, 8012138 <_reclaim_reent+0x3c>
 8012132:	4620      	mov	r0, r4
 8012134:	f000 f874 	bl	8012220 <_free_r>
 8012138:	6961      	ldr	r1, [r4, #20]
 801213a:	b111      	cbz	r1, 8012142 <_reclaim_reent+0x46>
 801213c:	4620      	mov	r0, r4
 801213e:	f000 f86f 	bl	8012220 <_free_r>
 8012142:	69e1      	ldr	r1, [r4, #28]
 8012144:	b111      	cbz	r1, 801214c <_reclaim_reent+0x50>
 8012146:	4620      	mov	r0, r4
 8012148:	f000 f86a 	bl	8012220 <_free_r>
 801214c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801214e:	b111      	cbz	r1, 8012156 <_reclaim_reent+0x5a>
 8012150:	4620      	mov	r0, r4
 8012152:	f000 f865 	bl	8012220 <_free_r>
 8012156:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012158:	b111      	cbz	r1, 8012160 <_reclaim_reent+0x64>
 801215a:	4620      	mov	r0, r4
 801215c:	f000 f860 	bl	8012220 <_free_r>
 8012160:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012162:	b111      	cbz	r1, 801216a <_reclaim_reent+0x6e>
 8012164:	4620      	mov	r0, r4
 8012166:	f000 f85b 	bl	8012220 <_free_r>
 801216a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801216c:	b111      	cbz	r1, 8012174 <_reclaim_reent+0x78>
 801216e:	4620      	mov	r0, r4
 8012170:	f000 f856 	bl	8012220 <_free_r>
 8012174:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012176:	b111      	cbz	r1, 801217e <_reclaim_reent+0x82>
 8012178:	4620      	mov	r0, r4
 801217a:	f000 f851 	bl	8012220 <_free_r>
 801217e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012180:	b111      	cbz	r1, 8012188 <_reclaim_reent+0x8c>
 8012182:	4620      	mov	r0, r4
 8012184:	f000 f84c 	bl	8012220 <_free_r>
 8012188:	6a23      	ldr	r3, [r4, #32]
 801218a:	b14b      	cbz	r3, 80121a0 <_reclaim_reent+0xa4>
 801218c:	4620      	mov	r0, r4
 801218e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012192:	4718      	bx	r3
 8012194:	680e      	ldr	r6, [r1, #0]
 8012196:	4620      	mov	r0, r4
 8012198:	f000 f842 	bl	8012220 <_free_r>
 801219c:	4631      	mov	r1, r6
 801219e:	e7bb      	b.n	8012118 <_reclaim_reent+0x1c>
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	bf00      	nop
 80121a4:	20000020 	.word	0x20000020

080121a8 <__errno>:
 80121a8:	4b01      	ldr	r3, [pc, #4]	@ (80121b0 <__errno+0x8>)
 80121aa:	6818      	ldr	r0, [r3, #0]
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	20000020 	.word	0x20000020

080121b4 <__libc_init_array>:
 80121b4:	b570      	push	{r4, r5, r6, lr}
 80121b6:	4d0d      	ldr	r5, [pc, #52]	@ (80121ec <__libc_init_array+0x38>)
 80121b8:	4c0d      	ldr	r4, [pc, #52]	@ (80121f0 <__libc_init_array+0x3c>)
 80121ba:	1b64      	subs	r4, r4, r5
 80121bc:	10a4      	asrs	r4, r4, #2
 80121be:	2600      	movs	r6, #0
 80121c0:	42a6      	cmp	r6, r4
 80121c2:	d109      	bne.n	80121d8 <__libc_init_array+0x24>
 80121c4:	4d0b      	ldr	r5, [pc, #44]	@ (80121f4 <__libc_init_array+0x40>)
 80121c6:	4c0c      	ldr	r4, [pc, #48]	@ (80121f8 <__libc_init_array+0x44>)
 80121c8:	f000 feea 	bl	8012fa0 <_init>
 80121cc:	1b64      	subs	r4, r4, r5
 80121ce:	10a4      	asrs	r4, r4, #2
 80121d0:	2600      	movs	r6, #0
 80121d2:	42a6      	cmp	r6, r4
 80121d4:	d105      	bne.n	80121e2 <__libc_init_array+0x2e>
 80121d6:	bd70      	pop	{r4, r5, r6, pc}
 80121d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80121dc:	4798      	blx	r3
 80121de:	3601      	adds	r6, #1
 80121e0:	e7ee      	b.n	80121c0 <__libc_init_array+0xc>
 80121e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e6:	4798      	blx	r3
 80121e8:	3601      	adds	r6, #1
 80121ea:	e7f2      	b.n	80121d2 <__libc_init_array+0x1e>
 80121ec:	080133e8 	.word	0x080133e8
 80121f0:	080133e8 	.word	0x080133e8
 80121f4:	080133e8 	.word	0x080133e8
 80121f8:	080133ec 	.word	0x080133ec

080121fc <__retarget_lock_init_recursive>:
 80121fc:	4770      	bx	lr

080121fe <__retarget_lock_acquire_recursive>:
 80121fe:	4770      	bx	lr

08012200 <__retarget_lock_release_recursive>:
 8012200:	4770      	bx	lr

08012202 <memcpy>:
 8012202:	440a      	add	r2, r1
 8012204:	4291      	cmp	r1, r2
 8012206:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801220a:	d100      	bne.n	801220e <memcpy+0xc>
 801220c:	4770      	bx	lr
 801220e:	b510      	push	{r4, lr}
 8012210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012218:	4291      	cmp	r1, r2
 801221a:	d1f9      	bne.n	8012210 <memcpy+0xe>
 801221c:	bd10      	pop	{r4, pc}
	...

08012220 <_free_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4605      	mov	r5, r0
 8012224:	2900      	cmp	r1, #0
 8012226:	d041      	beq.n	80122ac <_free_r+0x8c>
 8012228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801222c:	1f0c      	subs	r4, r1, #4
 801222e:	2b00      	cmp	r3, #0
 8012230:	bfb8      	it	lt
 8012232:	18e4      	addlt	r4, r4, r3
 8012234:	f000 fc72 	bl	8012b1c <__malloc_lock>
 8012238:	4a1d      	ldr	r2, [pc, #116]	@ (80122b0 <_free_r+0x90>)
 801223a:	6813      	ldr	r3, [r2, #0]
 801223c:	b933      	cbnz	r3, 801224c <_free_r+0x2c>
 801223e:	6063      	str	r3, [r4, #4]
 8012240:	6014      	str	r4, [r2, #0]
 8012242:	4628      	mov	r0, r5
 8012244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012248:	f000 bc6e 	b.w	8012b28 <__malloc_unlock>
 801224c:	42a3      	cmp	r3, r4
 801224e:	d908      	bls.n	8012262 <_free_r+0x42>
 8012250:	6820      	ldr	r0, [r4, #0]
 8012252:	1821      	adds	r1, r4, r0
 8012254:	428b      	cmp	r3, r1
 8012256:	bf01      	itttt	eq
 8012258:	6819      	ldreq	r1, [r3, #0]
 801225a:	685b      	ldreq	r3, [r3, #4]
 801225c:	1809      	addeq	r1, r1, r0
 801225e:	6021      	streq	r1, [r4, #0]
 8012260:	e7ed      	b.n	801223e <_free_r+0x1e>
 8012262:	461a      	mov	r2, r3
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	b10b      	cbz	r3, 801226c <_free_r+0x4c>
 8012268:	42a3      	cmp	r3, r4
 801226a:	d9fa      	bls.n	8012262 <_free_r+0x42>
 801226c:	6811      	ldr	r1, [r2, #0]
 801226e:	1850      	adds	r0, r2, r1
 8012270:	42a0      	cmp	r0, r4
 8012272:	d10b      	bne.n	801228c <_free_r+0x6c>
 8012274:	6820      	ldr	r0, [r4, #0]
 8012276:	4401      	add	r1, r0
 8012278:	1850      	adds	r0, r2, r1
 801227a:	4283      	cmp	r3, r0
 801227c:	6011      	str	r1, [r2, #0]
 801227e:	d1e0      	bne.n	8012242 <_free_r+0x22>
 8012280:	6818      	ldr	r0, [r3, #0]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	6053      	str	r3, [r2, #4]
 8012286:	4408      	add	r0, r1
 8012288:	6010      	str	r0, [r2, #0]
 801228a:	e7da      	b.n	8012242 <_free_r+0x22>
 801228c:	d902      	bls.n	8012294 <_free_r+0x74>
 801228e:	230c      	movs	r3, #12
 8012290:	602b      	str	r3, [r5, #0]
 8012292:	e7d6      	b.n	8012242 <_free_r+0x22>
 8012294:	6820      	ldr	r0, [r4, #0]
 8012296:	1821      	adds	r1, r4, r0
 8012298:	428b      	cmp	r3, r1
 801229a:	bf04      	itt	eq
 801229c:	6819      	ldreq	r1, [r3, #0]
 801229e:	685b      	ldreq	r3, [r3, #4]
 80122a0:	6063      	str	r3, [r4, #4]
 80122a2:	bf04      	itt	eq
 80122a4:	1809      	addeq	r1, r1, r0
 80122a6:	6021      	streq	r1, [r4, #0]
 80122a8:	6054      	str	r4, [r2, #4]
 80122aa:	e7ca      	b.n	8012242 <_free_r+0x22>
 80122ac:	bd38      	pop	{r3, r4, r5, pc}
 80122ae:	bf00      	nop
 80122b0:	20003a98 	.word	0x20003a98

080122b4 <__ssputs_r>:
 80122b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b8:	688e      	ldr	r6, [r1, #8]
 80122ba:	461f      	mov	r7, r3
 80122bc:	42be      	cmp	r6, r7
 80122be:	680b      	ldr	r3, [r1, #0]
 80122c0:	4682      	mov	sl, r0
 80122c2:	460c      	mov	r4, r1
 80122c4:	4690      	mov	r8, r2
 80122c6:	d82d      	bhi.n	8012324 <__ssputs_r+0x70>
 80122c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80122d0:	d026      	beq.n	8012320 <__ssputs_r+0x6c>
 80122d2:	6965      	ldr	r5, [r4, #20]
 80122d4:	6909      	ldr	r1, [r1, #16]
 80122d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122da:	eba3 0901 	sub.w	r9, r3, r1
 80122de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122e2:	1c7b      	adds	r3, r7, #1
 80122e4:	444b      	add	r3, r9
 80122e6:	106d      	asrs	r5, r5, #1
 80122e8:	429d      	cmp	r5, r3
 80122ea:	bf38      	it	cc
 80122ec:	461d      	movcc	r5, r3
 80122ee:	0553      	lsls	r3, r2, #21
 80122f0:	d527      	bpl.n	8012342 <__ssputs_r+0x8e>
 80122f2:	4629      	mov	r1, r5
 80122f4:	f000 f958 	bl	80125a8 <_malloc_r>
 80122f8:	4606      	mov	r6, r0
 80122fa:	b360      	cbz	r0, 8012356 <__ssputs_r+0xa2>
 80122fc:	6921      	ldr	r1, [r4, #16]
 80122fe:	464a      	mov	r2, r9
 8012300:	f7ff ff7f 	bl	8012202 <memcpy>
 8012304:	89a3      	ldrh	r3, [r4, #12]
 8012306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801230a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801230e:	81a3      	strh	r3, [r4, #12]
 8012310:	6126      	str	r6, [r4, #16]
 8012312:	6165      	str	r5, [r4, #20]
 8012314:	444e      	add	r6, r9
 8012316:	eba5 0509 	sub.w	r5, r5, r9
 801231a:	6026      	str	r6, [r4, #0]
 801231c:	60a5      	str	r5, [r4, #8]
 801231e:	463e      	mov	r6, r7
 8012320:	42be      	cmp	r6, r7
 8012322:	d900      	bls.n	8012326 <__ssputs_r+0x72>
 8012324:	463e      	mov	r6, r7
 8012326:	6820      	ldr	r0, [r4, #0]
 8012328:	4632      	mov	r2, r6
 801232a:	4641      	mov	r1, r8
 801232c:	f000 fd9e 	bl	8012e6c <memmove>
 8012330:	68a3      	ldr	r3, [r4, #8]
 8012332:	1b9b      	subs	r3, r3, r6
 8012334:	60a3      	str	r3, [r4, #8]
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	4433      	add	r3, r6
 801233a:	6023      	str	r3, [r4, #0]
 801233c:	2000      	movs	r0, #0
 801233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012342:	462a      	mov	r2, r5
 8012344:	f000 fc39 	bl	8012bba <_realloc_r>
 8012348:	4606      	mov	r6, r0
 801234a:	2800      	cmp	r0, #0
 801234c:	d1e0      	bne.n	8012310 <__ssputs_r+0x5c>
 801234e:	6921      	ldr	r1, [r4, #16]
 8012350:	4650      	mov	r0, sl
 8012352:	f7ff ff65 	bl	8012220 <_free_r>
 8012356:	230c      	movs	r3, #12
 8012358:	f8ca 3000 	str.w	r3, [sl]
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012362:	81a3      	strh	r3, [r4, #12]
 8012364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012368:	e7e9      	b.n	801233e <__ssputs_r+0x8a>
	...

0801236c <_svfiprintf_r>:
 801236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012370:	4698      	mov	r8, r3
 8012372:	898b      	ldrh	r3, [r1, #12]
 8012374:	061b      	lsls	r3, r3, #24
 8012376:	b09d      	sub	sp, #116	@ 0x74
 8012378:	4607      	mov	r7, r0
 801237a:	460d      	mov	r5, r1
 801237c:	4614      	mov	r4, r2
 801237e:	d510      	bpl.n	80123a2 <_svfiprintf_r+0x36>
 8012380:	690b      	ldr	r3, [r1, #16]
 8012382:	b973      	cbnz	r3, 80123a2 <_svfiprintf_r+0x36>
 8012384:	2140      	movs	r1, #64	@ 0x40
 8012386:	f000 f90f 	bl	80125a8 <_malloc_r>
 801238a:	6028      	str	r0, [r5, #0]
 801238c:	6128      	str	r0, [r5, #16]
 801238e:	b930      	cbnz	r0, 801239e <_svfiprintf_r+0x32>
 8012390:	230c      	movs	r3, #12
 8012392:	603b      	str	r3, [r7, #0]
 8012394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012398:	b01d      	add	sp, #116	@ 0x74
 801239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239e:	2340      	movs	r3, #64	@ 0x40
 80123a0:	616b      	str	r3, [r5, #20]
 80123a2:	2300      	movs	r3, #0
 80123a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80123a6:	2320      	movs	r3, #32
 80123a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80123b0:	2330      	movs	r3, #48	@ 0x30
 80123b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012550 <_svfiprintf_r+0x1e4>
 80123b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123ba:	f04f 0901 	mov.w	r9, #1
 80123be:	4623      	mov	r3, r4
 80123c0:	469a      	mov	sl, r3
 80123c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123c6:	b10a      	cbz	r2, 80123cc <_svfiprintf_r+0x60>
 80123c8:	2a25      	cmp	r2, #37	@ 0x25
 80123ca:	d1f9      	bne.n	80123c0 <_svfiprintf_r+0x54>
 80123cc:	ebba 0b04 	subs.w	fp, sl, r4
 80123d0:	d00b      	beq.n	80123ea <_svfiprintf_r+0x7e>
 80123d2:	465b      	mov	r3, fp
 80123d4:	4622      	mov	r2, r4
 80123d6:	4629      	mov	r1, r5
 80123d8:	4638      	mov	r0, r7
 80123da:	f7ff ff6b 	bl	80122b4 <__ssputs_r>
 80123de:	3001      	adds	r0, #1
 80123e0:	f000 80a7 	beq.w	8012532 <_svfiprintf_r+0x1c6>
 80123e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123e6:	445a      	add	r2, fp
 80123e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80123ea:	f89a 3000 	ldrb.w	r3, [sl]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f000 809f 	beq.w	8012532 <_svfiprintf_r+0x1c6>
 80123f4:	2300      	movs	r3, #0
 80123f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123fe:	f10a 0a01 	add.w	sl, sl, #1
 8012402:	9304      	str	r3, [sp, #16]
 8012404:	9307      	str	r3, [sp, #28]
 8012406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801240a:	931a      	str	r3, [sp, #104]	@ 0x68
 801240c:	4654      	mov	r4, sl
 801240e:	2205      	movs	r2, #5
 8012410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012414:	484e      	ldr	r0, [pc, #312]	@ (8012550 <_svfiprintf_r+0x1e4>)
 8012416:	f7ed feeb 	bl	80001f0 <memchr>
 801241a:	9a04      	ldr	r2, [sp, #16]
 801241c:	b9d8      	cbnz	r0, 8012456 <_svfiprintf_r+0xea>
 801241e:	06d0      	lsls	r0, r2, #27
 8012420:	bf44      	itt	mi
 8012422:	2320      	movmi	r3, #32
 8012424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012428:	0711      	lsls	r1, r2, #28
 801242a:	bf44      	itt	mi
 801242c:	232b      	movmi	r3, #43	@ 0x2b
 801242e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012432:	f89a 3000 	ldrb.w	r3, [sl]
 8012436:	2b2a      	cmp	r3, #42	@ 0x2a
 8012438:	d015      	beq.n	8012466 <_svfiprintf_r+0xfa>
 801243a:	9a07      	ldr	r2, [sp, #28]
 801243c:	4654      	mov	r4, sl
 801243e:	2000      	movs	r0, #0
 8012440:	f04f 0c0a 	mov.w	ip, #10
 8012444:	4621      	mov	r1, r4
 8012446:	f811 3b01 	ldrb.w	r3, [r1], #1
 801244a:	3b30      	subs	r3, #48	@ 0x30
 801244c:	2b09      	cmp	r3, #9
 801244e:	d94b      	bls.n	80124e8 <_svfiprintf_r+0x17c>
 8012450:	b1b0      	cbz	r0, 8012480 <_svfiprintf_r+0x114>
 8012452:	9207      	str	r2, [sp, #28]
 8012454:	e014      	b.n	8012480 <_svfiprintf_r+0x114>
 8012456:	eba0 0308 	sub.w	r3, r0, r8
 801245a:	fa09 f303 	lsl.w	r3, r9, r3
 801245e:	4313      	orrs	r3, r2
 8012460:	9304      	str	r3, [sp, #16]
 8012462:	46a2      	mov	sl, r4
 8012464:	e7d2      	b.n	801240c <_svfiprintf_r+0xa0>
 8012466:	9b03      	ldr	r3, [sp, #12]
 8012468:	1d19      	adds	r1, r3, #4
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	9103      	str	r1, [sp, #12]
 801246e:	2b00      	cmp	r3, #0
 8012470:	bfbb      	ittet	lt
 8012472:	425b      	neglt	r3, r3
 8012474:	f042 0202 	orrlt.w	r2, r2, #2
 8012478:	9307      	strge	r3, [sp, #28]
 801247a:	9307      	strlt	r3, [sp, #28]
 801247c:	bfb8      	it	lt
 801247e:	9204      	strlt	r2, [sp, #16]
 8012480:	7823      	ldrb	r3, [r4, #0]
 8012482:	2b2e      	cmp	r3, #46	@ 0x2e
 8012484:	d10a      	bne.n	801249c <_svfiprintf_r+0x130>
 8012486:	7863      	ldrb	r3, [r4, #1]
 8012488:	2b2a      	cmp	r3, #42	@ 0x2a
 801248a:	d132      	bne.n	80124f2 <_svfiprintf_r+0x186>
 801248c:	9b03      	ldr	r3, [sp, #12]
 801248e:	1d1a      	adds	r2, r3, #4
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	9203      	str	r2, [sp, #12]
 8012494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012498:	3402      	adds	r4, #2
 801249a:	9305      	str	r3, [sp, #20]
 801249c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012560 <_svfiprintf_r+0x1f4>
 80124a0:	7821      	ldrb	r1, [r4, #0]
 80124a2:	2203      	movs	r2, #3
 80124a4:	4650      	mov	r0, sl
 80124a6:	f7ed fea3 	bl	80001f0 <memchr>
 80124aa:	b138      	cbz	r0, 80124bc <_svfiprintf_r+0x150>
 80124ac:	9b04      	ldr	r3, [sp, #16]
 80124ae:	eba0 000a 	sub.w	r0, r0, sl
 80124b2:	2240      	movs	r2, #64	@ 0x40
 80124b4:	4082      	lsls	r2, r0
 80124b6:	4313      	orrs	r3, r2
 80124b8:	3401      	adds	r4, #1
 80124ba:	9304      	str	r3, [sp, #16]
 80124bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c0:	4824      	ldr	r0, [pc, #144]	@ (8012554 <_svfiprintf_r+0x1e8>)
 80124c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124c6:	2206      	movs	r2, #6
 80124c8:	f7ed fe92 	bl	80001f0 <memchr>
 80124cc:	2800      	cmp	r0, #0
 80124ce:	d036      	beq.n	801253e <_svfiprintf_r+0x1d2>
 80124d0:	4b21      	ldr	r3, [pc, #132]	@ (8012558 <_svfiprintf_r+0x1ec>)
 80124d2:	bb1b      	cbnz	r3, 801251c <_svfiprintf_r+0x1b0>
 80124d4:	9b03      	ldr	r3, [sp, #12]
 80124d6:	3307      	adds	r3, #7
 80124d8:	f023 0307 	bic.w	r3, r3, #7
 80124dc:	3308      	adds	r3, #8
 80124de:	9303      	str	r3, [sp, #12]
 80124e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124e2:	4433      	add	r3, r6
 80124e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80124e6:	e76a      	b.n	80123be <_svfiprintf_r+0x52>
 80124e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ec:	460c      	mov	r4, r1
 80124ee:	2001      	movs	r0, #1
 80124f0:	e7a8      	b.n	8012444 <_svfiprintf_r+0xd8>
 80124f2:	2300      	movs	r3, #0
 80124f4:	3401      	adds	r4, #1
 80124f6:	9305      	str	r3, [sp, #20]
 80124f8:	4619      	mov	r1, r3
 80124fa:	f04f 0c0a 	mov.w	ip, #10
 80124fe:	4620      	mov	r0, r4
 8012500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012504:	3a30      	subs	r2, #48	@ 0x30
 8012506:	2a09      	cmp	r2, #9
 8012508:	d903      	bls.n	8012512 <_svfiprintf_r+0x1a6>
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0c6      	beq.n	801249c <_svfiprintf_r+0x130>
 801250e:	9105      	str	r1, [sp, #20]
 8012510:	e7c4      	b.n	801249c <_svfiprintf_r+0x130>
 8012512:	fb0c 2101 	mla	r1, ip, r1, r2
 8012516:	4604      	mov	r4, r0
 8012518:	2301      	movs	r3, #1
 801251a:	e7f0      	b.n	80124fe <_svfiprintf_r+0x192>
 801251c:	ab03      	add	r3, sp, #12
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	462a      	mov	r2, r5
 8012522:	4b0e      	ldr	r3, [pc, #56]	@ (801255c <_svfiprintf_r+0x1f0>)
 8012524:	a904      	add	r1, sp, #16
 8012526:	4638      	mov	r0, r7
 8012528:	f3af 8000 	nop.w
 801252c:	1c42      	adds	r2, r0, #1
 801252e:	4606      	mov	r6, r0
 8012530:	d1d6      	bne.n	80124e0 <_svfiprintf_r+0x174>
 8012532:	89ab      	ldrh	r3, [r5, #12]
 8012534:	065b      	lsls	r3, r3, #25
 8012536:	f53f af2d 	bmi.w	8012394 <_svfiprintf_r+0x28>
 801253a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801253c:	e72c      	b.n	8012398 <_svfiprintf_r+0x2c>
 801253e:	ab03      	add	r3, sp, #12
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	462a      	mov	r2, r5
 8012544:	4b05      	ldr	r3, [pc, #20]	@ (801255c <_svfiprintf_r+0x1f0>)
 8012546:	a904      	add	r1, sp, #16
 8012548:	4638      	mov	r0, r7
 801254a:	f000 f91b 	bl	8012784 <_printf_i>
 801254e:	e7ed      	b.n	801252c <_svfiprintf_r+0x1c0>
 8012550:	080133ad 	.word	0x080133ad
 8012554:	080133b7 	.word	0x080133b7
 8012558:	00000000 	.word	0x00000000
 801255c:	080122b5 	.word	0x080122b5
 8012560:	080133b3 	.word	0x080133b3

08012564 <sbrk_aligned>:
 8012564:	b570      	push	{r4, r5, r6, lr}
 8012566:	4e0f      	ldr	r6, [pc, #60]	@ (80125a4 <sbrk_aligned+0x40>)
 8012568:	460c      	mov	r4, r1
 801256a:	6831      	ldr	r1, [r6, #0]
 801256c:	4605      	mov	r5, r0
 801256e:	b911      	cbnz	r1, 8012576 <sbrk_aligned+0x12>
 8012570:	f000 fcec 	bl	8012f4c <_sbrk_r>
 8012574:	6030      	str	r0, [r6, #0]
 8012576:	4621      	mov	r1, r4
 8012578:	4628      	mov	r0, r5
 801257a:	f000 fce7 	bl	8012f4c <_sbrk_r>
 801257e:	1c43      	adds	r3, r0, #1
 8012580:	d103      	bne.n	801258a <sbrk_aligned+0x26>
 8012582:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012586:	4620      	mov	r0, r4
 8012588:	bd70      	pop	{r4, r5, r6, pc}
 801258a:	1cc4      	adds	r4, r0, #3
 801258c:	f024 0403 	bic.w	r4, r4, #3
 8012590:	42a0      	cmp	r0, r4
 8012592:	d0f8      	beq.n	8012586 <sbrk_aligned+0x22>
 8012594:	1a21      	subs	r1, r4, r0
 8012596:	4628      	mov	r0, r5
 8012598:	f000 fcd8 	bl	8012f4c <_sbrk_r>
 801259c:	3001      	adds	r0, #1
 801259e:	d1f2      	bne.n	8012586 <sbrk_aligned+0x22>
 80125a0:	e7ef      	b.n	8012582 <sbrk_aligned+0x1e>
 80125a2:	bf00      	nop
 80125a4:	20003a94 	.word	0x20003a94

080125a8 <_malloc_r>:
 80125a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125ac:	1ccd      	adds	r5, r1, #3
 80125ae:	f025 0503 	bic.w	r5, r5, #3
 80125b2:	3508      	adds	r5, #8
 80125b4:	2d0c      	cmp	r5, #12
 80125b6:	bf38      	it	cc
 80125b8:	250c      	movcc	r5, #12
 80125ba:	2d00      	cmp	r5, #0
 80125bc:	4606      	mov	r6, r0
 80125be:	db01      	blt.n	80125c4 <_malloc_r+0x1c>
 80125c0:	42a9      	cmp	r1, r5
 80125c2:	d904      	bls.n	80125ce <_malloc_r+0x26>
 80125c4:	230c      	movs	r3, #12
 80125c6:	6033      	str	r3, [r6, #0]
 80125c8:	2000      	movs	r0, #0
 80125ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80126a4 <_malloc_r+0xfc>
 80125d2:	f000 faa3 	bl	8012b1c <__malloc_lock>
 80125d6:	f8d8 3000 	ldr.w	r3, [r8]
 80125da:	461c      	mov	r4, r3
 80125dc:	bb44      	cbnz	r4, 8012630 <_malloc_r+0x88>
 80125de:	4629      	mov	r1, r5
 80125e0:	4630      	mov	r0, r6
 80125e2:	f7ff ffbf 	bl	8012564 <sbrk_aligned>
 80125e6:	1c43      	adds	r3, r0, #1
 80125e8:	4604      	mov	r4, r0
 80125ea:	d158      	bne.n	801269e <_malloc_r+0xf6>
 80125ec:	f8d8 4000 	ldr.w	r4, [r8]
 80125f0:	4627      	mov	r7, r4
 80125f2:	2f00      	cmp	r7, #0
 80125f4:	d143      	bne.n	801267e <_malloc_r+0xd6>
 80125f6:	2c00      	cmp	r4, #0
 80125f8:	d04b      	beq.n	8012692 <_malloc_r+0xea>
 80125fa:	6823      	ldr	r3, [r4, #0]
 80125fc:	4639      	mov	r1, r7
 80125fe:	4630      	mov	r0, r6
 8012600:	eb04 0903 	add.w	r9, r4, r3
 8012604:	f000 fca2 	bl	8012f4c <_sbrk_r>
 8012608:	4581      	cmp	r9, r0
 801260a:	d142      	bne.n	8012692 <_malloc_r+0xea>
 801260c:	6821      	ldr	r1, [r4, #0]
 801260e:	1a6d      	subs	r5, r5, r1
 8012610:	4629      	mov	r1, r5
 8012612:	4630      	mov	r0, r6
 8012614:	f7ff ffa6 	bl	8012564 <sbrk_aligned>
 8012618:	3001      	adds	r0, #1
 801261a:	d03a      	beq.n	8012692 <_malloc_r+0xea>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	442b      	add	r3, r5
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	f8d8 3000 	ldr.w	r3, [r8]
 8012626:	685a      	ldr	r2, [r3, #4]
 8012628:	bb62      	cbnz	r2, 8012684 <_malloc_r+0xdc>
 801262a:	f8c8 7000 	str.w	r7, [r8]
 801262e:	e00f      	b.n	8012650 <_malloc_r+0xa8>
 8012630:	6822      	ldr	r2, [r4, #0]
 8012632:	1b52      	subs	r2, r2, r5
 8012634:	d420      	bmi.n	8012678 <_malloc_r+0xd0>
 8012636:	2a0b      	cmp	r2, #11
 8012638:	d917      	bls.n	801266a <_malloc_r+0xc2>
 801263a:	1961      	adds	r1, r4, r5
 801263c:	42a3      	cmp	r3, r4
 801263e:	6025      	str	r5, [r4, #0]
 8012640:	bf18      	it	ne
 8012642:	6059      	strne	r1, [r3, #4]
 8012644:	6863      	ldr	r3, [r4, #4]
 8012646:	bf08      	it	eq
 8012648:	f8c8 1000 	streq.w	r1, [r8]
 801264c:	5162      	str	r2, [r4, r5]
 801264e:	604b      	str	r3, [r1, #4]
 8012650:	4630      	mov	r0, r6
 8012652:	f000 fa69 	bl	8012b28 <__malloc_unlock>
 8012656:	f104 000b 	add.w	r0, r4, #11
 801265a:	1d23      	adds	r3, r4, #4
 801265c:	f020 0007 	bic.w	r0, r0, #7
 8012660:	1ac2      	subs	r2, r0, r3
 8012662:	bf1c      	itt	ne
 8012664:	1a1b      	subne	r3, r3, r0
 8012666:	50a3      	strne	r3, [r4, r2]
 8012668:	e7af      	b.n	80125ca <_malloc_r+0x22>
 801266a:	6862      	ldr	r2, [r4, #4]
 801266c:	42a3      	cmp	r3, r4
 801266e:	bf0c      	ite	eq
 8012670:	f8c8 2000 	streq.w	r2, [r8]
 8012674:	605a      	strne	r2, [r3, #4]
 8012676:	e7eb      	b.n	8012650 <_malloc_r+0xa8>
 8012678:	4623      	mov	r3, r4
 801267a:	6864      	ldr	r4, [r4, #4]
 801267c:	e7ae      	b.n	80125dc <_malloc_r+0x34>
 801267e:	463c      	mov	r4, r7
 8012680:	687f      	ldr	r7, [r7, #4]
 8012682:	e7b6      	b.n	80125f2 <_malloc_r+0x4a>
 8012684:	461a      	mov	r2, r3
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	42a3      	cmp	r3, r4
 801268a:	d1fb      	bne.n	8012684 <_malloc_r+0xdc>
 801268c:	2300      	movs	r3, #0
 801268e:	6053      	str	r3, [r2, #4]
 8012690:	e7de      	b.n	8012650 <_malloc_r+0xa8>
 8012692:	230c      	movs	r3, #12
 8012694:	6033      	str	r3, [r6, #0]
 8012696:	4630      	mov	r0, r6
 8012698:	f000 fa46 	bl	8012b28 <__malloc_unlock>
 801269c:	e794      	b.n	80125c8 <_malloc_r+0x20>
 801269e:	6005      	str	r5, [r0, #0]
 80126a0:	e7d6      	b.n	8012650 <_malloc_r+0xa8>
 80126a2:	bf00      	nop
 80126a4:	20003a98 	.word	0x20003a98

080126a8 <_printf_common>:
 80126a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126ac:	4616      	mov	r6, r2
 80126ae:	4698      	mov	r8, r3
 80126b0:	688a      	ldr	r2, [r1, #8]
 80126b2:	690b      	ldr	r3, [r1, #16]
 80126b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80126b8:	4293      	cmp	r3, r2
 80126ba:	bfb8      	it	lt
 80126bc:	4613      	movlt	r3, r2
 80126be:	6033      	str	r3, [r6, #0]
 80126c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80126c4:	4607      	mov	r7, r0
 80126c6:	460c      	mov	r4, r1
 80126c8:	b10a      	cbz	r2, 80126ce <_printf_common+0x26>
 80126ca:	3301      	adds	r3, #1
 80126cc:	6033      	str	r3, [r6, #0]
 80126ce:	6823      	ldr	r3, [r4, #0]
 80126d0:	0699      	lsls	r1, r3, #26
 80126d2:	bf42      	ittt	mi
 80126d4:	6833      	ldrmi	r3, [r6, #0]
 80126d6:	3302      	addmi	r3, #2
 80126d8:	6033      	strmi	r3, [r6, #0]
 80126da:	6825      	ldr	r5, [r4, #0]
 80126dc:	f015 0506 	ands.w	r5, r5, #6
 80126e0:	d106      	bne.n	80126f0 <_printf_common+0x48>
 80126e2:	f104 0a19 	add.w	sl, r4, #25
 80126e6:	68e3      	ldr	r3, [r4, #12]
 80126e8:	6832      	ldr	r2, [r6, #0]
 80126ea:	1a9b      	subs	r3, r3, r2
 80126ec:	42ab      	cmp	r3, r5
 80126ee:	dc26      	bgt.n	801273e <_printf_common+0x96>
 80126f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80126f4:	6822      	ldr	r2, [r4, #0]
 80126f6:	3b00      	subs	r3, #0
 80126f8:	bf18      	it	ne
 80126fa:	2301      	movne	r3, #1
 80126fc:	0692      	lsls	r2, r2, #26
 80126fe:	d42b      	bmi.n	8012758 <_printf_common+0xb0>
 8012700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012704:	4641      	mov	r1, r8
 8012706:	4638      	mov	r0, r7
 8012708:	47c8      	blx	r9
 801270a:	3001      	adds	r0, #1
 801270c:	d01e      	beq.n	801274c <_printf_common+0xa4>
 801270e:	6823      	ldr	r3, [r4, #0]
 8012710:	6922      	ldr	r2, [r4, #16]
 8012712:	f003 0306 	and.w	r3, r3, #6
 8012716:	2b04      	cmp	r3, #4
 8012718:	bf02      	ittt	eq
 801271a:	68e5      	ldreq	r5, [r4, #12]
 801271c:	6833      	ldreq	r3, [r6, #0]
 801271e:	1aed      	subeq	r5, r5, r3
 8012720:	68a3      	ldr	r3, [r4, #8]
 8012722:	bf0c      	ite	eq
 8012724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012728:	2500      	movne	r5, #0
 801272a:	4293      	cmp	r3, r2
 801272c:	bfc4      	itt	gt
 801272e:	1a9b      	subgt	r3, r3, r2
 8012730:	18ed      	addgt	r5, r5, r3
 8012732:	2600      	movs	r6, #0
 8012734:	341a      	adds	r4, #26
 8012736:	42b5      	cmp	r5, r6
 8012738:	d11a      	bne.n	8012770 <_printf_common+0xc8>
 801273a:	2000      	movs	r0, #0
 801273c:	e008      	b.n	8012750 <_printf_common+0xa8>
 801273e:	2301      	movs	r3, #1
 8012740:	4652      	mov	r2, sl
 8012742:	4641      	mov	r1, r8
 8012744:	4638      	mov	r0, r7
 8012746:	47c8      	blx	r9
 8012748:	3001      	adds	r0, #1
 801274a:	d103      	bne.n	8012754 <_printf_common+0xac>
 801274c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012754:	3501      	adds	r5, #1
 8012756:	e7c6      	b.n	80126e6 <_printf_common+0x3e>
 8012758:	18e1      	adds	r1, r4, r3
 801275a:	1c5a      	adds	r2, r3, #1
 801275c:	2030      	movs	r0, #48	@ 0x30
 801275e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012762:	4422      	add	r2, r4
 8012764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801276c:	3302      	adds	r3, #2
 801276e:	e7c7      	b.n	8012700 <_printf_common+0x58>
 8012770:	2301      	movs	r3, #1
 8012772:	4622      	mov	r2, r4
 8012774:	4641      	mov	r1, r8
 8012776:	4638      	mov	r0, r7
 8012778:	47c8      	blx	r9
 801277a:	3001      	adds	r0, #1
 801277c:	d0e6      	beq.n	801274c <_printf_common+0xa4>
 801277e:	3601      	adds	r6, #1
 8012780:	e7d9      	b.n	8012736 <_printf_common+0x8e>
	...

08012784 <_printf_i>:
 8012784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012788:	7e0f      	ldrb	r7, [r1, #24]
 801278a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801278c:	2f78      	cmp	r7, #120	@ 0x78
 801278e:	4691      	mov	r9, r2
 8012790:	4680      	mov	r8, r0
 8012792:	460c      	mov	r4, r1
 8012794:	469a      	mov	sl, r3
 8012796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801279a:	d807      	bhi.n	80127ac <_printf_i+0x28>
 801279c:	2f62      	cmp	r7, #98	@ 0x62
 801279e:	d80a      	bhi.n	80127b6 <_printf_i+0x32>
 80127a0:	2f00      	cmp	r7, #0
 80127a2:	f000 80d2 	beq.w	801294a <_printf_i+0x1c6>
 80127a6:	2f58      	cmp	r7, #88	@ 0x58
 80127a8:	f000 80b9 	beq.w	801291e <_printf_i+0x19a>
 80127ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80127b4:	e03a      	b.n	801282c <_printf_i+0xa8>
 80127b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80127ba:	2b15      	cmp	r3, #21
 80127bc:	d8f6      	bhi.n	80127ac <_printf_i+0x28>
 80127be:	a101      	add	r1, pc, #4	@ (adr r1, 80127c4 <_printf_i+0x40>)
 80127c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127c4:	0801281d 	.word	0x0801281d
 80127c8:	08012831 	.word	0x08012831
 80127cc:	080127ad 	.word	0x080127ad
 80127d0:	080127ad 	.word	0x080127ad
 80127d4:	080127ad 	.word	0x080127ad
 80127d8:	080127ad 	.word	0x080127ad
 80127dc:	08012831 	.word	0x08012831
 80127e0:	080127ad 	.word	0x080127ad
 80127e4:	080127ad 	.word	0x080127ad
 80127e8:	080127ad 	.word	0x080127ad
 80127ec:	080127ad 	.word	0x080127ad
 80127f0:	08012931 	.word	0x08012931
 80127f4:	0801285b 	.word	0x0801285b
 80127f8:	080128eb 	.word	0x080128eb
 80127fc:	080127ad 	.word	0x080127ad
 8012800:	080127ad 	.word	0x080127ad
 8012804:	08012953 	.word	0x08012953
 8012808:	080127ad 	.word	0x080127ad
 801280c:	0801285b 	.word	0x0801285b
 8012810:	080127ad 	.word	0x080127ad
 8012814:	080127ad 	.word	0x080127ad
 8012818:	080128f3 	.word	0x080128f3
 801281c:	6833      	ldr	r3, [r6, #0]
 801281e:	1d1a      	adds	r2, r3, #4
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	6032      	str	r2, [r6, #0]
 8012824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801282c:	2301      	movs	r3, #1
 801282e:	e09d      	b.n	801296c <_printf_i+0x1e8>
 8012830:	6833      	ldr	r3, [r6, #0]
 8012832:	6820      	ldr	r0, [r4, #0]
 8012834:	1d19      	adds	r1, r3, #4
 8012836:	6031      	str	r1, [r6, #0]
 8012838:	0606      	lsls	r6, r0, #24
 801283a:	d501      	bpl.n	8012840 <_printf_i+0xbc>
 801283c:	681d      	ldr	r5, [r3, #0]
 801283e:	e003      	b.n	8012848 <_printf_i+0xc4>
 8012840:	0645      	lsls	r5, r0, #25
 8012842:	d5fb      	bpl.n	801283c <_printf_i+0xb8>
 8012844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012848:	2d00      	cmp	r5, #0
 801284a:	da03      	bge.n	8012854 <_printf_i+0xd0>
 801284c:	232d      	movs	r3, #45	@ 0x2d
 801284e:	426d      	negs	r5, r5
 8012850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012854:	4859      	ldr	r0, [pc, #356]	@ (80129bc <_printf_i+0x238>)
 8012856:	230a      	movs	r3, #10
 8012858:	e011      	b.n	801287e <_printf_i+0xfa>
 801285a:	6821      	ldr	r1, [r4, #0]
 801285c:	6833      	ldr	r3, [r6, #0]
 801285e:	0608      	lsls	r0, r1, #24
 8012860:	f853 5b04 	ldr.w	r5, [r3], #4
 8012864:	d402      	bmi.n	801286c <_printf_i+0xe8>
 8012866:	0649      	lsls	r1, r1, #25
 8012868:	bf48      	it	mi
 801286a:	b2ad      	uxthmi	r5, r5
 801286c:	2f6f      	cmp	r7, #111	@ 0x6f
 801286e:	4853      	ldr	r0, [pc, #332]	@ (80129bc <_printf_i+0x238>)
 8012870:	6033      	str	r3, [r6, #0]
 8012872:	bf14      	ite	ne
 8012874:	230a      	movne	r3, #10
 8012876:	2308      	moveq	r3, #8
 8012878:	2100      	movs	r1, #0
 801287a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801287e:	6866      	ldr	r6, [r4, #4]
 8012880:	60a6      	str	r6, [r4, #8]
 8012882:	2e00      	cmp	r6, #0
 8012884:	bfa2      	ittt	ge
 8012886:	6821      	ldrge	r1, [r4, #0]
 8012888:	f021 0104 	bicge.w	r1, r1, #4
 801288c:	6021      	strge	r1, [r4, #0]
 801288e:	b90d      	cbnz	r5, 8012894 <_printf_i+0x110>
 8012890:	2e00      	cmp	r6, #0
 8012892:	d04b      	beq.n	801292c <_printf_i+0x1a8>
 8012894:	4616      	mov	r6, r2
 8012896:	fbb5 f1f3 	udiv	r1, r5, r3
 801289a:	fb03 5711 	mls	r7, r3, r1, r5
 801289e:	5dc7      	ldrb	r7, [r0, r7]
 80128a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80128a4:	462f      	mov	r7, r5
 80128a6:	42bb      	cmp	r3, r7
 80128a8:	460d      	mov	r5, r1
 80128aa:	d9f4      	bls.n	8012896 <_printf_i+0x112>
 80128ac:	2b08      	cmp	r3, #8
 80128ae:	d10b      	bne.n	80128c8 <_printf_i+0x144>
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	07df      	lsls	r7, r3, #31
 80128b4:	d508      	bpl.n	80128c8 <_printf_i+0x144>
 80128b6:	6923      	ldr	r3, [r4, #16]
 80128b8:	6861      	ldr	r1, [r4, #4]
 80128ba:	4299      	cmp	r1, r3
 80128bc:	bfde      	ittt	le
 80128be:	2330      	movle	r3, #48	@ 0x30
 80128c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80128c8:	1b92      	subs	r2, r2, r6
 80128ca:	6122      	str	r2, [r4, #16]
 80128cc:	f8cd a000 	str.w	sl, [sp]
 80128d0:	464b      	mov	r3, r9
 80128d2:	aa03      	add	r2, sp, #12
 80128d4:	4621      	mov	r1, r4
 80128d6:	4640      	mov	r0, r8
 80128d8:	f7ff fee6 	bl	80126a8 <_printf_common>
 80128dc:	3001      	adds	r0, #1
 80128de:	d14a      	bne.n	8012976 <_printf_i+0x1f2>
 80128e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128e4:	b004      	add	sp, #16
 80128e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	f043 0320 	orr.w	r3, r3, #32
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	4833      	ldr	r0, [pc, #204]	@ (80129c0 <_printf_i+0x23c>)
 80128f4:	2778      	movs	r7, #120	@ 0x78
 80128f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	6831      	ldr	r1, [r6, #0]
 80128fe:	061f      	lsls	r7, r3, #24
 8012900:	f851 5b04 	ldr.w	r5, [r1], #4
 8012904:	d402      	bmi.n	801290c <_printf_i+0x188>
 8012906:	065f      	lsls	r7, r3, #25
 8012908:	bf48      	it	mi
 801290a:	b2ad      	uxthmi	r5, r5
 801290c:	6031      	str	r1, [r6, #0]
 801290e:	07d9      	lsls	r1, r3, #31
 8012910:	bf44      	itt	mi
 8012912:	f043 0320 	orrmi.w	r3, r3, #32
 8012916:	6023      	strmi	r3, [r4, #0]
 8012918:	b11d      	cbz	r5, 8012922 <_printf_i+0x19e>
 801291a:	2310      	movs	r3, #16
 801291c:	e7ac      	b.n	8012878 <_printf_i+0xf4>
 801291e:	4827      	ldr	r0, [pc, #156]	@ (80129bc <_printf_i+0x238>)
 8012920:	e7e9      	b.n	80128f6 <_printf_i+0x172>
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	f023 0320 	bic.w	r3, r3, #32
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	e7f6      	b.n	801291a <_printf_i+0x196>
 801292c:	4616      	mov	r6, r2
 801292e:	e7bd      	b.n	80128ac <_printf_i+0x128>
 8012930:	6833      	ldr	r3, [r6, #0]
 8012932:	6825      	ldr	r5, [r4, #0]
 8012934:	6961      	ldr	r1, [r4, #20]
 8012936:	1d18      	adds	r0, r3, #4
 8012938:	6030      	str	r0, [r6, #0]
 801293a:	062e      	lsls	r6, r5, #24
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	d501      	bpl.n	8012944 <_printf_i+0x1c0>
 8012940:	6019      	str	r1, [r3, #0]
 8012942:	e002      	b.n	801294a <_printf_i+0x1c6>
 8012944:	0668      	lsls	r0, r5, #25
 8012946:	d5fb      	bpl.n	8012940 <_printf_i+0x1bc>
 8012948:	8019      	strh	r1, [r3, #0]
 801294a:	2300      	movs	r3, #0
 801294c:	6123      	str	r3, [r4, #16]
 801294e:	4616      	mov	r6, r2
 8012950:	e7bc      	b.n	80128cc <_printf_i+0x148>
 8012952:	6833      	ldr	r3, [r6, #0]
 8012954:	1d1a      	adds	r2, r3, #4
 8012956:	6032      	str	r2, [r6, #0]
 8012958:	681e      	ldr	r6, [r3, #0]
 801295a:	6862      	ldr	r2, [r4, #4]
 801295c:	2100      	movs	r1, #0
 801295e:	4630      	mov	r0, r6
 8012960:	f7ed fc46 	bl	80001f0 <memchr>
 8012964:	b108      	cbz	r0, 801296a <_printf_i+0x1e6>
 8012966:	1b80      	subs	r0, r0, r6
 8012968:	6060      	str	r0, [r4, #4]
 801296a:	6863      	ldr	r3, [r4, #4]
 801296c:	6123      	str	r3, [r4, #16]
 801296e:	2300      	movs	r3, #0
 8012970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012974:	e7aa      	b.n	80128cc <_printf_i+0x148>
 8012976:	6923      	ldr	r3, [r4, #16]
 8012978:	4632      	mov	r2, r6
 801297a:	4649      	mov	r1, r9
 801297c:	4640      	mov	r0, r8
 801297e:	47d0      	blx	sl
 8012980:	3001      	adds	r0, #1
 8012982:	d0ad      	beq.n	80128e0 <_printf_i+0x15c>
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	079b      	lsls	r3, r3, #30
 8012988:	d413      	bmi.n	80129b2 <_printf_i+0x22e>
 801298a:	68e0      	ldr	r0, [r4, #12]
 801298c:	9b03      	ldr	r3, [sp, #12]
 801298e:	4298      	cmp	r0, r3
 8012990:	bfb8      	it	lt
 8012992:	4618      	movlt	r0, r3
 8012994:	e7a6      	b.n	80128e4 <_printf_i+0x160>
 8012996:	2301      	movs	r3, #1
 8012998:	4632      	mov	r2, r6
 801299a:	4649      	mov	r1, r9
 801299c:	4640      	mov	r0, r8
 801299e:	47d0      	blx	sl
 80129a0:	3001      	adds	r0, #1
 80129a2:	d09d      	beq.n	80128e0 <_printf_i+0x15c>
 80129a4:	3501      	adds	r5, #1
 80129a6:	68e3      	ldr	r3, [r4, #12]
 80129a8:	9903      	ldr	r1, [sp, #12]
 80129aa:	1a5b      	subs	r3, r3, r1
 80129ac:	42ab      	cmp	r3, r5
 80129ae:	dcf2      	bgt.n	8012996 <_printf_i+0x212>
 80129b0:	e7eb      	b.n	801298a <_printf_i+0x206>
 80129b2:	2500      	movs	r5, #0
 80129b4:	f104 0619 	add.w	r6, r4, #25
 80129b8:	e7f5      	b.n	80129a6 <_printf_i+0x222>
 80129ba:	bf00      	nop
 80129bc:	080133be 	.word	0x080133be
 80129c0:	080133cf 	.word	0x080133cf

080129c4 <__sflush_r>:
 80129c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129cc:	0716      	lsls	r6, r2, #28
 80129ce:	4605      	mov	r5, r0
 80129d0:	460c      	mov	r4, r1
 80129d2:	d454      	bmi.n	8012a7e <__sflush_r+0xba>
 80129d4:	684b      	ldr	r3, [r1, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	dc02      	bgt.n	80129e0 <__sflush_r+0x1c>
 80129da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dd48      	ble.n	8012a72 <__sflush_r+0xae>
 80129e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129e2:	2e00      	cmp	r6, #0
 80129e4:	d045      	beq.n	8012a72 <__sflush_r+0xae>
 80129e6:	2300      	movs	r3, #0
 80129e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129ec:	682f      	ldr	r7, [r5, #0]
 80129ee:	6a21      	ldr	r1, [r4, #32]
 80129f0:	602b      	str	r3, [r5, #0]
 80129f2:	d030      	beq.n	8012a56 <__sflush_r+0x92>
 80129f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129f6:	89a3      	ldrh	r3, [r4, #12]
 80129f8:	0759      	lsls	r1, r3, #29
 80129fa:	d505      	bpl.n	8012a08 <__sflush_r+0x44>
 80129fc:	6863      	ldr	r3, [r4, #4]
 80129fe:	1ad2      	subs	r2, r2, r3
 8012a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012a02:	b10b      	cbz	r3, 8012a08 <__sflush_r+0x44>
 8012a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a06:	1ad2      	subs	r2, r2, r3
 8012a08:	2300      	movs	r3, #0
 8012a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a0c:	6a21      	ldr	r1, [r4, #32]
 8012a0e:	4628      	mov	r0, r5
 8012a10:	47b0      	blx	r6
 8012a12:	1c43      	adds	r3, r0, #1
 8012a14:	89a3      	ldrh	r3, [r4, #12]
 8012a16:	d106      	bne.n	8012a26 <__sflush_r+0x62>
 8012a18:	6829      	ldr	r1, [r5, #0]
 8012a1a:	291d      	cmp	r1, #29
 8012a1c:	d82b      	bhi.n	8012a76 <__sflush_r+0xb2>
 8012a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ac8 <__sflush_r+0x104>)
 8012a20:	410a      	asrs	r2, r1
 8012a22:	07d6      	lsls	r6, r2, #31
 8012a24:	d427      	bmi.n	8012a76 <__sflush_r+0xb2>
 8012a26:	2200      	movs	r2, #0
 8012a28:	6062      	str	r2, [r4, #4]
 8012a2a:	04d9      	lsls	r1, r3, #19
 8012a2c:	6922      	ldr	r2, [r4, #16]
 8012a2e:	6022      	str	r2, [r4, #0]
 8012a30:	d504      	bpl.n	8012a3c <__sflush_r+0x78>
 8012a32:	1c42      	adds	r2, r0, #1
 8012a34:	d101      	bne.n	8012a3a <__sflush_r+0x76>
 8012a36:	682b      	ldr	r3, [r5, #0]
 8012a38:	b903      	cbnz	r3, 8012a3c <__sflush_r+0x78>
 8012a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a3e:	602f      	str	r7, [r5, #0]
 8012a40:	b1b9      	cbz	r1, 8012a72 <__sflush_r+0xae>
 8012a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a46:	4299      	cmp	r1, r3
 8012a48:	d002      	beq.n	8012a50 <__sflush_r+0x8c>
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f7ff fbe8 	bl	8012220 <_free_r>
 8012a50:	2300      	movs	r3, #0
 8012a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a54:	e00d      	b.n	8012a72 <__sflush_r+0xae>
 8012a56:	2301      	movs	r3, #1
 8012a58:	4628      	mov	r0, r5
 8012a5a:	47b0      	blx	r6
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	1c50      	adds	r0, r2, #1
 8012a60:	d1c9      	bne.n	80129f6 <__sflush_r+0x32>
 8012a62:	682b      	ldr	r3, [r5, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d0c6      	beq.n	80129f6 <__sflush_r+0x32>
 8012a68:	2b1d      	cmp	r3, #29
 8012a6a:	d001      	beq.n	8012a70 <__sflush_r+0xac>
 8012a6c:	2b16      	cmp	r3, #22
 8012a6e:	d11e      	bne.n	8012aae <__sflush_r+0xea>
 8012a70:	602f      	str	r7, [r5, #0]
 8012a72:	2000      	movs	r0, #0
 8012a74:	e022      	b.n	8012abc <__sflush_r+0xf8>
 8012a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a7a:	b21b      	sxth	r3, r3
 8012a7c:	e01b      	b.n	8012ab6 <__sflush_r+0xf2>
 8012a7e:	690f      	ldr	r7, [r1, #16]
 8012a80:	2f00      	cmp	r7, #0
 8012a82:	d0f6      	beq.n	8012a72 <__sflush_r+0xae>
 8012a84:	0793      	lsls	r3, r2, #30
 8012a86:	680e      	ldr	r6, [r1, #0]
 8012a88:	bf08      	it	eq
 8012a8a:	694b      	ldreq	r3, [r1, #20]
 8012a8c:	600f      	str	r7, [r1, #0]
 8012a8e:	bf18      	it	ne
 8012a90:	2300      	movne	r3, #0
 8012a92:	eba6 0807 	sub.w	r8, r6, r7
 8012a96:	608b      	str	r3, [r1, #8]
 8012a98:	f1b8 0f00 	cmp.w	r8, #0
 8012a9c:	dde9      	ble.n	8012a72 <__sflush_r+0xae>
 8012a9e:	6a21      	ldr	r1, [r4, #32]
 8012aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012aa2:	4643      	mov	r3, r8
 8012aa4:	463a      	mov	r2, r7
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	47b0      	blx	r6
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	dc08      	bgt.n	8012ac0 <__sflush_r+0xfc>
 8012aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac0:	4407      	add	r7, r0
 8012ac2:	eba8 0800 	sub.w	r8, r8, r0
 8012ac6:	e7e7      	b.n	8012a98 <__sflush_r+0xd4>
 8012ac8:	dfbffffe 	.word	0xdfbffffe

08012acc <_fflush_r>:
 8012acc:	b538      	push	{r3, r4, r5, lr}
 8012ace:	690b      	ldr	r3, [r1, #16]
 8012ad0:	4605      	mov	r5, r0
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	b913      	cbnz	r3, 8012adc <_fflush_r+0x10>
 8012ad6:	2500      	movs	r5, #0
 8012ad8:	4628      	mov	r0, r5
 8012ada:	bd38      	pop	{r3, r4, r5, pc}
 8012adc:	b118      	cbz	r0, 8012ae6 <_fflush_r+0x1a>
 8012ade:	6a03      	ldr	r3, [r0, #32]
 8012ae0:	b90b      	cbnz	r3, 8012ae6 <_fflush_r+0x1a>
 8012ae2:	f7ff f9e3 	bl	8011eac <__sinit>
 8012ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d0f3      	beq.n	8012ad6 <_fflush_r+0xa>
 8012aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012af0:	07d0      	lsls	r0, r2, #31
 8012af2:	d404      	bmi.n	8012afe <_fflush_r+0x32>
 8012af4:	0599      	lsls	r1, r3, #22
 8012af6:	d402      	bmi.n	8012afe <_fflush_r+0x32>
 8012af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012afa:	f7ff fb80 	bl	80121fe <__retarget_lock_acquire_recursive>
 8012afe:	4628      	mov	r0, r5
 8012b00:	4621      	mov	r1, r4
 8012b02:	f7ff ff5f 	bl	80129c4 <__sflush_r>
 8012b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b08:	07da      	lsls	r2, r3, #31
 8012b0a:	4605      	mov	r5, r0
 8012b0c:	d4e4      	bmi.n	8012ad8 <_fflush_r+0xc>
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	059b      	lsls	r3, r3, #22
 8012b12:	d4e1      	bmi.n	8012ad8 <_fflush_r+0xc>
 8012b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b16:	f7ff fb73 	bl	8012200 <__retarget_lock_release_recursive>
 8012b1a:	e7dd      	b.n	8012ad8 <_fflush_r+0xc>

08012b1c <__malloc_lock>:
 8012b1c:	4801      	ldr	r0, [pc, #4]	@ (8012b24 <__malloc_lock+0x8>)
 8012b1e:	f7ff bb6e 	b.w	80121fe <__retarget_lock_acquire_recursive>
 8012b22:	bf00      	nop
 8012b24:	20003a90 	.word	0x20003a90

08012b28 <__malloc_unlock>:
 8012b28:	4801      	ldr	r0, [pc, #4]	@ (8012b30 <__malloc_unlock+0x8>)
 8012b2a:	f7ff bb69 	b.w	8012200 <__retarget_lock_release_recursive>
 8012b2e:	bf00      	nop
 8012b30:	20003a90 	.word	0x20003a90

08012b34 <__sread>:
 8012b34:	b510      	push	{r4, lr}
 8012b36:	460c      	mov	r4, r1
 8012b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b3c:	f000 f9f4 	bl	8012f28 <_read_r>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	bfab      	itete	ge
 8012b44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012b46:	89a3      	ldrhlt	r3, [r4, #12]
 8012b48:	181b      	addge	r3, r3, r0
 8012b4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012b4e:	bfac      	ite	ge
 8012b50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012b52:	81a3      	strhlt	r3, [r4, #12]
 8012b54:	bd10      	pop	{r4, pc}

08012b56 <__swrite>:
 8012b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5a:	461f      	mov	r7, r3
 8012b5c:	898b      	ldrh	r3, [r1, #12]
 8012b5e:	05db      	lsls	r3, r3, #23
 8012b60:	4605      	mov	r5, r0
 8012b62:	460c      	mov	r4, r1
 8012b64:	4616      	mov	r6, r2
 8012b66:	d505      	bpl.n	8012b74 <__swrite+0x1e>
 8012b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b6c:	2302      	movs	r3, #2
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f000 f9c8 	bl	8012f04 <_lseek_r>
 8012b74:	89a3      	ldrh	r3, [r4, #12]
 8012b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012b7e:	81a3      	strh	r3, [r4, #12]
 8012b80:	4632      	mov	r2, r6
 8012b82:	463b      	mov	r3, r7
 8012b84:	4628      	mov	r0, r5
 8012b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8a:	f000 b9ef 	b.w	8012f6c <_write_r>

08012b8e <__sseek>:
 8012b8e:	b510      	push	{r4, lr}
 8012b90:	460c      	mov	r4, r1
 8012b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b96:	f000 f9b5 	bl	8012f04 <_lseek_r>
 8012b9a:	1c43      	adds	r3, r0, #1
 8012b9c:	89a3      	ldrh	r3, [r4, #12]
 8012b9e:	bf15      	itete	ne
 8012ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012baa:	81a3      	strheq	r3, [r4, #12]
 8012bac:	bf18      	it	ne
 8012bae:	81a3      	strhne	r3, [r4, #12]
 8012bb0:	bd10      	pop	{r4, pc}

08012bb2 <__sclose>:
 8012bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bb6:	f000 b973 	b.w	8012ea0 <_close_r>

08012bba <_realloc_r>:
 8012bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	4615      	mov	r5, r2
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	b921      	cbnz	r1, 8012bd0 <_realloc_r+0x16>
 8012bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bca:	4611      	mov	r1, r2
 8012bcc:	f7ff bcec 	b.w	80125a8 <_malloc_r>
 8012bd0:	b92a      	cbnz	r2, 8012bde <_realloc_r+0x24>
 8012bd2:	f7ff fb25 	bl	8012220 <_free_r>
 8012bd6:	2400      	movs	r4, #0
 8012bd8:	4620      	mov	r0, r4
 8012bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bde:	f000 f9d7 	bl	8012f90 <_malloc_usable_size_r>
 8012be2:	4285      	cmp	r5, r0
 8012be4:	4606      	mov	r6, r0
 8012be6:	d802      	bhi.n	8012bee <_realloc_r+0x34>
 8012be8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bec:	d8f4      	bhi.n	8012bd8 <_realloc_r+0x1e>
 8012bee:	4629      	mov	r1, r5
 8012bf0:	4640      	mov	r0, r8
 8012bf2:	f7ff fcd9 	bl	80125a8 <_malloc_r>
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d0ec      	beq.n	8012bd6 <_realloc_r+0x1c>
 8012bfc:	42b5      	cmp	r5, r6
 8012bfe:	462a      	mov	r2, r5
 8012c00:	4621      	mov	r1, r4
 8012c02:	bf28      	it	cs
 8012c04:	4632      	movcs	r2, r6
 8012c06:	f7ff fafc 	bl	8012202 <memcpy>
 8012c0a:	4621      	mov	r1, r4
 8012c0c:	4640      	mov	r0, r8
 8012c0e:	f7ff fb07 	bl	8012220 <_free_r>
 8012c12:	463c      	mov	r4, r7
 8012c14:	e7e0      	b.n	8012bd8 <_realloc_r+0x1e>

08012c16 <__swbuf_r>:
 8012c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c18:	460e      	mov	r6, r1
 8012c1a:	4614      	mov	r4, r2
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	b118      	cbz	r0, 8012c28 <__swbuf_r+0x12>
 8012c20:	6a03      	ldr	r3, [r0, #32]
 8012c22:	b90b      	cbnz	r3, 8012c28 <__swbuf_r+0x12>
 8012c24:	f7ff f942 	bl	8011eac <__sinit>
 8012c28:	69a3      	ldr	r3, [r4, #24]
 8012c2a:	60a3      	str	r3, [r4, #8]
 8012c2c:	89a3      	ldrh	r3, [r4, #12]
 8012c2e:	071a      	lsls	r2, r3, #28
 8012c30:	d501      	bpl.n	8012c36 <__swbuf_r+0x20>
 8012c32:	6923      	ldr	r3, [r4, #16]
 8012c34:	b943      	cbnz	r3, 8012c48 <__swbuf_r+0x32>
 8012c36:	4621      	mov	r1, r4
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f000 f82b 	bl	8012c94 <__swsetup_r>
 8012c3e:	b118      	cbz	r0, 8012c48 <__swbuf_r+0x32>
 8012c40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012c44:	4638      	mov	r0, r7
 8012c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c48:	6823      	ldr	r3, [r4, #0]
 8012c4a:	6922      	ldr	r2, [r4, #16]
 8012c4c:	1a98      	subs	r0, r3, r2
 8012c4e:	6963      	ldr	r3, [r4, #20]
 8012c50:	b2f6      	uxtb	r6, r6
 8012c52:	4283      	cmp	r3, r0
 8012c54:	4637      	mov	r7, r6
 8012c56:	dc05      	bgt.n	8012c64 <__swbuf_r+0x4e>
 8012c58:	4621      	mov	r1, r4
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f7ff ff36 	bl	8012acc <_fflush_r>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	d1ed      	bne.n	8012c40 <__swbuf_r+0x2a>
 8012c64:	68a3      	ldr	r3, [r4, #8]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	60a3      	str	r3, [r4, #8]
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	1c5a      	adds	r2, r3, #1
 8012c6e:	6022      	str	r2, [r4, #0]
 8012c70:	701e      	strb	r6, [r3, #0]
 8012c72:	6962      	ldr	r2, [r4, #20]
 8012c74:	1c43      	adds	r3, r0, #1
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d004      	beq.n	8012c84 <__swbuf_r+0x6e>
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	07db      	lsls	r3, r3, #31
 8012c7e:	d5e1      	bpl.n	8012c44 <__swbuf_r+0x2e>
 8012c80:	2e0a      	cmp	r6, #10
 8012c82:	d1df      	bne.n	8012c44 <__swbuf_r+0x2e>
 8012c84:	4621      	mov	r1, r4
 8012c86:	4628      	mov	r0, r5
 8012c88:	f7ff ff20 	bl	8012acc <_fflush_r>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d0d9      	beq.n	8012c44 <__swbuf_r+0x2e>
 8012c90:	e7d6      	b.n	8012c40 <__swbuf_r+0x2a>
	...

08012c94 <__swsetup_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4b29      	ldr	r3, [pc, #164]	@ (8012d3c <__swsetup_r+0xa8>)
 8012c98:	4605      	mov	r5, r0
 8012c9a:	6818      	ldr	r0, [r3, #0]
 8012c9c:	460c      	mov	r4, r1
 8012c9e:	b118      	cbz	r0, 8012ca8 <__swsetup_r+0x14>
 8012ca0:	6a03      	ldr	r3, [r0, #32]
 8012ca2:	b90b      	cbnz	r3, 8012ca8 <__swsetup_r+0x14>
 8012ca4:	f7ff f902 	bl	8011eac <__sinit>
 8012ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cac:	0719      	lsls	r1, r3, #28
 8012cae:	d422      	bmi.n	8012cf6 <__swsetup_r+0x62>
 8012cb0:	06da      	lsls	r2, r3, #27
 8012cb2:	d407      	bmi.n	8012cc4 <__swsetup_r+0x30>
 8012cb4:	2209      	movs	r2, #9
 8012cb6:	602a      	str	r2, [r5, #0]
 8012cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cbc:	81a3      	strh	r3, [r4, #12]
 8012cbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cc2:	e033      	b.n	8012d2c <__swsetup_r+0x98>
 8012cc4:	0758      	lsls	r0, r3, #29
 8012cc6:	d512      	bpl.n	8012cee <__swsetup_r+0x5a>
 8012cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cca:	b141      	cbz	r1, 8012cde <__swsetup_r+0x4a>
 8012ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cd0:	4299      	cmp	r1, r3
 8012cd2:	d002      	beq.n	8012cda <__swsetup_r+0x46>
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f7ff faa3 	bl	8012220 <_free_r>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cde:	89a3      	ldrh	r3, [r4, #12]
 8012ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012ce4:	81a3      	strh	r3, [r4, #12]
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	6063      	str	r3, [r4, #4]
 8012cea:	6923      	ldr	r3, [r4, #16]
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	89a3      	ldrh	r3, [r4, #12]
 8012cf0:	f043 0308 	orr.w	r3, r3, #8
 8012cf4:	81a3      	strh	r3, [r4, #12]
 8012cf6:	6923      	ldr	r3, [r4, #16]
 8012cf8:	b94b      	cbnz	r3, 8012d0e <__swsetup_r+0x7a>
 8012cfa:	89a3      	ldrh	r3, [r4, #12]
 8012cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d04:	d003      	beq.n	8012d0e <__swsetup_r+0x7a>
 8012d06:	4621      	mov	r1, r4
 8012d08:	4628      	mov	r0, r5
 8012d0a:	f000 f83f 	bl	8012d8c <__smakebuf_r>
 8012d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d12:	f013 0201 	ands.w	r2, r3, #1
 8012d16:	d00a      	beq.n	8012d2e <__swsetup_r+0x9a>
 8012d18:	2200      	movs	r2, #0
 8012d1a:	60a2      	str	r2, [r4, #8]
 8012d1c:	6962      	ldr	r2, [r4, #20]
 8012d1e:	4252      	negs	r2, r2
 8012d20:	61a2      	str	r2, [r4, #24]
 8012d22:	6922      	ldr	r2, [r4, #16]
 8012d24:	b942      	cbnz	r2, 8012d38 <__swsetup_r+0xa4>
 8012d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012d2a:	d1c5      	bne.n	8012cb8 <__swsetup_r+0x24>
 8012d2c:	bd38      	pop	{r3, r4, r5, pc}
 8012d2e:	0799      	lsls	r1, r3, #30
 8012d30:	bf58      	it	pl
 8012d32:	6962      	ldrpl	r2, [r4, #20]
 8012d34:	60a2      	str	r2, [r4, #8]
 8012d36:	e7f4      	b.n	8012d22 <__swsetup_r+0x8e>
 8012d38:	2000      	movs	r0, #0
 8012d3a:	e7f7      	b.n	8012d2c <__swsetup_r+0x98>
 8012d3c:	20000020 	.word	0x20000020

08012d40 <__swhatbuf_r>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	460c      	mov	r4, r1
 8012d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d48:	2900      	cmp	r1, #0
 8012d4a:	b096      	sub	sp, #88	@ 0x58
 8012d4c:	4615      	mov	r5, r2
 8012d4e:	461e      	mov	r6, r3
 8012d50:	da0d      	bge.n	8012d6e <__swhatbuf_r+0x2e>
 8012d52:	89a3      	ldrh	r3, [r4, #12]
 8012d54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d58:	f04f 0100 	mov.w	r1, #0
 8012d5c:	bf14      	ite	ne
 8012d5e:	2340      	movne	r3, #64	@ 0x40
 8012d60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d64:	2000      	movs	r0, #0
 8012d66:	6031      	str	r1, [r6, #0]
 8012d68:	602b      	str	r3, [r5, #0]
 8012d6a:	b016      	add	sp, #88	@ 0x58
 8012d6c:	bd70      	pop	{r4, r5, r6, pc}
 8012d6e:	466a      	mov	r2, sp
 8012d70:	f000 f8a6 	bl	8012ec0 <_fstat_r>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	dbec      	blt.n	8012d52 <__swhatbuf_r+0x12>
 8012d78:	9901      	ldr	r1, [sp, #4]
 8012d7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d82:	4259      	negs	r1, r3
 8012d84:	4159      	adcs	r1, r3
 8012d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d8a:	e7eb      	b.n	8012d64 <__swhatbuf_r+0x24>

08012d8c <__smakebuf_r>:
 8012d8c:	898b      	ldrh	r3, [r1, #12]
 8012d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d90:	079d      	lsls	r5, r3, #30
 8012d92:	4606      	mov	r6, r0
 8012d94:	460c      	mov	r4, r1
 8012d96:	d507      	bpl.n	8012da8 <__smakebuf_r+0x1c>
 8012d98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	6123      	str	r3, [r4, #16]
 8012da0:	2301      	movs	r3, #1
 8012da2:	6163      	str	r3, [r4, #20]
 8012da4:	b003      	add	sp, #12
 8012da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da8:	ab01      	add	r3, sp, #4
 8012daa:	466a      	mov	r2, sp
 8012dac:	f7ff ffc8 	bl	8012d40 <__swhatbuf_r>
 8012db0:	9f00      	ldr	r7, [sp, #0]
 8012db2:	4605      	mov	r5, r0
 8012db4:	4639      	mov	r1, r7
 8012db6:	4630      	mov	r0, r6
 8012db8:	f7ff fbf6 	bl	80125a8 <_malloc_r>
 8012dbc:	b948      	cbnz	r0, 8012dd2 <__smakebuf_r+0x46>
 8012dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dc2:	059a      	lsls	r2, r3, #22
 8012dc4:	d4ee      	bmi.n	8012da4 <__smakebuf_r+0x18>
 8012dc6:	f023 0303 	bic.w	r3, r3, #3
 8012dca:	f043 0302 	orr.w	r3, r3, #2
 8012dce:	81a3      	strh	r3, [r4, #12]
 8012dd0:	e7e2      	b.n	8012d98 <__smakebuf_r+0xc>
 8012dd2:	89a3      	ldrh	r3, [r4, #12]
 8012dd4:	6020      	str	r0, [r4, #0]
 8012dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dda:	81a3      	strh	r3, [r4, #12]
 8012ddc:	9b01      	ldr	r3, [sp, #4]
 8012dde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012de2:	b15b      	cbz	r3, 8012dfc <__smakebuf_r+0x70>
 8012de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012de8:	4630      	mov	r0, r6
 8012dea:	f000 f87b 	bl	8012ee4 <_isatty_r>
 8012dee:	b128      	cbz	r0, 8012dfc <__smakebuf_r+0x70>
 8012df0:	89a3      	ldrh	r3, [r4, #12]
 8012df2:	f023 0303 	bic.w	r3, r3, #3
 8012df6:	f043 0301 	orr.w	r3, r3, #1
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	431d      	orrs	r5, r3
 8012e00:	81a5      	strh	r5, [r4, #12]
 8012e02:	e7cf      	b.n	8012da4 <__smakebuf_r+0x18>

08012e04 <_putc_r>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	460d      	mov	r5, r1
 8012e08:	4614      	mov	r4, r2
 8012e0a:	4606      	mov	r6, r0
 8012e0c:	b118      	cbz	r0, 8012e16 <_putc_r+0x12>
 8012e0e:	6a03      	ldr	r3, [r0, #32]
 8012e10:	b90b      	cbnz	r3, 8012e16 <_putc_r+0x12>
 8012e12:	f7ff f84b 	bl	8011eac <__sinit>
 8012e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e18:	07d8      	lsls	r0, r3, #31
 8012e1a:	d405      	bmi.n	8012e28 <_putc_r+0x24>
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	0599      	lsls	r1, r3, #22
 8012e20:	d402      	bmi.n	8012e28 <_putc_r+0x24>
 8012e22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e24:	f7ff f9eb 	bl	80121fe <__retarget_lock_acquire_recursive>
 8012e28:	68a3      	ldr	r3, [r4, #8]
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	60a3      	str	r3, [r4, #8]
 8012e30:	da05      	bge.n	8012e3e <_putc_r+0x3a>
 8012e32:	69a2      	ldr	r2, [r4, #24]
 8012e34:	4293      	cmp	r3, r2
 8012e36:	db12      	blt.n	8012e5e <_putc_r+0x5a>
 8012e38:	b2eb      	uxtb	r3, r5
 8012e3a:	2b0a      	cmp	r3, #10
 8012e3c:	d00f      	beq.n	8012e5e <_putc_r+0x5a>
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	1c5a      	adds	r2, r3, #1
 8012e42:	6022      	str	r2, [r4, #0]
 8012e44:	701d      	strb	r5, [r3, #0]
 8012e46:	b2ed      	uxtb	r5, r5
 8012e48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e4a:	07da      	lsls	r2, r3, #31
 8012e4c:	d405      	bmi.n	8012e5a <_putc_r+0x56>
 8012e4e:	89a3      	ldrh	r3, [r4, #12]
 8012e50:	059b      	lsls	r3, r3, #22
 8012e52:	d402      	bmi.n	8012e5a <_putc_r+0x56>
 8012e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e56:	f7ff f9d3 	bl	8012200 <__retarget_lock_release_recursive>
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	bd70      	pop	{r4, r5, r6, pc}
 8012e5e:	4629      	mov	r1, r5
 8012e60:	4622      	mov	r2, r4
 8012e62:	4630      	mov	r0, r6
 8012e64:	f7ff fed7 	bl	8012c16 <__swbuf_r>
 8012e68:	4605      	mov	r5, r0
 8012e6a:	e7ed      	b.n	8012e48 <_putc_r+0x44>

08012e6c <memmove>:
 8012e6c:	4288      	cmp	r0, r1
 8012e6e:	b510      	push	{r4, lr}
 8012e70:	eb01 0402 	add.w	r4, r1, r2
 8012e74:	d902      	bls.n	8012e7c <memmove+0x10>
 8012e76:	4284      	cmp	r4, r0
 8012e78:	4623      	mov	r3, r4
 8012e7a:	d807      	bhi.n	8012e8c <memmove+0x20>
 8012e7c:	1e43      	subs	r3, r0, #1
 8012e7e:	42a1      	cmp	r1, r4
 8012e80:	d008      	beq.n	8012e94 <memmove+0x28>
 8012e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e8a:	e7f8      	b.n	8012e7e <memmove+0x12>
 8012e8c:	4402      	add	r2, r0
 8012e8e:	4601      	mov	r1, r0
 8012e90:	428a      	cmp	r2, r1
 8012e92:	d100      	bne.n	8012e96 <memmove+0x2a>
 8012e94:	bd10      	pop	{r4, pc}
 8012e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e9e:	e7f7      	b.n	8012e90 <memmove+0x24>

08012ea0 <_close_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4d06      	ldr	r5, [pc, #24]	@ (8012ebc <_close_r+0x1c>)
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	4608      	mov	r0, r1
 8012eaa:	602b      	str	r3, [r5, #0]
 8012eac:	f7ef fe8f 	bl	8002bce <_close>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d102      	bne.n	8012eba <_close_r+0x1a>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	b103      	cbz	r3, 8012eba <_close_r+0x1a>
 8012eb8:	6023      	str	r3, [r4, #0]
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
 8012ebc:	20003a8c 	.word	0x20003a8c

08012ec0 <_fstat_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4d07      	ldr	r5, [pc, #28]	@ (8012ee0 <_fstat_r+0x20>)
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	4608      	mov	r0, r1
 8012eca:	4611      	mov	r1, r2
 8012ecc:	602b      	str	r3, [r5, #0]
 8012ece:	f7ef fe8a 	bl	8002be6 <_fstat>
 8012ed2:	1c43      	adds	r3, r0, #1
 8012ed4:	d102      	bne.n	8012edc <_fstat_r+0x1c>
 8012ed6:	682b      	ldr	r3, [r5, #0]
 8012ed8:	b103      	cbz	r3, 8012edc <_fstat_r+0x1c>
 8012eda:	6023      	str	r3, [r4, #0]
 8012edc:	bd38      	pop	{r3, r4, r5, pc}
 8012ede:	bf00      	nop
 8012ee0:	20003a8c 	.word	0x20003a8c

08012ee4 <_isatty_r>:
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4d06      	ldr	r5, [pc, #24]	@ (8012f00 <_isatty_r+0x1c>)
 8012ee8:	2300      	movs	r3, #0
 8012eea:	4604      	mov	r4, r0
 8012eec:	4608      	mov	r0, r1
 8012eee:	602b      	str	r3, [r5, #0]
 8012ef0:	f7ef fe89 	bl	8002c06 <_isatty>
 8012ef4:	1c43      	adds	r3, r0, #1
 8012ef6:	d102      	bne.n	8012efe <_isatty_r+0x1a>
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	b103      	cbz	r3, 8012efe <_isatty_r+0x1a>
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	bd38      	pop	{r3, r4, r5, pc}
 8012f00:	20003a8c 	.word	0x20003a8c

08012f04 <_lseek_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4d07      	ldr	r5, [pc, #28]	@ (8012f24 <_lseek_r+0x20>)
 8012f08:	4604      	mov	r4, r0
 8012f0a:	4608      	mov	r0, r1
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	2200      	movs	r2, #0
 8012f10:	602a      	str	r2, [r5, #0]
 8012f12:	461a      	mov	r2, r3
 8012f14:	f7ef fe82 	bl	8002c1c <_lseek>
 8012f18:	1c43      	adds	r3, r0, #1
 8012f1a:	d102      	bne.n	8012f22 <_lseek_r+0x1e>
 8012f1c:	682b      	ldr	r3, [r5, #0]
 8012f1e:	b103      	cbz	r3, 8012f22 <_lseek_r+0x1e>
 8012f20:	6023      	str	r3, [r4, #0]
 8012f22:	bd38      	pop	{r3, r4, r5, pc}
 8012f24:	20003a8c 	.word	0x20003a8c

08012f28 <_read_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4d07      	ldr	r5, [pc, #28]	@ (8012f48 <_read_r+0x20>)
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	4608      	mov	r0, r1
 8012f30:	4611      	mov	r1, r2
 8012f32:	2200      	movs	r2, #0
 8012f34:	602a      	str	r2, [r5, #0]
 8012f36:	461a      	mov	r2, r3
 8012f38:	f7ef fe2c 	bl	8002b94 <_read>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_read_r+0x1e>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_read_r+0x1e>
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	20003a8c 	.word	0x20003a8c

08012f4c <_sbrk_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4d06      	ldr	r5, [pc, #24]	@ (8012f68 <_sbrk_r+0x1c>)
 8012f50:	2300      	movs	r3, #0
 8012f52:	4604      	mov	r4, r0
 8012f54:	4608      	mov	r0, r1
 8012f56:	602b      	str	r3, [r5, #0]
 8012f58:	f7ef fe6e 	bl	8002c38 <_sbrk>
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	d102      	bne.n	8012f66 <_sbrk_r+0x1a>
 8012f60:	682b      	ldr	r3, [r5, #0]
 8012f62:	b103      	cbz	r3, 8012f66 <_sbrk_r+0x1a>
 8012f64:	6023      	str	r3, [r4, #0]
 8012f66:	bd38      	pop	{r3, r4, r5, pc}
 8012f68:	20003a8c 	.word	0x20003a8c

08012f6c <_write_r>:
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4d07      	ldr	r5, [pc, #28]	@ (8012f8c <_write_r+0x20>)
 8012f70:	4604      	mov	r4, r0
 8012f72:	4608      	mov	r0, r1
 8012f74:	4611      	mov	r1, r2
 8012f76:	2200      	movs	r2, #0
 8012f78:	602a      	str	r2, [r5, #0]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f7ee fcac 	bl	80018d8 <_write>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d102      	bne.n	8012f8a <_write_r+0x1e>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	b103      	cbz	r3, 8012f8a <_write_r+0x1e>
 8012f88:	6023      	str	r3, [r4, #0]
 8012f8a:	bd38      	pop	{r3, r4, r5, pc}
 8012f8c:	20003a8c 	.word	0x20003a8c

08012f90 <_malloc_usable_size_r>:
 8012f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f94:	1f18      	subs	r0, r3, #4
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	bfbc      	itt	lt
 8012f9a:	580b      	ldrlt	r3, [r1, r0]
 8012f9c:	18c0      	addlt	r0, r0, r3
 8012f9e:	4770      	bx	lr

08012fa0 <_init>:
 8012fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa2:	bf00      	nop
 8012fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fa6:	bc08      	pop	{r3}
 8012fa8:	469e      	mov	lr, r3
 8012faa:	4770      	bx	lr

08012fac <_fini>:
 8012fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fae:	bf00      	nop
 8012fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fb2:	bc08      	pop	{r3}
 8012fb4:	469e      	mov	lr, r3
 8012fb6:	4770      	bx	lr
